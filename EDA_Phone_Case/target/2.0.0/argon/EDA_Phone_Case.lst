
/Users/ethan/Desktop/EDA_Phone_Case_Code_Repo/EDA_Phone_Case/target/2.0.0/argon/EDA_Phone_Case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005790  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d97b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e3c8  000d97b4  0001e3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003b0  2003e440  2003e440  0002e440  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d982c  000d982c  0002982c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9854  000d9854  00029854  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00181102  00000000  00000000  00029858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001991d  00000000  00000000  001aa95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ff12  00000000  00000000  001c4277  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c68  00000000  00000000  001f4189  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007c18  00000000  00000000  001f6df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d6c4  00000000  00000000  001fea09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040ee1  00000000  00000000  0023c0cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011062e  00000000  00000000  0027cfae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007cec  00000000  00000000  0038d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f891 	bl	d9158 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f899 	bl	d9174 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3c8 	.word	0x2003e3c8
   d404c:	000d97b4 	.word	0x000d97b4
   d4050:	2003e440 	.word	0x2003e440
   d4054:	2003e440 	.word	0x2003e440
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 ffa5 	bl	d6fb0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9788 	.word	0x000d9788
   d4080:	000d97b0 	.word	0x000d97b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b838 	b.w	d50f8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe09 	bl	d4ca0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bf4f 	b.w	d6f34 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 be7d 	b.w	d5d94 <malloc>

000d409a <_Znaj>:
   d409a:	f001 be7b 	b.w	d5d94 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 be81 	b.w	d5da4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <ICM_20948_execute_w>:
	pdev->_serif = s;
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40b2:	b410      	push	{r4}
   d40b4:	4604      	mov	r4, r0
   d40b6:	4608      	mov	r0, r1
   d40b8:	4611      	mov	r1, r2
   d40ba:	461a      	mov	r2, r3
	if (pdev->_serif->write == NULL)
   d40bc:	6823      	ldr	r3, [r4, #0]
   d40be:	681c      	ldr	r4, [r3, #0]
   d40c0:	b124      	cbz	r4, d40cc <ICM_20948_execute_w+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40c2:	46a4      	mov	ip, r4
   d40c4:	689b      	ldr	r3, [r3, #8]
}
   d40c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40ca:	4760      	bx	ip
}
   d40cc:	2002      	movs	r0, #2
   d40ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40d2:	4770      	bx	lr

000d40d4 <ICM_20948_execute_r>:

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40d4:	b410      	push	{r4}
   d40d6:	4604      	mov	r4, r0
   d40d8:	4608      	mov	r0, r1
   d40da:	4611      	mov	r1, r2
   d40dc:	461a      	mov	r2, r3
	if (pdev->_serif->read == NULL)
   d40de:	6823      	ldr	r3, [r4, #0]
   d40e0:	685c      	ldr	r4, [r3, #4]
   d40e2:	b124      	cbz	r4, d40ee <ICM_20948_execute_r+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40e4:	46a4      	mov	ip, r4
   d40e6:	689b      	ldr	r3, [r3, #8]
}
   d40e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40ec:	4760      	bx	ip
}
   d40ee:	2002      	movs	r0, #2
   d40f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40f4:	4770      	bx	lr

000d40f6 <ICM_20948_set_bank>:
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
}

ICM_20948_Status_e ICM_20948_set_bank(ICM_20948_Device_t *pdev, uint8_t bank)
{
	if (bank > 3)
   d40f6:	2903      	cmp	r1, #3
{
   d40f8:	b507      	push	{r0, r1, r2, lr}
	if (bank > 3)
   d40fa:	d80b      	bhi.n	d4114 <ICM_20948_set_bank+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
   d40fc:	0109      	lsls	r1, r1, #4
   d40fe:	f88d 1007 	strb.w	r1, [sp, #7]
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
   d4102:	2301      	movs	r3, #1
   d4104:	f10d 0207 	add.w	r2, sp, #7
   d4108:	217f      	movs	r1, #127	; 0x7f
   d410a:	f7ff ffd2 	bl	d40b2 <ICM_20948_execute_w>
}
   d410e:	b003      	add	sp, #12
   d4110:	f85d fb04 	ldr.w	pc, [sp], #4
		return ICM_20948_Stat_ParamErr;
   d4114:	2003      	movs	r0, #3
   d4116:	e7fa      	b.n	d410e <ICM_20948_set_bank+0x18>

000d4118 <ICM_20948_i2c_master_slv4_txn>:
{
   d4118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d411c:	b085      	sub	sp, #20
   d411e:	461d      	mov	r5, r3
   d4120:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   d4124:	f88d 2006 	strb.w	r2, [sp, #6]
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4128:	2e00      	cmp	r6, #0
   d412a:	bf14      	ite	ne
   d412c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   d4130:	2300      	moveq	r3, #0
   d4132:	4319      	orrs	r1, r3
{
   d4134:	4604      	mov	r4, r0
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4136:	f88d 1007 	strb.w	r1, [sp, #7]
	retval = ICM_20948_set_bank(pdev, 3);
   d413a:	2103      	movs	r1, #3
   d413c:	f7ff ffdb 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
   d4140:	2301      	movs	r3, #1
   d4142:	f10d 0207 	add.w	r2, sp, #7
   d4146:	2113      	movs	r1, #19
   d4148:	4620      	mov	r0, r4
   d414a:	f7ff ffb2 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d414e:	2800      	cmp	r0, #0
   d4150:	d168      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	retval = ICM_20948_set_bank(pdev, 3);
   d4152:	2103      	movs	r1, #3
   d4154:	4620      	mov	r0, r4
   d4156:	f7ff ffce 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
   d415a:	2301      	movs	r3, #1
   d415c:	f10d 0206 	add.w	r2, sp, #6
   d4160:	2114      	movs	r1, #20
   d4162:	4620      	mov	r0, r4
   d4164:	f7ff ffa5 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d4168:	2800      	cmp	r0, #0
   d416a:	d15b      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	ctrl.REG_DIS = !send_reg_addr;
   d416c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	while (nByte < len)
   d4170:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	ctrl.REG_DIS = !send_reg_addr;
   d4174:	f082 0201 	eor.w	r2, r2, #1
	ctrl.DLY = 0;
   d4178:	0152      	lsls	r2, r2, #5
   d417a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d417e:	f88d 2008 	strb.w	r2, [sp, #8]
	while (nByte < len)
   d4182:	4607      	mov	r7, r0
   d4184:	fa1f f989 	uxth.w	r9, r9
   d4188:	b2bb      	uxth	r3, r7
   d418a:	4599      	cmp	r9, r3
   d418c:	d94a      	bls.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		if (!Rw)
   d418e:	2e00      	cmp	r6, #0
   d4190:	d03c      	beq.n	d420c <ICM_20948_i2c_master_slv4_txn+0xf4>
		retval = ICM_20948_set_bank(pdev, 3);
   d4192:	2103      	movs	r1, #3
   d4194:	4620      	mov	r0, r4
   d4196:	f7ff ffae 	bl	d40f6 <ICM_20948_set_bank>
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
   d419a:	2301      	movs	r3, #1
   d419c:	aa02      	add	r2, sp, #8
   d419e:	2115      	movs	r1, #21
   d41a0:	4620      	mov	r0, r4
   d41a2:	f7ff ff86 	bl	d40b2 <ICM_20948_execute_w>
		if (retval != ICM_20948_Stat_Ok)
   d41a6:	2800      	cmp	r0, #0
   d41a8:	d13c      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		uint32_t count = 0;
   d41aa:	4680      	mov	r8, r0
			retval = ICM_20948_set_bank(pdev, 0);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4620      	mov	r0, r4
   d41b0:	f7ff ffa1 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
   d41b4:	2301      	movs	r3, #1
   d41b6:	aa03      	add	r2, sp, #12
   d41b8:	2117      	movs	r1, #23
   d41ba:	4620      	mov	r0, r4
   d41bc:	f7ff ff8a 	bl	d40d4 <ICM_20948_execute_r>
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
			slave4Done |= (count >= max_cycles);
   d41c4:	f240 31e7 	movw	r1, #999	; 0x3e7
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c8:	461a      	mov	r2, r3
   d41ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d41ce:	4588      	cmp	r8, r1
   d41d0:	bf88      	it	hi
   d41d2:	f043 0301 	orrhi.w	r3, r3, #1
		while (!slave4Done)
   d41d6:	07db      	lsls	r3, r3, #31
			count++;
   d41d8:	f108 0801 	add.w	r8, r8, #1
		while (!slave4Done)
   d41dc:	d5e6      	bpl.n	d41ac <ICM_20948_i2c_master_slv4_txn+0x94>
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
   d41de:	f3c2 1300 	ubfx	r3, r2, #4, #1
		if (txn_failed)
   d41e2:	4588      	cmp	r8, r1
   d41e4:	bf94      	ite	ls
   d41e6:	4698      	movls	r8, r3
   d41e8:	f043 0801 	orrhi.w	r8, r3, #1
   d41ec:	f018 0f01 	tst.w	r8, #1
   d41f0:	d11b      	bne.n	d422a <ICM_20948_i2c_master_slv4_txn+0x112>
		if (Rw)
   d41f2:	b14e      	cbz	r6, d4208 <ICM_20948_i2c_master_slv4_txn+0xf0>
			retval = ICM_20948_set_bank(pdev, 3);
   d41f4:	2103      	movs	r1, #3
   d41f6:	4620      	mov	r0, r4
   d41f8:	f7ff ff7d 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_SLV4_DI, &data[nByte], 1);
   d41fc:	2301      	movs	r3, #1
   d41fe:	19ea      	adds	r2, r5, r7
   d4200:	2117      	movs	r1, #23
   d4202:	4620      	mov	r0, r4
   d4204:	f7ff ff66 	bl	d40d4 <ICM_20948_execute_r>
		nByte++;
   d4208:	3701      	adds	r7, #1
   d420a:	e7bd      	b.n	d4188 <ICM_20948_i2c_master_slv4_txn+0x70>
			retval = ICM_20948_set_bank(pdev, 3);
   d420c:	2103      	movs	r1, #3
   d420e:	4620      	mov	r0, r4
   d4210:	f7ff ff71 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
   d4214:	2301      	movs	r3, #1
   d4216:	19ea      	adds	r2, r5, r7
   d4218:	2116      	movs	r1, #22
   d421a:	4620      	mov	r0, r4
   d421c:	f7ff ff49 	bl	d40b2 <ICM_20948_execute_w>
			if (retval != ICM_20948_Stat_Ok)
   d4220:	2800      	cmp	r0, #0
   d4222:	d0b6      	beq.n	d4192 <ICM_20948_i2c_master_slv4_txn+0x7a>
}
   d4224:	b005      	add	sp, #20
   d4226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ICM_20948_Stat_Err;
   d422a:	2001      	movs	r0, #1
   d422c:	e7fa      	b.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>

000d422e <ICM_20948_i2c_master_single_w>:
{
   d422e:	b530      	push	{r4, r5, lr}
   d4230:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
   d4232:	2401      	movs	r4, #1
   d4234:	2500      	movs	r5, #0
   d4236:	e9cd 5401 	strd	r5, r4, [sp, #4]
   d423a:	9400      	str	r4, [sp, #0]
   d423c:	f7ff ff6c 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4240:	b005      	add	sp, #20
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <ICM_20948_i2c_master_single_r>:
{
   d4244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
   d4246:	2401      	movs	r4, #1
   d4248:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d424c:	9400      	str	r4, [sp, #0]
   d424e:	f7ff ff63 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4252:	b004      	add	sp, #16
   d4254:	bd10      	pop	{r4, pc}

000d4256 <ICM_20948_sw_reset>:

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
   d4256:	b513      	push	{r0, r1, r4, lr}
   d4258:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d425a:	2100      	movs	r1, #0
   d425c:	f7ff ff4b 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4260:	2301      	movs	r3, #1
   d4262:	aa01      	add	r2, sp, #4
   d4264:	2106      	movs	r1, #6
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff34 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d426c:	b958      	cbnz	r0, d4286 <ICM_20948_sw_reset+0x30>
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
   d426e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4276:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d427a:	aa01      	add	r2, sp, #4
   d427c:	2301      	movs	r3, #1
   d427e:	2106      	movs	r1, #6
   d4280:	4620      	mov	r0, r4
   d4282:	f7ff ff16 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d4286:	b002      	add	sp, #8
   d4288:	bd10      	pop	{r4, pc}

000d428a <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
   d428a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d428c:	4604      	mov	r4, r0
   d428e:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4290:	2100      	movs	r1, #0
   d4292:	f7ff ff30 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4296:	2301      	movs	r3, #1
   d4298:	aa01      	add	r2, sp, #4
   d429a:	2106      	movs	r1, #6
   d429c:	4620      	mov	r0, r4
   d429e:	f7ff ff19 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42a2:	b958      	cbnz	r0, d42bc <ICM_20948_sleep+0x32>
	{
		return retval;
	}

	if (on)
   d42a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42a8:	f365 1386 	bfi	r3, r5, #6, #1
   d42ac:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.SLEEP = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42b0:	aa01      	add	r2, sp, #4
   d42b2:	2301      	movs	r3, #1
   d42b4:	2106      	movs	r1, #6
   d42b6:	4620      	mov	r0, r4
   d42b8:	f7ff fefb 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42bc:	b003      	add	sp, #12
   d42be:	bd30      	pop	{r4, r5, pc}

000d42c0 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
   d42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42c2:	4604      	mov	r4, r0
   d42c4:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42c6:	2100      	movs	r1, #0
   d42c8:	f7ff ff15 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42cc:	2301      	movs	r3, #1
   d42ce:	aa01      	add	r2, sp, #4
   d42d0:	2106      	movs	r1, #6
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fefe 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42d8:	b958      	cbnz	r0, d42f2 <ICM_20948_low_power+0x32>
	{
		return retval;
	}

	if (on)
   d42da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42de:	f365 1345 	bfi	r3, r5, #5, #1
   d42e2:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.LP_EN = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42e6:	aa01      	add	r2, sp, #4
   d42e8:	2301      	movs	r3, #1
   d42ea:	2106      	movs	r1, #6
   d42ec:	4620      	mov	r0, r4
   d42ee:	f7ff fee0 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}

000d42f6 <ICM_20948_get_who_am_i>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
   d42f6:	b570      	push	{r4, r5, r6, lr}
   d42f8:	4605      	mov	r5, r0
	if (whoami == NULL)
   d42fa:	460c      	mov	r4, r1
   d42fc:	b151      	cbz	r1, d4314 <ICM_20948_get_who_am_i+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42fe:	2100      	movs	r1, #0
   d4300:	f7ff fef9 	bl	d40f6 <ICM_20948_set_bank>
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d4304:	4622      	mov	r2, r4
   d4306:	4628      	mov	r0, r5
   d4308:	2301      	movs	r3, #1
}
   d430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d430e:	2100      	movs	r1, #0
   d4310:	f7ff bee0 	b.w	d40d4 <ICM_20948_execute_r>
}
   d4314:	2003      	movs	r0, #3
   d4316:	bd70      	pop	{r4, r5, r6, pc}

000d4318 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
   d4318:	b507      	push	{r0, r1, r2, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
   d431a:	2300      	movs	r3, #0
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d431c:	f10d 0107 	add.w	r1, sp, #7
	uint8_t whoami = 0x00;
   d4320:	f88d 3007 	strb.w	r3, [sp, #7]
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d4324:	f7ff ffe7 	bl	d42f6 <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
   d4328:	b920      	cbnz	r0, d4334 <ICM_20948_check_id+0x1c>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
   d432a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d432e:	2bea      	cmp	r3, #234	; 0xea
	{
		return ICM_20948_Stat_WrongID;
   d4330:	bf18      	it	ne
   d4332:	2004      	movne	r0, #4
	}
	return retval;
}
   d4334:	b003      	add	sp, #12
   d4336:	f85d fb04 	ldr.w	pc, [sp], #4

000d433a <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d433a:	f011 0f13 	tst.w	r1, #19
{
   d433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4340:	4606      	mov	r6, r0
   d4342:	460c      	mov	r4, r1
   d4344:	4615      	mov	r5, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d4346:	d02a      	beq.n	d439e <ICM_20948_set_sample_mode+0x64>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4348:	2100      	movs	r1, #0
   d434a:	f7ff fed4 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d434e:	bb20      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d4350:	2301      	movs	r3, #1
   d4352:	aa01      	add	r2, sp, #4
   d4354:	2105      	movs	r1, #5
   d4356:	4630      	mov	r0, r6
   d4358:	f7ff febc 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d435c:	b9e8      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d435e:	07e1      	lsls	r1, r4, #31
	{
		reg.ACCEL_CYCLE = mode;
   d4360:	bf42      	ittt	mi
   d4362:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4366:	f365 1345 	bfimi	r3, r5, #5, #1
   d436a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
   d436e:	07a2      	lsls	r2, r4, #30
	{
		reg.GYRO_CYCLE = mode;
   d4370:	bf42      	ittt	mi
   d4372:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4376:	f365 1304 	bfimi	r3, r5, #4, #1
   d437a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
   d437e:	06e3      	lsls	r3, r4, #27
	{
		reg.I2C_MST_CYCLE = mode;
   d4380:	bf42      	ittt	mi
   d4382:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4386:	f365 1386 	bfimi	r3, r5, #6, #1
   d438a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d438e:	aa01      	add	r2, sp, #4
   d4390:	2301      	movs	r3, #1
   d4392:	2105      	movs	r1, #5
   d4394:	4630      	mov	r0, r6
   d4396:	f7ff fe8c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d439a:	b002      	add	sp, #8
   d439c:	bd70      	pop	{r4, r5, r6, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d439e:	2007      	movs	r0, #7
   d43a0:	e7fb      	b.n	d439a <ICM_20948_set_sample_mode+0x60>

000d43a2 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43a2:	f011 0f03 	tst.w	r1, #3
{
   d43a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43aa:	4606      	mov	r6, r0
   d43ac:	4688      	mov	r8, r1
   d43ae:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43b0:	d041      	beq.n	d4436 <ICM_20948_set_full_scale+0x94>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d43b2:	f011 0401 	ands.w	r4, r1, #1
   d43b6:	d019      	beq.n	d43ec <ICM_20948_set_full_scale+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43b8:	2102      	movs	r1, #2
   d43ba:	f7ff fe9c 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43be:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43c0:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43c2:	aa01      	add	r2, sp, #4
   d43c4:	2114      	movs	r1, #20
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe84 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_FS_SEL = fss.a;
   d43cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d0:	4328      	orrs	r0, r5
		reg.ACCEL_FS_SEL = fss.a;
   d43d2:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d6:	b2c4      	uxtb	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
   d43d8:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43dc:	aa01      	add	r2, sp, #4
   d43de:	2301      	movs	r3, #1
   d43e0:	2114      	movs	r1, #20
   d43e2:	4630      	mov	r0, r6
   d43e4:	f7ff fe65 	bl	d40b2 <ICM_20948_execute_w>
   d43e8:	4304      	orrs	r4, r0
   d43ea:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d43ec:	f018 0f02 	tst.w	r8, #2
   d43f0:	d01d      	beq.n	d442e <ICM_20948_set_full_scale+0x8c>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43f2:	2102      	movs	r1, #2
   d43f4:	4630      	mov	r0, r6
   d43f6:	f7ff fe7e 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d43fa:	2301      	movs	r3, #1
   d43fc:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43fe:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4400:	aa01      	add	r2, sp, #4
   d4402:	4630      	mov	r0, r6
   d4404:	f7ff fe66 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_FS_SEL = fss.g;
   d4408:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d440c:	f3c7 0781 	ubfx	r7, r7, #2, #2
   d4410:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4414:	4328      	orrs	r0, r5
		reg.GYRO_FS_SEL = fss.g;
   d4416:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441a:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441c:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441e:	aa01      	add	r2, sp, #4
   d4420:	4619      	mov	r1, r3
   d4422:	4630      	mov	r0, r6
   d4424:	f7ff fe45 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4428:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d442a:	4304      	orrs	r4, r0
   d442c:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d442e:	4620      	mov	r0, r4
   d4430:	b002      	add	sp, #8
   d4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4436:	2407      	movs	r4, #7
   d4438:	e7f9      	b.n	d442e <ICM_20948_set_full_scale+0x8c>

000d443a <ICM_20948_set_dlpf_cfg>:

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
   d443a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d443c:	b085      	sub	sp, #20
   d443e:	4606      	mov	r6, r0
   d4440:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4444:	078a      	lsls	r2, r1, #30
{
   d4446:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4448:	d042      	beq.n	d44d0 <ICM_20948_set_dlpf_cfg+0x96>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d444a:	f011 0401 	ands.w	r4, r1, #1
   d444e:	d01c      	beq.n	d448a <ICM_20948_set_dlpf_cfg+0x50>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4450:	2102      	movs	r1, #2
   d4452:	f7ff fe50 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4456:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4458:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d445a:	aa03      	add	r2, sp, #12
   d445c:	2114      	movs	r1, #20
   d445e:	4630      	mov	r0, r6
   d4460:	f7ff fe38 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_DLPFCFG = cfg.a;
   d4464:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4468:	f89d 2004 	ldrb.w	r2, [sp, #4]
   d446c:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4470:	4305      	orrs	r5, r0
		reg.ACCEL_DLPFCFG = cfg.a;
   d4472:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4476:	aa03      	add	r2, sp, #12
   d4478:	2301      	movs	r3, #1
   d447a:	2114      	movs	r1, #20
   d447c:	4630      	mov	r0, r6
   d447e:	f7ff fe18 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4482:	b2ed      	uxtb	r5, r5
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4484:	ea45 0400 	orr.w	r4, r5, r0
   d4488:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d448a:	07bb      	lsls	r3, r7, #30
   d448c:	d51d      	bpl.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d448e:	2102      	movs	r1, #2
   d4490:	4630      	mov	r0, r6
   d4492:	f7ff fe30 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4496:	2301      	movs	r3, #1
   d4498:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d449a:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d449c:	aa03      	add	r2, sp, #12
   d449e:	4630      	mov	r0, r6
   d44a0:	f7ff fe18 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_DLPFCFG = cfg.g;
   d44a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d44a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d44ac:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b0:	4328      	orrs	r0, r5
		reg.GYRO_DLPFCFG = cfg.g;
   d44b2:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b6:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b8:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44ba:	aa03      	add	r2, sp, #12
   d44bc:	4619      	mov	r1, r3
   d44be:	4630      	mov	r0, r6
   d44c0:	f7ff fdf7 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c4:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c6:	4304      	orrs	r4, r0
   d44c8:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d44ca:	4620      	mov	r0, r4
   d44cc:	b005      	add	sp, #20
   d44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d44d0:	2407      	movs	r4, #7
   d44d2:	e7fa      	b.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>

000d44d4 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44d4:	f011 0f03 	tst.w	r1, #3
{
   d44d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44dc:	4606      	mov	r6, r0
   d44de:	4688      	mov	r8, r1
   d44e0:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44e2:	d03f      	beq.n	d4564 <ICM_20948_enable_dlpf+0x90>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d44e4:	f011 0401 	ands.w	r4, r1, #1
   d44e8:	d019      	beq.n	d451e <ICM_20948_enable_dlpf+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44ea:	2102      	movs	r1, #2
   d44ec:	f7ff fe03 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f0:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44f2:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f4:	aa01      	add	r2, sp, #4
   d44f6:	2114      	movs	r1, #20
   d44f8:	4630      	mov	r0, r6
   d44fa:	f7ff fdeb 	bl	d40d4 <ICM_20948_execute_r>
   d44fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4502:	4328      	orrs	r0, r5
   d4504:	f367 0300 	bfi	r3, r7, #0, #1
   d4508:	b2c4      	uxtb	r4, r0
		if (enable)
   d450a:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d450e:	aa01      	add	r2, sp, #4
   d4510:	2301      	movs	r3, #1
   d4512:	2114      	movs	r1, #20
   d4514:	4630      	mov	r0, r6
   d4516:	f7ff fdcc 	bl	d40b2 <ICM_20948_execute_w>
   d451a:	4304      	orrs	r4, r0
   d451c:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d451e:	f018 0f02 	tst.w	r8, #2
   d4522:	d01b      	beq.n	d455c <ICM_20948_enable_dlpf+0x88>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4524:	2102      	movs	r1, #2
   d4526:	4630      	mov	r0, r6
   d4528:	f7ff fde5 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d452c:	2301      	movs	r3, #1
   d452e:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4530:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4532:	aa01      	add	r2, sp, #4
   d4534:	4630      	mov	r0, r6
   d4536:	f7ff fdcd 	bl	d40d4 <ICM_20948_execute_r>
   d453a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d453e:	f367 0300 	bfi	r3, r7, #0, #1
   d4542:	4328      	orrs	r0, r5
   d4544:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4548:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454a:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454c:	aa01      	add	r2, sp, #4
   d454e:	4619      	mov	r1, r3
   d4550:	4630      	mov	r0, r6
   d4552:	f7ff fdae 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4556:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4558:	4304      	orrs	r4, r0
   d455a:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d455c:	4620      	mov	r0, r4
   d455e:	b002      	add	sp, #8
   d4560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4564:	2407      	movs	r4, #7
   d4566:	e7f9      	b.n	d455c <ICM_20948_enable_dlpf+0x88>

000d4568 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
   d4568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d456a:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d456c:	2100      	movs	r1, #0
{
   d456e:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d4570:	f7ff fdc1 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4574:	b990      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4576:	2301      	movs	r3, #1
   d4578:	aa01      	add	r2, sp, #4
   d457a:	210f      	movs	r1, #15
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff fda9 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4582:	b958      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
   d4584:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4588:	f365 0341 	bfi	r3, r5, #1, #1
   d458c:	f88d 3004 	strb.w	r3, [sp, #4]
	retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4590:	aa01      	add	r2, sp, #4
   d4592:	2301      	movs	r3, #1
   d4594:	210f      	movs	r1, #15
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff fd8b 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d459c:	b003      	add	sp, #12
   d459e:	bd30      	pop	{r4, r5, pc}

000d45a0 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
   d45a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45a2:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a4:	2100      	movs	r1, #0
{
   d45a6:	4604      	mov	r4, r0
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a8:	f7ff ffde 	bl	d4568 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
   d45ac:	bb90      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
   d45ae:	2103      	movs	r1, #3
   d45b0:	4620      	mov	r0, r4
   d45b2:	f7ff fda0 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45b6:	bb68      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45b8:	2301      	movs	r3, #1
   d45ba:	466a      	mov	r2, sp
   d45bc:	4619      	mov	r1, r3
   d45be:	4620      	mov	r0, r4
   d45c0:	f7ff fd88 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45c4:	bb30      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
   d45c6:	f89d 3000 	ldrb.w	r3, [sp]
   d45ca:	f023 031f 	bic.w	r3, r3, #31
   d45ce:	f043 0317 	orr.w	r3, r3, #23
   d45d2:	f88d 3000 	strb.w	r3, [sp]
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45d6:	2301      	movs	r3, #1
   d45d8:	466a      	mov	r2, sp
   d45da:	4619      	mov	r1, r3
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff fd68 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d45e2:	b9b8      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d45e4:	4601      	mov	r1, r0
   d45e6:	4620      	mov	r0, r4
   d45e8:	f7ff fd85 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45ec:	b990      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d45ee:	2301      	movs	r3, #1
   d45f0:	aa01      	add	r2, sp, #4
   d45f2:	2103      	movs	r1, #3
   d45f4:	4620      	mov	r0, r4
   d45f6:	f7ff fd6d 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45fa:	b958      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	if (enable)
   d45fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4600:	f365 1345 	bfi	r3, r5, #5, #1
   d4604:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	else
	{
		reg.I2C_MST_EN = 0;
	}
	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d4608:	aa01      	add	r2, sp, #4
   d460a:	2301      	movs	r3, #1
   d460c:	2103      	movs	r1, #3
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff fd4f 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d4614:	b003      	add	sp, #12
   d4616:	bd30      	pop	{r4, r5, pc}

000d4618 <ICM_20948_i2c_master_reset>:

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
   d4618:	b513      	push	{r0, r1, r4, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
   d461a:	2100      	movs	r1, #0
{
   d461c:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d461e:	f7ff fd6a 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4622:	b990      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d4624:	2301      	movs	r3, #1
   d4626:	aa01      	add	r2, sp, #4
   d4628:	2103      	movs	r1, #3
   d462a:	4620      	mov	r0, r4
   d462c:	f7ff fd52 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4630:	b958      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
   d4632:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4636:	f043 0302 	orr.w	r3, r3, #2
   d463a:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d463e:	aa01      	add	r2, sp, #4
   d4640:	2301      	movs	r3, #1
   d4642:	2103      	movs	r1, #3
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff fd34 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d464a:	b002      	add	sp, #8
   d464c:	bd10      	pop	{r4, pc}

000d464e <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
   d464e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4652:	2903      	cmp	r1, #3
   d4654:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   d4658:	4605      	mov	r5, r0
   d465a:	460c      	mov	r4, r1
   d465c:	4617      	mov	r7, r2
   d465e:	461e      	mov	r6, r3
   d4660:	d847      	bhi.n	d46f2 <ICM_20948_i2c_master_configure_slave+0xa4>
		break;
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
   d4662:	2103      	movs	r1, #3
   d4664:	f7ff fd47 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4668:	2800      	cmp	r0, #0
   d466a:	d13f      	bne.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
   d466c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4670:	f367 0306 	bfi	r3, r7, #0, #7
   d4674:	f88d 3004 	strb.w	r3, [sp, #4]
	if (Rw)
   d4678:	f1b8 0f00 	cmp.w	r8, #0
   d467c:	d004      	beq.n	d4688 <ICM_20948_i2c_master_configure_slave+0x3a>
	{
		address.RNW = 1;
   d467e:	b2db      	uxtb	r3, r3
   d4680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4684:	f88d 3004 	strb.w	r3, [sp, #4]
   d4688:	00a4      	lsls	r4, r4, #2
   d468a:	b2e4      	uxtb	r4, r4
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
   d468c:	1ce1      	adds	r1, r4, #3
   d468e:	2301      	movs	r3, #1
   d4690:	aa01      	add	r2, sp, #4
   d4692:	b2c9      	uxtb	r1, r1
   d4694:	4628      	mov	r0, r5
   d4696:	f7ff fd0c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d469a:	bb38      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d469c:	1d21      	adds	r1, r4, #4
   d469e:	2301      	movs	r3, #1
   d46a0:	aa02      	add	r2, sp, #8
   d46a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d46a6:	4628      	mov	r0, r5
	subaddress.REG = reg;
   d46a8:	f88d 6008 	strb.w	r6, [sp, #8]
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d46ac:	f7ff fd01 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d46b0:	b9e0      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
   d46b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d46b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d46ba:	f003 030f 	and.w	r3, r3, #15
   d46be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d46c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   d46c6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d46ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d46d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46d6:	1d61      	adds	r1, r4, #5
	ctrl.LENG = len;
   d46d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   d46dc:	f88d 300c 	strb.w	r3, [sp, #12]
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46e0:	aa03      	add	r2, sp, #12
   d46e2:	2301      	movs	r3, #1
   d46e4:	b2c9      	uxtb	r1, r1
   d46e6:	4628      	mov	r0, r5
   d46e8:	f7ff fce3 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d46ec:	b004      	add	sp, #16
   d46ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d46f2:	2003      	movs	r0, #3
   d46f4:	e7fa      	b.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>

000d46f6 <ICM_20948_get_agmt>:

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
   d46f6:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
   d46fa:	4680      	mov	r8, r0
   d46fc:	b08b      	sub	sp, #44	; 0x2c
	if (pagmt == NULL)
   d46fe:	460f      	mov	r7, r1
   d4700:	2900      	cmp	r1, #0
   d4702:	f000 808f 	beq.w	d4824 <ICM_20948_get_agmt+0x12e>
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
   d4706:	2100      	movs	r1, #0
   d4708:	f7ff fcf5 	bl	d40f6 <ICM_20948_set_bank>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d470c:	2317      	movs	r3, #23
	retval |= ICM_20948_set_bank(pdev, 0);
   d470e:	4606      	mov	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d4710:	aa04      	add	r2, sp, #16
   d4712:	212d      	movs	r1, #45	; 0x2d
   d4714:	4640      	mov	r0, r8
   d4716:	f7ff fcdd 	bl	d40d4 <ICM_20948_execute_r>

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
   d471a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   d471e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4726:	803b      	strh	r3, [r7, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
   d4728:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d472c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   d4730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4734:	807b      	strh	r3, [r7, #2]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
   d4736:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d473a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d473e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4742:	80bb      	strh	r3, [r7, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
   d4744:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d4748:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d474c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4750:	80fb      	strh	r3, [r7, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
   d4752:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d4756:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d475a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d475e:	813b      	strh	r3, [r7, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
   d4760:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4764:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d476c:	817b      	strh	r3, [r7, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
   d476e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4772:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d4776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d477a:	827b      	strh	r3, [r7, #18]

	pagmt->magStat1 = buff[14];
   d477c:	f89d 301e 	ldrb.w	r3, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4780:	f89d 2020 	ldrb.w	r2, [sp, #32]
	pagmt->magStat1 = buff[14];
   d4784:	757b      	strb	r3, [r7, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4786:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d478a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d478e:	81bb      	strh	r3, [r7, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
   d4790:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   d4794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d479c:	81fb      	strh	r3, [r7, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d479e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   d47a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d47a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47aa:	4330      	orrs	r0, r6
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d47ac:	823b      	strh	r3, [r7, #16]
	pagmt->magStat2 = buff[22];
   d47ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   d47b2:	75bb      	strb	r3, [r7, #22]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47b4:	b2c4      	uxtb	r4, r0

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
   d47b6:	2102      	movs	r1, #2
   d47b8:	4640      	mov	r0, r8
   d47ba:	f7ff fc9c 	bl	d40f6 <ICM_20948_set_bank>
   d47be:	4320      	orrs	r0, r4
   d47c0:	b2c6      	uxtb	r6, r0
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47c2:	2301      	movs	r3, #1
   d47c4:	aa01      	add	r2, sp, #4
   d47c6:	2114      	movs	r1, #20
   d47c8:	4640      	mov	r0, r8
   d47ca:	f7ff fc83 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d47d2:	7d3a      	ldrb	r2, [r7, #20]
   d47d4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d47d8:	f363 0201 	bfi	r2, r3, #0, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47dc:	4330      	orrs	r0, r6
   d47de:	b2c6      	uxtb	r6, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47e0:	753a      	strb	r2, [r7, #20]
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
   d47e2:	2102      	movs	r1, #2
   d47e4:	4640      	mov	r0, r8
   d47e6:	f7ff fc86 	bl	d40f6 <ICM_20948_set_bank>
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47ea:	2301      	movs	r3, #1
   d47ec:	4619      	mov	r1, r3
	retval |= ICM_20948_set_bank(pdev, 2);
   d47ee:	4306      	orrs	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47f0:	aa02      	add	r2, sp, #8
   d47f2:	4640      	mov	r0, r8
   d47f4:	f7ff fc6e 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d47f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d47fc:	7d3a      	ldrb	r2, [r7, #20]
   d47fe:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d4802:	f363 0283 	bfi	r2, r3, #2, #2
	retval |= ICM_20948_set_bank(pdev, 2);
   d4806:	b2f4      	uxtb	r4, r6
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4808:	4304      	orrs	r4, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d480a:	753a      	strb	r2, [r7, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d480c:	2301      	movs	r3, #1
   d480e:	aa03      	add	r2, sp, #12
   d4810:	2115      	movs	r1, #21
   d4812:	4640      	mov	r0, r8
   d4814:	f7ff fc5e 	bl	d40d4 <ICM_20948_execute_r>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4818:	b2e4      	uxtb	r4, r4
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d481a:	4320      	orrs	r0, r4
   d481c:	b2c0      	uxtb	r0, r0

	return retval;
}
   d481e:	b00b      	add	sp, #44	; 0x2c
   d4820:	e8bd 81d0 	ldmia.w	sp!, {r4, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d4824:	2003      	movs	r0, #3
   d4826:	e7fa      	b.n	d481e <ICM_20948_get_agmt+0x128>

000d4828 <_Z21PulseSensorAmped_dataii>:
  // Serial.println((millis() - loopTimer));
}


void PulseSensorAmped_data(int BPM, int IBI){  //This is clunky.  Could clean up later
  pulse = BPM;
   d4828:	4b01      	ldr	r3, [pc, #4]	; (d4830 <_Z21PulseSensorAmped_dataii+0x8>)
   d482a:	6018      	str	r0, [r3, #0]
}
   d482c:	4770      	bx	lr
   d482e:	bf00      	nop
   d4830:	2003e560 	.word	0x2003e560
   d4834:	00000000 	.word	0x00000000

000d4838 <_Z12calculateHRVi>:


void calculateHRV(int IBI){
   d4838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d483a:	ed2d 8b02 	vpush	{d8}
  float avg_ibi = 0;
  float ibi_stdev = 0;

  /*  Add the latest IBI to the buffer */
  ibi_buffer[ibiBufferCounter] = IBI;
   d483e:	4a32      	ldr	r2, [pc, #200]	; (d4908 <_Z12calculateHRVi+0xd0>)
   d4840:	4932      	ldr	r1, [pc, #200]	; (d490c <_Z12calculateHRVi+0xd4>)
   d4842:	7813      	ldrb	r3, [r2, #0]
   d4844:	4d31      	ldr	r5, [pc, #196]	; (d490c <_Z12calculateHRVi+0xd4>)
   d4846:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  ibiBufferCounter++;
   d484a:	3301      	adds	r3, #1
   d484c:	b2db      	uxtb	r3, r3
  if (ibiBufferCounter >= IBI_BUFFER_SIZE){
   d484e:	2b04      	cmp	r3, #4
    ibiBufferCounter = 0;
   d4850:	bf88      	it	hi
   d4852:	2300      	movhi	r3, #0
  float avg_ibi = 0;
   d4854:	eddf 8a2e 	vldr	s17, [pc, #184]	; d4910 <_Z12calculateHRVi+0xd8>
    ibiBufferCounter = 0;
   d4858:	7013      	strb	r3, [r2, #0]
void calculateHRV(int IBI){
   d485a:	4629      	mov	r1, r5
  }

  /*  Compute the Standard Deviation  */
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d485c:	2200      	movs	r2, #0
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d485e:	2005      	movs	r0, #5
   d4860:	f851 3b04 	ldr.w	r3, [r1], #4
   d4864:	fbb3 f3f0 	udiv	r3, r3, r0
   d4868:	ee07 3a90 	vmov	s15, r3
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d486c:	3201      	adds	r2, #1
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d486e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4872:	2a05      	cmp	r2, #5
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4874:	ee78 8aa7 	vadd.f32	s17, s17, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4878:	d1f2      	bne.n	d4860 <_Z12calculateHRVi+0x28>
  float ibi_stdev = 0;
   d487a:	ed9f 8a25 	vldr	s16, [pc, #148]	; d4910 <_Z12calculateHRVi+0xd8>
  }
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d487e:	2400      	movs	r4, #0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d4880:	ecf5 7a01 	vldmia	r5!, {s15}
   d4884:	eef8 7a67 	vcvt.f32.u32	s15, s15
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d4888:	3401      	adds	r4, #1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d488a:	ee77 7ae8 	vsub.f32	s15, s15, s17
   d488e:	ee17 0a90 	vmov	r0, s15
   d4892:	f004 f8fb 	bl	d8a8c <__aeabi_f2d>
   d4896:	4602      	mov	r2, r0
   d4898:	460b      	mov	r3, r1
   d489a:	f004 f94f 	bl	d8b3c <__aeabi_dmul>
   d489e:	4606      	mov	r6, r0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48a0:	ee18 0a10 	vmov	r0, s16
   d48a4:	460f      	mov	r7, r1
   d48a6:	f004 f8f1 	bl	d8a8c <__aeabi_f2d>
   d48aa:	4602      	mov	r2, r0
   d48ac:	460b      	mov	r3, r1
   d48ae:	4630      	mov	r0, r6
   d48b0:	4639      	mov	r1, r7
   d48b2:	f003 ff8d 	bl	d87d0 <__adddf3>
   d48b6:	f004 fbf1 	bl	d909c <__aeabi_d2f>
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48ba:	2c05      	cmp	r4, #5
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48bc:	ee08 0a10 	vmov	s16, r0
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48c0:	d1de      	bne.n	d4880 <_Z12calculateHRVi+0x48>
   d48c2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d48c6:	eec8 7a27 	vdiv.f32	s15, s16, s15
   d48ca:	ee17 0a90 	vmov	r0, s15
   d48ce:	f004 f8dd 	bl	d8a8c <__aeabi_f2d>
   d48d2:	ed9f 1b0b 	vldr	d1, [pc, #44]	; d4900 <_Z12calculateHRVi+0xc8>
   d48d6:	ec41 0b10 	vmov	d0, r0, r1
   d48da:	f002 fdd5 	bl	d7488 <pow>
   d48de:	ec51 0b10 	vmov	r0, r1, d0
  }
  ibi_stdev /= IBI_BUFFER_SIZE;
  ibi_stdev = pow(ibi_stdev, 0.5);
   d48e2:	f004 fbdb 	bl	d909c <__aeabi_d2f>

  hrv = ibi_stdev;
   d48e6:	ee07 0a90 	vmov	s15, r0
   d48ea:	4b0a      	ldr	r3, [pc, #40]	; (d4914 <_Z12calculateHRVi+0xdc>)
   d48ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d48f0:	edc3 7a00 	vstr	s15, [r3]
}
   d48f4:	ecbd 8b02 	vpop	{d8}
   d48f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48fa:	bf00      	nop
   d48fc:	f3af 8000 	nop.w
   d4900:	00000000 	.word	0x00000000
   d4904:	3fe00000 	.word	0x3fe00000
   d4908:	2003e514 	.word	0x2003e514
   d490c:	2003e518 	.word	0x2003e518
   d4910:	00000000 	.word	0x00000000
   d4914:	2003e510 	.word	0x2003e510

000d4918 <_Z21PulseSensorAmped_lostv>:


void PulseSensorAmped_lost(void) {
   d4918:	b508      	push	{r3, lr}
  Serial.println("Pulse Lost");
   d491a:	f002 fa2f 	bl	d6d7c <_Z16_fetch_usbserialv>
}
   d491e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("Pulse Lost");
   d4922:	4901      	ldr	r1, [pc, #4]	; (d4928 <_Z21PulseSensorAmped_lostv+0x10>)
   d4924:	f001 bf8f 	b.w	d6846 <_ZN5Print7printlnEPKc>
   d4928:	000d92a4 	.word	0x000d92a4
   d492c:	00000000 	.word	0x00000000

000d4930 <_Z20computeSummaryReportv>:


void computeSummaryReport(){
   d4930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  avg_tc1 = avg_tc1 / baseReadCounter;
   d4934:	496c      	ldr	r1, [pc, #432]	; (d4ae8 <_Z20computeSummaryReportv+0x1b8>)
  avg_tc2 = avg_tc2 / baseReadCounter;
  avg_accx = avg_accx / baseReadCounter;
   d4936:	4d6d      	ldr	r5, [pc, #436]	; (d4aec <_Z20computeSummaryReportv+0x1bc>)
  avg_accy = avg_accy / baseReadCounter;
   d4938:	4e6d      	ldr	r6, [pc, #436]	; (d4af0 <_Z20computeSummaryReportv+0x1c0>)
  avg_accz = avg_accz / baseReadCounter;
   d493a:	4f6e      	ldr	r7, [pc, #440]	; (d4af4 <_Z20computeSummaryReportv+0x1c4>)
  avg_gyrx = avg_gyrx / baseReadCounter;
   d493c:	f8df 8224 	ldr.w	r8, [pc, #548]	; d4b64 <_Z20computeSummaryReportv+0x234>
  avg_gyry = avg_gyry / baseReadCounter;
   d4940:	f8df 9224 	ldr.w	r9, [pc, #548]	; d4b68 <_Z20computeSummaryReportv+0x238>
  avg_gyrz = avg_gyrz / baseReadCounter;
   d4944:	f8df a224 	ldr.w	sl, [pc, #548]	; d4b6c <_Z20computeSummaryReportv+0x23c>
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d4948:	f8df b224 	ldr.w	fp, [pc, #548]	; d4b70 <_Z20computeSummaryReportv+0x240>
  avg_tc2 = avg_tc2 / baseReadCounter;
   d494c:	486a      	ldr	r0, [pc, #424]	; (d4af8 <_Z20computeSummaryReportv+0x1c8>)
  avg_tc1 = avg_tc1 / baseReadCounter;
   d494e:	4b6b      	ldr	r3, [pc, #428]	; (d4afc <_Z20computeSummaryReportv+0x1cc>)
   d4950:	680a      	ldr	r2, [r1, #0]
   d4952:	681b      	ldr	r3, [r3, #0]
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d4954:	4c6a      	ldr	r4, [pc, #424]	; (d4b00 <_Z20computeSummaryReportv+0x1d0>)
  avg_tc1 = avg_tc1 / baseReadCounter;
   d4956:	fb92 f2f3 	sdiv	r2, r2, r3
   d495a:	600a      	str	r2, [r1, #0]
  avg_tc2 = avg_tc2 / baseReadCounter;
   d495c:	6802      	ldr	r2, [r0, #0]
   d495e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4962:	6002      	str	r2, [r0, #0]
  avg_accx = avg_accx / baseReadCounter;
   d4964:	682a      	ldr	r2, [r5, #0]
   d4966:	fb92 f2f3 	sdiv	r2, r2, r3
   d496a:	602a      	str	r2, [r5, #0]
  avg_accy = avg_accy / baseReadCounter;
   d496c:	6832      	ldr	r2, [r6, #0]
   d496e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4972:	6032      	str	r2, [r6, #0]
  avg_accz = avg_accz / baseReadCounter;
   d4974:	683a      	ldr	r2, [r7, #0]
   d4976:	fb92 f2f3 	sdiv	r2, r2, r3
   d497a:	603a      	str	r2, [r7, #0]
  avg_gyrx = avg_gyrx / baseReadCounter;
   d497c:	f8d8 2000 	ldr.w	r2, [r8]
   d4980:	fb92 f2f3 	sdiv	r2, r2, r3
   d4984:	f8c8 2000 	str.w	r2, [r8]
  avg_gyry = avg_gyry / baseReadCounter;
   d4988:	f8d9 2000 	ldr.w	r2, [r9]
   d498c:	fb92 f2f3 	sdiv	r2, r2, r3
   d4990:	f8c9 2000 	str.w	r2, [r9]
  avg_gyrz = avg_gyrz / baseReadCounter;
   d4994:	f8da 2000 	ldr.w	r2, [sl]
   d4998:	fb92 f2f3 	sdiv	r2, r2, r3
   d499c:	f8ca 2000 	str.w	r2, [sl]
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d49a0:	f8db 2000 	ldr.w	r2, [fp]
   d49a4:	fb92 f3f3 	sdiv	r3, r2, r3
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d49a8:	4a56      	ldr	r2, [pc, #344]	; (d4b04 <_Z20computeSummaryReportv+0x1d4>)
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d49aa:	f8cb 3000 	str.w	r3, [fp]
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d49ae:	6812      	ldr	r2, [r2, #0]
   d49b0:	6823      	ldr	r3, [r4, #0]
   d49b2:	fb93 f3f2 	sdiv	r3, r3, r2
   d49b6:	6023      	str	r3, [r4, #0]
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d49b8:	4b53      	ldr	r3, [pc, #332]	; (d4b08 <_Z20computeSummaryReportv+0x1d8>)
   d49ba:	4854      	ldr	r0, [pc, #336]	; (d4b0c <_Z20computeSummaryReportv+0x1dc>)
  avg_fsr = avg_fsr / fsrReadCounter;
   d49bc:	4c54      	ldr	r4, [pc, #336]	; (d4b10 <_Z20computeSummaryReportv+0x1e0>)
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d49be:	6802      	ldr	r2, [r0, #0]
   d49c0:	4619      	mov	r1, r3
   d49c2:	681b      	ldr	r3, [r3, #0]
   d49c4:	fb93 f3f2 	sdiv	r3, r3, r2
   d49c8:	600b      	str	r3, [r1, #0]
  avg_fsr = avg_fsr / fsrReadCounter;
   d49ca:	4952      	ldr	r1, [pc, #328]	; (d4b14 <_Z20computeSummaryReportv+0x1e4>)
   d49cc:	6823      	ldr	r3, [r4, #0]
   d49ce:	680a      	ldr	r2, [r1, #0]
   d49d0:	fb93 f3f2 	sdiv	r3, r3, r2
void computeSummaryReport(){
   d49d4:	b09f      	sub	sp, #124	; 0x7c

  float voltage = analogRead(BATT) * 0.0011224;
   d49d6:	2021      	movs	r0, #33	; 0x21
  avg_fsr = avg_fsr / fsrReadCounter;
   d49d8:	6023      	str	r3, [r4, #0]
  float voltage = analogRead(BATT) * 0.0011224;
   d49da:	f002 fb83 	bl	d70e4 <analogRead>
   d49de:	f004 f843 	bl	d8a68 <__aeabi_i2d>
   d49e2:	a33f      	add	r3, pc, #252	; (adr r3, d4ae0 <_Z20computeSummaryReportv+0x1b0>)
   d49e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49e8:	f004 f8a8 	bl	d8b3c <__aeabi_dmul>
   d49ec:	f004 fb56 	bl	d909c <__aeabi_d2f>
  float batt_perc = ((voltage - 3.0) / 1.2) * 100.0;
   d49f0:	f004 f84c 	bl	d8a8c <__aeabi_f2d>
   d49f4:	4b48      	ldr	r3, [pc, #288]	; (d4b18 <_Z20computeSummaryReportv+0x1e8>)
   d49f6:	2200      	movs	r2, #0
   d49f8:	f003 fee8 	bl	d87cc <__aeabi_dsub>
   d49fc:	4b47      	ldr	r3, [pc, #284]	; (d4b1c <_Z20computeSummaryReportv+0x1ec>)
   d49fe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d4a02:	f004 f9c5 	bl	d8d90 <__aeabi_ddiv>
   d4a06:	4b46      	ldr	r3, [pc, #280]	; (d4b20 <_Z20computeSummaryReportv+0x1f0>)
   d4a08:	2200      	movs	r2, #0
   d4a0a:	f004 f897 	bl	d8b3c <__aeabi_dmul>
   d4a0e:	f004 fb45 	bl	d909c <__aeabi_d2f>

  summaryReport = String::format("{ \"Avg_TC1\": %d, \"Avg_TP1\": %d, \"Avg_TC2\": %d, \"Avg_TP2\": %d, \"Avg_FSR\": %d \
   d4a12:	f004 f83b 	bl	d8a8c <__aeabi_f2d>
   d4a16:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   d4a1a:	4b42      	ldr	r3, [pc, #264]	; (d4b24 <_Z20computeSummaryReportv+0x1f4>)
   d4a1c:	4a3a      	ldr	r2, [pc, #232]	; (d4b08 <_Z20computeSummaryReportv+0x1d8>)
   d4a1e:	681b      	ldr	r3, [r3, #0]
   d4a20:	9317      	str	r3, [sp, #92]	; 0x5c
   d4a22:	4b41      	ldr	r3, [pc, #260]	; (d4b28 <_Z20computeSummaryReportv+0x1f8>)
   d4a24:	4834      	ldr	r0, [pc, #208]	; (d4af8 <_Z20computeSummaryReportv+0x1c8>)
   d4a26:	681b      	ldr	r3, [r3, #0]
   d4a28:	9316      	str	r3, [sp, #88]	; 0x58
   d4a2a:	4b40      	ldr	r3, [pc, #256]	; (d4b2c <_Z20computeSummaryReportv+0x1fc>)
   d4a2c:	492e      	ldr	r1, [pc, #184]	; (d4ae8 <_Z20computeSummaryReportv+0x1b8>)
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	9315      	str	r3, [sp, #84]	; 0x54
   d4a32:	4b3f      	ldr	r3, [pc, #252]	; (d4b30 <_Z20computeSummaryReportv+0x200>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	9314      	str	r3, [sp, #80]	; 0x50
   d4a38:	4b3e      	ldr	r3, [pc, #248]	; (d4b34 <_Z20computeSummaryReportv+0x204>)
   d4a3a:	681b      	ldr	r3, [r3, #0]
   d4a3c:	9313      	str	r3, [sp, #76]	; 0x4c
   d4a3e:	4b3e      	ldr	r3, [pc, #248]	; (d4b38 <_Z20computeSummaryReportv+0x208>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	9312      	str	r3, [sp, #72]	; 0x48
   d4a44:	4b3d      	ldr	r3, [pc, #244]	; (d4b3c <_Z20computeSummaryReportv+0x20c>)
   d4a46:	681b      	ldr	r3, [r3, #0]
   d4a48:	9311      	str	r3, [sp, #68]	; 0x44
   d4a4a:	4b3d      	ldr	r3, [pc, #244]	; (d4b40 <_Z20computeSummaryReportv+0x210>)
   d4a4c:	681b      	ldr	r3, [r3, #0]
   d4a4e:	9310      	str	r3, [sp, #64]	; 0x40
   d4a50:	4b3c      	ldr	r3, [pc, #240]	; (d4b44 <_Z20computeSummaryReportv+0x214>)
   d4a52:	681b      	ldr	r3, [r3, #0]
   d4a54:	930f      	str	r3, [sp, #60]	; 0x3c
   d4a56:	4b3c      	ldr	r3, [pc, #240]	; (d4b48 <_Z20computeSummaryReportv+0x218>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	930e      	str	r3, [sp, #56]	; 0x38
   d4a5c:	4b3b      	ldr	r3, [pc, #236]	; (d4b4c <_Z20computeSummaryReportv+0x21c>)
   d4a5e:	681b      	ldr	r3, [r3, #0]
   d4a60:	930d      	str	r3, [sp, #52]	; 0x34
   d4a62:	4b3b      	ldr	r3, [pc, #236]	; (d4b50 <_Z20computeSummaryReportv+0x220>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	930c      	str	r3, [sp, #48]	; 0x30
   d4a68:	4b3a      	ldr	r3, [pc, #232]	; (d4b54 <_Z20computeSummaryReportv+0x224>)
   d4a6a:	681b      	ldr	r3, [r3, #0]
   d4a6c:	930b      	str	r3, [sp, #44]	; 0x2c
   d4a6e:	4b3a      	ldr	r3, [pc, #232]	; (d4b58 <_Z20computeSummaryReportv+0x228>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	930a      	str	r3, [sp, #40]	; 0x28
   d4a74:	f8db 3000 	ldr.w	r3, [fp]
   d4a78:	9309      	str	r3, [sp, #36]	; 0x24
   d4a7a:	f8da 3000 	ldr.w	r3, [sl]
   d4a7e:	9308      	str	r3, [sp, #32]
   d4a80:	f8d9 3000 	ldr.w	r3, [r9]
   d4a84:	9307      	str	r3, [sp, #28]
   d4a86:	f8d8 3000 	ldr.w	r3, [r8]
   d4a8a:	9306      	str	r3, [sp, #24]
   d4a8c:	683b      	ldr	r3, [r7, #0]
   d4a8e:	9305      	str	r3, [sp, #20]
   d4a90:	6833      	ldr	r3, [r6, #0]
   d4a92:	9304      	str	r3, [sp, #16]
   d4a94:	682b      	ldr	r3, [r5, #0]
   d4a96:	9303      	str	r3, [sp, #12]
   d4a98:	6823      	ldr	r3, [r4, #0]
   d4a9a:	9302      	str	r3, [sp, #8]
   d4a9c:	6813      	ldr	r3, [r2, #0]
   d4a9e:	9301      	str	r3, [sp, #4]
   d4aa0:	6803      	ldr	r3, [r0, #0]
   d4aa2:	4c17      	ldr	r4, [pc, #92]	; (d4b00 <_Z20computeSummaryReportv+0x1d0>)
   d4aa4:	9300      	str	r3, [sp, #0]
   d4aa6:	6823      	ldr	r3, [r4, #0]
   d4aa8:	680a      	ldr	r2, [r1, #0]
   d4aaa:	492c      	ldr	r1, [pc, #176]	; (d4b5c <_Z20computeSummaryReportv+0x22c>)
   d4aac:	ac1a      	add	r4, sp, #104	; 0x68
   d4aae:	4620      	mov	r0, r4
                                  , \"Avg_GyrZ\": %d, \"Avg_BrdTemp\": %d, \"Max_TC1\": %d, \"Max_TP1\": %d, \"Max_TC2\": %d \
                                  , \"Max_TP2\": %d, \"Max_AccX\": %d, \"Max_AccY\": %d, \"Max_AccZ\": %d, \"Max_GyrX\": %d \
                                  , \"Max_GyrY\": %d, \"Max_GyrZ\": %d, \"Max_BrdTemp\": %d, \"Pulse\": %d, \"HRV\": %d \
                                  , \"Battery\": %f}", avg_tc1, avg_tp1, avg_tc2, avg_tp2, avg_fsr, avg_accx, avg_accy, avg_accz, \
                                  avg_gyrx, avg_gyry, avg_gyrz, avg_brdtemp, max_tc1, max_tp1, max_tc2, max_tp2, max_fsr, \
                                  max_accx, max_accy, max_accz, max_gyrx, max_gyry, max_gyrz, max_brdtemp, pulse, hrv, batt_perc);
   d4ab0:	ac1a      	add	r4, sp, #104	; 0x68
  summaryReport = String::format("{ \"Avg_TC1\": %d, \"Avg_TP1\": %d, \"Avg_TC2\": %d, \"Avg_TP2\": %d, \"Avg_FSR\": %d \
   d4ab2:	f002 f821 	bl	d6af8 <_ZN6String6formatEPKcz>
                                  max_accx, max_accy, max_accz, max_gyrx, max_gyry, max_gyrz, max_brdtemp, pulse, hrv, batt_perc);
   d4ab6:	4621      	mov	r1, r4
   d4ab8:	4829      	ldr	r0, [pc, #164]	; (d4b60 <_Z20computeSummaryReportv+0x230>)
   d4aba:	ac1a      	add	r4, sp, #104	; 0x68
   d4abc:	f001 ffb4 	bl	d6a28 <_ZN6StringaSEOS_>
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f001 ff1b 	bl	d68fc <_ZN6StringD1Ev>
  // summaryReport = summaryReport + "Avg AccX: " + avg_accx + ", Avg AccY: " + avg_accy + ", Avg AccZ: " + avg_accz + ", Avg GyrX: " + avg_gyrx + ", Avg GyrY: " + avg_gyry + ", Avg GyrZ: " + avg_gyrz + ", Avg BrdTemp: " + avg_brdtemp + " / ";
  // summaryReport = summaryReport + "Max TC1: " + max_tc1 + ", Max TC2: " + max_tp1 + ", Max TP1: " + max_tc2 + ", Max TP2: " + max_tp2 + ", Max FSR: " + max_fsr;
  // summaryReport = summaryReport + "Max AccX: " + max_accx + ", Max AccY: " + max_accy + ", Max AccZ: " + max_accz + ", Max GyrX: " + max_gyrx + ", Max GyrY: " + max_gyry + ", Max GyrZ: " + max_gyrz + ", Max BrdTemp: " + max_brdtemp + " / ";
  // summaryReport = summaryReport + "Pulse: " + pulse + ", HRV: " + hrv + ", Battery %: " + batt_perc;

  baseReadCounter = 0;
   d4ac6:	4a0d      	ldr	r2, [pc, #52]	; (d4afc <_Z20computeSummaryReportv+0x1cc>)
  tp1ReadCounter = 0;
  tp2ReadCounter = 0;
   d4ac8:	4810      	ldr	r0, [pc, #64]	; (d4b0c <_Z20computeSummaryReportv+0x1dc>)
  fsrReadCounter = 0;
   d4aca:	4912      	ldr	r1, [pc, #72]	; (d4b14 <_Z20computeSummaryReportv+0x1e4>)
  baseReadCounter = 0;
   d4acc:	2300      	movs	r3, #0
   d4ace:	6013      	str	r3, [r2, #0]
  tp1ReadCounter = 0;
   d4ad0:	4a0c      	ldr	r2, [pc, #48]	; (d4b04 <_Z20computeSummaryReportv+0x1d4>)
  tp2ReadCounter = 0;
   d4ad2:	6003      	str	r3, [r0, #0]
  tp1ReadCounter = 0;
   d4ad4:	6013      	str	r3, [r2, #0]
  fsrReadCounter = 0;
   d4ad6:	600b      	str	r3, [r1, #0]
}
   d4ad8:	b01f      	add	sp, #124	; 0x7c
   d4ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ade:	bf00      	nop
   d4ae0:	d2c10294 	.word	0xd2c10294
   d4ae4:	3f5263af 	.word	0x3f5263af
   d4ae8:	2003e4b8 	.word	0x2003e4b8
   d4aec:	2003e498 	.word	0x2003e498
   d4af0:	2003e49c 	.word	0x2003e49c
   d4af4:	2003e4a0 	.word	0x2003e4a0
   d4af8:	2003e4bc 	.word	0x2003e4bc
   d4afc:	2003e4c8 	.word	0x2003e4c8
   d4b00:	2003e4c0 	.word	0x2003e4c0
   d4b04:	2003e584 	.word	0x2003e584
   d4b08:	2003e4c4 	.word	0x2003e4c4
   d4b0c:	2003e58c 	.word	0x2003e58c
   d4b10:	2003e4a8 	.word	0x2003e4a8
   d4b14:	2003e500 	.word	0x2003e500
   d4b18:	40080000 	.word	0x40080000
   d4b1c:	3ff33333 	.word	0x3ff33333
   d4b20:	40590000 	.word	0x40590000
   d4b24:	2003e510 	.word	0x2003e510
   d4b28:	2003e560 	.word	0x2003e560
   d4b2c:	2003e538 	.word	0x2003e538
   d4b30:	2003e548 	.word	0x2003e548
   d4b34:	2003e544 	.word	0x2003e544
   d4b38:	2003e540 	.word	0x2003e540
   d4b3c:	2003e534 	.word	0x2003e534
   d4b40:	2003e530 	.word	0x2003e530
   d4b44:	2003e52c 	.word	0x2003e52c
   d4b48:	2003e53c 	.word	0x2003e53c
   d4b4c:	2003e558 	.word	0x2003e558
   d4b50:	2003e550 	.word	0x2003e550
   d4b54:	2003e554 	.word	0x2003e554
   d4b58:	2003e54c 	.word	0x2003e54c
   d4b5c:	000d92af 	.word	0x000d92af
   d4b60:	2003e568 	.word	0x2003e568
   d4b64:	2003e4ac 	.word	0x2003e4ac
   d4b68:	2003e4b0 	.word	0x2003e4b0
   d4b6c:	2003e4b4 	.word	0x2003e4b4
   d4b70:	2003e4a4 	.word	0x2003e4a4

000d4b74 <_Z17updateSummaryValsPi>:


void updateSummaryVals(int summaryArray[9]){
  avg_tc1 = avg_tc1 + summaryArray[0];
   d4b74:	4a2d      	ldr	r2, [pc, #180]	; (d4c2c <_Z17updateSummaryValsPi+0xb8>)
   d4b76:	6803      	ldr	r3, [r0, #0]
   d4b78:	6811      	ldr	r1, [r2, #0]
   d4b7a:	440b      	add	r3, r1
   d4b7c:	6013      	str	r3, [r2, #0]
  if(summaryArray[0] > max_tc1){
   d4b7e:	4b2c      	ldr	r3, [pc, #176]	; (d4c30 <_Z17updateSummaryValsPi+0xbc>)
   d4b80:	6802      	ldr	r2, [r0, #0]
   d4b82:	6819      	ldr	r1, [r3, #0]
   d4b84:	428a      	cmp	r2, r1
    max_tc1 = summaryArray[0];
  }
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4b86:	492b      	ldr	r1, [pc, #172]	; (d4c34 <_Z17updateSummaryValsPi+0xc0>)
    max_tc1 = summaryArray[0];
   d4b88:	bfc8      	it	gt
   d4b8a:	601a      	strgt	r2, [r3, #0]
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4b8c:	680a      	ldr	r2, [r1, #0]
   d4b8e:	6843      	ldr	r3, [r0, #4]
   d4b90:	441a      	add	r2, r3
   d4b92:	600a      	str	r2, [r1, #0]
  if(summaryArray[1] > max_tc2){
   d4b94:	4a28      	ldr	r2, [pc, #160]	; (d4c38 <_Z17updateSummaryValsPi+0xc4>)
   d4b96:	6811      	ldr	r1, [r2, #0]
   d4b98:	428b      	cmp	r3, r1
    max_tc2 = summaryArray[1];
  }
  avg_accx = avg_accx + summaryArray[2];
   d4b9a:	4928      	ldr	r1, [pc, #160]	; (d4c3c <_Z17updateSummaryValsPi+0xc8>)
    max_tc2 = summaryArray[1];
   d4b9c:	bfc8      	it	gt
   d4b9e:	6013      	strgt	r3, [r2, #0]
  avg_accx = avg_accx + summaryArray[2];
   d4ba0:	680a      	ldr	r2, [r1, #0]
   d4ba2:	6883      	ldr	r3, [r0, #8]
   d4ba4:	441a      	add	r2, r3
   d4ba6:	600a      	str	r2, [r1, #0]
  if(summaryArray[2] > max_accx){
   d4ba8:	4a25      	ldr	r2, [pc, #148]	; (d4c40 <_Z17updateSummaryValsPi+0xcc>)
   d4baa:	6811      	ldr	r1, [r2, #0]
   d4bac:	428b      	cmp	r3, r1
    max_accx = summaryArray[2];
  }
  avg_accy = avg_accy + summaryArray[3];
   d4bae:	4925      	ldr	r1, [pc, #148]	; (d4c44 <_Z17updateSummaryValsPi+0xd0>)
    max_accx = summaryArray[2];
   d4bb0:	bfc8      	it	gt
   d4bb2:	6013      	strgt	r3, [r2, #0]
  avg_accy = avg_accy + summaryArray[3];
   d4bb4:	680a      	ldr	r2, [r1, #0]
   d4bb6:	68c3      	ldr	r3, [r0, #12]
   d4bb8:	441a      	add	r2, r3
   d4bba:	600a      	str	r2, [r1, #0]
  if(summaryArray[3] > max_accy){
   d4bbc:	4a22      	ldr	r2, [pc, #136]	; (d4c48 <_Z17updateSummaryValsPi+0xd4>)
   d4bbe:	6811      	ldr	r1, [r2, #0]
   d4bc0:	428b      	cmp	r3, r1
    max_accy = summaryArray[3];
  }
  avg_accz = avg_accz + summaryArray[4];
   d4bc2:	4922      	ldr	r1, [pc, #136]	; (d4c4c <_Z17updateSummaryValsPi+0xd8>)
    max_accy = summaryArray[3];
   d4bc4:	bfc8      	it	gt
   d4bc6:	6013      	strgt	r3, [r2, #0]
  avg_accz = avg_accz + summaryArray[4];
   d4bc8:	6903      	ldr	r3, [r0, #16]
   d4bca:	680a      	ldr	r2, [r1, #0]
   d4bcc:	441a      	add	r2, r3
   d4bce:	600a      	str	r2, [r1, #0]
  if(summaryArray[4] > max_accz){
   d4bd0:	4a1f      	ldr	r2, [pc, #124]	; (d4c50 <_Z17updateSummaryValsPi+0xdc>)
   d4bd2:	6811      	ldr	r1, [r2, #0]
   d4bd4:	428b      	cmp	r3, r1
    max_accz = summaryArray[4];
  }
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4bd6:	491f      	ldr	r1, [pc, #124]	; (d4c54 <_Z17updateSummaryValsPi+0xe0>)
    max_accz = summaryArray[4];
   d4bd8:	bfc8      	it	gt
   d4bda:	6013      	strgt	r3, [r2, #0]
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4bdc:	6943      	ldr	r3, [r0, #20]
   d4bde:	680a      	ldr	r2, [r1, #0]
   d4be0:	441a      	add	r2, r3
   d4be2:	600a      	str	r2, [r1, #0]
  if(summaryArray[5] > max_gyrx){
   d4be4:	4a1c      	ldr	r2, [pc, #112]	; (d4c58 <_Z17updateSummaryValsPi+0xe4>)
   d4be6:	6811      	ldr	r1, [r2, #0]
   d4be8:	428b      	cmp	r3, r1
    max_gyrx = summaryArray[5];
  }
  avg_gyry = avg_gyry + summaryArray[6];
   d4bea:	491c      	ldr	r1, [pc, #112]	; (d4c5c <_Z17updateSummaryValsPi+0xe8>)
    max_gyrx = summaryArray[5];
   d4bec:	bfc8      	it	gt
   d4bee:	6013      	strgt	r3, [r2, #0]
  avg_gyry = avg_gyry + summaryArray[6];
   d4bf0:	6983      	ldr	r3, [r0, #24]
   d4bf2:	680a      	ldr	r2, [r1, #0]
   d4bf4:	441a      	add	r2, r3
   d4bf6:	600a      	str	r2, [r1, #0]
  if(summaryArray[6] > max_gyry){
   d4bf8:	4a19      	ldr	r2, [pc, #100]	; (d4c60 <_Z17updateSummaryValsPi+0xec>)
   d4bfa:	6811      	ldr	r1, [r2, #0]
   d4bfc:	428b      	cmp	r3, r1
    max_gyry = summaryArray[6];
  }
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4bfe:	4919      	ldr	r1, [pc, #100]	; (d4c64 <_Z17updateSummaryValsPi+0xf0>)
    max_gyry = summaryArray[6];
   d4c00:	bfc8      	it	gt
   d4c02:	6013      	strgt	r3, [r2, #0]
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4c04:	69c3      	ldr	r3, [r0, #28]
   d4c06:	680a      	ldr	r2, [r1, #0]
   d4c08:	441a      	add	r2, r3
   d4c0a:	600a      	str	r2, [r1, #0]
  if(summaryArray[7] > max_gyrz){
   d4c0c:	4a16      	ldr	r2, [pc, #88]	; (d4c68 <_Z17updateSummaryValsPi+0xf4>)
   d4c0e:	6811      	ldr	r1, [r2, #0]
   d4c10:	428b      	cmp	r3, r1
    max_gyrz = summaryArray[7];
  }
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4c12:	4916      	ldr	r1, [pc, #88]	; (d4c6c <_Z17updateSummaryValsPi+0xf8>)
    max_gyrz = summaryArray[7];
   d4c14:	bfc8      	it	gt
   d4c16:	6013      	strgt	r3, [r2, #0]
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4c18:	6a03      	ldr	r3, [r0, #32]
   d4c1a:	680a      	ldr	r2, [r1, #0]
   d4c1c:	441a      	add	r2, r3
   d4c1e:	600a      	str	r2, [r1, #0]
  if(summaryArray[8] > max_brdtemp){
   d4c20:	4a13      	ldr	r2, [pc, #76]	; (d4c70 <_Z17updateSummaryValsPi+0xfc>)
   d4c22:	6811      	ldr	r1, [r2, #0]
   d4c24:	428b      	cmp	r3, r1
    max_brdtemp = summaryArray[8];
   d4c26:	bfc8      	it	gt
   d4c28:	6013      	strgt	r3, [r2, #0]
  }
}
   d4c2a:	4770      	bx	lr
   d4c2c:	2003e4b8 	.word	0x2003e4b8
   d4c30:	2003e54c 	.word	0x2003e54c
   d4c34:	2003e4bc 	.word	0x2003e4bc
   d4c38:	2003e550 	.word	0x2003e550
   d4c3c:	2003e498 	.word	0x2003e498
   d4c40:	2003e52c 	.word	0x2003e52c
   d4c44:	2003e49c 	.word	0x2003e49c
   d4c48:	2003e530 	.word	0x2003e530
   d4c4c:	2003e4a0 	.word	0x2003e4a0
   d4c50:	2003e534 	.word	0x2003e534
   d4c54:	2003e4ac 	.word	0x2003e4ac
   d4c58:	2003e540 	.word	0x2003e540
   d4c5c:	2003e4b0 	.word	0x2003e4b0
   d4c60:	2003e544 	.word	0x2003e544
   d4c64:	2003e4b4 	.word	0x2003e4b4
   d4c68:	2003e548 	.word	0x2003e548
   d4c6c:	2003e4a4 	.word	0x2003e4a4
   d4c70:	2003e538 	.word	0x2003e538

000d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4c74:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4c76:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4c78:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4c7a:	b17c      	cbz	r4, d4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4c7c:	6863      	ldr	r3, [r4, #4]
   d4c7e:	3b01      	subs	r3, #1
   d4c80:	6063      	str	r3, [r4, #4]
   d4c82:	b95b      	cbnz	r3, d4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4c84:	6823      	ldr	r3, [r4, #0]
   d4c86:	4620      	mov	r0, r4
   d4c88:	689b      	ldr	r3, [r3, #8]
   d4c8a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c8c:	68a3      	ldr	r3, [r4, #8]
   d4c8e:	3b01      	subs	r3, #1
   d4c90:	60a3      	str	r3, [r4, #8]
   d4c92:	b91b      	cbnz	r3, d4c9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4c94:	6823      	ldr	r3, [r4, #0]
   d4c96:	4620      	mov	r0, r4
   d4c98:	68db      	ldr	r3, [r3, #12]
   d4c9a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4c9c:	4628      	mov	r0, r5
   d4c9e:	bd38      	pop	{r3, r4, r5, pc}

000d4ca0 <loop>:
void loop() {
   d4ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((edaTurnCounter == 1) && ((millis()-edaReadTimer) >= 15)){
   d4ca4:	4caf      	ldr	r4, [pc, #700]	; (d4f64 <loop+0x2c4>)
void loop() {
   d4ca6:	b091      	sub	sp, #68	; 0x44

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ca8:	f000 fe8e 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
  if((edaTurnCounter == 1) && ((millis()-edaReadTimer) >= 15)){
   d4cac:	7823      	ldrb	r3, [r4, #0]
   d4cae:	2b01      	cmp	r3, #1
   d4cb0:	4625      	mov	r5, r4
   d4cb2:	f040 80cb 	bne.w	d4e4c <loop+0x1ac>
   d4cb6:	4eac      	ldr	r6, [pc, #688]	; (d4f68 <loop+0x2c8>)
   d4cb8:	f000 fe86 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
   d4cbc:	6833      	ldr	r3, [r6, #0]
   d4cbe:	1ac0      	subs	r0, r0, r3
   d4cc0:	280e      	cmp	r0, #14
   d4cc2:	f240 80c3 	bls.w	d4e4c <loop+0x1ac>
   d4cc6:	f000 fe7f 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
    eda1 = ads_eda.readADC_SingleEnded(0);
   d4cca:	2100      	movs	r1, #0
    edaReadTimer = millis();
   d4ccc:	6030      	str	r0, [r6, #0]
    eda1 = ads_eda.readADC_SingleEnded(0);
   d4cce:	48a7      	ldr	r0, [pc, #668]	; (d4f6c <loop+0x2cc>)
   d4cd0:	4da7      	ldr	r5, [pc, #668]	; (d4f70 <loop+0x2d0>)
   d4cd2:	f000 fad8 	bl	d5286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4cd6:	49a7      	ldr	r1, [pc, #668]	; (d4f74 <loop+0x2d4>)
   d4cd8:	6028      	str	r0, [r5, #0]
   d4cda:	a807      	add	r0, sp, #28
   d4cdc:	f001 fe99 	bl	d6a12 <_ZN6StringC1ERKS_>
    eda1Report = eda1Report + String(eda1) + ','; //EDA1
   d4ce0:	220a      	movs	r2, #10
   d4ce2:	6829      	ldr	r1, [r5, #0]
   d4ce4:	a803      	add	r0, sp, #12
   d4ce6:	f001 feb9 	bl	d6a5c <_ZN6StringC1Eih>
   d4cea:	a903      	add	r1, sp, #12
   d4cec:	a807      	add	r0, sp, #28
   d4cee:	f001 feec 	bl	d6aca <_ZplRK15StringSumHelperRK6String>
   d4cf2:	212c      	movs	r1, #44	; 0x2c
   d4cf4:	f001 fef5 	bl	d6ae2 <_ZplRK15StringSumHelperc>
   d4cf8:	4601      	mov	r1, r0
   d4cfa:	489e      	ldr	r0, [pc, #632]	; (d4f74 <loop+0x2d4>)
   d4cfc:	f001 fe7a 	bl	d69f4 <_ZN6StringaSERKS_>
   d4d00:	a803      	add	r0, sp, #12
   d4d02:	f001 fdfb 	bl	d68fc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4d06:	a807      	add	r0, sp, #28
   d4d08:	f001 fdf8 	bl	d68fc <_ZN6StringD1Ev>
    edaTurnCounter = 2;
   d4d0c:	2302      	movs	r3, #2
   d4d0e:	7023      	strb	r3, [r4, #0]
  tc1 = analogRead(TC1);
   d4d10:	2012      	movs	r0, #18
   d4d12:	f002 f9e7 	bl	d70e4 <analogRead>
   d4d16:	f8df 92ec 	ldr.w	r9, [pc, #748]	; d5004 <loop+0x364>
  ICM.getAGMT();  // Update IMU Values
   d4d1a:	4c97      	ldr	r4, [pc, #604]	; (d4f78 <loop+0x2d8>)
  tc1 = analogRead(TC1);
   d4d1c:	f8c9 0000 	str.w	r0, [r9]
  tc2 = analogRead(TC2);
   d4d20:	2011      	movs	r0, #17
   d4d22:	f002 f9df 	bl	d70e4 <analogRead>
   d4d26:	f8df 82e0 	ldr.w	r8, [pc, #736]	; d5008 <loop+0x368>
  ICM.getAGMT();  // Update IMU Values
   d4d2a:	1d21      	adds	r1, r4, #4
  tc2 = analogRead(TC2);
   d4d2c:	f8c8 0000 	str.w	r0, [r8]
  ICM.getAGMT();  // Update IMU Values
   d4d30:	a807      	add	r0, sp, #28
   d4d32:	f000 fc9f 	bl	d5674 <_ZN9ICM_209487getAGMTEv>
  accx = ICM.agmt.acc.axes.x;
   d4d36:	4b91      	ldr	r3, [pc, #580]	; (d4f7c <loop+0x2dc>)
   d4d38:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   d4d3c:	601f      	str	r7, [r3, #0]
  accy = ICM.agmt.acc.axes.y;
   d4d3e:	4b90      	ldr	r3, [pc, #576]	; (d4f80 <loop+0x2e0>)
   d4d40:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
   d4d44:	601e      	str	r6, [r3, #0]
  accz = ICM.agmt.acc.axes.z;
   d4d46:	4b8f      	ldr	r3, [pc, #572]	; (d4f84 <loop+0x2e4>)
   d4d48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d4d4c:	601d      	str	r5, [r3, #0]
  gyrx = ICM.agmt.gyr.axes.x;
   d4d4e:	4b8e      	ldr	r3, [pc, #568]	; (d4f88 <loop+0x2e8>)
   d4d50:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
   d4d54:	6018      	str	r0, [r3, #0]
  gyry = ICM.agmt.gyr.axes.y;
   d4d56:	4b8d      	ldr	r3, [pc, #564]	; (d4f8c <loop+0x2ec>)
   d4d58:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4d5c:	6019      	str	r1, [r3, #0]
  gyrz = ICM.agmt.gyr.axes.z;
   d4d5e:	4b8c      	ldr	r3, [pc, #560]	; (d4f90 <loop+0x2f0>)
   d4d60:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4d64:	601a      	str	r2, [r3, #0]
  brdtemp = ICM.agmt.tmp.val;
   d4d66:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
   d4d6a:	4c8a      	ldr	r4, [pc, #552]	; (d4f94 <loop+0x2f4>)
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  baseReadCounter++;
   d4d70:	4a89      	ldr	r2, [pc, #548]	; (d4f98 <loop+0x2f8>)
  brdtemp = ICM.agmt.tmp.val;
   d4d72:	6023      	str	r3, [r4, #0]
  baseReadCounter++;
   d4d74:	6813      	ldr	r3, [r2, #0]
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d76:	f8d9 4000 	ldr.w	r4, [r9]
   d4d7a:	9407      	str	r4, [sp, #28]
   d4d7c:	f8d8 4000 	ldr.w	r4, [r8]
  baseReadCounter++;
   d4d80:	3301      	adds	r3, #1
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d82:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  updateSummaryVals(summaryArray);
   d4d86:	a807      	add	r0, sp, #28
  baseReadCounter++;
   d4d88:	6013      	str	r3, [r2, #0]
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d8a:	e9cd 4708 	strd	r4, r7, [sp, #32]
   d4d8e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d4d92:	4c82      	ldr	r4, [pc, #520]	; (d4f9c <loop+0x2fc>)
  updateSummaryVals(summaryArray);
   d4d94:	f7ff feee 	bl	d4b74 <_Z17updateSummaryValsPi>
  PulseSensorAmped.process();
   d4d98:	4881      	ldr	r0, [pc, #516]	; (d4fa0 <loop+0x300>)
   d4d9a:	f000 fbfb 	bl	d5594 <_ZN21PulseSensorAmpedClass7processEv>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4d9e:	f000 fe0b 	bl	d59b8 <HAL_Timer_Get_Micro_Seconds>
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d4da2:	6823      	ldr	r3, [r4, #0]
   d4da4:	1ac0      	subs	r0, r0, r3
   d4da6:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4daa:	4298      	cmp	r0, r3
   d4dac:	d920      	bls.n	d4df0 <loop+0x150>
   d4dae:	f000 fe03 	bl	d59b8 <HAL_Timer_Get_Micro_Seconds>
    otherReadTimer = micros();
   d4db2:	6020      	str	r0, [r4, #0]
    switch (readTurnCounter){ //Take turns reading from each line
   d4db4:	4c7b      	ldr	r4, [pc, #492]	; (d4fa4 <loop+0x304>)
   d4db6:	7823      	ldrb	r3, [r4, #0]
   d4db8:	2b02      	cmp	r3, #2
   d4dba:	d079      	beq.n	d4eb0 <loop+0x210>
   d4dbc:	2b03      	cmp	r3, #3
   d4dbe:	f000 808c 	beq.w	d4eda <loop+0x23a>
   d4dc2:	2b01      	cmp	r3, #1
   d4dc4:	d114      	bne.n	d4df0 <loop+0x150>
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d4dc6:	4878      	ldr	r0, [pc, #480]	; (d4fa8 <loop+0x308>)
   d4dc8:	2100      	movs	r1, #0
   d4dca:	f000 fa5c 	bl	d5286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp1 = avg_tp1 + tp1;
   d4dce:	4a77      	ldr	r2, [pc, #476]	; (d4fac <loop+0x30c>)
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d4dd0:	4b77      	ldr	r3, [pc, #476]	; (d4fb0 <loop+0x310>)
   d4dd2:	6018      	str	r0, [r3, #0]
        avg_tp1 = avg_tp1 + tp1;
   d4dd4:	6813      	ldr	r3, [r2, #0]
   d4dd6:	4403      	add	r3, r0
   d4dd8:	6013      	str	r3, [r2, #0]
        if(tp1 > max_tp1){
   d4dda:	4b76      	ldr	r3, [pc, #472]	; (d4fb4 <loop+0x314>)
   d4ddc:	681a      	ldr	r2, [r3, #0]
   d4dde:	4290      	cmp	r0, r2
        tp1ReadCounter++;
   d4de0:	4a75      	ldr	r2, [pc, #468]	; (d4fb8 <loop+0x318>)
          max_tp1 = tp1;
   d4de2:	bfc8      	it	gt
   d4de4:	6018      	strgt	r0, [r3, #0]
        tp1ReadCounter++;
   d4de6:	6813      	ldr	r3, [r2, #0]
   d4de8:	3301      	adds	r3, #1
   d4dea:	6013      	str	r3, [r2, #0]
        readTurnCounter = 2;
   d4dec:	2302      	movs	r3, #2
        readTurnCounter = 1;
   d4dee:	7023      	strb	r3, [r4, #0]
  if((millis() - reportTimer) >= 1001){
   d4df0:	4c72      	ldr	r4, [pc, #456]	; (d4fbc <loop+0x31c>)
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4df2:	f000 fde9 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
   d4df6:	6823      	ldr	r3, [r4, #0]
   d4df8:	1ac0      	subs	r0, r0, r3
   d4dfa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4dfe:	d922      	bls.n	d4e46 <loop+0x1a6>
   d4e00:	f000 fde2 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
    reportTimer = millis();
   d4e04:	6020      	str	r0, [r4, #0]
    switch (reportTurnCounter){
   d4e06:	4c6e      	ldr	r4, [pc, #440]	; (d4fc0 <loop+0x320>)
   d4e08:	7823      	ldrb	r3, [r4, #0]
   d4e0a:	2b02      	cmp	r3, #2
   d4e0c:	d07a      	beq.n	d4f04 <loop+0x264>
   d4e0e:	2b03      	cmp	r3, #3
   d4e10:	f000 808f 	beq.w	d4f32 <loop+0x292>
   d4e14:	2b01      	cmp	r3, #1
   d4e16:	d116      	bne.n	d4e46 <loop+0x1a6>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e18:	f000 ff54 	bl	d5cc4 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4e1c:	b168      	cbz	r0, d4e3a <loop+0x19a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e1e:	4b69      	ldr	r3, [pc, #420]	; (d4fc4 <loop+0x324>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e20:	4a54      	ldr	r2, [pc, #336]	; (d4f74 <loop+0x2d4>)
   d4e22:	781b      	ldrb	r3, [r3, #0]
   d4e24:	f88d 3000 	strb.w	r3, [sp]
   d4e28:	a803      	add	r0, sp, #12
   d4e2a:	6812      	ldr	r2, [r2, #0]
   d4e2c:	4966      	ldr	r1, [pc, #408]	; (d4fc8 <loop+0x328>)
   d4e2e:	233c      	movs	r3, #60	; 0x3c
   d4e30:	f001 f96c 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e34:	a804      	add	r0, sp, #16
   d4e36:	f7ff ff1d 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        eda1Report = "";
   d4e3a:	4964      	ldr	r1, [pc, #400]	; (d4fcc <loop+0x32c>)
   d4e3c:	484d      	ldr	r0, [pc, #308]	; (d4f74 <loop+0x2d4>)
   d4e3e:	f001 fdfb 	bl	d6a38 <_ZN6StringaSEPKc>
        reportTurnCounter = 2;
   d4e42:	2302      	movs	r3, #2
        reportTurnCounter = 1;
   d4e44:	7023      	strb	r3, [r4, #0]
}
   d4e46:	b011      	add	sp, #68	; 0x44
   d4e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if((edaTurnCounter == 2) && ((millis()-edaReadTimer) >= 15)){
   d4e4c:	782c      	ldrb	r4, [r5, #0]
   d4e4e:	2c02      	cmp	r4, #2
   d4e50:	f47f af5e 	bne.w	d4d10 <loop+0x70>
   d4e54:	4e44      	ldr	r6, [pc, #272]	; (d4f68 <loop+0x2c8>)
   d4e56:	f000 fdb7 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
   d4e5a:	6833      	ldr	r3, [r6, #0]
   d4e5c:	1ac0      	subs	r0, r0, r3
   d4e5e:	280e      	cmp	r0, #14
   d4e60:	f67f af56 	bls.w	d4d10 <loop+0x70>
   d4e64:	f000 fdb0 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
    eda2 = ads_eda.readADC_SingleEnded(2);
   d4e68:	4621      	mov	r1, r4
    edaReadTimer = millis();
   d4e6a:	6030      	str	r0, [r6, #0]
    eda2 = ads_eda.readADC_SingleEnded(2);
   d4e6c:	483f      	ldr	r0, [pc, #252]	; (d4f6c <loop+0x2cc>)
   d4e6e:	4c58      	ldr	r4, [pc, #352]	; (d4fd0 <loop+0x330>)
   d4e70:	f000 fa09 	bl	d5286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
	StringSumHelper(const String &s) : String(s) {}
   d4e74:	4957      	ldr	r1, [pc, #348]	; (d4fd4 <loop+0x334>)
   d4e76:	6020      	str	r0, [r4, #0]
   d4e78:	a807      	add	r0, sp, #28
   d4e7a:	f001 fdca 	bl	d6a12 <_ZN6StringC1ERKS_>
    eda2Report = eda2Report + String(eda2) + ','; //EDA2
   d4e7e:	220a      	movs	r2, #10
   d4e80:	6821      	ldr	r1, [r4, #0]
   d4e82:	a803      	add	r0, sp, #12
   d4e84:	f001 fdea 	bl	d6a5c <_ZN6StringC1Eih>
   d4e88:	a903      	add	r1, sp, #12
   d4e8a:	a807      	add	r0, sp, #28
   d4e8c:	f001 fe1d 	bl	d6aca <_ZplRK15StringSumHelperRK6String>
   d4e90:	212c      	movs	r1, #44	; 0x2c
   d4e92:	f001 fe26 	bl	d6ae2 <_ZplRK15StringSumHelperc>
   d4e96:	4601      	mov	r1, r0
   d4e98:	484e      	ldr	r0, [pc, #312]	; (d4fd4 <loop+0x334>)
   d4e9a:	f001 fdab 	bl	d69f4 <_ZN6StringaSERKS_>
   d4e9e:	a803      	add	r0, sp, #12
   d4ea0:	f001 fd2c 	bl	d68fc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4ea4:	a807      	add	r0, sp, #28
   d4ea6:	f001 fd29 	bl	d68fc <_ZN6StringD1Ev>
    edaTurnCounter = 1;
   d4eaa:	2301      	movs	r3, #1
   d4eac:	702b      	strb	r3, [r5, #0]
   d4eae:	e72f      	b.n	d4d10 <loop+0x70>
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d4eb0:	483d      	ldr	r0, [pc, #244]	; (d4fa8 <loop+0x308>)
   d4eb2:	2101      	movs	r1, #1
   d4eb4:	f000 f9e7 	bl	d5286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp2 = avg_tp2 + tp2;
   d4eb8:	4a47      	ldr	r2, [pc, #284]	; (d4fd8 <loop+0x338>)
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d4eba:	4b48      	ldr	r3, [pc, #288]	; (d4fdc <loop+0x33c>)
   d4ebc:	6018      	str	r0, [r3, #0]
        avg_tp2 = avg_tp2 + tp2;
   d4ebe:	6813      	ldr	r3, [r2, #0]
   d4ec0:	4403      	add	r3, r0
   d4ec2:	6013      	str	r3, [r2, #0]
        if(tp2 > max_tp2){
   d4ec4:	4b46      	ldr	r3, [pc, #280]	; (d4fe0 <loop+0x340>)
   d4ec6:	681a      	ldr	r2, [r3, #0]
   d4ec8:	4290      	cmp	r0, r2
        tp2ReadCounter++;
   d4eca:	4a46      	ldr	r2, [pc, #280]	; (d4fe4 <loop+0x344>)
          max_tp2 = tp2;
   d4ecc:	bfc8      	it	gt
   d4ece:	6018      	strgt	r0, [r3, #0]
        tp2ReadCounter++;
   d4ed0:	6813      	ldr	r3, [r2, #0]
   d4ed2:	3301      	adds	r3, #1
   d4ed4:	6013      	str	r3, [r2, #0]
        readTurnCounter = 3;
   d4ed6:	2303      	movs	r3, #3
   d4ed8:	e789      	b.n	d4dee <loop+0x14e>
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d4eda:	4833      	ldr	r0, [pc, #204]	; (d4fa8 <loop+0x308>)
   d4edc:	2102      	movs	r1, #2
   d4ede:	f000 f9d2 	bl	d5286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_fsr = avg_fsr + fsr;
   d4ee2:	4a41      	ldr	r2, [pc, #260]	; (d4fe8 <loop+0x348>)
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d4ee4:	4b41      	ldr	r3, [pc, #260]	; (d4fec <loop+0x34c>)
   d4ee6:	6018      	str	r0, [r3, #0]
        avg_fsr = avg_fsr + fsr;
   d4ee8:	6813      	ldr	r3, [r2, #0]
   d4eea:	4403      	add	r3, r0
   d4eec:	6013      	str	r3, [r2, #0]
        if(fsr > max_fsr){
   d4eee:	4b40      	ldr	r3, [pc, #256]	; (d4ff0 <loop+0x350>)
   d4ef0:	681a      	ldr	r2, [r3, #0]
   d4ef2:	4290      	cmp	r0, r2
        fsrReadCounter++;
   d4ef4:	4a3f      	ldr	r2, [pc, #252]	; (d4ff4 <loop+0x354>)
          max_fsr = fsr;
   d4ef6:	bfc8      	it	gt
   d4ef8:	6018      	strgt	r0, [r3, #0]
        fsrReadCounter++;
   d4efa:	6813      	ldr	r3, [r2, #0]
   d4efc:	3301      	adds	r3, #1
   d4efe:	6013      	str	r3, [r2, #0]
        readTurnCounter = 1;
   d4f00:	2301      	movs	r3, #1
   d4f02:	e774      	b.n	d4dee <loop+0x14e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f04:	f000 fede 	bl	d5cc4 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4f08:	b168      	cbz	r0, d4f26 <loop+0x286>
   d4f0a:	4b2e      	ldr	r3, [pc, #184]	; (d4fc4 <loop+0x324>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4f0c:	4a31      	ldr	r2, [pc, #196]	; (d4fd4 <loop+0x334>)
   d4f0e:	781b      	ldrb	r3, [r3, #0]
   d4f10:	f88d 3000 	strb.w	r3, [sp]
   d4f14:	a803      	add	r0, sp, #12
   d4f16:	6812      	ldr	r2, [r2, #0]
   d4f18:	4937      	ldr	r1, [pc, #220]	; (d4ff8 <loop+0x358>)
   d4f1a:	233c      	movs	r3, #60	; 0x3c
   d4f1c:	f001 f8f6 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f20:	a804      	add	r0, sp, #16
   d4f22:	f7ff fea7 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        eda2Report = "";
   d4f26:	4929      	ldr	r1, [pc, #164]	; (d4fcc <loop+0x32c>)
   d4f28:	482a      	ldr	r0, [pc, #168]	; (d4fd4 <loop+0x334>)
   d4f2a:	f001 fd85 	bl	d6a38 <_ZN6StringaSEPKc>
        reportTurnCounter = 3;
   d4f2e:	2303      	movs	r3, #3
   d4f30:	e788      	b.n	d4e44 <loop+0x1a4>
        computeSummaryReport();
   d4f32:	f7ff fcfd 	bl	d4930 <_Z20computeSummaryReportv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f36:	f000 fec5 	bl	d5cc4 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4f3a:	b168      	cbz	r0, d4f58 <loop+0x2b8>
   d4f3c:	4b21      	ldr	r3, [pc, #132]	; (d4fc4 <loop+0x324>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4f3e:	4a2f      	ldr	r2, [pc, #188]	; (d4ffc <loop+0x35c>)
   d4f40:	781b      	ldrb	r3, [r3, #0]
   d4f42:	f88d 3000 	strb.w	r3, [sp]
   d4f46:	a803      	add	r0, sp, #12
   d4f48:	6812      	ldr	r2, [r2, #0]
   d4f4a:	492d      	ldr	r1, [pc, #180]	; (d5000 <loop+0x360>)
   d4f4c:	233c      	movs	r3, #60	; 0x3c
   d4f4e:	f001 f8dd 	bl	d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4f52:	a804      	add	r0, sp, #16
   d4f54:	f7ff fe8e 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        summaryReport = "";
   d4f58:	491c      	ldr	r1, [pc, #112]	; (d4fcc <loop+0x32c>)
   d4f5a:	4828      	ldr	r0, [pc, #160]	; (d4ffc <loop+0x35c>)
   d4f5c:	f001 fd6c 	bl	d6a38 <_ZN6StringaSEPKc>
        reportTurnCounter = 1;
   d4f60:	2301      	movs	r3, #1
   d4f62:	e76f      	b.n	d4e44 <loop+0x1a4>
   d4f64:	2003e3c8 	.word	0x2003e3c8
   d4f68:	2003e4f8 	.word	0x2003e4f8
   d4f6c:	2003e48c 	.word	0x2003e48c
   d4f70:	2003e4d0 	.word	0x2003e4d0
   d4f74:	2003e4d4 	.word	0x2003e4d4
   d4f78:	2003e444 	.word	0x2003e444
   d4f7c:	2003e480 	.word	0x2003e480
   d4f80:	2003e484 	.word	0x2003e484
   d4f84:	2003e488 	.word	0x2003e488
   d4f88:	2003e504 	.word	0x2003e504
   d4f8c:	2003e508 	.word	0x2003e508
   d4f90:	2003e50c 	.word	0x2003e50c
   d4f94:	2003e4cc 	.word	0x2003e4cc
   d4f98:	2003e4c8 	.word	0x2003e4c8
   d4f9c:	2003e55c 	.word	0x2003e55c
   d4fa0:	2003e590 	.word	0x2003e590
   d4fa4:	2003e3c9 	.word	0x2003e3c9
   d4fa8:	2003e492 	.word	0x2003e492
   d4fac:	2003e4c0 	.word	0x2003e4c0
   d4fb0:	2003e580 	.word	0x2003e580
   d4fb4:	2003e554 	.word	0x2003e554
   d4fb8:	2003e584 	.word	0x2003e584
   d4fbc:	2003e564 	.word	0x2003e564
   d4fc0:	2003e3ca 	.word	0x2003e3ca
   d4fc4:	2003e47c 	.word	0x2003e47c
   d4fc8:	000d94f4 	.word	0x000d94f4
   d4fcc:	000d9533 	.word	0x000d9533
   d4fd0:	2003e4e4 	.word	0x2003e4e4
   d4fd4:	2003e4e8 	.word	0x2003e4e8
   d4fd8:	2003e4c4 	.word	0x2003e4c4
   d4fdc:	2003e588 	.word	0x2003e588
   d4fe0:	2003e558 	.word	0x2003e558
   d4fe4:	2003e58c 	.word	0x2003e58c
   d4fe8:	2003e4a8 	.word	0x2003e4a8
   d4fec:	2003e4fc 	.word	0x2003e4fc
   d4ff0:	2003e53c 	.word	0x2003e53c
   d4ff4:	2003e500 	.word	0x2003e500
   d4ff8:	000d94f9 	.word	0x000d94f9
   d4ffc:	2003e568 	.word	0x2003e568
   d5000:	000d94fe 	.word	0x000d94fe
   d5004:	2003e578 	.word	0x2003e578
   d5008:	2003e57c 	.word	0x2003e57c

000d500c <_GLOBAL__sub_I_reportTurnCounter>:
      delay(500);
    }else{
      initialized = true;
    }
  }
   d500c:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d500e:	4b18      	ldr	r3, [pc, #96]	; (d5070 <_GLOBAL__sub_I_reportTurnCounter+0x64>)
String eda1Report = "";
   d5010:	4d18      	ldr	r5, [pc, #96]	; (d5074 <_GLOBAL__sub_I_reportTurnCounter+0x68>)
   d5012:	4e19      	ldr	r6, [pc, #100]	; (d5078 <_GLOBAL__sub_I_reportTurnCounter+0x6c>)
   d5014:	4c19      	ldr	r4, [pc, #100]	; (d507c <_GLOBAL__sub_I_reportTurnCounter+0x70>)
   d5016:	2201      	movs	r2, #1
   d5018:	701a      	strb	r2, [r3, #0]
   d501a:	4629      	mov	r1, r5
   d501c:	4630      	mov	r0, r6
   d501e:	f001 fcb8 	bl	d6992 <_ZN6StringC1EPKc>
   d5022:	4630      	mov	r0, r6
String eda2Report = "";
   d5024:	4e16      	ldr	r6, [pc, #88]	; (d5080 <_GLOBAL__sub_I_reportTurnCounter+0x74>)
String eda1Report = "";
   d5026:	4a17      	ldr	r2, [pc, #92]	; (d5084 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d5028:	4621      	mov	r1, r4
   d502a:	f002 fa21 	bl	d7470 <__aeabi_atexit>
String eda2Report = "";
   d502e:	4629      	mov	r1, r5
   d5030:	4630      	mov	r0, r6
   d5032:	f001 fcae 	bl	d6992 <_ZN6StringC1EPKc>
   d5036:	4630      	mov	r0, r6
String summaryReport = "";
   d5038:	4e13      	ldr	r6, [pc, #76]	; (d5088 <_GLOBAL__sub_I_reportTurnCounter+0x7c>)
String eda2Report = "";
   d503a:	4a12      	ldr	r2, [pc, #72]	; (d5084 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d503c:	4621      	mov	r1, r4
   d503e:	f002 fa17 	bl	d7470 <__aeabi_atexit>
String summaryReport = "";
   d5042:	4629      	mov	r1, r5
   d5044:	4630      	mov	r0, r6
   d5046:	f001 fca4 	bl	d6992 <_ZN6StringC1EPKc>
   d504a:	4621      	mov	r1, r4
   d504c:	4a0d      	ldr	r2, [pc, #52]	; (d5084 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d504e:	4630      	mov	r0, r6
   d5050:	f002 fa0e 	bl	d7470 <__aeabi_atexit>
ICM_20948_I2C ICM;
   d5054:	480d      	ldr	r0, [pc, #52]	; (d508c <_GLOBAL__sub_I_reportTurnCounter+0x80>)
   d5056:	f000 fbb7 	bl	d57c8 <_ZN13ICM_20948_I2CC1Ev>
Adafruit_ADS1115 ads_other(0x48);
   d505a:	2148      	movs	r1, #72	; 0x48
   d505c:	480c      	ldr	r0, [pc, #48]	; (d5090 <_GLOBAL__sub_I_reportTurnCounter+0x84>)
   d505e:	f000 f902 	bl	d5266 <_ZN16Adafruit_ADS1115C1Eh>
   d5062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_ADS1115 ads_eda(0x49);
   d5066:	480b      	ldr	r0, [pc, #44]	; (d5094 <_GLOBAL__sub_I_reportTurnCounter+0x88>)
   d5068:	2149      	movs	r1, #73	; 0x49
   d506a:	f000 b8fc 	b.w	d5266 <_ZN16Adafruit_ADS1115C1Eh>
   d506e:	bf00      	nop
   d5070:	2003e47c 	.word	0x2003e47c
   d5074:	000d9533 	.word	0x000d9533
   d5078:	2003e4d4 	.word	0x2003e4d4
   d507c:	000d68fd 	.word	0x000d68fd
   d5080:	2003e4e8 	.word	0x2003e4e8
   d5084:	2003e440 	.word	0x2003e440
   d5088:	2003e568 	.word	0x2003e568
   d508c:	2003e444 	.word	0x2003e444
   d5090:	2003e492 	.word	0x2003e492
   d5094:	2003e48c 	.word	0x2003e48c

000d5098 <_Z13initializeIMUv>:
void initializeIMU(){
   d5098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ICM.begin( Wire, AD0_VAL );
   d509a:	4d14      	ldr	r5, [pc, #80]	; (d50ec <_Z13initializeIMUv+0x54>)
    Serial.print( F("Initialization of the sensor returned: ") );
   d509c:	4e14      	ldr	r6, [pc, #80]	; (d50f0 <_Z13initializeIMUv+0x58>)
    Serial.println( ICM.statusString() );
   d509e:	1d2f      	adds	r7, r5, #4
    ICM.begin( Wire, AD0_VAL );
   d50a0:	f002 f850 	bl	d7144 <_Z19__fetch_global_Wirev>
   d50a4:	23ff      	movs	r3, #255	; 0xff
   d50a6:	2200      	movs	r2, #0
   d50a8:	4601      	mov	r1, r0
   d50aa:	4810      	ldr	r0, [pc, #64]	; (d50ec <_Z13initializeIMUv+0x54>)
   d50ac:	f000 fc36 	bl	d591c <_ZN13ICM_20948_I2C5beginER7TwoWirebh>
    Serial.print( F("Initialization of the sensor returned: ") );
   d50b0:	f001 fe64 	bl	d6d7c <_Z16_fetch_usbserialv>
   d50b4:	4631      	mov	r1, r6
   d50b6:	f001 fbb6 	bl	d6826 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println( ICM.statusString() );
   d50ba:	f001 fe5f 	bl	d6d7c <_Z16_fetch_usbserialv>
   d50be:	2108      	movs	r1, #8
   d50c0:	4604      	mov	r4, r0
   d50c2:	4638      	mov	r0, r7
   d50c4:	f000 faee 	bl	d56a4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>
   d50c8:	4601      	mov	r1, r0
   d50ca:	4620      	mov	r0, r4
   d50cc:	f001 fbbb 	bl	d6846 <_ZN5Print7printlnEPKc>
    if( ICM.status != ICM_20948_Stat_Ok ){
   d50d0:	f895 3020 	ldrb.w	r3, [r5, #32]
   d50d4:	b14b      	cbz	r3, d50ea <_Z13initializeIMUv+0x52>
      Serial.println( "Trying again..." );
   d50d6:	f001 fe51 	bl	d6d7c <_Z16_fetch_usbserialv>
   d50da:	4906      	ldr	r1, [pc, #24]	; (d50f4 <_Z13initializeIMUv+0x5c>)
   d50dc:	f001 fbb3 	bl	d6846 <_ZN5Print7printlnEPKc>
      delay(500);
   d50e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d50e4:	f000 fe96 	bl	d5e14 <delay>
   d50e8:	e7da      	b.n	d50a0 <_Z13initializeIMUv+0x8>
   d50ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d50ec:	2003e444 	.word	0x2003e444
   d50f0:	000d950c 	.word	0x000d950c
   d50f4:	000d9534 	.word	0x000d9534

000d50f8 <setup>:
void setup() {
   d50f8:	b508      	push	{r3, lr}
  Serial.begin(115200);
   d50fa:	f001 fe3f 	bl	d6d7c <_Z16_fetch_usbserialv>
   d50fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d5102:	f001 fe29 	bl	d6d58 <_ZN9USBSerial5beginEl>
  while(!Serial){}
   d5106:	f001 fe39 	bl	d6d7c <_Z16_fetch_usbserialv>
   d510a:	f001 fe2c 	bl	d6d66 <_ZN9USBSerialcvbEv>
   d510e:	2800      	cmp	r0, #0
   d5110:	d0f9      	beq.n	d5106 <setup+0xe>
  Wire.begin();
   d5112:	f002 f817 	bl	d7144 <_Z19__fetch_global_Wirev>
   d5116:	f001 f9ef 	bl	d64f8 <_ZN7TwoWire5beginEv>
  Wire.setClock(400000);  //The IMU is capped at the 400khz level
   d511a:	f002 f813 	bl	d7144 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d511e:	4926      	ldr	r1, [pc, #152]	; (d51b8 <setup+0xc0>)
   d5120:	f001 f9e6 	bl	d64f0 <_ZN7TwoWire8setSpeedEm>
  initializeIMU();  // ***This will become blocking when we add the Rev3 sleep code ***
   d5124:	f7ff ffb8 	bl	d5098 <_Z13initializeIMUv>
  pinMode(TC1,INPUT);  //Local temp compensation PTC resistors from the thermopile assemblies
   d5128:	2100      	movs	r1, #0
   d512a:	2012      	movs	r0, #18
   d512c:	f001 ffb0 	bl	d7090 <pinMode>
  pinMode(TC2,INPUT);
   d5130:	2100      	movs	r1, #0
   d5132:	2011      	movs	r0, #17
   d5134:	f001 ffac 	bl	d7090 <pinMode>
  pinMode(eda1_out,OUTPUT);  //To send voltage out into the hand
   d5138:	2101      	movs	r1, #1
   d513a:	2005      	movs	r0, #5
   d513c:	f001 ffa8 	bl	d7090 <pinMode>
  pinMode(eda2_out,OUTPUT);
   d5140:	2101      	movs	r1, #1
   d5142:	2004      	movs	r0, #4
   d5144:	f001 ffa4 	bl	d7090 <pinMode>
  pinMode(led_on,OUTPUT);  //To turn the pulse LED on
   d5148:	2101      	movs	r1, #1
   d514a:	2007      	movs	r0, #7
   d514c:	f001 ffa0 	bl	d7090 <pinMode>
  pinMode(slp,OUTPUT);  //To turn off much of the board functionality when not in use
   d5150:	2101      	movs	r1, #1
   d5152:	2008      	movs	r0, #8
   d5154:	f001 ff9c 	bl	d7090 <pinMode>
  digitalWrite(eda1_out,HIGH);  //On constant for now, later only have this on sometimes to prevent shorts
   d5158:	2101      	movs	r1, #1
   d515a:	2005      	movs	r0, #5
   d515c:	f001 ffa9 	bl	d70b2 <digitalWrite>
  digitalWrite(eda2_out,HIGH);
   d5160:	2101      	movs	r1, #1
   d5162:	2004      	movs	r0, #4
   d5164:	f001 ffa5 	bl	d70b2 <digitalWrite>
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d5168:	4814      	ldr	r0, [pc, #80]	; (d51bc <setup+0xc4>)
   d516a:	2100      	movs	r1, #0
   d516c:	f000 f889 	bl	d5282 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d5170:	f44f 7100 	mov.w	r1, #512	; 0x200
   d5174:	4812      	ldr	r0, [pc, #72]	; (d51c0 <setup+0xc8>)
   d5176:	f000 f884 	bl	d5282 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_other.begin();
   d517a:	4810      	ldr	r0, [pc, #64]	; (d51bc <setup+0xc4>)
   d517c:	f000 f87a 	bl	d5274 <_ZN16Adafruit_ADS10155beginEv>
  ads_eda.begin();
   d5180:	480f      	ldr	r0, [pc, #60]	; (d51c0 <setup+0xc8>)
   d5182:	f000 f877 	bl	d5274 <_ZN16Adafruit_ADS10155beginEv>
  digitalWrite(led_on,HIGH);  //For now this is on all the time.  Doesn't seem to work well with the library if partiall off.
   d5186:	2101      	movs	r1, #1
   d5188:	2007      	movs	r0, #7
   d518a:	f001 ff92 	bl	d70b2 <digitalWrite>
  PulseSensorAmped.attach(PULSE_SIGNAL_PIN);
   d518e:	210f      	movs	r1, #15
   d5190:	480c      	ldr	r0, [pc, #48]	; (d51c4 <setup+0xcc>)
   d5192:	f000 f8ed 	bl	d5370 <_ZN21PulseSensorAmpedClass6attachEi>
  PulseSensorAmped.start();  //Start reading heart beats
   d5196:	480b      	ldr	r0, [pc, #44]	; (d51c4 <setup+0xcc>)
   d5198:	f000 f8f2 	bl	d5380 <_ZN21PulseSensorAmpedClass5startEv>
   d519c:	f000 fc14 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
  reportTimer = millis();  //Timer to avoid sending reports more than once per second (Particle cap)
   d51a0:	4b09      	ldr	r3, [pc, #36]	; (d51c8 <setup+0xd0>)
   d51a2:	6018      	str	r0, [r3, #0]
   d51a4:	f000 fc10 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
  edaReadTimer = millis();  //Timer to rate limit EDA readings to the Particle publishing size cap (622 bytes)
   d51a8:	4b08      	ldr	r3, [pc, #32]	; (d51cc <setup+0xd4>)
   d51aa:	6018      	str	r0, [r3, #0]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d51ac:	f000 fc04 	bl	d59b8 <HAL_Timer_Get_Micro_Seconds>
  otherReadTimer = micros();  //Timer to rate limit the other ADS signals to the max rate of the ADS1115
   d51b0:	4b07      	ldr	r3, [pc, #28]	; (d51d0 <setup+0xd8>)
   d51b2:	6018      	str	r0, [r3, #0]
}
   d51b4:	bd08      	pop	{r3, pc}
   d51b6:	bf00      	nop
   d51b8:	00061a80 	.word	0x00061a80
   d51bc:	2003e492 	.word	0x2003e492
   d51c0:	2003e48c 	.word	0x2003e48c
   d51c4:	2003e590 	.word	0x2003e590
   d51c8:	2003e564 	.word	0x2003e564
   d51cc:	2003e4f8 	.word	0x2003e4f8
   d51d0:	2003e55c 	.word	0x2003e55c

000d51d4 <_ZL8i2cwriteh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
    @param x byte to write
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
   d51d4:	b507      	push	{r0, r1, r2, lr}
   d51d6:	9001      	str	r0, [sp, #4]
#if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d51d8:	f001 ffb4 	bl	d7144 <_Z19__fetch_global_Wirev>
   d51dc:	6803      	ldr	r3, [r0, #0]
   d51de:	9901      	ldr	r1, [sp, #4]
   d51e0:	689b      	ldr	r3, [r3, #8]
#else
  Wire.send(x);
#endif
}
   d51e2:	b003      	add	sp, #12
   d51e4:	f85d eb04 	ldr.w	lr, [sp], #4
  Wire.write((uint8_t)x);
   d51e8:	4718      	bx	r3

000d51ea <_ZL7i2creadv>:
static uint8_t i2cread(void) {
   d51ea:	b508      	push	{r3, lr}
  return Wire.read();
   d51ec:	f001 ffaa 	bl	d7144 <_Z19__fetch_global_Wirev>
   d51f0:	6803      	ldr	r3, [r0, #0]
   d51f2:	695b      	ldr	r3, [r3, #20]
   d51f4:	4798      	blx	r3
}
   d51f6:	b2c0      	uxtb	r0, r0
   d51f8:	bd08      	pop	{r3, pc}

000d51fa <_ZL13writeRegisterhht>:
    @param i2cAddress I2C address of device
    @param reg register address to write to
    @param value value to write to register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
   d51fa:	b570      	push	{r4, r5, r6, lr}
   d51fc:	4606      	mov	r6, r0
   d51fe:	4614      	mov	r4, r2
   d5200:	460d      	mov	r5, r1
  Wire.beginTransmission(i2cAddress);
   d5202:	f001 ff9f 	bl	d7144 <_Z19__fetch_global_Wirev>
   d5206:	4631      	mov	r1, r6
   d5208:	f001 f9a8 	bl	d655c <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
   d520c:	4628      	mov	r0, r5
   d520e:	f7ff ffe1 	bl	d51d4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value >> 8));
   d5212:	0a20      	lsrs	r0, r4, #8
   d5214:	f7ff ffde 	bl	d51d4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
   d5218:	b2e0      	uxtb	r0, r4
   d521a:	f7ff ffdb 	bl	d51d4 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d521e:	f001 ff91 	bl	d7144 <_Z19__fetch_global_Wirev>
}
   d5222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d5226:	f001 b9a1 	b.w	d656c <_ZN7TwoWire15endTransmissionEv>

000d522a <_ZL12readRegisterhh.constprop.0>:
    @param i2cAddress I2C address of device
    @param reg register address to read from
    @return 16 bit register value read
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
   d522a:	b513      	push	{r0, r1, r4, lr}
   d522c:	9001      	str	r0, [sp, #4]
  Wire.beginTransmission(i2cAddress);
   d522e:	f001 ff89 	bl	d7144 <_Z19__fetch_global_Wirev>
   d5232:	9901      	ldr	r1, [sp, #4]
   d5234:	f001 f992 	bl	d655c <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(reg);
   d5238:	2000      	movs	r0, #0
   d523a:	f7ff ffcb 	bl	d51d4 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d523e:	f001 ff81 	bl	d7144 <_Z19__fetch_global_Wirev>
   d5242:	f001 f993 	bl	d656c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
   d5246:	f001 ff7d 	bl	d7144 <_Z19__fetch_global_Wirev>
   d524a:	9901      	ldr	r1, [sp, #4]
   d524c:	2202      	movs	r2, #2
   d524e:	f001 f982 	bl	d6556 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());
   d5252:	f7ff ffca 	bl	d51ea <_ZL7i2creadv>
   d5256:	4604      	mov	r4, r0
   d5258:	f7ff ffc7 	bl	d51ea <_ZL7i2creadv>
   d525c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
   d5260:	b280      	uxth	r0, r0
   d5262:	b002      	add	sp, #8
   d5264:	bd10      	pop	{r4, pc}

000d5266 <_ZN16Adafruit_ADS1115C1Eh>:
/**************************************************************************/
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
  m_conversionDelay = ADS1015_CONVERSIONDELAY;
  m_bitShift = 4;
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5266:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
    @param i2cAddress I2C address of device
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
   d5268:	7001      	strb	r1, [r0, #0]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d526a:	2102      	movs	r1, #2
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d526c:	8082      	strh	r2, [r0, #4]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d526e:	7041      	strb	r1, [r0, #1]
  m_bitShift = 0;
   d5270:	7082      	strb	r2, [r0, #2]
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d5272:	4770      	bx	lr

000d5274 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() { Wire.begin(); }
   d5274:	b508      	push	{r3, lr}
   d5276:	f001 ff65 	bl	d7144 <_Z19__fetch_global_Wirev>
   d527a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d527e:	f001 b93b 	b.w	d64f8 <_ZN7TwoWire5beginEv>

000d5282 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
/*!
    @brief  Sets the gain and input voltage range
    @param gain gain setting to use
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain) { m_gain = gain; }
   d5282:	8081      	strh	r1, [r0, #4]
   d5284:	4770      	bx	lr

000d5286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
    @param channel ADC channel to read
    @return the ADC reading
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3) {
   d5286:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
   d5288:	b510      	push	{r4, lr}
   d528a:	4604      	mov	r4, r0
  if (channel > 3) {
   d528c:	d822      	bhi.n	d52d4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel) {
   d528e:	2902      	cmp	r1, #2
  config |= m_gain;
   d5290:	8882      	ldrh	r2, [r0, #4]
  switch (channel) {
   d5292:	d019      	beq.n	d52c8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
   d5294:	2903      	cmp	r1, #3
   d5296:	d01a      	beq.n	d52ce <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
   d5298:	2901      	cmp	r1, #1
  case (0):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
   d529a:	bf14      	ite	ne
   d529c:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
    break;
  case (1):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d52a0:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
    break;
  case (2):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    break;
  case (3):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d52a4:	f042 0243 	orr.w	r2, r2, #67	; 0x43

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d52a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   d52ac:	2101      	movs	r1, #1
   d52ae:	7820      	ldrb	r0, [r4, #0]
   d52b0:	f7ff ffa3 	bl	d51fa <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d52b4:	7860      	ldrb	r0, [r4, #1]
   d52b6:	f000 fdad 	bl	d5e14 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d52ba:	7820      	ldrb	r0, [r4, #0]
   d52bc:	f7ff ffb5 	bl	d522a <_ZL12readRegisterhh.constprop.0>
   d52c0:	78a3      	ldrb	r3, [r4, #2]
   d52c2:	4118      	asrs	r0, r3
   d52c4:	b280      	uxth	r0, r0
}
   d52c6:	bd10      	pop	{r4, pc}
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d52c8:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
   d52cc:	e7ea      	b.n	d52a4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d52ce:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
   d52d2:	e7e7      	b.n	d52a4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
   d52d4:	2000      	movs	r0, #0
   d52d6:	e7f6      	b.n	d52c6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

000d52d8 <_Z5timerj>:
    // Timer Event 
    //if (NRF_TIMER4->EVENTS_COMPARE[0] != 0)
    PulseSensorAmped.update();
}

void timer(unsigned ms) {
   d52d8:	b5f0      	push	{r4, r5, r6, r7, lr}

    // Set priority as high as possible.
    timer_config.interrupt_priority = 3;

    // Init the timer
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d52da:	4c21      	ldr	r4, [pc, #132]	; (d5360 <_Z5timerj+0x88>)
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d52dc:	4921      	ldr	r1, [pc, #132]	; (d5364 <_Z5timerj+0x8c>)
void timer(unsigned ms) {
   d52de:	b085      	sub	sp, #20
   d52e0:	4605      	mov	r5, r0
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d52e2:	2201      	movs	r2, #1
   d52e4:	201b      	movs	r0, #27
   d52e6:	f001 f944 	bl	d6572 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d52ea:	2600      	movs	r6, #0
   d52ec:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d52f0:	4a1d      	ldr	r2, [pc, #116]	; (d5368 <_Z5timerj+0x90>)
   d52f2:	a902      	add	r1, sp, #8
   d52f4:	4620      	mov	r0, r4
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d52f6:	e9cd 3602 	strd	r3, r6, [sp, #8]
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d52fa:	f001 ff73 	bl	d71e4 <nrfx_timer_init>
    // if( err_code != NRF_SUCCESS ) Log.error("nrfx_timer_error");

    // Disable and clear the timer.
    nrfx_timer_disable(&timer4);
   d52fe:	4620      	mov	r0, r4
   d5300:	f002 f84a 	bl	d7398 <nrfx_timer_disable>
    nrfx_timer_clear(&timer4);
   d5304:	4620      	mov	r0, r4
   d5306:	f002 f861 	bl	d73cc <nrfx_timer_clear>

    // Calculate the ticks for 50 uS
    uint32_t ticks = nrfx_timer_us_to_ticks(&timer4,ms*1000);
   d530a:	6823      	ldr	r3, [r4, #0]
                              TIMER_PRESCALER_PRESCALER_Msk);
}

__STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type * p_reg)
{
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
   d530c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   d5310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                                               nrf_timer_frequency_t frequency)
{
    // The "frequency" parameter here is actually the prescaler value, and the
    // timer runs at the following frequency: f = 16 MHz / 2^prescaler.
    uint32_t prescaler = (uint32_t)frequency;
    uint64_t ticks = ((time_us * 16ULL) >> prescaler);
   d5314:	b2db      	uxtb	r3, r3
   d5316:	fb02 f005 	mul.w	r0, r2, r5
   d531a:	0f02      	lsrs	r2, r0, #28
   d531c:	f1c3 0720 	rsb	r7, r3, #32
   d5320:	0100      	lsls	r0, r0, #4
   d5322:	f1a3 0120 	sub.w	r1, r3, #32
   d5326:	fa20 f403 	lsr.w	r4, r0, r3
   d532a:	fa02 f707 	lsl.w	r7, r2, r7
   d532e:	433c      	orrs	r4, r7
   d5330:	fa22 f101 	lsr.w	r1, r2, r1
   d5334:	fa22 f503 	lsr.w	r5, r2, r3
   d5338:	430c      	orrs	r4, r1
    NRFX_ASSERT(ticks <= UINT32_MAX);
   d533a:	2d01      	cmp	r5, #1
   d533c:	bf08      	it	eq
   d533e:	2c00      	cmpeq	r4, #0
   d5340:	d304      	bcc.n	d534c <_Z5timerj+0x74>
   d5342:	4a0a      	ldr	r2, [pc, #40]	; (d536c <_Z5timerj+0x94>)
   d5344:	4631      	mov	r1, r6
   d5346:	200a      	movs	r0, #10
   d5348:	f000 fc80 	bl	d5c4c <panic_>

    // Set the compare for the start and the end
    nrfx_timer_extended_compare(&timer4, NRF_TIMER_CC_CHANNEL0, ticks, NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK, true);
   d534c:	2301      	movs	r3, #1
   d534e:	4804      	ldr	r0, [pc, #16]	; (d5360 <_Z5timerj+0x88>)
   d5350:	9300      	str	r3, [sp, #0]
   d5352:	4622      	mov	r2, r4
   d5354:	2100      	movs	r1, #0
   d5356:	f002 f86a 	bl	d742e <nrfx_timer_extended_compare>
}
   d535a:	b005      	add	sp, #20
   d535c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d535e:	bf00      	nop
   d5360:	2003e3cc 	.word	0x2003e3cc
   d5364:	000d745d 	.word	0x000d745d
   d5368:	000d5589 	.word	0x000d5589
   d536c:	000d59a9 	.word	0x000d59a9

000d5370 <_ZN21PulseSensorAmpedClass6attachEi>:
}                     
                                                                                                                                                                                                                                                                              
// Configure the sensor
void PulseSensorAmpedClass::attach(int pin) {
  // Do not allow analog pin to change
  if(analogPin==-1) {
   d5370:	6803      	ldr	r3, [r0, #0]
   d5372:	3301      	adds	r3, #1
    analogPin = pin;
   d5374:	bf08      	it	eq
   d5376:	6001      	streq	r1, [r0, #0]
  }
  timer(2); // Enable a 2ms timer.
   d5378:	2002      	movs	r0, #2
   d537a:	f7ff bfad 	b.w	d52d8 <_Z5timerj>
	...

000d5380 <_ZN21PulseSensorAmpedClass5startEv>:
}

void PulseSensorAmpedClass::start(void) {
   d5380:	b510      	push	{r4, lr}
  // Only allow the sensor to start/stop if the pin is configured
  // Start TIMER (If pin configured)
  if(analogPin != -1)
   d5382:	6803      	ldr	r3, [r0, #0]
   d5384:	3301      	adds	r3, #1
void PulseSensorAmpedClass::start(void) {
   d5386:	4604      	mov	r4, r0
  if(analogPin != -1)
   d5388:	d002      	beq.n	d5390 <_ZN21PulseSensorAmpedClass5startEv+0x10>
      nrfx_timer_enable(&timer4);
   d538a:	480c      	ldr	r0, [pc, #48]	; (d53bc <_ZN21PulseSensorAmpedClass5startEv+0x3c>)
   d538c:	f001 ffe6 	bl	d735c <nrfx_timer_enable>

  // Re-initialize variables:
  sampleCounter = 0;
  lastBeatTime = 0; 
  peak = 512;
   d5390:	f44f 7200 	mov.w	r2, #512	; 0x200
  trough = 512;
   d5394:	e9c4 2206 	strd	r2, r2, [r4, #24]
  thresh = 525;
  amplitude = 100;
   d5398:	f240 210d 	movw	r1, #525	; 0x20d
   d539c:	2264      	movs	r2, #100	; 0x64
   d539e:	e9c4 1208 	strd	r1, r2, [r4, #32]
  IBI = 600;
   d53a2:	f44f 7216 	mov.w	r2, #600	; 0x258
  sampleCounter = 0;
   d53a6:	2300      	movs	r3, #0
  IBI = 600;
   d53a8:	60e2      	str	r2, [r4, #12]
  pulse = false;
   d53aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  lastBeatTime = 0; 
   d53ae:	e9c4 3304 	strd	r3, r3, [r4, #16]
  pulse = false;
   d53b2:	8522      	strh	r2, [r4, #40]	; 0x28
  pulseLost = true;
  beatCount = 0;
   d53b4:	62e3      	str	r3, [r4, #44]	; 0x2c
  postUpdate = false;
   d53b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d53ba:	bd10      	pop	{r4, pc}
   d53bc:	2003e3cc 	.word	0x2003e3cc

000d53c0 <_ZN21PulseSensorAmpedClass6updateEv>:
  postUpdate = false;
}



void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d53c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned rate[10];                         // array to average IBI values for average rate
  static unsigned beatCount = 0;

  if(fakeData) {
   d53c2:	7903      	ldrb	r3, [r0, #4]
void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d53c4:	4604      	mov	r4, r0
  if(fakeData) {
   d53c6:	b313      	cbz	r3, d540e <_ZN21PulseSensorAmpedClass6updateEv+0x4e>
    // Send an update once per second
    if(beatCount >= 500) {
   d53c8:	4d6b      	ldr	r5, [pc, #428]	; (d5578 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d53ca:	682b      	ldr	r3, [r5, #0]
   d53cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d53d0:	d30c      	bcc.n	d53ec <_ZN21PulseSensorAmpedClass6updateEv+0x2c>
       if(random(100)<2) {
   d53d2:	2064      	movs	r0, #100	; 0x64
   d53d4:	f001 fa5f 	bl	d6896 <_Z6randomi>
   d53d8:	2801      	cmp	r0, #1
   d53da:	dc0b      	bgt.n	d53f4 <_ZN21PulseSensorAmpedClass6updateEv+0x34>
         BPM = -1;
   d53dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
       } else {
        IBI = random(770,1100);
        BPM = 60000/IBI;        
   d53e0:	60a3      	str	r3, [r4, #8]
       }
       postUpdate = true;
   d53e2:	2301      	movs	r3, #1
   d53e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
       beatCount = 0;
   d53e8:	2300      	movs	r3, #0
   d53ea:	602b      	str	r3, [r5, #0]
    }
    beatCount++;
   d53ec:	682b      	ldr	r3, [r5, #0]
   d53ee:	3301      	adds	r3, #1
   d53f0:	602b      	str	r3, [r5, #0]
    trough = signal;                 // set T default
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
    pulseLost = true;
    beatCount = 0;
  }
}
   d53f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        IBI = random(770,1100);
   d53f4:	f240 414c 	movw	r1, #1100	; 0x44c
   d53f8:	f240 3002 	movw	r0, #770	; 0x302
   d53fc:	f001 fa56 	bl	d68ac <_Z6randomii>
   d5400:	60e0      	str	r0, [r4, #12]
        BPM = 60000/IBI;        
   d5402:	68e2      	ldr	r2, [r4, #12]
   d5404:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5408:	fbb3 f3f2 	udiv	r3, r3, r2
   d540c:	e7e8      	b.n	d53e0 <_ZN21PulseSensorAmpedClass6updateEv+0x20>
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d540e:	4d5b      	ldr	r5, [pc, #364]	; (d557c <_ZN21PulseSensorAmpedClass6updateEv+0x1bc>)
    hal_adc_set_sample_time(sample_time);
}

inline int32_t __attribute__((deprecated("Use hal_adc_read() instead"), always_inline))
HAL_ADC_Read(pin_t pin) {
    return hal_adc_read(pin);
   d5410:	8800      	ldrh	r0, [r0, #0]
   d5412:	f000 fb01 	bl	d5a18 <hal_adc_read>
   d5416:	4a5a      	ldr	r2, [pc, #360]	; (d5580 <_ZN21PulseSensorAmpedClass6updateEv+0x1c0>)
   d5418:	682b      	ldr	r3, [r5, #0]
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d541a:	6926      	ldr	r6, [r4, #16]
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d541c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  filterIndex = (filterIndex+1)%5;
   d5420:	2105      	movs	r1, #5
   d5422:	3301      	adds	r3, #1
   d5424:	fbb3 f0f1 	udiv	r0, r3, r1
   d5428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d542c:	1a1b      	subs	r3, r3, r0
   d542e:	602b      	str	r3, [r5, #0]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d5430:	e9d2 3500 	ldrd	r3, r5, [r2]
   d5434:	441d      	add	r5, r3
   d5436:	6893      	ldr	r3, [r2, #8]
   d5438:	441d      	add	r5, r3
   d543a:	68d3      	ldr	r3, [r2, #12]
   d543c:	441d      	add	r5, r3
   d543e:	6913      	ldr	r3, [r2, #16]
  if(signal < thresh) {         // Update trough based on threshold
   d5440:	6a22      	ldr	r2, [r4, #32]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d5442:	441d      	add	r5, r3
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d5444:	6963      	ldr	r3, [r4, #20]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d5446:	fbb5 f5f1 	udiv	r5, r5, r1
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d544a:	3602      	adds	r6, #2
  if(signal < thresh) {         // Update trough based on threshold
   d544c:	4295      	cmp	r5, r2
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d544e:	6126      	str	r6, [r4, #16]
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d5450:	eba6 0603 	sub.w	r6, r6, r3
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d5454:	68e3      	ldr	r3, [r4, #12]
   d5456:	fbb3 f3f1 	udiv	r3, r3, r1
   d545a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if(signal < thresh) {         // Update trough based on threshold
   d545e:	da23      	bge.n	d54a8 <_ZN21PulseSensorAmpedClass6updateEv+0xe8>
    if(beyondDicrotic) {       // avoid dicrotic noise when finding trough
   d5460:	429e      	cmp	r6, r3
   d5462:	d904      	bls.n	d546e <_ZN21PulseSensorAmpedClass6updateEv+0xae>
      trough = min(signal, trough);
   d5464:	69e3      	ldr	r3, [r4, #28]
   d5466:	42ab      	cmp	r3, r5
   d5468:	bfd4      	ite	le
   d546a:	61e3      	strle	r3, [r4, #28]
   d546c:	61e5      	strgt	r5, [r4, #28]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d546e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5472:	2b00      	cmp	r3, #0
   d5474:	d05f      	beq.n	d5536 <_ZN21PulseSensorAmpedClass6updateEv+0x176>
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d5476:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d547a:	1a9b      	subs	r3, r3, r2
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d547c:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   d5480:	eb02 0261 	add.w	r2, r2, r1, asr #1
    trough = thresh;                          // Trough won't update until beyond threshold
   d5484:	e9c4 2206 	strd	r2, r2, [r4, #24]
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d5488:	6222      	str	r2, [r4, #32]
    if(amplitude>300)
   d548a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    pulse = false;                            // Update status
   d548e:	f04f 0200 	mov.w	r2, #0
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d5492:	6263      	str	r3, [r4, #36]	; 0x24
    pulse = false;                            // Update status
   d5494:	8522      	strh	r2, [r4, #40]	; 0x28
    if(amplitude>300)
   d5496:	dd02      	ble.n	d549e <_ZN21PulseSensorAmpedClass6updateEv+0xde>
      postUpdate = true;
   d5498:	2301      	movs	r3, #1
   d549a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d549e:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d54a2:	429e      	cmp	r6, r3
   d54a4:	d84f      	bhi.n	d5546 <_ZN21PulseSensorAmpedClass6updateEv+0x186>
   d54a6:	e7a4      	b.n	d53f2 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    peak = max(signal, peak);  
   d54a8:	69a1      	ldr	r1, [r4, #24]
   d54aa:	42a9      	cmp	r1, r5
   d54ac:	bfac      	ite	ge
   d54ae:	61a1      	strge	r1, [r4, #24]
   d54b0:	61a5      	strlt	r5, [r4, #24]
  if(elapsedTime > 250){                         // Assume at least 250ms between beats (i.e., BPM<240); Helps avoid noise
   d54b2:	2efa      	cmp	r6, #250	; 0xfa
   d54b4:	d99d      	bls.n	d53f2 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if((signal > thresh) && (pulse == false) && beyondDicrotic) {        
   d54b6:	4295      	cmp	r5, r2
   d54b8:	dd3d      	ble.n	d5536 <_ZN21PulseSensorAmpedClass6updateEv+0x176>
   d54ba:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   d54be:	2a00      	cmp	r2, #0
   d54c0:	d136      	bne.n	d5530 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
   d54c2:	429e      	cmp	r6, r3
   d54c4:	d934      	bls.n	d5530 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
      pulse = true;
   d54c6:	2301      	movs	r3, #1
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS (Starting from point the threshold is exceeded)
   d54c8:	60e6      	str	r6, [r4, #12]
      calculateHRV(IBI);
   d54ca:	68e0      	ldr	r0, [r4, #12]
      pulse = true;
   d54cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      calculateHRV(IBI);
   d54d0:	f7ff f9b2 	bl	d4838 <_Z12calculateHRVi>
      rate[beatCount%10] = IBI;
   d54d4:	4928      	ldr	r1, [pc, #160]	; (d5578 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
      lastBeatTime = sampleCounter;               // keep track of the start time of this beat
   d54d6:	6923      	ldr	r3, [r4, #16]
   d54d8:	6163      	str	r3, [r4, #20]
      rate[beatCount%10] = IBI;
   d54da:	680b      	ldr	r3, [r1, #0]
   d54dc:	4f29      	ldr	r7, [pc, #164]	; (d5584 <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d54de:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   d54e2:	200a      	movs	r0, #10
   d54e4:	fbb3 f2f0 	udiv	r2, r3, r0
   d54e8:	fb00 3212 	mls	r2, r0, r2, r3
      beatCount++;
   d54ec:	3301      	adds	r3, #1
      if(beatCount<3) {
   d54ee:	2b02      	cmp	r3, #2
      rate[beatCount%10] = IBI;
   d54f0:	f847 c022 	str.w	ip, [r7, r2, lsl #2]
      beatCount++;
   d54f4:	600b      	str	r3, [r1, #0]
      if(beatCount<3) {
   d54f6:	f67f af7c 	bls.w	d53f2 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
      } else if(beatCount==3) {
   d54fa:	2b03      	cmp	r3, #3
        rate[0]=(rate[1]+rate[2])/2;  
   d54fc:	bf01      	itttt	eq
   d54fe:	e9d7 2101 	ldrdeq	r2, r1, [r7, #4]
   d5502:	1852      	addeq	r2, r2, r1
   d5504:	0852      	lsreq	r2, r2, #1
   d5506:	603a      	streq	r2, [r7, #0]
      int maxIndex = min(beatCount, 10);      
   d5508:	481e      	ldr	r0, [pc, #120]	; (d5584 <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d550a:	2b0a      	cmp	r3, #10
      word runningTotal = 0;
   d550c:	f04f 0200 	mov.w	r2, #0
      int maxIndex = min(beatCount, 10);      
   d5510:	bf28      	it	cs
   d5512:	230a      	movcs	r3, #10
      for(int i=0; i<maxIndex; i++) {
   d5514:	4611      	mov	r1, r2
        runningTotal += rate[i];              
   d5516:	f850 7b04 	ldr.w	r7, [r0], #4
      for(int i=0; i<maxIndex; i++) {
   d551a:	3101      	adds	r1, #1
   d551c:	428b      	cmp	r3, r1
        runningTotal += rate[i];              
   d551e:	443a      	add	r2, r7
      for(int i=0; i<maxIndex; i++) {
   d5520:	dcf9      	bgt.n	d5516 <_ZN21PulseSensorAmpedClass6updateEv+0x156>
      runningTotal /= maxIndex;               // average the last 10 IBI values 
   d5522:	fbb2 f3f3 	udiv	r3, r2, r3
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
   d5526:	f64e 2260 	movw	r2, #60000	; 0xea60
   d552a:	fbb2 f3f3 	udiv	r3, r2, r3
   d552e:	60a3      	str	r3, [r4, #8]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d5530:	6a23      	ldr	r3, [r4, #32]
   d5532:	429d      	cmp	r5, r3
   d5534:	db9b      	blt.n	d546e <_ZN21PulseSensorAmpedClass6updateEv+0xae>
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d5536:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d553a:	429e      	cmp	r6, r3
   d553c:	f67f af59 	bls.w	d53f2 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if(!pulseLost) {                       // If it was good, notify the loss
   d5540:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d5544:	b92b      	cbnz	r3, d5552 <_ZN21PulseSensorAmpedClass6updateEv+0x192>
      BPM = -1;
   d5546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d554a:	60a3      	str	r3, [r4, #8]
      postUpdate = true;
   d554c:	2301      	movs	r3, #1
   d554e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    thresh = trough + (peak-trough)/3;  // set thresh default
   d5552:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d5556:	2103      	movs	r1, #3
   d5558:	1a9b      	subs	r3, r3, r2
   d555a:	fb93 f3f1 	sdiv	r3, r3, r1
   d555e:	4413      	add	r3, r2
   d5560:	6223      	str	r3, [r4, #32]
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
   d5562:	6923      	ldr	r3, [r4, #16]
   d5564:	6163      	str	r3, [r4, #20]
    pulseLost = true;
   d5566:	2301      	movs	r3, #1
   d5568:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    beatCount = 0;
   d556c:	4b02      	ldr	r3, [pc, #8]	; (d5578 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d556e:	2200      	movs	r2, #0
    trough = signal;                 // set T default
   d5570:	e9c4 5506 	strd	r5, r5, [r4, #24]
    beatCount = 0;
   d5574:	601a      	str	r2, [r3, #0]
   d5576:	e73c      	b.n	d53f2 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
   d5578:	2003e604 	.word	0x2003e604
   d557c:	2003e5c4 	.word	0x2003e5c4
   d5580:	2003e5c8 	.word	0x2003e5c8
   d5584:	2003e5dc 	.word	0x2003e5dc

000d5588 <_Z9timer_isr17nrf_timer_event_tPv>:
    PulseSensorAmped.update();
   d5588:	4801      	ldr	r0, [pc, #4]	; (d5590 <_Z9timer_isr17nrf_timer_event_tPv+0x8>)
   d558a:	f7ff bf19 	b.w	d53c0 <_ZN21PulseSensorAmpedClass6updateEv>
   d558e:	bf00      	nop
   d5590:	2003e590 	.word	0x2003e590

000d5594 <_ZN21PulseSensorAmpedClass7processEv>:

void PulseSensorAmpedClass::process(void) {
   d5594:	b510      	push	{r4, lr}
  // Put updates into foreground
  if(postUpdate) {
   d5596:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void PulseSensorAmpedClass::process(void) {
   d559a:	4604      	mov	r4, r0
  if(postUpdate) {
   d559c:	b14b      	cbz	r3, d55b2 <_ZN21PulseSensorAmpedClass7processEv+0x1e>
    if(BPM>=0)
   d559e:	6883      	ldr	r3, [r0, #8]
   d55a0:	2b00      	cmp	r3, #0
   d55a2:	db07      	blt.n	d55b4 <_ZN21PulseSensorAmpedClass7processEv+0x20>
      PulseSensorAmped_data(BPM, IBI);
   d55a4:	6880      	ldr	r0, [r0, #8]
   d55a6:	68e1      	ldr	r1, [r4, #12]
   d55a8:	f7ff f93e 	bl	d4828 <_Z21PulseSensorAmped_dataii>
    else 
      PulseSensorAmped_lost();	         
    postUpdate = false;
   d55ac:	2300      	movs	r3, #0
   d55ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  } 
}
   d55b2:	bd10      	pop	{r4, pc}
      PulseSensorAmped_lost();	         
   d55b4:	f7ff f9b0 	bl	d4918 <_Z21PulseSensorAmped_lostv>
   d55b8:	e7f8      	b.n	d55ac <_ZN21PulseSensorAmpedClass7processEv+0x18>
	...

000d55bc <_GLOBAL__sub_I_PulseSensorAmped>:
  analogPin = -1;
   d55bc:	4b03      	ldr	r3, [pc, #12]	; (d55cc <_GLOBAL__sub_I_PulseSensorAmped+0x10>)
   d55be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d55c2:	601a      	str	r2, [r3, #0]
  fakeData = false;
   d55c4:	2200      	movs	r2, #0
   d55c6:	711a      	strb	r2, [r3, #4]
}
   d55c8:	4770      	bx	lr
   d55ca:	bf00      	nop
   d55cc:	2003e590 	.word	0x2003e590

000d55d0 <_Z19ICM_20948_write_I2ChPhmPv>:
    return ICM_20948_Stat_Ok;
}

// serif functions for the I2C and SPI classes
ICM_20948_Status_e ICM_20948_write_I2C(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
   d55d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d55d2:	4606      	mov	r6, r0
   d55d4:	460d      	mov	r5, r1
   d55d6:	9201      	str	r2, [sp, #4]
    if (user == NULL)
   d55d8:	b1bb      	cbz	r3, d560a <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c; // Cast user field to ICM_20948_I2C type and extract the I2C interface pointer
   d55da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d55dc:	b1ac      	cbz	r4, d560a <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d55de:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   d55e2:	4620      	mov	r0, r4
   d55e4:	f000 ffba 	bl	d655c <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d55e8:	6823      	ldr	r3, [r4, #0]
   d55ea:	4631      	mov	r1, r6
   d55ec:	689b      	ldr	r3, [r3, #8]
   d55ee:	4620      	mov	r0, r4
   d55f0:	4798      	blx	r3
    _i2c->write(data, len);
   d55f2:	6823      	ldr	r3, [r4, #0]
   d55f4:	9a01      	ldr	r2, [sp, #4]
   d55f6:	68db      	ldr	r3, [r3, #12]
   d55f8:	4629      	mov	r1, r5
   d55fa:	4620      	mov	r0, r4
   d55fc:	4798      	blx	r3
    _i2c->endTransmission();
   d55fe:	4620      	mov	r0, r4
   d5600:	f000 ffb4 	bl	d656c <_ZN7TwoWire15endTransmissionEv>
    //     delay(10);
    // }

    // delay(10);

    return ICM_20948_Stat_Ok;
   d5604:	2000      	movs	r0, #0
}
   d5606:	b002      	add	sp, #8
   d5608:	bd70      	pop	{r4, r5, r6, pc}
        return ICM_20948_Stat_ParamErr;
   d560a:	2003      	movs	r0, #3
   d560c:	e7fb      	b.n	d5606 <_Z19ICM_20948_write_I2ChPhmPv+0x36>

000d560e <_Z18ICM_20948_read_I2ChPhmPv>:

ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
   d560e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5612:	4607      	mov	r7, r0
   d5614:	460e      	mov	r6, r1
   d5616:	4615      	mov	r5, r2
    if (user == NULL)
   d5618:	b32b      	cbz	r3, d5666 <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c;
   d561a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d561c:	b31c      	cbz	r4, d5666 <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
   d561e:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d5622:	4620      	mov	r0, r4
   d5624:	4641      	mov	r1, r8
   d5626:	f000 ff99 	bl	d655c <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d562a:	6823      	ldr	r3, [r4, #0]
   d562c:	4639      	mov	r1, r7
   d562e:	689b      	ldr	r3, [r3, #8]
   d5630:	4620      	mov	r0, r4
   d5632:	4798      	blx	r3
    _i2c->endTransmission(false); // Send repeated start
   d5634:	2100      	movs	r1, #0
   d5636:	4620      	mov	r0, r4
   d5638:	f000 ff94 	bl	d6564 <_ZN7TwoWire15endTransmissionEh>

    uint32_t offset = 0;
    uint32_t num_received = _i2c->requestFrom(addr, len);
   d563c:	462a      	mov	r2, r5
   d563e:	4641      	mov	r1, r8
   d5640:	4620      	mov	r0, r4
   d5642:	f000 ff88 	bl	d6556 <_ZN7TwoWire11requestFromEhj>
    //     }else{
    //         break;
    //     }
    // }

    if (num_received == len)
   d5646:	4285      	cmp	r5, r0
   d5648:	d110      	bne.n	d566c <_Z18ICM_20948_read_I2ChPhmPv+0x5e>
   d564a:	2700      	movs	r7, #0
    {
        for (uint8_t i = 0; i < len; i++)
   d564c:	fa5f f887 	uxtb.w	r8, r7
   d5650:	4545      	cmp	r5, r8
   d5652:	f107 0701 	add.w	r7, r7, #1
   d5656:	d90b      	bls.n	d5670 <_Z18ICM_20948_read_I2ChPhmPv+0x62>
        {
            buff[i] = _i2c->read();
   d5658:	6823      	ldr	r3, [r4, #0]
   d565a:	4620      	mov	r0, r4
   d565c:	695b      	ldr	r3, [r3, #20]
   d565e:	4798      	blx	r3
   d5660:	f806 0008 	strb.w	r0, [r6, r8]
        for (uint8_t i = 0; i < len; i++)
   d5664:	e7f2      	b.n	d564c <_Z18ICM_20948_read_I2ChPhmPv+0x3e>
        return ICM_20948_Stat_ParamErr;
   d5666:	2003      	movs	r0, #3
    if (len != 0)
    {
        return ICM_20948_Stat_NoData;
    }
    return ICM_20948_Stat_Ok;
}
   d5668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ICM_20948_Stat_NoData;
   d566c:	2006      	movs	r0, #6
   d566e:	e7fb      	b.n	d5668 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>
        return ICM_20948_Stat_Ok;
   d5670:	2000      	movs	r0, #0
   d5672:	e7f9      	b.n	d5668 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>

000d5674 <_ZN9ICM_209487getAGMTEv>:
{
   d5674:	b570      	push	{r4, r5, r6, lr}
   d5676:	460c      	mov	r4, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
   d5678:	1d0d      	adds	r5, r1, #4
{
   d567a:	4606      	mov	r6, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
   d567c:	4629      	mov	r1, r5
   d567e:	4620      	mov	r0, r4
   d5680:	f7ff f839 	bl	d46f6 <ICM_20948_get_agmt>
   d5684:	f804 0f1c 	strb.w	r0, [r4, #28]!
    return agmt;
   d5688:	462b      	mov	r3, r5
   d568a:	4635      	mov	r5, r6
   d568c:	461a      	mov	r2, r3
   d568e:	ca03      	ldmia	r2!, {r0, r1}
   d5690:	42a2      	cmp	r2, r4
   d5692:	6028      	str	r0, [r5, #0]
   d5694:	6069      	str	r1, [r5, #4]
   d5696:	4613      	mov	r3, r2
   d5698:	f105 0508 	add.w	r5, r5, #8
   d569c:	d1f6      	bne.n	d568c <_ZN9ICM_209487getAGMTEv+0x18>
}
   d569e:	4630      	mov	r0, r6
   d56a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56a4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>:
    if (stat == ICM_20948_Stat_NUM)
   d56a4:	2908      	cmp	r1, #8
        val = status;
   d56a6:	bf08      	it	eq
   d56a8:	7f01      	ldrbeq	r1, [r0, #28]
    switch (val)
   d56aa:	2907      	cmp	r1, #7
   d56ac:	bf9a      	itte	ls
   d56ae:	4b02      	ldrls	r3, [pc, #8]	; (d56b8 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x14>)
   d56b0:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
   d56b4:	4801      	ldrhi	r0, [pc, #4]	; (d56bc <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x18>)
}
   d56b6:	4770      	bx	lr
   d56b8:	000d95cc 	.word	0x000d95cc
   d56bc:	000d9544 	.word	0x000d9544

000d56c0 <_ZN9ICM_209487swResetEv>:
{
   d56c0:	b510      	push	{r4, lr}
   d56c2:	4604      	mov	r4, r0
    status = ICM_20948_sw_reset(&_device);
   d56c4:	f7fe fdc7 	bl	d4256 <ICM_20948_sw_reset>
   d56c8:	7720      	strb	r0, [r4, #28]
}
   d56ca:	bd10      	pop	{r4, pc}

000d56cc <_ZN9ICM_209485sleepEb>:
{
   d56cc:	b510      	push	{r4, lr}
   d56ce:	4604      	mov	r4, r0
    status = ICM_20948_sleep(&_device, on);
   d56d0:	f7fe fddb 	bl	d428a <ICM_20948_sleep>
   d56d4:	7720      	strb	r0, [r4, #28]
}
   d56d6:	bd10      	pop	{r4, pc}

000d56d8 <_ZN9ICM_209488lowPowerEb>:
{
   d56d8:	b510      	push	{r4, lr}
   d56da:	4604      	mov	r4, r0
    status = ICM_20948_low_power(&_device, on);
   d56dc:	f7fe fdf0 	bl	d42c0 <ICM_20948_low_power>
   d56e0:	7720      	strb	r0, [r4, #28]
}
   d56e2:	bd10      	pop	{r4, pc}

000d56e4 <_ZN9ICM_209487checkIDEv>:
{
   d56e4:	b510      	push	{r4, lr}
   d56e6:	4604      	mov	r4, r0
    status = ICM_20948_check_id(&_device);
   d56e8:	f7fe fe16 	bl	d4318 <ICM_20948_check_id>
   d56ec:	7720      	strb	r0, [r4, #28]
}
   d56ee:	bd10      	pop	{r4, pc}

000d56f0 <_ZN9ICM_2094813setSampleModeEhh>:
{
   d56f0:	b510      	push	{r4, lr}
   d56f2:	4604      	mov	r4, r0
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
   d56f4:	f7fe fe21 	bl	d433a <ICM_20948_set_sample_mode>
   d56f8:	7720      	strb	r0, [r4, #28]
}
   d56fa:	bd10      	pop	{r4, pc}

000d56fc <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>:
{
   d56fc:	b510      	push	{r4, lr}
   d56fe:	4604      	mov	r4, r0
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
   d5700:	f7fe fe4f 	bl	d43a2 <ICM_20948_set_full_scale>
   d5704:	7720      	strb	r0, [r4, #28]
}
   d5706:	bd10      	pop	{r4, pc}

000d5708 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>:
{
   d5708:	b513      	push	{r0, r1, r4, lr}
   d570a:	f8ad 2004 	strh.w	r2, [sp, #4]
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d570e:	9a01      	ldr	r2, [sp, #4]
{
   d5710:	4604      	mov	r4, r0
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5712:	f7fe fe92 	bl	d443a <ICM_20948_set_dlpf_cfg>
   d5716:	7720      	strb	r0, [r4, #28]
}
   d5718:	b002      	add	sp, #8
   d571a:	bd10      	pop	{r4, pc}

000d571c <_ZN9ICM_2094810enableDLPFEhb>:
{
   d571c:	b510      	push	{r4, lr}
   d571e:	4604      	mov	r4, r0
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
   d5720:	f7fe fed8 	bl	d44d4 <ICM_20948_enable_dlpf>
   d5724:	7720      	strb	r0, [r4, #28]
}
   d5726:	bd10      	pop	{r4, pc}

000d5728 <_ZN9ICM_2094820i2cMasterPassthroughEb>:
{
   d5728:	b510      	push	{r4, lr}
   d572a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
   d572c:	f7fe ff1c 	bl	d4568 <ICM_20948_i2c_master_passthrough>
   d5730:	7720      	strb	r0, [r4, #28]
}
   d5732:	bd10      	pop	{r4, pc}

000d5734 <_ZN9ICM_2094815i2cMasterEnableEb>:
{
   d5734:	b510      	push	{r4, lr}
   d5736:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_enable(&_device, enable);
   d5738:	f7fe ff32 	bl	d45a0 <ICM_20948_i2c_master_enable>
   d573c:	7720      	strb	r0, [r4, #28]
}
   d573e:	bd10      	pop	{r4, pc}

000d5740 <_ZN9ICM_2094814i2cMasterResetEv>:
{
   d5740:	b510      	push	{r4, lr}
   d5742:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_reset(&_device);
   d5744:	f7fe ff68 	bl	d4618 <ICM_20948_i2c_master_reset>
   d5748:	7720      	strb	r0, [r4, #28]
}
   d574a:	bd10      	pop	{r4, pc}

000d574c <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>:
{
   d574c:	b530      	push	{r4, r5, lr}
   d574e:	b087      	sub	sp, #28
   d5750:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
   d5752:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
   d5756:	9505      	str	r5, [sp, #20]
   d5758:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   d575c:	9504      	str	r5, [sp, #16]
   d575e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5762:	9503      	str	r5, [sp, #12]
   d5764:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d5768:	9502      	str	r5, [sp, #8]
   d576a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d576e:	9501      	str	r5, [sp, #4]
   d5770:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   d5774:	9500      	str	r5, [sp, #0]
   d5776:	f7fe ff6a 	bl	d464e <ICM_20948_i2c_master_configure_slave>
   d577a:	7720      	strb	r0, [r4, #28]
}
   d577c:	b007      	add	sp, #28
   d577e:	bd30      	pop	{r4, r5, pc}

000d5780 <_ZN9ICM_2094816i2cMasterSingleWEhhh>:
{
   d5780:	b513      	push	{r0, r1, r4, lr}
   d5782:	f88d 3007 	strb.w	r3, [sp, #7]
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d5786:	f10d 0307 	add.w	r3, sp, #7
{
   d578a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d578c:	f7fe fd4f 	bl	d422e <ICM_20948_i2c_master_single_w>
   d5790:	7720      	strb	r0, [r4, #28]
}
   d5792:	b002      	add	sp, #8
   d5794:	bd10      	pop	{r4, pc}

000d5796 <_ZN9ICM_2094816i2cMasterSingleREhh>:
{
   d5796:	b513      	push	{r0, r1, r4, lr}
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d5798:	f10d 0307 	add.w	r3, sp, #7
{
   d579c:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d579e:	f7fe fd51 	bl	d4244 <ICM_20948_i2c_master_single_r>
   d57a2:	7720      	strb	r0, [r4, #28]
}
   d57a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d57a8:	b002      	add	sp, #8
   d57aa:	bd10      	pop	{r4, pc}

000d57ac <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>:
{
   d57ac:	460a      	mov	r2, r1
    uint8_t data = i2cMasterSingleR(MAG_AK09916_I2C_ADDR, reg);
   d57ae:	210c      	movs	r1, #12
   d57b0:	f7ff bff1 	b.w	d5796 <_ZN9ICM_2094816i2cMasterSingleREhh>

000d57b4 <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>:
{
   d57b4:	b510      	push	{r4, lr}
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d57b6:	7813      	ldrb	r3, [r2, #0]
   d57b8:	460a      	mov	r2, r1
   d57ba:	210c      	movs	r1, #12
{
   d57bc:	4604      	mov	r4, r0
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d57be:	f7ff ffdf 	bl	d5780 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
   d57c2:	7720      	strb	r0, [r4, #28]
}
   d57c4:	bd10      	pop	{r4, pc}
	...

000d57c8 <_ZN13ICM_20948_I2CC1Ev>:
ICM_20948_I2C::ICM_20948_I2C()
   d57c8:	4b01      	ldr	r3, [pc, #4]	; (d57d0 <_ZN13ICM_20948_I2CC1Ev+0x8>)
   d57ca:	6003      	str	r3, [r0, #0]
}
   d57cc:	4770      	bx	lr
   d57ce:	bf00      	nop
   d57d0:	000d95f4 	.word	0x000d95f4

000d57d4 <_ZN9ICM_209489magWhoIAmEv>:
{
   d57d4:	b538      	push	{r3, r4, r5, lr}
    whoiam1 = readMag(AK09916_REG_WIA1);
   d57d6:	2100      	movs	r1, #0
{
   d57d8:	4604      	mov	r4, r0
    whoiam1 = readMag(AK09916_REG_WIA1);
   d57da:	f7ff ffe7 	bl	d57ac <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    whoiam2 = readMag(AK09916_REG_WIA2);
   d57de:	2101      	movs	r1, #1
    whoiam1 = readMag(AK09916_REG_WIA1);
   d57e0:	4605      	mov	r5, r0
    whoiam2 = readMag(AK09916_REG_WIA2);
   d57e2:	4620      	mov	r0, r4
   d57e4:	f7ff ffe2 	bl	d57ac <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
   d57e8:	2d48      	cmp	r5, #72	; 0x48
   d57ea:	d104      	bne.n	d57f6 <_ZN9ICM_209489magWhoIAmEv+0x22>
   d57ec:	2809      	cmp	r0, #9
   d57ee:	d102      	bne.n	d57f6 <_ZN9ICM_209489magWhoIAmEv+0x22>
    status = retval;
   d57f0:	2000      	movs	r0, #0
    status = retval;
   d57f2:	7720      	strb	r0, [r4, #28]
}
   d57f4:	bd38      	pop	{r3, r4, r5, pc}
    status = retval;
   d57f6:	2004      	movs	r0, #4
   d57f8:	e7fb      	b.n	d57f2 <_ZN9ICM_209489magWhoIAmEv+0x1e>

000d57fa <_ZN9ICM_2094819startupMagnetometerEv>:
{
   d57fa:	b530      	push	{r4, r5, lr}
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d57fc:	2100      	movs	r1, #0
{
   d57fe:	b089      	sub	sp, #36	; 0x24
   d5800:	4604      	mov	r4, r0
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5802:	f7ff ff91 	bl	d5728 <_ZN9ICM_2094820i2cMasterPassthroughEb>
    i2cMasterEnable(true);
   d5806:	2101      	movs	r1, #1
   d5808:	4620      	mov	r0, r4
   d580a:	f7ff ff93 	bl	d5734 <_ZN9ICM_2094815i2cMasterEnableEb>
   d580e:	2505      	movs	r5, #5
        retval = magWhoIAm();
   d5810:	4620      	mov	r0, r4
   d5812:	f7ff ffdf 	bl	d57d4 <_ZN9ICM_209489magWhoIAmEv>
        if (retval == ICM_20948_Stat_Ok)
   d5816:	b158      	cbz	r0, d5830 <_ZN9ICM_2094819startupMagnetometerEv+0x36>
        i2cMasterReset(); //Otherwise, reset the master I2C and try again
   d5818:	4620      	mov	r0, r4
   d581a:	3d01      	subs	r5, #1
   d581c:	f7ff ff90 	bl	d5740 <_ZN9ICM_2094814i2cMasterResetEv>
    while (tries < maxTries)
   d5820:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5824:	d1f4      	bne.n	d5810 <_ZN9ICM_2094819startupMagnetometerEv+0x16>
        status = ICM_20948_Stat_WrongID;
   d5826:	2004      	movs	r0, #4
   d5828:	e01f      	b.n	d586a <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    return status;
   d582a:	7f20      	ldrb	r0, [r4, #28]
}
   d582c:	b009      	add	sp, #36	; 0x24
   d582e:	bd30      	pop	{r4, r5, pc}
    reg.MODE = AK09916_mode_cont_100hz;
   d5830:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d5834:	2208      	movs	r2, #8
   d5836:	f362 0304 	bfi	r3, r2, #0, #5
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d583a:	2131      	movs	r1, #49	; 0x31
   d583c:	aa07      	add	r2, sp, #28
   d583e:	4620      	mov	r0, r4
    reg.MODE = AK09916_mode_cont_100hz;
   d5840:	f88d 301c 	strb.w	r3, [sp, #28]
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5844:	f7ff ffb6 	bl	d57b4 <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>
    if (retval != ICM_20948_Stat_Ok)
   d5848:	b978      	cbnz	r0, d586a <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    retval = i2cMasterConfigureSlave(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false);
   d584a:	2301      	movs	r3, #1
   d584c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d5850:	2309      	movs	r3, #9
   d5852:	e9cd 0004 	strd	r0, r0, [sp, #16]
   d5856:	9003      	str	r0, [sp, #12]
   d5858:	9300      	str	r3, [sp, #0]
   d585a:	4601      	mov	r1, r0
   d585c:	2310      	movs	r3, #16
   d585e:	220c      	movs	r2, #12
   d5860:	4620      	mov	r0, r4
   d5862:	f7ff ff73 	bl	d574c <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>
    if (retval != ICM_20948_Stat_Ok)
   d5866:	2800      	cmp	r0, #0
   d5868:	d0df      	beq.n	d582a <_ZN9ICM_2094819startupMagnetometerEv+0x30>
        status = ICM_20948_Stat_WrongID;
   d586a:	7720      	strb	r0, [r4, #28]
        return status;
   d586c:	e7de      	b.n	d582c <_ZN9ICM_2094819startupMagnetometerEv+0x32>

000d586e <_ZN9ICM_2094814startupDefaultEv>:
{
   d586e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5870:	4605      	mov	r5, r0
    retval = checkID();
   d5872:	f7ff ff37 	bl	d56e4 <_ZN9ICM_209487checkIDEv>
    if (retval != ICM_20948_Stat_Ok)
   d5876:	4604      	mov	r4, r0
   d5878:	b118      	cbz	r0, d5882 <_ZN9ICM_2094814startupDefaultEv+0x14>
        status = retval;
   d587a:	772c      	strb	r4, [r5, #28]
}
   d587c:	4620      	mov	r0, r4
   d587e:	b003      	add	sp, #12
   d5880:	bd30      	pop	{r4, r5, pc}
    retval = swReset();
   d5882:	4628      	mov	r0, r5
   d5884:	f7ff ff1c 	bl	d56c0 <_ZN9ICM_209487swResetEv>
    if (retval != ICM_20948_Stat_Ok)
   d5888:	4604      	mov	r4, r0
   d588a:	2800      	cmp	r0, #0
   d588c:	d1f5      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    delay(50);
   d588e:	2032      	movs	r0, #50	; 0x32
   d5890:	f000 fac0 	bl	d5e14 <delay>
    retval = sleep(false);
   d5894:	4621      	mov	r1, r4
   d5896:	4628      	mov	r0, r5
   d5898:	f7ff ff18 	bl	d56cc <_ZN9ICM_209485sleepEb>
    if (retval != ICM_20948_Stat_Ok)
   d589c:	4604      	mov	r4, r0
   d589e:	2800      	cmp	r0, #0
   d58a0:	d1eb      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = lowPower(false);
   d58a2:	4601      	mov	r1, r0
   d58a4:	4628      	mov	r0, r5
   d58a6:	f7ff ff17 	bl	d56d8 <_ZN9ICM_209488lowPowerEb>
    if (retval != ICM_20948_Stat_Ok)
   d58aa:	4604      	mov	r4, r0
   d58ac:	2800      	cmp	r0, #0
   d58ae:	d1e4      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
   d58b0:	4602      	mov	r2, r0
   d58b2:	2103      	movs	r1, #3
   d58b4:	4628      	mov	r0, r5
   d58b6:	f7ff ff1b 	bl	d56f0 <_ZN9ICM_2094813setSampleModeEhh>
    if (retval != ICM_20948_Stat_Ok)
   d58ba:	4604      	mov	r4, r0
   d58bc:	2800      	cmp	r0, #0
   d58be:	d1dc      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
   d58c0:	f04f 0200 	mov.w	r2, #0
   d58c4:	2103      	movs	r1, #3
   d58c6:	4628      	mov	r0, r5
   d58c8:	f7ff ff18 	bl	d56fc <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
    if (retval != ICM_20948_Stat_Ok)
   d58cc:	4604      	mov	r4, r0
   d58ce:	2800      	cmp	r0, #0
   d58d0:	d1d3      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    dlpcfg.a = acc_d473bw_n499bw;
   d58d2:	f240 7307 	movw	r3, #1799	; 0x707
   d58d6:	f8ad 3004 	strh.w	r3, [sp, #4]
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
   d58da:	9a01      	ldr	r2, [sp, #4]
   d58dc:	2103      	movs	r1, #3
   d58de:	4628      	mov	r0, r5
   d58e0:	f7ff ff12 	bl	d5708 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>
    if (retval != ICM_20948_Stat_Ok)
   d58e4:	4604      	mov	r4, r0
   d58e6:	2800      	cmp	r0, #0
   d58e8:	d1c7      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Acc, false);
   d58ea:	4602      	mov	r2, r0
   d58ec:	2101      	movs	r1, #1
   d58ee:	4628      	mov	r0, r5
   d58f0:	f7ff ff14 	bl	d571c <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d58f4:	4604      	mov	r4, r0
   d58f6:	2800      	cmp	r0, #0
   d58f8:	d1bf      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
   d58fa:	4602      	mov	r2, r0
   d58fc:	2102      	movs	r1, #2
   d58fe:	4628      	mov	r0, r5
   d5900:	f7ff ff0c 	bl	d571c <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5904:	4604      	mov	r4, r0
   d5906:	2800      	cmp	r0, #0
   d5908:	d1b7      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = startupMagnetometer();
   d590a:	4628      	mov	r0, r5
   d590c:	f7ff ff75 	bl	d57fa <_ZN9ICM_2094819startupMagnetometerEv>
    if (retval != ICM_20948_Stat_Ok)
   d5910:	4604      	mov	r4, r0
   d5912:	2800      	cmp	r0, #0
   d5914:	d1b1      	bne.n	d587a <_ZN9ICM_2094814startupDefaultEv+0xc>
    return status;
   d5916:	7f2c      	ldrb	r4, [r5, #28]
   d5918:	e7b0      	b.n	d587c <_ZN9ICM_2094814startupDefaultEv+0xe>
	...

000d591c <_ZN13ICM_20948_I2C5beginER7TwoWirebh>:
{
   d591c:	b510      	push	{r4, lr}
   d591e:	4604      	mov	r4, r0
   d5920:	4618      	mov	r0, r3
    _ad0 = ad0pin;
   d5922:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    _i2c = &wirePort;
   d5926:	6261      	str	r1, [r4, #36]	; 0x24
    _ad0val = ad0val;
   d5928:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if (_ad0val)
   d592c:	b9f2      	cbnz	r2, d596c <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x50>
    _addr = ICM_20948_I2C_ADDR_AD0;
   d592e:	2268      	movs	r2, #104	; 0x68
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5930:	28ff      	cmp	r0, #255	; 0xff
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5932:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5936:	d002      	beq.n	d593e <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x22>
        pinMode(_ad0, OUTPUT);
   d5938:	2101      	movs	r1, #1
   d593a:	f001 fba9 	bl	d7090 <pinMode>
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d593e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   d5942:	28ff      	cmp	r0, #255	; 0xff
   d5944:	d003      	beq.n	d594e <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x32>
        digitalWrite(_ad0, _ad0val);
   d5946:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d594a:	f001 fbb2 	bl	d70b2 <digitalWrite>
    _serif.write = ICM_20948_write_I2C;
   d594e:	4b08      	ldr	r3, [pc, #32]	; (d5970 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x54>)
   d5950:	62e3      	str	r3, [r4, #44]	; 0x2c
    _serif.read = ICM_20948_read_I2C;
   d5952:	4b08      	ldr	r3, [pc, #32]	; (d5974 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x58>)
    _device._serif = &_serif;
   d5954:	4620      	mov	r0, r4
    _serif.user = (void *)this; // refer to yourself in the user field
   d5956:	e9c4 340c 	strd	r3, r4, [r4, #48]	; 0x30
    _device._serif = &_serif;
   d595a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   d595e:	f840 3f04 	str.w	r3, [r0, #4]!
    status = startupDefault();
   d5962:	f7ff ff84 	bl	d586e <_ZN9ICM_2094814startupDefaultEv>
   d5966:	f884 0020 	strb.w	r0, [r4, #32]
}
   d596a:	bd10      	pop	{r4, pc}
        _addr = ICM_20948_I2C_ADDR_AD1;
   d596c:	2269      	movs	r2, #105	; 0x69
   d596e:	e7df      	b.n	d5930 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x14>
   d5970:	000d55d1 	.word	0x000d55d1
   d5974:	000d560f 	.word	0x000d560f

000d5978 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <os_mutex_recursive_create+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030248 	.word	0x00030248

000d5988 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <os_mutex_recursive_destroy+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030248 	.word	0x00030248

000d5998 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <HAL_RNG_GetRandomNumber+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	685b      	ldr	r3, [r3, #4]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030218 	.word	0x00030218

000d59a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <HAL_Delay_Microseconds+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	68db      	ldr	r3, [r3, #12]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030218 	.word	0x00030218

000d59b8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	691b      	ldr	r3, [r3, #16]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030218 	.word	0x00030218

000d59c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	695b      	ldr	r3, [r3, #20]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	00030218 	.word	0x00030218

000d59d8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <HAL_Validate_Pin_Function+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	685b      	ldr	r3, [r3, #4]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	0003022c 	.word	0x0003022c

000d59e8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <HAL_Pin_Mode+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	689b      	ldr	r3, [r3, #8]
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	0003022c 	.word	0x0003022c

000d59f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <HAL_Get_Pin_Mode+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	68db      	ldr	r3, [r3, #12]
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	0003022c 	.word	0x0003022c

000d5a08 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <HAL_GPIO_Write+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	691b      	ldr	r3, [r3, #16]
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	0003022c 	.word	0x0003022c

000d5a18 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <hal_adc_read+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	0003022c 	.word	0x0003022c

000d5a28 <HAL_Set_Direct_Interrupt_Handler>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
DYNALIB_FN(35, hal_gpio, HAL_Interrupts_Detach_Ext, int(uint16_t, uint8_t, void*))
DYNALIB_FN(36, hal_gpio, HAL_Set_Direct_Interrupt_Handler, int(IRQn_Type irqn, HAL_Direct_Interrupt_Handler handler, uint32_t flags, void* reserved))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b03      	ldr	r3, [pc, #12]	; (d5a38 <HAL_Set_Direct_Interrupt_Handler+0x10>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d5a32:	9301      	str	r3, [sp, #4]
   d5a34:	bd08      	pop	{r3, pc}
   d5a36:	0000      	.short	0x0000
   d5a38:	0003022c 	.word	0x0003022c

000d5a3c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <hal_i2c_set_speed+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	681b      	ldr	r3, [r3, #0]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	00030228 	.word	0x00030228

000d5a4c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <hal_i2c_begin+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	68db      	ldr	r3, [r3, #12]
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030228 	.word	0x00030228

000d5a5c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <hal_i2c_begin_transmission+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	699b      	ldr	r3, [r3, #24]
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030228 	.word	0x00030228

000d5a6c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <hal_i2c_end_transmission+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	69db      	ldr	r3, [r3, #28]
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030228 	.word	0x00030228

000d5a7c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <hal_i2c_write+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	6a1b      	ldr	r3, [r3, #32]
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030228 	.word	0x00030228

000d5a8c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <hal_i2c_available+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030228 	.word	0x00030228

000d5a9c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <hal_i2c_read+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030228 	.word	0x00030228

000d5aac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <hal_i2c_peek+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030228 	.word	0x00030228

000d5abc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <hal_i2c_flush+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030228 	.word	0x00030228

000d5acc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <hal_i2c_is_enabled+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030228 	.word	0x00030228

000d5adc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <hal_i2c_init+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030228 	.word	0x00030228

000d5aec <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <hal_i2c_request_ex+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030228 	.word	0x00030228

000d5afc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b02      	ldr	r3, [pc, #8]	; (d5b08 <inet_inet_ntop+0xc>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	695b      	ldr	r3, [r3, #20]
   d5b04:	9301      	str	r3, [sp, #4]
   d5b06:	bd08      	pop	{r3, pc}
   d5b08:	00030264 	.word	0x00030264

000d5b0c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b0c:	b508      	push	{r3, lr}
   d5b0e:	4b02      	ldr	r3, [pc, #8]	; (d5b18 <netdb_freeaddrinfo+0xc>)
   d5b10:	681b      	ldr	r3, [r3, #0]
   d5b12:	689b      	ldr	r3, [r3, #8]
   d5b14:	9301      	str	r3, [sp, #4]
   d5b16:	bd08      	pop	{r3, pc}
   d5b18:	00030268 	.word	0x00030268

000d5b1c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b1c:	b508      	push	{r3, lr}
   d5b1e:	4b02      	ldr	r3, [pc, #8]	; (d5b28 <netdb_getaddrinfo+0xc>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	68db      	ldr	r3, [r3, #12]
   d5b24:	9301      	str	r3, [sp, #4]
   d5b26:	bd08      	pop	{r3, pc}
   d5b28:	00030268 	.word	0x00030268

000d5b2c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5b2c:	b508      	push	{r3, lr}
   d5b2e:	4b02      	ldr	r3, [pc, #8]	; (d5b38 <hal_spi_init+0xc>)
   d5b30:	681b      	ldr	r3, [r3, #0]
   d5b32:	69db      	ldr	r3, [r3, #28]
   d5b34:	9301      	str	r3, [sp, #4]
   d5b36:	bd08      	pop	{r3, pc}
   d5b38:	00030230 	.word	0x00030230

000d5b3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5b3c:	b508      	push	{r3, lr}
   d5b3e:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <hal_spi_is_enabled+0xc>)
   d5b40:	681b      	ldr	r3, [r3, #0]
   d5b42:	6a1b      	ldr	r3, [r3, #32]
   d5b44:	9301      	str	r3, [sp, #4]
   d5b46:	bd08      	pop	{r3, pc}
   d5b48:	00030230 	.word	0x00030230

000d5b4c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <hal_usart_init+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	681b      	ldr	r3, [r3, #0]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	0003023c 	.word	0x0003023c

000d5b5c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <hal_usart_write+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	68db      	ldr	r3, [r3, #12]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	0003023c 	.word	0x0003023c

000d5b6c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <hal_usart_available+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	691b      	ldr	r3, [r3, #16]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	0003023c 	.word	0x0003023c

000d5b7c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <hal_usart_read+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	695b      	ldr	r3, [r3, #20]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	0003023c 	.word	0x0003023c

000d5b8c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <hal_usart_peek+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	699b      	ldr	r3, [r3, #24]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	0003023c 	.word	0x0003023c

000d5b9c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <hal_usart_flush+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	69db      	ldr	r3, [r3, #28]
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	0003023c 	.word	0x0003023c

000d5bac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <hal_usart_is_enabled+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	6a1b      	ldr	r3, [r3, #32]
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	0003023c 	.word	0x0003023c

000d5bbc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <hal_usart_available_data_for_write+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	0003023c 	.word	0x0003023c

000d5bcc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <HAL_USB_USART_Init+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	681b      	ldr	r3, [r3, #0]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	0003024c 	.word	0x0003024c

000d5bdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <HAL_USB_USART_Begin+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	685b      	ldr	r3, [r3, #4]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	0003024c 	.word	0x0003024c

000d5bec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <HAL_USB_USART_Available_Data+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	691b      	ldr	r3, [r3, #16]
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	0003024c 	.word	0x0003024c

000d5bfc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	695b      	ldr	r3, [r3, #20]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	0003024c 	.word	0x0003024c

000d5c0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <HAL_USB_USART_Receive_Data+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	699b      	ldr	r3, [r3, #24]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	0003024c 	.word	0x0003024c

000d5c1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <HAL_USB_USART_Send_Data+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	69db      	ldr	r3, [r3, #28]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	0003024c 	.word	0x0003024c

000d5c2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <HAL_USB_USART_Flush_Data+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	6a1b      	ldr	r3, [r3, #32]
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	0003024c 	.word	0x0003024c

000d5c3c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <HAL_USB_USART_Is_Enabled+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	0003024c 	.word	0x0003024c

000d5c4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <panic_+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030260 	.word	0x00030260

000d5c5c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <set_system_mode+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	685b      	ldr	r3, [r3, #4]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030220 	.word	0x00030220

000d5c6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <system_delay_ms+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	695b      	ldr	r3, [r3, #20]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030220 	.word	0x00030220

000d5c7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <application_thread_current+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030220 	.word	0x00030220

000d5c8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <application_thread_invoke+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030220 	.word	0x00030220

000d5c9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b03      	ldr	r3, [pc, #12]	; (d5cac <system_ctrl_set_app_request_handler+0x10>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ca6:	9301      	str	r3, [sp, #4]
   d5ca8:	bd08      	pop	{r3, pc}
   d5caa:	0000      	.short	0x0000
   d5cac:	00030220 	.word	0x00030220

000d5cb0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5cb0:	b508      	push	{r3, lr}
   d5cb2:	4b03      	ldr	r3, [pc, #12]	; (d5cc0 <system_ctrl_set_result+0x10>)
   d5cb4:	681b      	ldr	r3, [r3, #0]
   d5cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5cba:	9301      	str	r3, [sp, #4]
   d5cbc:	bd08      	pop	{r3, pc}
   d5cbe:	0000      	.short	0x0000
   d5cc0:	00030220 	.word	0x00030220

000d5cc4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5cc4:	b508      	push	{r3, lr}
   d5cc6:	4b02      	ldr	r3, [pc, #8]	; (d5cd0 <spark_cloud_flag_connected+0xc>)
   d5cc8:	681b      	ldr	r3, [r3, #0]
   d5cca:	695b      	ldr	r3, [r3, #20]
   d5ccc:	9301      	str	r3, [sp, #4]
   d5cce:	bd08      	pop	{r3, pc}
   d5cd0:	00030244 	.word	0x00030244

000d5cd4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5cd4:	b508      	push	{r3, lr}
   d5cd6:	4b02      	ldr	r3, [pc, #8]	; (d5ce0 <spark_send_event+0xc>)
   d5cd8:	681b      	ldr	r3, [r3, #0]
   d5cda:	6a1b      	ldr	r3, [r3, #32]
   d5cdc:	9301      	str	r3, [sp, #4]
   d5cde:	bd08      	pop	{r3, pc}
   d5ce0:	00030244 	.word	0x00030244

000d5ce4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5ce4:	b508      	push	{r3, lr}
   d5ce6:	4b02      	ldr	r3, [pc, #8]	; (d5cf0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5ce8:	681b      	ldr	r3, [r3, #0]
   d5cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5cec:	9301      	str	r3, [sp, #4]
   d5cee:	bd08      	pop	{r3, pc}
   d5cf0:	00030244 	.word	0x00030244

000d5cf4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cf4:	b508      	push	{r3, lr}
   d5cf6:	4b02      	ldr	r3, [pc, #8]	; (d5d00 <network_connect+0xc>)
   d5cf8:	681b      	ldr	r3, [r3, #0]
   d5cfa:	685b      	ldr	r3, [r3, #4]
   d5cfc:	9301      	str	r3, [sp, #4]
   d5cfe:	bd08      	pop	{r3, pc}
   d5d00:	00030240 	.word	0x00030240

000d5d04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5d04:	b508      	push	{r3, lr}
   d5d06:	4b02      	ldr	r3, [pc, #8]	; (d5d10 <network_connecting+0xc>)
   d5d08:	681b      	ldr	r3, [r3, #0]
   d5d0a:	689b      	ldr	r3, [r3, #8]
   d5d0c:	9301      	str	r3, [sp, #4]
   d5d0e:	bd08      	pop	{r3, pc}
   d5d10:	00030240 	.word	0x00030240

000d5d14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5d14:	b508      	push	{r3, lr}
   d5d16:	4b02      	ldr	r3, [pc, #8]	; (d5d20 <network_disconnect+0xc>)
   d5d18:	681b      	ldr	r3, [r3, #0]
   d5d1a:	68db      	ldr	r3, [r3, #12]
   d5d1c:	9301      	str	r3, [sp, #4]
   d5d1e:	bd08      	pop	{r3, pc}
   d5d20:	00030240 	.word	0x00030240

000d5d24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5d24:	b508      	push	{r3, lr}
   d5d26:	4b02      	ldr	r3, [pc, #8]	; (d5d30 <network_ready+0xc>)
   d5d28:	681b      	ldr	r3, [r3, #0]
   d5d2a:	691b      	ldr	r3, [r3, #16]
   d5d2c:	9301      	str	r3, [sp, #4]
   d5d2e:	bd08      	pop	{r3, pc}
   d5d30:	00030240 	.word	0x00030240

000d5d34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d34:	b508      	push	{r3, lr}
   d5d36:	4b02      	ldr	r3, [pc, #8]	; (d5d40 <network_on+0xc>)
   d5d38:	681b      	ldr	r3, [r3, #0]
   d5d3a:	695b      	ldr	r3, [r3, #20]
   d5d3c:	9301      	str	r3, [sp, #4]
   d5d3e:	bd08      	pop	{r3, pc}
   d5d40:	00030240 	.word	0x00030240

000d5d44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d44:	b508      	push	{r3, lr}
   d5d46:	4b02      	ldr	r3, [pc, #8]	; (d5d50 <network_off+0xc>)
   d5d48:	681b      	ldr	r3, [r3, #0]
   d5d4a:	699b      	ldr	r3, [r3, #24]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	bd08      	pop	{r3, pc}
   d5d50:	00030240 	.word	0x00030240

000d5d54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d54:	b508      	push	{r3, lr}
   d5d56:	4b02      	ldr	r3, [pc, #8]	; (d5d60 <network_listen+0xc>)
   d5d58:	681b      	ldr	r3, [r3, #0]
   d5d5a:	69db      	ldr	r3, [r3, #28]
   d5d5c:	9301      	str	r3, [sp, #4]
   d5d5e:	bd08      	pop	{r3, pc}
   d5d60:	00030240 	.word	0x00030240

000d5d64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d64:	b508      	push	{r3, lr}
   d5d66:	4b02      	ldr	r3, [pc, #8]	; (d5d70 <network_listening+0xc>)
   d5d68:	681b      	ldr	r3, [r3, #0]
   d5d6a:	6a1b      	ldr	r3, [r3, #32]
   d5d6c:	9301      	str	r3, [sp, #4]
   d5d6e:	bd08      	pop	{r3, pc}
   d5d70:	00030240 	.word	0x00030240

000d5d74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d74:	b508      	push	{r3, lr}
   d5d76:	4b02      	ldr	r3, [pc, #8]	; (d5d80 <network_set_listen_timeout+0xc>)
   d5d78:	681b      	ldr	r3, [r3, #0]
   d5d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d7c:	9301      	str	r3, [sp, #4]
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	00030240 	.word	0x00030240

000d5d84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5d84:	b508      	push	{r3, lr}
   d5d86:	4b02      	ldr	r3, [pc, #8]	; (d5d90 <network_get_listen_timeout+0xc>)
   d5d88:	681b      	ldr	r3, [r3, #0]
   d5d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d8c:	9301      	str	r3, [sp, #4]
   d5d8e:	bd08      	pop	{r3, pc}
   d5d90:	00030240 	.word	0x00030240

000d5d94 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5d94:	b508      	push	{r3, lr}
   d5d96:	4b02      	ldr	r3, [pc, #8]	; (d5da0 <malloc+0xc>)
   d5d98:	681b      	ldr	r3, [r3, #0]
   d5d9a:	681b      	ldr	r3, [r3, #0]
   d5d9c:	9301      	str	r3, [sp, #4]
   d5d9e:	bd08      	pop	{r3, pc}
   d5da0:	0003021c 	.word	0x0003021c

000d5da4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5da4:	b508      	push	{r3, lr}
   d5da6:	4b02      	ldr	r3, [pc, #8]	; (d5db0 <free+0xc>)
   d5da8:	681b      	ldr	r3, [r3, #0]
   d5daa:	685b      	ldr	r3, [r3, #4]
   d5dac:	9301      	str	r3, [sp, #4]
   d5dae:	bd08      	pop	{r3, pc}
   d5db0:	0003021c 	.word	0x0003021c

000d5db4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5db4:	b508      	push	{r3, lr}
   d5db6:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <realloc+0xc>)
   d5db8:	681b      	ldr	r3, [r3, #0]
   d5dba:	689b      	ldr	r3, [r3, #8]
   d5dbc:	9301      	str	r3, [sp, #4]
   d5dbe:	bd08      	pop	{r3, pc}
   d5dc0:	0003021c 	.word	0x0003021c

000d5dc4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <vsnprintf+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	0003021c 	.word	0x0003021c

000d5dd4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <abort+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	0003021c 	.word	0x0003021c

000d5de4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <_malloc_r+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	0003021c 	.word	0x0003021c

000d5df4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <__errno+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	0003021c 	.word	0x0003021c

000d5e04 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <newlib_impure_ptr_callback+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	0003021c 	.word	0x0003021c

000d5e14 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5e14:	2100      	movs	r1, #0
   d5e16:	f7ff bf29 	b.w	d5c6c <system_delay_ms>

000d5e1a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5e1a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e1c:	6883      	ldr	r3, [r0, #8]
   d5e1e:	4604      	mov	r4, r0
   d5e20:	b90b      	cbnz	r3, d5e26 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5e22:	f001 fb2e 	bl	d7482 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e26:	68c3      	ldr	r3, [r0, #12]
   d5e28:	4798      	blx	r3
      if (_M_manager)
   d5e2a:	68a3      	ldr	r3, [r4, #8]
   d5e2c:	b11b      	cbz	r3, d5e36 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e2e:	2203      	movs	r2, #3
   d5e30:	4621      	mov	r1, r4
   d5e32:	4620      	mov	r0, r4
   d5e34:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5e36:	4620      	mov	r0, r4
   d5e38:	2110      	movs	r1, #16
}
   d5e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5e3e:	f001 bb1c 	b.w	d747a <_ZdlPvj>

000d5e42 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5e42:	b510      	push	{r4, lr}
   d5e44:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e46:	6800      	ldr	r0, [r0, #0]
   d5e48:	b108      	cbz	r0, d5e4e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5e4a:	f7ff fd9d 	bl	d5988 <os_mutex_recursive_destroy>
    }
   d5e4e:	4620      	mov	r0, r4
   d5e50:	bd10      	pop	{r4, pc}

000d5e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5e52:	680b      	ldr	r3, [r1, #0]
   d5e54:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5e56:	b113      	cbz	r3, d5e5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5e58:	685a      	ldr	r2, [r3, #4]
   d5e5a:	3201      	adds	r2, #1
   d5e5c:	605a      	str	r2, [r3, #4]
      }
   d5e5e:	4770      	bx	lr

000d5e60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5e60:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5e62:	4c06      	ldr	r4, [pc, #24]	; (d5e7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5e64:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5e66:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5e68:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5e6a:	f7ff fd85 	bl	d5978 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5e6e:	4620      	mov	r0, r4
   d5e70:	4a03      	ldr	r2, [pc, #12]	; (d5e80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5e72:	4904      	ldr	r1, [pc, #16]	; (d5e84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5e78:	f001 bafa 	b.w	d7470 <__aeabi_atexit>
   d5e7c:	2003e608 	.word	0x2003e608
   d5e80:	2003e440 	.word	0x2003e440
   d5e84:	000d5e43 	.word	0x000d5e43

000d5e88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e88:	4770      	bx	lr

000d5e8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5e8a:	2000      	movs	r0, #0
   d5e8c:	4770      	bx	lr

000d5e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5e8e:	b510      	push	{r4, lr}
   d5e90:	2110      	movs	r1, #16
   d5e92:	4604      	mov	r4, r0
   d5e94:	f001 faf1 	bl	d747a <_ZdlPvj>
   d5e98:	4620      	mov	r0, r4
   d5e9a:	bd10      	pop	{r4, pc}

000d5e9c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5e9c:	b508      	push	{r3, lr}
      { delete this; }
   d5e9e:	f7ff fff6 	bl	d5e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5ea2:	bd08      	pop	{r3, pc}

000d5ea4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5ea4:	b510      	push	{r4, lr}
      if (_M_manager)
   d5ea6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5ea8:	4604      	mov	r4, r0
      if (_M_manager)
   d5eaa:	b113      	cbz	r3, d5eb2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5eac:	2203      	movs	r2, #3
   d5eae:	4601      	mov	r1, r0
   d5eb0:	4798      	blx	r3
    }
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	bd10      	pop	{r4, pc}

000d5eb6 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5eb6:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5eb8:	2200      	movs	r2, #0
   d5eba:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5ebe:	6002      	str	r2, [r0, #0]
   d5ec0:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ec2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ec4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5ec6:	680c      	ldr	r4, [r1, #0]
   d5ec8:	8085      	strh	r5, [r0, #4]
   d5eca:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ecc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5ece:	bd30      	pop	{r4, r5, pc}

000d5ed0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5ed0:	b510      	push	{r4, lr}
   d5ed2:	4604      	mov	r4, r0
    free((void*)msg_);
   d5ed4:	6800      	ldr	r0, [r0, #0]
   d5ed6:	f7ff ff65 	bl	d5da4 <free>
}
   d5eda:	4620      	mov	r0, r4
   d5edc:	bd10      	pop	{r4, pc}

000d5ede <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5ede:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5ee0:	68c4      	ldr	r4, [r0, #12]
   d5ee2:	b1f4      	cbz	r4, d5f22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5ee4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5ee6:	2b02      	cmp	r3, #2
   d5ee8:	d103      	bne.n	d5ef2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5eea:	f104 000c 	add.w	r0, r4, #12
   d5eee:	f7ff ffef 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5ef2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5ef4:	b135      	cbz	r5, d5f04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5ef6:	4628      	mov	r0, r5
   d5ef8:	f7ff ffd4 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
   d5efc:	2110      	movs	r1, #16
   d5efe:	4628      	mov	r0, r5
   d5f00:	f001 fabb 	bl	d747a <_ZdlPvj>
   d5f04:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5f06:	b135      	cbz	r5, d5f16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5f08:	4628      	mov	r0, r5
   d5f0a:	f7ff ffcb 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
   d5f0e:	2110      	movs	r1, #16
   d5f10:	4628      	mov	r0, r5
   d5f12:	f001 fab2 	bl	d747a <_ZdlPvj>
   d5f16:	4620      	mov	r0, r4
   d5f18:	2114      	movs	r1, #20
   d5f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5f1e:	f001 baac 	b.w	d747a <_ZdlPvj>
   d5f22:	bd38      	pop	{r3, r4, r5, pc}

000d5f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f26:	460e      	mov	r6, r1
   d5f28:	4604      	mov	r4, r0
   d5f2a:	f856 3b04 	ldr.w	r3, [r6], #4
   d5f2e:	9300      	str	r3, [sp, #0]
   d5f30:	460d      	mov	r5, r1
   d5f32:	a801      	add	r0, sp, #4
   d5f34:	4631      	mov	r1, r6
   d5f36:	f7ff ff8c 	bl	d5e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f3a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5f3c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5f3e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5f40:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5f42:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5f44:	2300      	movs	r3, #0
   d5f46:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5f48:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5f4a:	f7fe fe93 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f4e:	4630      	mov	r0, r6
   d5f50:	f7fe fe90 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5f54:	4628      	mov	r0, r5
   d5f56:	2108      	movs	r1, #8
   d5f58:	f001 fa8f 	bl	d747a <_ZdlPvj>
        return p;
    }
   d5f5c:	4620      	mov	r0, r4
   d5f5e:	b002      	add	sp, #8
   d5f60:	bd70      	pop	{r4, r5, r6, pc}

000d5f62 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5f62:	b513      	push	{r0, r1, r4, lr}
   d5f64:	460b      	mov	r3, r1
   d5f66:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f68:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5f6c:	466c      	mov	r4, sp
   d5f6e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5f72:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5f76:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5f7a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5f7e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5f82:	b002      	add	sp, #8
   d5f84:	bd10      	pop	{r4, pc}

000d5f86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5f86:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5f88:	b510      	push	{r4, lr}
      if (_M_empty())
   d5f8a:	b90a      	cbnz	r2, d5f90 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5f8c:	f001 fa79 	bl	d7482 <_ZSt25__throw_bad_function_callv>
    }
   d5f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f94:	68c3      	ldr	r3, [r0, #12]
   d5f96:	4718      	bx	r3

000d5f98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5f98:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5f9a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5f9c:	f100 0110 	add.w	r1, r0, #16
   d5fa0:	f7ff fff1 	bl	d5f86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5fa4:	bd08      	pop	{r3, pc}

000d5fa6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5fa6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5fa8:	b510      	push	{r4, lr}
      if (_M_empty())
   d5faa:	b90a      	cbnz	r2, d5fb0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5fac:	f001 fa69 	bl	d7482 <_ZSt25__throw_bad_function_callv>
    }
   d5fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5fb4:	68c3      	ldr	r3, [r0, #12]
   d5fb6:	4718      	bx	r3

000d5fb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5fb8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5fba:	6800      	ldr	r0, [r0, #0]
   d5fbc:	f100 0110 	add.w	r1, r0, #16
   d5fc0:	f7ff fff1 	bl	d5fa6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5fc4:	bd08      	pop	{r3, pc}
	...

000d5fc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5fc8:	b538      	push	{r3, r4, r5, lr}
   d5fca:	2300      	movs	r3, #0
   d5fcc:	4604      	mov	r4, r0
   d5fce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5fd0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5fd2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5fd4:	f7fe f85f 	bl	d4096 <_Znwj>
   d5fd8:	b128      	cbz	r0, d5fe6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5fda:	2301      	movs	r3, #1
   d5fdc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5fe0:	4b02      	ldr	r3, [pc, #8]	; (d5fec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5fe2:	6003      	str	r3, [r0, #0]
   d5fe4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5fe6:	6020      	str	r0, [r4, #0]
	}
   d5fe8:	4620      	mov	r0, r4
   d5fea:	bd38      	pop	{r3, r4, r5, pc}
   d5fec:	000d9600 	.word	0x000d9600

000d5ff0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5ff0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5ff2:	2300      	movs	r3, #0
   d5ff4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5ff6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5ff8:	4604      	mov	r4, r0
   d5ffa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5ffc:	b12b      	cbz	r3, d600a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5ffe:	2202      	movs	r2, #2
   d6000:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6002:	68eb      	ldr	r3, [r5, #12]
   d6004:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6006:	68ab      	ldr	r3, [r5, #8]
   d6008:	60a3      	str	r3, [r4, #8]
    }
   d600a:	4620      	mov	r0, r4
   d600c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6010:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6012:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6014:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6016:	4668      	mov	r0, sp
   d6018:	f7ff ff4d 	bl	d5eb6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d601c:	f04f 0302 	mov.w	r3, #2
   d6020:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6024:	2a00      	cmp	r2, #0
   d6026:	d103      	bne.n	d6030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6028:	e8c4 3f41 	strexb	r1, r3, [r4]
   d602c:	2900      	cmp	r1, #0
   d602e:	d1f7      	bne.n	d6020 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6030:	d125      	bne.n	d607e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6032:	f104 050c 	add.w	r5, r4, #12
   d6036:	4669      	mov	r1, sp
   d6038:	4628      	mov	r0, r5
   d603a:	f7ff ff3c 	bl	d5eb6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d603e:	f3bf 8f5b 	dmb	ish
   d6042:	2301      	movs	r3, #1
   d6044:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6046:	2000      	movs	r0, #0
   d6048:	f104 0308 	add.w	r3, r4, #8
   d604c:	f3bf 8f5b 	dmb	ish
   d6050:	e853 6f00 	ldrex	r6, [r3]
   d6054:	e843 0200 	strex	r2, r0, [r3]
   d6058:	2a00      	cmp	r2, #0
   d605a:	d1f9      	bne.n	d6050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d605c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6060:	b16e      	cbz	r6, d607e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6062:	f7ff fe0b 	bl	d5c7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6066:	b178      	cbz	r0, d6088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6068:	4629      	mov	r1, r5
   d606a:	4630      	mov	r0, r6
   d606c:	f7ff ff8b 	bl	d5f86 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6070:	4630      	mov	r0, r6
   d6072:	f7ff ff17 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6076:	2110      	movs	r1, #16
   d6078:	4630      	mov	r0, r6
   d607a:	f001 f9fe 	bl	d747a <_ZdlPvj>
        p_->setError(std::move(error));
   d607e:	4668      	mov	r0, sp
   d6080:	f7ff ff26 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
    }
   d6084:	b009      	add	sp, #36	; 0x24
   d6086:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6088:	4631      	mov	r1, r6
   d608a:	a802      	add	r0, sp, #8
   d608c:	f7ff ffb0 	bl	d5ff0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6090:	68e0      	ldr	r0, [r4, #12]
   d6092:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6096:	b108      	cbz	r0, d609c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6098:	f003 f8d4 	bl	d9244 <strdup>
        type_(type) {
   d609c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d609e:	2010      	movs	r0, #16
   d60a0:	f8ad 501c 	strh.w	r5, [sp, #28]
   d60a4:	f7fd fff7 	bl	d4096 <_Znwj>
   d60a8:	4605      	mov	r5, r0
   d60aa:	b1e8      	cbz	r0, d60e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d60ac:	2700      	movs	r7, #0
   d60ae:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60b0:	2018      	movs	r0, #24
   d60b2:	f7fd fff0 	bl	d4096 <_Znwj>
   d60b6:	4604      	mov	r4, r0
   d60b8:	b188      	cbz	r0, d60de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d60ba:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d60bc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d60be:	a802      	add	r0, sp, #8
   d60c0:	f7ff ff4f 	bl	d5f62 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d60c6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d60c8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60ca:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d60cc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d60ce:	a906      	add	r1, sp, #24
   d60d0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d60d2:	60e3      	str	r3, [r4, #12]
   d60d4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d60d8:	9205      	str	r2, [sp, #20]
   d60da:	f7ff feec 	bl	d5eb6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d60de:	4b08      	ldr	r3, [pc, #32]	; (d6100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d60e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d60e2:	4b08      	ldr	r3, [pc, #32]	; (d6104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60e4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d60e6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d60e8:	a806      	add	r0, sp, #24
   d60ea:	f7ff fef1 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d60ee:	a802      	add	r0, sp, #8
   d60f0:	f7ff fed8 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d60f4:	2200      	movs	r2, #0
   d60f6:	4629      	mov	r1, r5
   d60f8:	4803      	ldr	r0, [pc, #12]	; (d6108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d60fa:	f7ff fdc7 	bl	d5c8c <application_thread_invoke>
   d60fe:	e7b7      	b.n	d6070 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6100:	000d5f99 	.word	0x000d5f99
   d6104:	000d6231 	.word	0x000d6231
   d6108:	000d5e1b 	.word	0x000d5e1b

000d610c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6110:	b08a      	sub	sp, #40	; 0x28
   d6112:	4605      	mov	r5, r0
   d6114:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6118:	460c      	mov	r4, r1
   d611a:	4617      	mov	r7, r2
   d611c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d611e:	f7ff fdd1 	bl	d5cc4 <spark_cloud_flag_connected>
   d6122:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6124:	4682      	mov	sl, r0
   d6126:	bb38      	cbnz	r0, d6178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6128:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d612c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d612e:	a905      	add	r1, sp, #20
   d6130:	4630      	mov	r0, r6
   d6132:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6136:	f7ff febe 	bl	d5eb6 <_ZN8particle5ErrorC1EOS0_>
   d613a:	2014      	movs	r0, #20
   d613c:	f7fd ffab 	bl	d4096 <_Znwj>
   d6140:	4604      	mov	r4, r0
   d6142:	b148      	cbz	r0, d6158 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6144:	2302      	movs	r3, #2
   d6146:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6148:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d614a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d614e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6150:	4631      	mov	r1, r6
   d6152:	300c      	adds	r0, #12
   d6154:	f7ff feaf 	bl	d5eb6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6158:	4628      	mov	r0, r5
	: __shared_count(__p)
   d615a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d615c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6160:	f7ff ff32 	bl	d5fc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6164:	4630      	mov	r0, r6
   d6166:	f7ff feb3 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d616a:	a805      	add	r0, sp, #20
   d616c:	f7ff feb0 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6170:	4628      	mov	r0, r5
   d6172:	b00a      	add	sp, #40	; 0x28
   d6174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6178:	230c      	movs	r3, #12
   d617a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d617e:	2014      	movs	r0, #20
   d6180:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6184:	9307      	str	r3, [sp, #28]
   d6186:	f7fd ff86 	bl	d4096 <_Znwj>
   d618a:	4601      	mov	r1, r0
   d618c:	b128      	cbz	r0, d619a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d618e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6192:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6196:	f880 a001 	strb.w	sl, [r0, #1]
   d619a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d619c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d619e:	f7ff ff13 	bl	d5fc8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d61a2:	4b22      	ldr	r3, [pc, #136]	; (d622c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d61a4:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d61a6:	2008      	movs	r0, #8
   d61a8:	f7fd ff75 	bl	d4096 <_Znwj>
   d61ac:	4682      	mov	sl, r0
   d61ae:	b128      	cbz	r0, d61bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61b0:	9b03      	ldr	r3, [sp, #12]
   d61b2:	f840 3b04 	str.w	r3, [r0], #4
   d61b6:	a904      	add	r1, sp, #16
   d61b8:	f7ff fe4b 	bl	d5e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d61bc:	9600      	str	r6, [sp, #0]
   d61be:	fa5f f389 	uxtb.w	r3, r9
   d61c2:	4642      	mov	r2, r8
   d61c4:	4639      	mov	r1, r7
   d61c6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d61c8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d61cc:	f7ff fd82 	bl	d5cd4 <spark_send_event>
   d61d0:	b9b8      	cbnz	r0, d6202 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d61d2:	9b03      	ldr	r3, [sp, #12]
   d61d4:	785b      	ldrb	r3, [r3, #1]
   d61d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d61da:	b993      	cbnz	r3, d6202 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d61dc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d61e0:	a905      	add	r1, sp, #20
   d61e2:	a803      	add	r0, sp, #12
   d61e4:	9205      	str	r2, [sp, #20]
   d61e6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d61ea:	f7ff ff11 	bl	d6010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d61ee:	a805      	add	r0, sp, #20
   d61f0:	f7ff fe6e 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d61f4:	a805      	add	r0, sp, #20
   d61f6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d61f8:	f7ff fe94 	bl	d5f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d61fc:	a806      	add	r0, sp, #24
   d61fe:	f7fe fd39 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6202:	9b03      	ldr	r3, [sp, #12]
   d6204:	9305      	str	r3, [sp, #20]
   d6206:	a904      	add	r1, sp, #16
   d6208:	a806      	add	r0, sp, #24
   d620a:	f7ff fe22 	bl	d5e52 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d620e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6210:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6212:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6214:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6216:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6218:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d621a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d621c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d621e:	f7fe fd29 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6222:	a804      	add	r0, sp, #16
   d6224:	f7fe fd26 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6228:	e7a2      	b.n	d6170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d622a:	bf00      	nop
   d622c:	000d62f5 	.word	0x000d62f5

000d6230 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6230:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6234:	4605      	mov	r5, r0
	  switch (__op)
   d6236:	d007      	beq.n	d6248 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6238:	2a03      	cmp	r2, #3
   d623a:	d018      	beq.n	d626e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d623c:	2a01      	cmp	r2, #1
   d623e:	d101      	bne.n	d6244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6240:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6242:	6003      	str	r3, [r0, #0]
	}
   d6244:	2000      	movs	r0, #0
   d6246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6248:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d624a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d624c:	f7fd ff23 	bl	d4096 <_Znwj>
   d6250:	4604      	mov	r4, r0
   d6252:	b150      	cbz	r0, d626a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6254:	4631      	mov	r1, r6
   d6256:	f7ff fecb 	bl	d5ff0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d625a:	6930      	ldr	r0, [r6, #16]
   d625c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6260:	b108      	cbz	r0, d6266 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6262:	f002 ffef 	bl	d9244 <strdup>
        type_(type) {
   d6266:	6120      	str	r0, [r4, #16]
   d6268:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d626a:	602c      	str	r4, [r5, #0]
	}
   d626c:	e7ea      	b.n	d6244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d626e:	6804      	ldr	r4, [r0, #0]
   d6270:	2c00      	cmp	r4, #0
   d6272:	d0e7      	beq.n	d6244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6274:	f104 0010 	add.w	r0, r4, #16
   d6278:	f7ff fe2a 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d627c:	4620      	mov	r0, r4
   d627e:	f7ff fe11 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6282:	2118      	movs	r1, #24
   d6284:	4620      	mov	r0, r4
   d6286:	f001 f8f8 	bl	d747a <_ZdlPvj>
   d628a:	e7db      	b.n	d6244 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d628c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d628c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d628e:	2300      	movs	r3, #0
   d6290:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6292:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6294:	4604      	mov	r4, r0
   d6296:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6298:	b12b      	cbz	r3, d62a6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d629a:	2202      	movs	r2, #2
   d629c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d629e:	68eb      	ldr	r3, [r5, #12]
   d62a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d62a2:	68ab      	ldr	r3, [r5, #8]
   d62a4:	60a3      	str	r3, [r4, #8]
    }
   d62a6:	4620      	mov	r0, r4
   d62a8:	bd38      	pop	{r3, r4, r5, pc}

000d62aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d62aa:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d62ac:	b570      	push	{r4, r5, r6, lr}
   d62ae:	4604      	mov	r4, r0
	  switch (__op)
   d62b0:	d007      	beq.n	d62c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d62b2:	2a03      	cmp	r2, #3
   d62b4:	d012      	beq.n	d62dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d62b6:	2a01      	cmp	r2, #1
   d62b8:	d101      	bne.n	d62be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d62ba:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d62bc:	6003      	str	r3, [r0, #0]
	}
   d62be:	2000      	movs	r0, #0
   d62c0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d62c2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d62c4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d62c6:	f7fd fee6 	bl	d4096 <_Znwj>
   d62ca:	4605      	mov	r5, r0
   d62cc:	b120      	cbz	r0, d62d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d62ce:	4631      	mov	r1, r6
   d62d0:	f7ff ffdc 	bl	d628c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d62d4:	7c33      	ldrb	r3, [r6, #16]
   d62d6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d62d8:	6025      	str	r5, [r4, #0]
	}
   d62da:	e7f0      	b.n	d62be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d62dc:	6804      	ldr	r4, [r0, #0]
   d62de:	2c00      	cmp	r4, #0
   d62e0:	d0ed      	beq.n	d62be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d62e2:	4620      	mov	r0, r4
   d62e4:	f7ff fdde 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d62e8:	2114      	movs	r1, #20
   d62ea:	4620      	mov	r0, r4
   d62ec:	f001 f8c5 	bl	d747a <_ZdlPvj>
   d62f0:	e7e5      	b.n	d62be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d62f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d62f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62f6:	b089      	sub	sp, #36	; 0x24
   d62f8:	4604      	mov	r4, r0
   d62fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d62fc:	a801      	add	r0, sp, #4
   d62fe:	4611      	mov	r1, r2
   d6300:	f7ff fe10 	bl	d5f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6304:	b1a4      	cbz	r4, d6330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6306:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6308:	b11d      	cbz	r5, d6312 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d630a:	4628      	mov	r0, r5
   d630c:	f002 ff9a 	bl	d9244 <strdup>
   d6310:	4605      	mov	r5, r0
   d6312:	a801      	add	r0, sp, #4
   d6314:	a903      	add	r1, sp, #12
        type_(type) {
   d6316:	9503      	str	r5, [sp, #12]
   d6318:	f8ad 4010 	strh.w	r4, [sp, #16]
   d631c:	f7ff fe78 	bl	d6010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6320:	a803      	add	r0, sp, #12
   d6322:	f7ff fdd5 	bl	d5ed0 <_ZN8particle5ErrorD1Ev>
   d6326:	a802      	add	r0, sp, #8
   d6328:	f7fe fca4 	bl	d4c74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d632c:	b009      	add	sp, #36	; 0x24
   d632e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6330:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6332:	2301      	movs	r3, #1
   d6334:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6338:	2a00      	cmp	r2, #0
   d633a:	d103      	bne.n	d6344 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d633c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6340:	2900      	cmp	r1, #0
   d6342:	d1f7      	bne.n	d6334 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6344:	d1ef      	bne.n	d6326 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6346:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6348:	f3bf 8f5b 	dmb	ish
   d634c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d634e:	1d2b      	adds	r3, r5, #4
   d6350:	f3bf 8f5b 	dmb	ish
   d6354:	e853 6f00 	ldrex	r6, [r3]
   d6358:	e843 4200 	strex	r2, r4, [r3]
   d635c:	2a00      	cmp	r2, #0
   d635e:	d1f9      	bne.n	d6354 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6360:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6364:	2e00      	cmp	r6, #0
   d6366:	d0de      	beq.n	d6326 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6368:	4620      	mov	r0, r4
   d636a:	f7ff fc87 	bl	d5c7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d636e:	4607      	mov	r7, r0
   d6370:	b160      	cbz	r0, d638c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6372:	f105 010c 	add.w	r1, r5, #12
   d6376:	4630      	mov	r0, r6
   d6378:	f7ff fe15 	bl	d5fa6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d637c:	4630      	mov	r0, r6
   d637e:	f7ff fd91 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6382:	2110      	movs	r1, #16
   d6384:	4630      	mov	r0, r6
   d6386:	f001 f878 	bl	d747a <_ZdlPvj>
   d638a:	e7cc      	b.n	d6326 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d638c:	4631      	mov	r1, r6
   d638e:	a803      	add	r0, sp, #12
   d6390:	f7ff ff7c 	bl	d628c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6394:	7b2b      	ldrb	r3, [r5, #12]
   d6396:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d639a:	2010      	movs	r0, #16
   d639c:	f7fd fe7b 	bl	d4096 <_Znwj>
   d63a0:	4605      	mov	r5, r0
   d63a2:	b1d0      	cbz	r0, d63da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d63a4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63a6:	2014      	movs	r0, #20
   d63a8:	f7fd fe75 	bl	d4096 <_Znwj>
   d63ac:	4604      	mov	r4, r0
   d63ae:	b178      	cbz	r0, d63d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d63b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d63b2:	4601      	mov	r1, r0
   d63b4:	a803      	add	r0, sp, #12
   d63b6:	f7ff fdd4 	bl	d5f62 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d63bc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d63be:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63c0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d63c2:	9205      	str	r2, [sp, #20]
   d63c4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d63c6:	60e3      	str	r3, [r4, #12]
   d63c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d63cc:	9206      	str	r2, [sp, #24]
   d63ce:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d63d0:	4b06      	ldr	r3, [pc, #24]	; (d63ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d63d2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d63d4:	4b06      	ldr	r3, [pc, #24]	; (d63f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63d6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d63d8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d63da:	a803      	add	r0, sp, #12
   d63dc:	f7ff fd62 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d63e0:	2200      	movs	r2, #0
   d63e2:	4629      	mov	r1, r5
   d63e4:	4803      	ldr	r0, [pc, #12]	; (d63f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d63e6:	f7ff fc51 	bl	d5c8c <application_thread_invoke>
   d63ea:	e7c7      	b.n	d637c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d63ec:	000d5fb9 	.word	0x000d5fb9
   d63f0:	000d62ab 	.word	0x000d62ab
   d63f4:	000d5e1b 	.word	0x000d5e1b

000d63f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63f8:	2200      	movs	r2, #0
   d63fa:	6840      	ldr	r0, [r0, #4]
   d63fc:	4611      	mov	r1, r2
   d63fe:	f7ff bcb1 	b.w	d5d64 <network_listening>

000d6402 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6402:	2200      	movs	r2, #0
   d6404:	6840      	ldr	r0, [r0, #4]
   d6406:	4611      	mov	r1, r2
   d6408:	f7ff bcbc 	b.w	d5d84 <network_get_listen_timeout>

000d640c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d640c:	6840      	ldr	r0, [r0, #4]
   d640e:	2200      	movs	r2, #0
   d6410:	f7ff bcb0 	b.w	d5d74 <network_set_listen_timeout>

000d6414 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6414:	6840      	ldr	r0, [r0, #4]
   d6416:	2200      	movs	r2, #0
   d6418:	f081 0101 	eor.w	r1, r1, #1
   d641c:	f7ff bc9a 	b.w	d5d54 <network_listen>

000d6420 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6420:	2300      	movs	r3, #0
   d6422:	6840      	ldr	r0, [r0, #4]
   d6424:	461a      	mov	r2, r3
   d6426:	4619      	mov	r1, r3
   d6428:	f7ff bc8c 	b.w	d5d44 <network_off>

000d642c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d642c:	2300      	movs	r3, #0
   d642e:	6840      	ldr	r0, [r0, #4]
   d6430:	461a      	mov	r2, r3
   d6432:	4619      	mov	r1, r3
   d6434:	f7ff bc7e 	b.w	d5d34 <network_on>

000d6438 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6438:	2200      	movs	r2, #0
   d643a:	6840      	ldr	r0, [r0, #4]
   d643c:	4611      	mov	r1, r2
   d643e:	f7ff bc71 	b.w	d5d24 <network_ready>

000d6442 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6442:	2200      	movs	r2, #0
   d6444:	6840      	ldr	r0, [r0, #4]
   d6446:	4611      	mov	r1, r2
   d6448:	f7ff bc5c 	b.w	d5d04 <network_connecting>

000d644c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d644c:	6840      	ldr	r0, [r0, #4]
   d644e:	2200      	movs	r2, #0
   d6450:	2102      	movs	r1, #2
   d6452:	f7ff bc5f 	b.w	d5d14 <network_disconnect>

000d6456 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6456:	2300      	movs	r3, #0
   d6458:	6840      	ldr	r0, [r0, #4]
   d645a:	461a      	mov	r2, r3
   d645c:	f7ff bc4a 	b.w	d5cf4 <network_connect>

000d6460 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6460:	4b02      	ldr	r3, [pc, #8]	; (d646c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6462:	2203      	movs	r2, #3
   d6464:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6466:	4a02      	ldr	r2, [pc, #8]	; (d6470 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6468:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d646a:	4770      	bx	lr
   d646c:	2003e60c 	.word	0x2003e60c
   d6470:	000d961c 	.word	0x000d961c

000d6474 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6474:	4770      	bx	lr

000d6476 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6478:	4606      	mov	r6, r0
   d647a:	4615      	mov	r5, r2
   d647c:	460c      	mov	r4, r1
   d647e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6480:	42bc      	cmp	r4, r7
   d6482:	d006      	beq.n	d6492 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6484:	6833      	ldr	r3, [r6, #0]
   d6486:	f814 1b01 	ldrb.w	r1, [r4], #1
   d648a:	689b      	ldr	r3, [r3, #8]
   d648c:	4630      	mov	r0, r6
   d648e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6490:	e7f6      	b.n	d6480 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6492:	4628      	mov	r0, r5
   d6494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6496 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6496:	7c00      	ldrb	r0, [r0, #16]
   d6498:	2200      	movs	r2, #0
   d649a:	f7ff baef 	b.w	d5a7c <hal_i2c_write>

000d649e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d649e:	7c00      	ldrb	r0, [r0, #16]
   d64a0:	2100      	movs	r1, #0
   d64a2:	f7ff baf3 	b.w	d5a8c <hal_i2c_available>

000d64a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d64a6:	7c00      	ldrb	r0, [r0, #16]
   d64a8:	2100      	movs	r1, #0
   d64aa:	f7ff baf7 	b.w	d5a9c <hal_i2c_read>

000d64ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d64ae:	7c00      	ldrb	r0, [r0, #16]
   d64b0:	2100      	movs	r1, #0
   d64b2:	f7ff bafb 	b.w	d5aac <hal_i2c_peek>

000d64b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d64b6:	7c00      	ldrb	r0, [r0, #16]
   d64b8:	2100      	movs	r1, #0
   d64ba:	f7ff baff 	b.w	d5abc <hal_i2c_flush>

000d64be <_ZN7TwoWireD0Ev>:
   d64be:	b510      	push	{r4, lr}
   d64c0:	2114      	movs	r1, #20
   d64c2:	4604      	mov	r4, r0
   d64c4:	f000 ffd9 	bl	d747a <_ZdlPvj>
   d64c8:	4620      	mov	r0, r4
   d64ca:	bd10      	pop	{r4, pc}

000d64cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d64cc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d64ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d64d2:	4604      	mov	r4, r0
   d64d4:	4608      	mov	r0, r1
   d64d6:	2100      	movs	r1, #0
   d64d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d64dc:	4b03      	ldr	r3, [pc, #12]	; (d64ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d64de:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d64e0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d64e2:	4611      	mov	r1, r2
   d64e4:	f7ff fafa 	bl	d5adc <hal_i2c_init>
}
   d64e8:	4620      	mov	r0, r4
   d64ea:	bd10      	pop	{r4, pc}
   d64ec:	000d9650 	.word	0x000d9650

000d64f0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d64f0:	7c00      	ldrb	r0, [r0, #16]
   d64f2:	2200      	movs	r2, #0
   d64f4:	f7ff baa2 	b.w	d5a3c <hal_i2c_set_speed>

000d64f8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d64f8:	2300      	movs	r3, #0
   d64fa:	7c00      	ldrb	r0, [r0, #16]
   d64fc:	461a      	mov	r2, r3
   d64fe:	4619      	mov	r1, r3
   d6500:	f7ff baa4 	b.w	d5a4c <hal_i2c_begin>

000d6504 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6504:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6506:	2200      	movs	r2, #0
   d6508:	2314      	movs	r3, #20
   d650a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d650e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6512:	780b      	ldrb	r3, [r1, #0]
   d6514:	f88d 3008 	strb.w	r3, [sp, #8]
   d6518:	684b      	ldr	r3, [r1, #4]
   d651a:	9303      	str	r3, [sp, #12]
   d651c:	68cb      	ldr	r3, [r1, #12]
   d651e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6520:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6522:	7a0b      	ldrb	r3, [r1, #8]
   d6524:	9305      	str	r3, [sp, #20]
   d6526:	a901      	add	r1, sp, #4
   d6528:	f7ff fae0 	bl	d5aec <hal_i2c_request_ex>
}
   d652c:	b007      	add	sp, #28
   d652e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6532 <_ZN7TwoWire11requestFromEhjh>:
{
   d6532:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6534:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6536:	f88d 1000 	strb.w	r1, [sp]
   d653a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d653e:	9103      	str	r1, [sp, #12]
   d6540:	bf18      	it	ne
   d6542:	2301      	movne	r3, #1
   d6544:	4669      	mov	r1, sp
    size_ = size;
   d6546:	9201      	str	r2, [sp, #4]
   d6548:	f88d 3008 	strb.w	r3, [sp, #8]
   d654c:	f7ff ffda 	bl	d6504 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6550:	b005      	add	sp, #20
   d6552:	f85d fb04 	ldr.w	pc, [sp], #4

000d6556 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6556:	2301      	movs	r3, #1
   d6558:	f7ff bfeb 	b.w	d6532 <_ZN7TwoWire11requestFromEhjh>

000d655c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d655c:	7c00      	ldrb	r0, [r0, #16]
   d655e:	2200      	movs	r2, #0
   d6560:	f7ff ba7c 	b.w	d5a5c <hal_i2c_begin_transmission>

000d6564 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6564:	7c00      	ldrb	r0, [r0, #16]
   d6566:	2200      	movs	r2, #0
   d6568:	f7ff ba80 	b.w	d5a6c <hal_i2c_end_transmission>

000d656c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d656c:	2101      	movs	r1, #1
   d656e:	f7ff bff9 	b.w	d6564 <_ZN7TwoWire15endTransmissionEh>

000d6572 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>:
    return ok;
}

bool attachInterruptDirect(IRQn_Type irq, HAL_Direct_Interrupt_Handler handler, bool enable)
{
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6572:	2a00      	cmp	r2, #0
{
   d6574:	b508      	push	{r3, lr}
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6576:	f04f 0300 	mov.w	r3, #0
   d657a:	bf14      	ite	ne
   d657c:	2204      	movne	r2, #4
   d657e:	461a      	moveq	r2, r3
   d6580:	f7ff fa52 	bl	d5a28 <HAL_Set_Direct_Interrupt_Handler>
    return ok;
}
   d6584:	fab0 f080 	clz	r0, r0
   d6588:	0940      	lsrs	r0, r0, #5
   d658a:	bd08      	pop	{r3, pc}

000d658c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d658c:	4770      	bx	lr

000d658e <_ZN9IPAddressD0Ev>:
   d658e:	b510      	push	{r4, lr}
   d6590:	2118      	movs	r1, #24
   d6592:	4604      	mov	r4, r0
   d6594:	f000 ff71 	bl	d747a <_ZdlPvj>
   d6598:	4620      	mov	r0, r4
   d659a:	bd10      	pop	{r4, pc}

000d659c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d659c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d659e:	7d03      	ldrb	r3, [r0, #20]
   d65a0:	2b06      	cmp	r3, #6
{
   d65a2:	b08d      	sub	sp, #52	; 0x34
   d65a4:	460e      	mov	r6, r1
   d65a6:	f100 0704 	add.w	r7, r0, #4
   d65aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d65ae:	d012      	beq.n	d65d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d65b0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d65b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d65b8:	220a      	movs	r2, #10
   d65ba:	4630      	mov	r0, r6
   d65bc:	f000 f94d 	bl	d685a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d65c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d65c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d65c4:	d019      	beq.n	d65fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d65c6:	2c00      	cmp	r4, #0
   d65c8:	d0f4      	beq.n	d65b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d65ca:	212e      	movs	r1, #46	; 0x2e
   d65cc:	4630      	mov	r0, r6
   d65ce:	f000 f927 	bl	d6820 <_ZN5Print5printEc>
   d65d2:	4404      	add	r4, r0
   d65d4:	e7ee      	b.n	d65b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65d6:	232f      	movs	r3, #47	; 0x2f
   d65d8:	466a      	mov	r2, sp
   d65da:	4639      	mov	r1, r7
   d65dc:	200a      	movs	r0, #10
		buf[0] = 0;
   d65de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d65e2:	f7ff fa8b 	bl	d5afc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d65e6:	4668      	mov	r0, sp
   d65e8:	f002 fe49 	bl	d927e <strlen>
   d65ec:	6833      	ldr	r3, [r6, #0]
   d65ee:	4602      	mov	r2, r0
   d65f0:	68db      	ldr	r3, [r3, #12]
   d65f2:	4669      	mov	r1, sp
   d65f4:	4630      	mov	r0, r6
   d65f6:	4798      	blx	r3
   d65f8:	4604      	mov	r4, r0
    }
    return n;
}
   d65fa:	4620      	mov	r0, r4
   d65fc:	b00d      	add	sp, #52	; 0x34
   d65fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6600 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6600:	b510      	push	{r4, lr}
   d6602:	4b05      	ldr	r3, [pc, #20]	; (d6618 <_ZN9IPAddressC1Ev+0x18>)
   d6604:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6606:	2211      	movs	r2, #17
   d6608:	f840 3b04 	str.w	r3, [r0], #4
   d660c:	2100      	movs	r1, #0
   d660e:	f002 fdb1 	bl	d9174 <memset>
}
   d6612:	4620      	mov	r0, r4
   d6614:	bd10      	pop	{r4, pc}
   d6616:	bf00      	nop
   d6618:	000d9678 	.word	0x000d9678

000d661c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d661c:	4603      	mov	r3, r0
   d661e:	4a07      	ldr	r2, [pc, #28]	; (d663c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6620:	b510      	push	{r4, lr}
   d6622:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6626:	f101 0210 	add.w	r2, r1, #16
   d662a:	f851 4b04 	ldr.w	r4, [r1], #4
   d662e:	f843 4b04 	str.w	r4, [r3], #4
   d6632:	4291      	cmp	r1, r2
   d6634:	d1f9      	bne.n	d662a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6636:	780a      	ldrb	r2, [r1, #0]
   d6638:	701a      	strb	r2, [r3, #0]
}
   d663a:	bd10      	pop	{r4, pc}
   d663c:	000d9678 	.word	0x000d9678

000d6640 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6640:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6642:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6646:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d664a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d664e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6652:	2304      	movs	r3, #4
   d6654:	6041      	str	r1, [r0, #4]
   d6656:	7503      	strb	r3, [r0, #20]
}
   d6658:	bd10      	pop	{r4, pc}

000d665a <_ZN9IPAddressaSEPKh>:
{
   d665a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d665c:	78cb      	ldrb	r3, [r1, #3]
   d665e:	9300      	str	r3, [sp, #0]
   d6660:	788b      	ldrb	r3, [r1, #2]
   d6662:	784a      	ldrb	r2, [r1, #1]
   d6664:	7809      	ldrb	r1, [r1, #0]
   d6666:	f7ff ffeb 	bl	d6640 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d666a:	b002      	add	sp, #8
   d666c:	bd10      	pop	{r4, pc}
	...

000d6670 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6670:	4b01      	ldr	r3, [pc, #4]	; (d6678 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6672:	4a02      	ldr	r2, [pc, #8]	; (d667c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6674:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6676:	4770      	bx	lr
   d6678:	2003e614 	.word	0x2003e614
   d667c:	000d9684 	.word	0x000d9684

000d6680 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6680:	2300      	movs	r3, #0
   d6682:	6840      	ldr	r0, [r0, #4]
   d6684:	461a      	mov	r2, r3
   d6686:	f7ff bb35 	b.w	d5cf4 <network_connect>

000d668a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d668a:	6840      	ldr	r0, [r0, #4]
   d668c:	2200      	movs	r2, #0
   d668e:	2102      	movs	r1, #2
   d6690:	f7ff bb40 	b.w	d5d14 <network_disconnect>

000d6694 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6694:	2200      	movs	r2, #0
   d6696:	6840      	ldr	r0, [r0, #4]
   d6698:	4611      	mov	r1, r2
   d669a:	f7ff bb33 	b.w	d5d04 <network_connecting>

000d669e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d669e:	2200      	movs	r2, #0
   d66a0:	6840      	ldr	r0, [r0, #4]
   d66a2:	4611      	mov	r1, r2
   d66a4:	f7ff bb3e 	b.w	d5d24 <network_ready>

000d66a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d66a8:	2300      	movs	r3, #0
   d66aa:	6840      	ldr	r0, [r0, #4]
   d66ac:	461a      	mov	r2, r3
   d66ae:	4619      	mov	r1, r3
   d66b0:	f7ff bb40 	b.w	d5d34 <network_on>

000d66b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d66b4:	2300      	movs	r3, #0
   d66b6:	6840      	ldr	r0, [r0, #4]
   d66b8:	461a      	mov	r2, r3
   d66ba:	4619      	mov	r1, r3
   d66bc:	f7ff bb42 	b.w	d5d44 <network_off>

000d66c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d66c0:	6840      	ldr	r0, [r0, #4]
   d66c2:	2200      	movs	r2, #0
   d66c4:	f081 0101 	eor.w	r1, r1, #1
   d66c8:	f7ff bb44 	b.w	d5d54 <network_listen>

000d66cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d66cc:	6840      	ldr	r0, [r0, #4]
   d66ce:	2200      	movs	r2, #0
   d66d0:	f7ff bb50 	b.w	d5d74 <network_set_listen_timeout>

000d66d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d66d4:	2200      	movs	r2, #0
   d66d6:	6840      	ldr	r0, [r0, #4]
   d66d8:	4611      	mov	r1, r2
   d66da:	f7ff bb53 	b.w	d5d84 <network_get_listen_timeout>

000d66de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d66de:	2200      	movs	r2, #0
   d66e0:	6840      	ldr	r0, [r0, #4]
   d66e2:	4611      	mov	r1, r2
   d66e4:	f7ff bb3e 	b.w	d5d64 <network_listening>

000d66e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d66e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d66ec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d66ee:	b095      	sub	sp, #84	; 0x54
   d66f0:	4616      	mov	r6, r2
   d66f2:	460d      	mov	r5, r1
   d66f4:	4607      	mov	r7, r0
    IPAddress addr;
   d66f6:	f7ff ff83 	bl	d6600 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d66fa:	4621      	mov	r1, r4
   d66fc:	2218      	movs	r2, #24
   d66fe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6700:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6702:	f002 fd37 	bl	d9174 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6706:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6708:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d670c:	4621      	mov	r1, r4
   d670e:	466b      	mov	r3, sp
   d6710:	aa0c      	add	r2, sp, #48	; 0x30
   d6712:	4630      	mov	r0, r6
   d6714:	f7ff fa02 	bl	d5b1c <netdb_getaddrinfo>
    if (!r) {
   d6718:	4604      	mov	r4, r0
   d671a:	2800      	cmp	r0, #0
   d671c:	d146      	bne.n	d67ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d671e:	4602      	mov	r2, r0
   d6720:	2101      	movs	r1, #1
   d6722:	6868      	ldr	r0, [r5, #4]
   d6724:	f7ff fafe 	bl	d5d24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6728:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d672a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d672c:	4622      	mov	r2, r4
   d672e:	6868      	ldr	r0, [r5, #4]
   d6730:	f7ff faf8 	bl	d5d24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6734:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6736:	4681      	mov	r9, r0
        bool ok = false;
   d6738:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d673a:	2e00      	cmp	r6, #0
   d673c:	d036      	beq.n	d67ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d673e:	2900      	cmp	r1, #0
   d6740:	d134      	bne.n	d67ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6742:	6873      	ldr	r3, [r6, #4]
   d6744:	2b02      	cmp	r3, #2
   d6746:	d003      	beq.n	d6750 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6748:	2b0a      	cmp	r3, #10
   d674a:	d00b      	beq.n	d6764 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d674c:	69f6      	ldr	r6, [r6, #28]
   d674e:	e7f4      	b.n	d673a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6750:	f1b8 0f00 	cmp.w	r8, #0
   d6754:	d004      	beq.n	d6760 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6756:	6971      	ldr	r1, [r6, #20]
   d6758:	4638      	mov	r0, r7
   d675a:	3104      	adds	r1, #4
   d675c:	f7ff ff7d 	bl	d665a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6760:	4641      	mov	r1, r8
   d6762:	e7f3      	b.n	d674c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6764:	f1b9 0f00 	cmp.w	r9, #0
   d6768:	d101      	bne.n	d676e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d676a:	4649      	mov	r1, r9
   d676c:	e7ee      	b.n	d674c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d676e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6770:	2210      	movs	r2, #16
   d6772:	a801      	add	r0, sp, #4
   d6774:	f002 fcfe 	bl	d9174 <memset>
                    a.v = 6;
   d6778:	2306      	movs	r3, #6
   d677a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d677e:	ad01      	add	r5, sp, #4
   d6780:	f104 0308 	add.w	r3, r4, #8
   d6784:	3418      	adds	r4, #24
   d6786:	6818      	ldr	r0, [r3, #0]
   d6788:	6859      	ldr	r1, [r3, #4]
   d678a:	462a      	mov	r2, r5
   d678c:	c203      	stmia	r2!, {r0, r1}
   d678e:	3308      	adds	r3, #8
   d6790:	42a3      	cmp	r3, r4
   d6792:	4615      	mov	r5, r2
   d6794:	d1f7      	bne.n	d6786 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6796:	a901      	add	r1, sp, #4
   d6798:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d679a:	ad07      	add	r5, sp, #28
   d679c:	f7ff ff3e 	bl	d661c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d67a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67a2:	1d3c      	adds	r4, r7, #4
   d67a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67a6:	682b      	ldr	r3, [r5, #0]
   d67a8:	7023      	strb	r3, [r4, #0]
   d67aa:	e7de      	b.n	d676a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d67ac:	9800      	ldr	r0, [sp, #0]
   d67ae:	f7ff f9ad 	bl	d5b0c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d67b2:	4638      	mov	r0, r7
   d67b4:	b015      	add	sp, #84	; 0x54
   d67b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d67bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d67bc:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d67be:	4a03      	ldr	r2, [pc, #12]	; (d67cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d67c0:	601a      	str	r2, [r3, #0]
   d67c2:	2200      	movs	r2, #0
   d67c4:	605a      	str	r2, [r3, #4]

} // spark
   d67c6:	4770      	bx	lr
   d67c8:	2003e618 	.word	0x2003e618
   d67cc:	000d9690 	.word	0x000d9690

000d67d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d67d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67d2:	4606      	mov	r6, r0
   d67d4:	460d      	mov	r5, r1
  size_t n = 0;
   d67d6:	188f      	adds	r7, r1, r2
   d67d8:	2400      	movs	r4, #0
  while (size--) {
   d67da:	42bd      	cmp	r5, r7
   d67dc:	d00c      	beq.n	d67f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d67de:	6833      	ldr	r3, [r6, #0]
   d67e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d67e4:	689b      	ldr	r3, [r3, #8]
   d67e6:	4630      	mov	r0, r6
   d67e8:	4798      	blx	r3
     if (chunk>=0)
   d67ea:	1e03      	subs	r3, r0, #0
   d67ec:	db01      	blt.n	d67f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d67ee:	441c      	add	r4, r3
  while (size--) {
   d67f0:	e7f3      	b.n	d67da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d67f2:	2c00      	cmp	r4, #0
   d67f4:	bf08      	it	eq
   d67f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d67f8:	4620      	mov	r0, r4
   d67fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d67fc:	b513      	push	{r0, r1, r4, lr}
   d67fe:	4604      	mov	r4, r0
    }
   d6800:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6802:	b159      	cbz	r1, d681c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6804:	9101      	str	r1, [sp, #4]
   d6806:	f002 fd3a 	bl	d927e <strlen>
   d680a:	6823      	ldr	r3, [r4, #0]
   d680c:	9901      	ldr	r1, [sp, #4]
   d680e:	68db      	ldr	r3, [r3, #12]
   d6810:	4602      	mov	r2, r0
   d6812:	4620      	mov	r0, r4
    }
   d6814:	b002      	add	sp, #8
   d6816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d681a:	4718      	bx	r3
    }
   d681c:	b002      	add	sp, #8
   d681e:	bd10      	pop	{r4, pc}

000d6820 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6820:	6803      	ldr	r3, [r0, #0]
   d6822:	689b      	ldr	r3, [r3, #8]
   d6824:	4718      	bx	r3

000d6826 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d6826:	b508      	push	{r3, lr}
  return write(str);
   d6828:	f7ff ffe8 	bl	d67fc <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d682c:	bd08      	pop	{r3, pc}

000d682e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d682e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6830:	210d      	movs	r1, #13
{
   d6832:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6834:	f7ff fff4 	bl	d6820 <_ZN5Print5printEc>
  n += print('\n');
   d6838:	210a      	movs	r1, #10
  size_t n = print('\r');
   d683a:	4604      	mov	r4, r0
  n += print('\n');
   d683c:	4628      	mov	r0, r5
   d683e:	f7ff ffef 	bl	d6820 <_ZN5Print5printEc>
  return n;
}
   d6842:	4420      	add	r0, r4
   d6844:	bd38      	pop	{r3, r4, r5, pc}

000d6846 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6846:	b538      	push	{r3, r4, r5, lr}
   d6848:	4605      	mov	r5, r0
  return write(str);
   d684a:	f7ff ffd7 	bl	d67fc <_ZN5Print5writeEPKc>
   d684e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6850:	4628      	mov	r0, r5
   d6852:	f7ff ffec 	bl	d682e <_ZN5Print7printlnEv>
  return n;
}
   d6856:	4420      	add	r0, r4
   d6858:	bd38      	pop	{r3, r4, r5, pc}

000d685a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d685a:	b530      	push	{r4, r5, lr}
   d685c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d685e:	2300      	movs	r3, #0
   d6860:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6864:	2a01      	cmp	r2, #1
   d6866:	bf98      	it	ls
   d6868:	220a      	movls	r2, #10
   d686a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d686c:	460d      	mov	r5, r1
   d686e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6872:	fb01 5312 	mls	r3, r1, r2, r5
   d6876:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d687a:	2b09      	cmp	r3, #9
   d687c:	bf94      	ite	ls
   d687e:	3330      	addls	r3, #48	; 0x30
   d6880:	3337      	addhi	r3, #55	; 0x37
   d6882:	b2db      	uxtb	r3, r3
  } while(n);
   d6884:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6886:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d688a:	d9ef      	bls.n	d686c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d688c:	4621      	mov	r1, r4
   d688e:	f7ff ffb5 	bl	d67fc <_ZN5Print5writeEPKc>
}
   d6892:	b00b      	add	sp, #44	; 0x2c
   d6894:	bd30      	pop	{r4, r5, pc}

000d6896 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6896:	b510      	push	{r4, lr}
  if (0 == max) {
   d6898:	4604      	mov	r4, r0
   d689a:	b128      	cbz	r0, d68a8 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d689c:	f002 fc96 	bl	d91cc <rand>
   d68a0:	fb90 f3f4 	sdiv	r3, r0, r4
   d68a4:	fb03 0414 	mls	r4, r3, r4, r0
}
   d68a8:	4620      	mov	r0, r4
   d68aa:	bd10      	pop	{r4, pc}

000d68ac <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d68ac:	4288      	cmp	r0, r1
{
   d68ae:	b510      	push	{r4, lr}
   d68b0:	4604      	mov	r4, r0
  if (min >= max) {
   d68b2:	da03      	bge.n	d68bc <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d68b4:	1a08      	subs	r0, r1, r0
   d68b6:	f7ff ffee 	bl	d6896 <_Z6randomi>
   d68ba:	4404      	add	r4, r0
}
   d68bc:	4620      	mov	r0, r4
   d68be:	bd10      	pop	{r4, pc}

000d68c0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d68c0:	b510      	push	{r4, lr}
   d68c2:	4604      	mov	r4, r0
   d68c4:	f7ff faee 	bl	d5ea4 <_ZNSt14_Function_baseD1Ev>
   d68c8:	4620      	mov	r0, r4
   d68ca:	bd10      	pop	{r4, pc}

000d68cc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d68cc:	4803      	ldr	r0, [pc, #12]	; (d68dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d68ce:	4a04      	ldr	r2, [pc, #16]	; (d68e0 <_GLOBAL__sub_I_RGB+0x14>)
   d68d0:	4904      	ldr	r1, [pc, #16]	; (d68e4 <_GLOBAL__sub_I_RGB+0x18>)
   d68d2:	2300      	movs	r3, #0
   d68d4:	6083      	str	r3, [r0, #8]
   d68d6:	f000 bdcb 	b.w	d7470 <__aeabi_atexit>
   d68da:	bf00      	nop
   d68dc:	2003e620 	.word	0x2003e620
   d68e0:	2003e440 	.word	0x2003e440
   d68e4:	000d68c1 	.word	0x000d68c1

000d68e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d68e8:	b510      	push	{r4, lr}
   d68ea:	4604      	mov	r4, r0
   d68ec:	4608      	mov	r0, r1
{
    _spi = spi;
   d68ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d68f0:	f7ff f91c 	bl	d5b2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d68f4:	2300      	movs	r3, #0
   d68f6:	6063      	str	r3, [r4, #4]
}
   d68f8:	4620      	mov	r0, r4
   d68fa:	bd10      	pop	{r4, pc}

000d68fc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d68fc:	b510      	push	{r4, lr}
   d68fe:	4604      	mov	r4, r0
{
	free(buffer);
   d6900:	6800      	ldr	r0, [r0, #0]
   d6902:	f7ff fa4f 	bl	d5da4 <free>
}
   d6906:	4620      	mov	r0, r4
   d6908:	bd10      	pop	{r4, pc}

000d690a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d690a:	b510      	push	{r4, lr}
   d690c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d690e:	6800      	ldr	r0, [r0, #0]
   d6910:	b108      	cbz	r0, d6916 <_ZN6String10invalidateEv+0xc>
   d6912:	f7ff fa47 	bl	d5da4 <free>
	buffer = NULL;
   d6916:	2300      	movs	r3, #0
	capacity = len = 0;
   d6918:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d691c:	6023      	str	r3, [r4, #0]
}
   d691e:	bd10      	pop	{r4, pc}

000d6920 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6920:	b538      	push	{r3, r4, r5, lr}
   d6922:	4604      	mov	r4, r0
   d6924:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6926:	6800      	ldr	r0, [r0, #0]
   d6928:	3101      	adds	r1, #1
   d692a:	f7ff fa43 	bl	d5db4 <realloc>
	if (newbuffer) {
   d692e:	b110      	cbz	r0, d6936 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6930:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6934:	2001      	movs	r0, #1
	}
	return 0;
}
   d6936:	bd38      	pop	{r3, r4, r5, pc}

000d6938 <_ZN6String7reserveEj>:
{
   d6938:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d693a:	6803      	ldr	r3, [r0, #0]
{
   d693c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d693e:	b123      	cbz	r3, d694a <_ZN6String7reserveEj+0x12>
   d6940:	6843      	ldr	r3, [r0, #4]
   d6942:	428b      	cmp	r3, r1
   d6944:	d301      	bcc.n	d694a <_ZN6String7reserveEj+0x12>
   d6946:	2001      	movs	r0, #1
}
   d6948:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d694a:	4620      	mov	r0, r4
   d694c:	f7ff ffe8 	bl	d6920 <_ZN6String12changeBufferEj>
   d6950:	2800      	cmp	r0, #0
   d6952:	d0f9      	beq.n	d6948 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6954:	68a3      	ldr	r3, [r4, #8]
   d6956:	2b00      	cmp	r3, #0
   d6958:	d1f5      	bne.n	d6946 <_ZN6String7reserveEj+0xe>
   d695a:	6822      	ldr	r2, [r4, #0]
   d695c:	7013      	strb	r3, [r2, #0]
   d695e:	e7f2      	b.n	d6946 <_ZN6String7reserveEj+0xe>

000d6960 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6960:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6962:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6964:	4611      	mov	r1, r2
   d6966:	9201      	str	r2, [sp, #4]
{
   d6968:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d696a:	f7ff ffe5 	bl	d6938 <_ZN6String7reserveEj>
   d696e:	9a01      	ldr	r2, [sp, #4]
   d6970:	b928      	cbnz	r0, d697e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6972:	4620      	mov	r0, r4
   d6974:	f7ff ffc9 	bl	d690a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6978:	4620      	mov	r0, r4
   d697a:	b003      	add	sp, #12
   d697c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d697e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6980:	4629      	mov	r1, r5
   d6982:	6820      	ldr	r0, [r4, #0]
   d6984:	f002 fbe8 	bl	d9158 <memcpy>
	buffer[len] = 0;
   d6988:	6822      	ldr	r2, [r4, #0]
   d698a:	68a3      	ldr	r3, [r4, #8]
   d698c:	2100      	movs	r1, #0
   d698e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6990:	e7f2      	b.n	d6978 <_ZN6String4copyEPKcj+0x18>

000d6992 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6992:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6994:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6996:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d699a:	4604      	mov	r4, r0
	len = 0;
   d699c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d699e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d69a0:	b141      	cbz	r1, d69b4 <_ZN6StringC1EPKc+0x22>
   d69a2:	4608      	mov	r0, r1
   d69a4:	9101      	str	r1, [sp, #4]
   d69a6:	f002 fc6a 	bl	d927e <strlen>
   d69aa:	9901      	ldr	r1, [sp, #4]
   d69ac:	4602      	mov	r2, r0
   d69ae:	4620      	mov	r0, r4
   d69b0:	f7ff ffd6 	bl	d6960 <_ZN6String4copyEPKcj>
}
   d69b4:	4620      	mov	r0, r4
   d69b6:	b002      	add	sp, #8
   d69b8:	bd10      	pop	{r4, pc}

000d69ba <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d69ba:	b538      	push	{r3, r4, r5, lr}
   d69bc:	4605      	mov	r5, r0
	if (buffer) {
   d69be:	6800      	ldr	r0, [r0, #0]
{
   d69c0:	460c      	mov	r4, r1
	if (buffer) {
   d69c2:	b168      	cbz	r0, d69e0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d69c4:	686a      	ldr	r2, [r5, #4]
   d69c6:	688b      	ldr	r3, [r1, #8]
   d69c8:	429a      	cmp	r2, r3
   d69ca:	d307      	bcc.n	d69dc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d69cc:	6809      	ldr	r1, [r1, #0]
   d69ce:	f002 fc31 	bl	d9234 <strcpy>
			len = rhs.len;
   d69d2:	68a3      	ldr	r3, [r4, #8]
   d69d4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d69d6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d69d8:	60a3      	str	r3, [r4, #8]
}
   d69da:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d69dc:	f7ff f9e2 	bl	d5da4 <free>
	buffer = rhs.buffer;
   d69e0:	6823      	ldr	r3, [r4, #0]
   d69e2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d69e4:	6863      	ldr	r3, [r4, #4]
   d69e6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d69e8:	68a3      	ldr	r3, [r4, #8]
   d69ea:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d69ec:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d69ee:	e9c4 3300 	strd	r3, r3, [r4]
   d69f2:	e7f1      	b.n	d69d8 <_ZN6String4moveERS_+0x1e>

000d69f4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d69f4:	4288      	cmp	r0, r1
{
   d69f6:	b510      	push	{r4, lr}
   d69f8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d69fa:	d005      	beq.n	d6a08 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d69fc:	680b      	ldr	r3, [r1, #0]
   d69fe:	b12b      	cbz	r3, d6a0c <_ZN6StringaSERKS_+0x18>
   d6a00:	688a      	ldr	r2, [r1, #8]
   d6a02:	4619      	mov	r1, r3
   d6a04:	f7ff ffac 	bl	d6960 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6a08:	4620      	mov	r0, r4
   d6a0a:	bd10      	pop	{r4, pc}
	else invalidate();
   d6a0c:	f7ff ff7d 	bl	d690a <_ZN6String10invalidateEv>
   d6a10:	e7fa      	b.n	d6a08 <_ZN6StringaSERKS_+0x14>

000d6a12 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6a12:	b510      	push	{r4, lr}
	buffer = NULL;
   d6a14:	2300      	movs	r3, #0
String::String(const String &value)
   d6a16:	4604      	mov	r4, r0
	capacity = 0;
   d6a18:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6a1c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a1e:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6a20:	f7ff ffe8 	bl	d69f4 <_ZN6StringaSERKS_>
}
   d6a24:	4620      	mov	r0, r4
   d6a26:	bd10      	pop	{r4, pc}

000d6a28 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6a28:	4288      	cmp	r0, r1
{
   d6a2a:	b510      	push	{r4, lr}
   d6a2c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6a2e:	d001      	beq.n	d6a34 <_ZN6StringaSEOS_+0xc>
   d6a30:	f7ff ffc3 	bl	d69ba <_ZN6String4moveERS_>
	return *this;
}
   d6a34:	4620      	mov	r0, r4
   d6a36:	bd10      	pop	{r4, pc}

000d6a38 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6a38:	b513      	push	{r0, r1, r4, lr}
   d6a3a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6a3c:	b159      	cbz	r1, d6a56 <_ZN6StringaSEPKc+0x1e>
   d6a3e:	4608      	mov	r0, r1
   d6a40:	9101      	str	r1, [sp, #4]
   d6a42:	f002 fc1c 	bl	d927e <strlen>
   d6a46:	9901      	ldr	r1, [sp, #4]
   d6a48:	4602      	mov	r2, r0
   d6a4a:	4620      	mov	r0, r4
   d6a4c:	f7ff ff88 	bl	d6960 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6a50:	4620      	mov	r0, r4
   d6a52:	b002      	add	sp, #8
   d6a54:	bd10      	pop	{r4, pc}
	else invalidate();
   d6a56:	f7ff ff58 	bl	d690a <_ZN6String10invalidateEv>
   d6a5a:	e7f9      	b.n	d6a50 <_ZN6StringaSEPKc+0x18>

000d6a5c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6a5c:	b510      	push	{r4, lr}
   d6a5e:	4604      	mov	r4, r0
   d6a60:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6a62:	2300      	movs	r3, #0
	capacity = 0;
   d6a64:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6a68:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6a6a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6a6c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6a6e:	a901      	add	r1, sp, #4
   d6a70:	f000 fa28 	bl	d6ec4 <itoa>
	*this = buf;
   d6a74:	a901      	add	r1, sp, #4
   d6a76:	4620      	mov	r0, r4
   d6a78:	f7ff ffde 	bl	d6a38 <_ZN6StringaSEPKc>
}
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	b00a      	add	sp, #40	; 0x28
   d6a80:	bd10      	pop	{r4, pc}

000d6a82 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6a82:	b570      	push	{r4, r5, r6, lr}
   d6a84:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6a86:	460e      	mov	r6, r1
   d6a88:	b909      	cbnz	r1, d6a8e <_ZN6String6concatEPKcj+0xc>
   d6a8a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6a8c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6a8e:	b16a      	cbz	r2, d6aac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6a90:	6884      	ldr	r4, [r0, #8]
   d6a92:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6a94:	4621      	mov	r1, r4
   d6a96:	f7ff ff4f 	bl	d6938 <_ZN6String7reserveEj>
   d6a9a:	2800      	cmp	r0, #0
   d6a9c:	d0f5      	beq.n	d6a8a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6a9e:	6828      	ldr	r0, [r5, #0]
   d6aa0:	68ab      	ldr	r3, [r5, #8]
   d6aa2:	4631      	mov	r1, r6
   d6aa4:	4418      	add	r0, r3
   d6aa6:	f002 fbc5 	bl	d9234 <strcpy>
	len = newlen;
   d6aaa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6aac:	2001      	movs	r0, #1
   d6aae:	e7ed      	b.n	d6a8c <_ZN6String6concatEPKcj+0xa>

000d6ab0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6ab0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6ab2:	2300      	movs	r3, #0
	buf[0] = c;
   d6ab4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6ab8:	2201      	movs	r2, #1
   d6aba:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d6abc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6ac0:	f7ff ffdf 	bl	d6a82 <_ZN6String6concatEPKcj>
}
   d6ac4:	b003      	add	sp, #12
   d6ac6:	f85d fb04 	ldr.w	pc, [sp], #4

000d6aca <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6aca:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6acc:	688a      	ldr	r2, [r1, #8]
   d6ace:	6809      	ldr	r1, [r1, #0]
{
   d6ad0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6ad2:	f7ff ffd6 	bl	d6a82 <_ZN6String6concatEPKcj>
   d6ad6:	b910      	cbnz	r0, d6ade <_ZplRK15StringSumHelperRK6String+0x14>
   d6ad8:	4620      	mov	r0, r4
   d6ada:	f7ff ff16 	bl	d690a <_ZN6String10invalidateEv>
	return a;
}
   d6ade:	4620      	mov	r0, r4
   d6ae0:	bd10      	pop	{r4, pc}

000d6ae2 <_ZplRK15StringSumHelperc>:
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   d6ae2:	b510      	push	{r4, lr}
   d6ae4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   d6ae6:	f7ff ffe3 	bl	d6ab0 <_ZN6String6concatEc>
   d6aea:	b910      	cbnz	r0, d6af2 <_ZplRK15StringSumHelperc+0x10>
   d6aec:	4620      	mov	r0, r4
   d6aee:	f7ff ff0c 	bl	d690a <_ZN6String10invalidateEv>
	return a;
}
   d6af2:	4620      	mov	r0, r4
   d6af4:	bd10      	pop	{r4, pc}
	...

000d6af8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6af8:	b40e      	push	{r1, r2, r3}
   d6afa:	b570      	push	{r4, r5, r6, lr}
   d6afc:	b087      	sub	sp, #28
   d6afe:	ad0b      	add	r5, sp, #44	; 0x2c
   d6b00:	4604      	mov	r4, r0
   d6b02:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6b06:	9201      	str	r2, [sp, #4]
   d6b08:	462b      	mov	r3, r5
   d6b0a:	2105      	movs	r1, #5
   d6b0c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d6b0e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6b10:	f7ff f958 	bl	d5dc4 <vsnprintf>
    va_end(marker);

    String result;
   d6b14:	490b      	ldr	r1, [pc, #44]	; (d6b44 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6b16:	4606      	mov	r6, r0
    String result;
   d6b18:	4620      	mov	r0, r4
   d6b1a:	f7ff ff3a 	bl	d6992 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d6b1e:	4631      	mov	r1, r6
   d6b20:	4620      	mov	r0, r4
   d6b22:	f7ff ff09 	bl	d6938 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6b26:	6820      	ldr	r0, [r4, #0]
   d6b28:	b130      	cbz	r0, d6b38 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6b2a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d6b2c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6b2e:	462b      	mov	r3, r5
   d6b30:	1c71      	adds	r1, r6, #1
   d6b32:	f7ff f947 	bl	d5dc4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d6b36:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d6b38:	4620      	mov	r0, r4
   d6b3a:	b007      	add	sp, #28
   d6b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6b40:	b003      	add	sp, #12
   d6b42:	4770      	bx	lr
   d6b44:	000d9533 	.word	0x000d9533

000d6b48 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6b48:	b510      	push	{r4, lr}
   d6b4a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6b4c:	6800      	ldr	r0, [r0, #0]
   d6b4e:	b118      	cbz	r0, d6b58 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6b50:	f7ff f928 	bl	d5da4 <free>
            wakeupSource_ = nullptr;
   d6b54:	2300      	movs	r3, #0
   d6b56:	6023      	str	r3, [r4, #0]
        }
    }
   d6b58:	bd10      	pop	{r4, pc}

000d6b5a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6b5a:	b510      	push	{r4, lr}
   d6b5c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6b5e:	f7ff fff3 	bl	d6b48 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6b62:	4620      	mov	r0, r4
   d6b64:	bd10      	pop	{r4, pc}
	...

000d6b68 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6b68:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6b6a:	4b09      	ldr	r3, [pc, #36]	; (d6b90 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6b6c:	4c09      	ldr	r4, [pc, #36]	; (d6b94 <_GLOBAL__sub_I_System+0x2c>)
   d6b6e:	2202      	movs	r2, #2
   d6b70:	2000      	movs	r0, #0
   d6b72:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6b74:	4b08      	ldr	r3, [pc, #32]	; (d6b98 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6b76:	6020      	str	r0, [r4, #0]
   d6b78:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6b7a:	71a0      	strb	r0, [r4, #6]
   d6b7c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6b7e:	f7ff f86d 	bl	d5c5c <set_system_mode>
SystemClass System;
   d6b82:	4620      	mov	r0, r4
   d6b84:	4a05      	ldr	r2, [pc, #20]	; (d6b9c <_GLOBAL__sub_I_System+0x34>)
   d6b86:	4906      	ldr	r1, [pc, #24]	; (d6ba0 <_GLOBAL__sub_I_System+0x38>)
   d6b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6b8c:	f000 bc70 	b.w	d7470 <__aeabi_atexit>
   d6b90:	2003e63c 	.word	0x2003e63c
   d6b94:	2003e630 	.word	0x2003e630
   d6b98:	ffff0000 	.word	0xffff0000
   d6b9c:	2003e440 	.word	0x2003e440
   d6ba0:	000d6b5b 	.word	0x000d6b5b

000d6ba4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ba4:	4b02      	ldr	r3, [pc, #8]	; (d6bb0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6ba6:	681a      	ldr	r2, [r3, #0]
   d6ba8:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6baa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6bac:	4770      	bx	lr
   d6bae:	bf00      	nop
   d6bb0:	2003e3d4 	.word	0x2003e3d4
   d6bb4:	2003e640 	.word	0x2003e640

000d6bb8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6bb8:	4770      	bx	lr

000d6bba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6bba:	7441      	strb	r1, [r0, #17]
}
   d6bbc:	4770      	bx	lr

000d6bbe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6bbe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6bc0:	7c00      	ldrb	r0, [r0, #16]
   d6bc2:	f7fe fffb 	bl	d5bbc <hal_usart_available_data_for_write>
}
   d6bc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bca:	bd08      	pop	{r3, pc}

000d6bcc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6bcc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6bce:	7c00      	ldrb	r0, [r0, #16]
   d6bd0:	f7fe ffcc 	bl	d5b6c <hal_usart_available>
}
   d6bd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bd8:	bd08      	pop	{r3, pc}

000d6bda <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6bda:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6bdc:	7c00      	ldrb	r0, [r0, #16]
   d6bde:	f7fe ffd5 	bl	d5b8c <hal_usart_peek>
}
   d6be2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6be6:	bd08      	pop	{r3, pc}

000d6be8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6be8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6bea:	7c00      	ldrb	r0, [r0, #16]
   d6bec:	f7fe ffc6 	bl	d5b7c <hal_usart_read>
}
   d6bf0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6bf4:	bd08      	pop	{r3, pc}

000d6bf6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6bf6:	7c00      	ldrb	r0, [r0, #16]
   d6bf8:	f7fe bfd0 	b.w	d5b9c <hal_usart_flush>

000d6bfc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6bfe:	7c45      	ldrb	r5, [r0, #17]
{
   d6c00:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6c02:	b12d      	cbz	r5, d6c10 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6c04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c06:	b003      	add	sp, #12
   d6c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6c0c:	f7fe bfa6 	b.w	d5b5c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6c10:	7c00      	ldrb	r0, [r0, #16]
   d6c12:	9101      	str	r1, [sp, #4]
   d6c14:	f7fe ffd2 	bl	d5bbc <hal_usart_available_data_for_write>
   d6c18:	2800      	cmp	r0, #0
   d6c1a:	9901      	ldr	r1, [sp, #4]
   d6c1c:	dcf2      	bgt.n	d6c04 <_ZN11USARTSerial5writeEh+0x8>
}
   d6c1e:	4628      	mov	r0, r5
   d6c20:	b003      	add	sp, #12
   d6c22:	bd30      	pop	{r4, r5, pc}

000d6c24 <_ZN11USARTSerialD0Ev>:
   d6c24:	b510      	push	{r4, lr}
   d6c26:	2114      	movs	r1, #20
   d6c28:	4604      	mov	r4, r0
   d6c2a:	f000 fc26 	bl	d747a <_ZdlPvj>
   d6c2e:	4620      	mov	r0, r4
   d6c30:	bd10      	pop	{r4, pc}
	...

000d6c34 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6c34:	b510      	push	{r4, lr}
   d6c36:	f04f 0c00 	mov.w	ip, #0
   d6c3a:	4604      	mov	r4, r0
   d6c3c:	4608      	mov	r0, r1
   d6c3e:	4611      	mov	r1, r2
   d6c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c44:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6c48:	4a04      	ldr	r2, [pc, #16]	; (d6c5c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6c4a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6c4c:	2201      	movs	r2, #1
  _serial = serial;
   d6c4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6c50:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6c52:	461a      	mov	r2, r3
   d6c54:	f7fe ff7a 	bl	d5b4c <hal_usart_init>
}
   d6c58:	4620      	mov	r0, r4
   d6c5a:	bd10      	pop	{r4, pc}
   d6c5c:	000d96e0 	.word	0x000d96e0

000d6c60 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6c60:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6c62:	4c0e      	ldr	r4, [pc, #56]	; (d6c9c <_Z22__fetch_global_Serial1v+0x3c>)
   d6c64:	7821      	ldrb	r1, [r4, #0]
   d6c66:	f3bf 8f5b 	dmb	ish
   d6c6a:	f011 0101 	ands.w	r1, r1, #1
   d6c6e:	d112      	bne.n	d6c96 <_Z22__fetch_global_Serial1v+0x36>
   d6c70:	4620      	mov	r0, r4
   d6c72:	9101      	str	r1, [sp, #4]
   d6c74:	f7fd fa15 	bl	d40a2 <__cxa_guard_acquire>
   d6c78:	9901      	ldr	r1, [sp, #4]
   d6c7a:	b160      	cbz	r0, d6c96 <_Z22__fetch_global_Serial1v+0x36>
   d6c7c:	4a08      	ldr	r2, [pc, #32]	; (d6ca0 <_Z22__fetch_global_Serial1v+0x40>)
   d6c7e:	4b09      	ldr	r3, [pc, #36]	; (d6ca4 <_Z22__fetch_global_Serial1v+0x44>)
   d6c80:	4809      	ldr	r0, [pc, #36]	; (d6ca8 <_Z22__fetch_global_Serial1v+0x48>)
   d6c82:	f7ff ffd7 	bl	d6c34 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6c86:	4620      	mov	r0, r4
   d6c88:	f7fd fa10 	bl	d40ac <__cxa_guard_release>
   d6c8c:	4a07      	ldr	r2, [pc, #28]	; (d6cac <_Z22__fetch_global_Serial1v+0x4c>)
   d6c8e:	4908      	ldr	r1, [pc, #32]	; (d6cb0 <_Z22__fetch_global_Serial1v+0x50>)
   d6c90:	4805      	ldr	r0, [pc, #20]	; (d6ca8 <_Z22__fetch_global_Serial1v+0x48>)
   d6c92:	f000 fbed 	bl	d7470 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6c96:	4804      	ldr	r0, [pc, #16]	; (d6ca8 <_Z22__fetch_global_Serial1v+0x48>)
   d6c98:	b002      	add	sp, #8
   d6c9a:	bd10      	pop	{r4, pc}
   d6c9c:	2003e644 	.word	0x2003e644
   d6ca0:	2003e648 	.word	0x2003e648
   d6ca4:	2003e6cc 	.word	0x2003e6cc
   d6ca8:	2003e750 	.word	0x2003e750
   d6cac:	2003e440 	.word	0x2003e440
   d6cb0:	000d6bb9 	.word	0x000d6bb9

000d6cb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6cb4:	7441      	strb	r1, [r0, #17]
}
   d6cb6:	4770      	bx	lr

000d6cb8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6cb8:	4770      	bx	lr

000d6cba <_ZN9USBSerial4readEv>:
{
   d6cba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6cbc:	2100      	movs	r1, #0
   d6cbe:	7c00      	ldrb	r0, [r0, #16]
   d6cc0:	f7fe ffa4 	bl	d5c0c <HAL_USB_USART_Receive_Data>
}
   d6cc4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6cc8:	bd08      	pop	{r3, pc}

000d6cca <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6cca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6ccc:	2101      	movs	r1, #1
   d6cce:	7c00      	ldrb	r0, [r0, #16]
   d6cd0:	f7fe ff9c 	bl	d5c0c <HAL_USB_USART_Receive_Data>
}
   d6cd4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6cd8:	bd08      	pop	{r3, pc}

000d6cda <_ZN9USBSerial17availableForWriteEv>:
{
   d6cda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6cdc:	7c00      	ldrb	r0, [r0, #16]
   d6cde:	f7fe ff8d 	bl	d5bfc <HAL_USB_USART_Available_Data_For_Write>
}
   d6ce2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6ce6:	bd08      	pop	{r3, pc}

000d6ce8 <_ZN9USBSerial9availableEv>:
{
   d6ce8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6cea:	7c00      	ldrb	r0, [r0, #16]
   d6cec:	f7fe ff7e 	bl	d5bec <HAL_USB_USART_Available_Data>
}
   d6cf0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cf4:	bd08      	pop	{r3, pc}

000d6cf6 <_ZN9USBSerial5writeEh>:
{
   d6cf6:	b513      	push	{r0, r1, r4, lr}
   d6cf8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cfa:	7c00      	ldrb	r0, [r0, #16]
{
   d6cfc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cfe:	f7fe ff7d 	bl	d5bfc <HAL_USB_USART_Available_Data_For_Write>
   d6d02:	2800      	cmp	r0, #0
   d6d04:	9901      	ldr	r1, [sp, #4]
   d6d06:	dc01      	bgt.n	d6d0c <_ZN9USBSerial5writeEh+0x16>
   d6d08:	7c60      	ldrb	r0, [r4, #17]
   d6d0a:	b120      	cbz	r0, d6d16 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6d0c:	7c20      	ldrb	r0, [r4, #16]
   d6d0e:	f7fe ff85 	bl	d5c1c <HAL_USB_USART_Send_Data>
   d6d12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6d16:	b002      	add	sp, #8
   d6d18:	bd10      	pop	{r4, pc}

000d6d1a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6d1a:	7c00      	ldrb	r0, [r0, #16]
   d6d1c:	f7fe bf86 	b.w	d5c2c <HAL_USB_USART_Flush_Data>

000d6d20 <_ZN9USBSerialD0Ev>:
   d6d20:	b510      	push	{r4, lr}
   d6d22:	2114      	movs	r1, #20
   d6d24:	4604      	mov	r4, r0
   d6d26:	f000 fba8 	bl	d747a <_ZdlPvj>
   d6d2a:	4620      	mov	r0, r4
   d6d2c:	bd10      	pop	{r4, pc}
	...

000d6d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d30:	b510      	push	{r4, lr}
   d6d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d36:	4604      	mov	r4, r0
   d6d38:	4608      	mov	r0, r1
   d6d3a:	2100      	movs	r1, #0
   d6d3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6d40:	4b04      	ldr	r3, [pc, #16]	; (d6d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d42:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6d44:	2301      	movs	r3, #1
  _serial = serial;
   d6d46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6d48:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6d4a:	4611      	mov	r1, r2
   d6d4c:	f7fe ff3e 	bl	d5bcc <HAL_USB_USART_Init>
}
   d6d50:	4620      	mov	r0, r4
   d6d52:	bd10      	pop	{r4, pc}
   d6d54:	000d9710 	.word	0x000d9710

000d6d58 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6d58:	7c00      	ldrb	r0, [r0, #16]
   d6d5a:	2200      	movs	r2, #0
   d6d5c:	f7fe bf3e 	b.w	d5bdc <HAL_USB_USART_Begin>

000d6d60 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d6d60:	7c00      	ldrb	r0, [r0, #16]
   d6d62:	f7fe bf6b 	b.w	d5c3c <HAL_USB_USART_Is_Enabled>

000d6d66 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d6d66:	f7ff bffb 	b.w	d6d60 <_ZN9USBSerial9isEnabledEv>

000d6d6a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d6a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6d6c:	2214      	movs	r2, #20
{
   d6d6e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d70:	2100      	movs	r1, #0
   d6d72:	f002 f9ff 	bl	d9174 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d76:	4620      	mov	r0, r4
   d6d78:	bd10      	pop	{r4, pc}
	...

000d6d7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d7e:	4c10      	ldr	r4, [pc, #64]	; (d6dc0 <_Z16_fetch_usbserialv+0x44>)
{
   d6d80:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d82:	a803      	add	r0, sp, #12
   d6d84:	f7ff fff1 	bl	d6d6a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d88:	7821      	ldrb	r1, [r4, #0]
   d6d8a:	f3bf 8f5b 	dmb	ish
   d6d8e:	f011 0101 	ands.w	r1, r1, #1
   d6d92:	d111      	bne.n	d6db8 <_Z16_fetch_usbserialv+0x3c>
   d6d94:	4620      	mov	r0, r4
   d6d96:	9101      	str	r1, [sp, #4]
   d6d98:	f7fd f983 	bl	d40a2 <__cxa_guard_acquire>
   d6d9c:	9901      	ldr	r1, [sp, #4]
   d6d9e:	b158      	cbz	r0, d6db8 <_Z16_fetch_usbserialv+0x3c>
   d6da0:	aa03      	add	r2, sp, #12
   d6da2:	4808      	ldr	r0, [pc, #32]	; (d6dc4 <_Z16_fetch_usbserialv+0x48>)
   d6da4:	f7ff ffc4 	bl	d6d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6da8:	4620      	mov	r0, r4
   d6daa:	f7fd f97f 	bl	d40ac <__cxa_guard_release>
   d6dae:	4a06      	ldr	r2, [pc, #24]	; (d6dc8 <_Z16_fetch_usbserialv+0x4c>)
   d6db0:	4906      	ldr	r1, [pc, #24]	; (d6dcc <_Z16_fetch_usbserialv+0x50>)
   d6db2:	4804      	ldr	r0, [pc, #16]	; (d6dc4 <_Z16_fetch_usbserialv+0x48>)
   d6db4:	f000 fb5c 	bl	d7470 <__aeabi_atexit>
	return _usbserial;
}
   d6db8:	4802      	ldr	r0, [pc, #8]	; (d6dc4 <_Z16_fetch_usbserialv+0x48>)
   d6dba:	b008      	add	sp, #32
   d6dbc:	bd10      	pop	{r4, pc}
   d6dbe:	bf00      	nop
   d6dc0:	2003e764 	.word	0x2003e764
   d6dc4:	2003e768 	.word	0x2003e768
   d6dc8:	2003e440 	.word	0x2003e440
   d6dcc:	000d6cb9 	.word	0x000d6cb9

000d6dd0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6dd0:	2200      	movs	r2, #0
   d6dd2:	6840      	ldr	r0, [r0, #4]
   d6dd4:	4611      	mov	r1, r2
   d6dd6:	f7fe bfa5 	b.w	d5d24 <network_ready>

000d6dda <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dda:	2200      	movs	r2, #0
   d6ddc:	6840      	ldr	r0, [r0, #4]
   d6dde:	4611      	mov	r1, r2
   d6de0:	f7fe bfc0 	b.w	d5d64 <network_listening>

000d6de4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6de4:	2200      	movs	r2, #0
   d6de6:	6840      	ldr	r0, [r0, #4]
   d6de8:	4611      	mov	r1, r2
   d6dea:	f7fe bfcb 	b.w	d5d84 <network_get_listen_timeout>

000d6dee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6dee:	6840      	ldr	r0, [r0, #4]
   d6df0:	2200      	movs	r2, #0
   d6df2:	f7fe bfbf 	b.w	d5d74 <network_set_listen_timeout>

000d6df6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6df6:	6840      	ldr	r0, [r0, #4]
   d6df8:	2200      	movs	r2, #0
   d6dfa:	f081 0101 	eor.w	r1, r1, #1
   d6dfe:	f7fe bfa9 	b.w	d5d54 <network_listen>

000d6e02 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6e02:	2300      	movs	r3, #0
   d6e04:	6840      	ldr	r0, [r0, #4]
   d6e06:	461a      	mov	r2, r3
   d6e08:	4619      	mov	r1, r3
   d6e0a:	f7fe bf9b 	b.w	d5d44 <network_off>

000d6e0e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6e0e:	2300      	movs	r3, #0
   d6e10:	6840      	ldr	r0, [r0, #4]
   d6e12:	461a      	mov	r2, r3
   d6e14:	4619      	mov	r1, r3
   d6e16:	f7fe bf8d 	b.w	d5d34 <network_on>

000d6e1a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6e1a:	2200      	movs	r2, #0
   d6e1c:	6840      	ldr	r0, [r0, #4]
   d6e1e:	4611      	mov	r1, r2
   d6e20:	f7fe bf70 	b.w	d5d04 <network_connecting>

000d6e24 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e24:	6840      	ldr	r0, [r0, #4]
   d6e26:	2200      	movs	r2, #0
   d6e28:	2102      	movs	r1, #2
   d6e2a:	f7fe bf73 	b.w	d5d14 <network_disconnect>

000d6e2e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6e2e:	2300      	movs	r3, #0
   d6e30:	6840      	ldr	r0, [r0, #4]
   d6e32:	461a      	mov	r2, r3
   d6e34:	f7fe bf5e 	b.w	d5cf4 <network_connect>

000d6e38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6e38:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6e3a:	2204      	movs	r2, #4
   d6e3c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6e3e:	4a02      	ldr	r2, [pc, #8]	; (d6e48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6e40:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6e42:	4770      	bx	lr
   d6e44:	2003e77c 	.word	0x2003e77c
   d6e48:	000d9740 	.word	0x000d9740

000d6e4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6e4c:	b510      	push	{r4, lr}
   d6e4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6e50:	f002 fa15 	bl	d927e <strlen>
   d6e54:	3801      	subs	r0, #1
   d6e56:	1823      	adds	r3, r4, r0
   d6e58:	4620      	mov	r0, r4
	while(i<j){
   d6e5a:	4283      	cmp	r3, r0
   d6e5c:	d906      	bls.n	d6e6c <_Z11str_reversePc+0x20>
		c = *i;
   d6e5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6e60:	7819      	ldrb	r1, [r3, #0]
   d6e62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6e66:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6e6a:	e7f6      	b.n	d6e5a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6e6c:	bd10      	pop	{r4, pc}

000d6e6e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6e6e:	b570      	push	{r4, r5, r6, lr}
   d6e70:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6e72:	1e91      	subs	r1, r2, #2
   d6e74:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6e76:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6e78:	d822      	bhi.n	d6ec0 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6e7a:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6e7c:	b16d      	cbz	r5, d6e9a <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6e7e:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6e82:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6e86:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6e88:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6e8a:	bf94      	ite	ls
   d6e8c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6e8e:	3157      	addhi	r1, #87	; 0x57
   d6e90:	b2c9      	uxtb	r1, r1
   d6e92:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6e96:	4635      	mov	r5, r6
	while(a){
   d6e98:	e7f0      	b.n	d6e7c <ultoa+0xe>
   d6e9a:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6e9c:	4423      	add	r3, r4
            *ptr++ = '0';
   d6e9e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6ea0:	4293      	cmp	r3, r2
   d6ea2:	d902      	bls.n	d6eaa <ultoa+0x3c>
            *ptr++ = '0';
   d6ea4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6ea8:	e7fa      	b.n	d6ea0 <ultoa+0x32>
   d6eaa:	1a1a      	subs	r2, r3, r0
   d6eac:	4283      	cmp	r3, r0
   d6eae:	bf38      	it	cc
   d6eb0:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6eb2:	2300      	movs	r3, #0
   d6eb4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6eb6:	4620      	mov	r0, r4
   d6eb8:	f7ff ffc8 	bl	d6e4c <_Z11str_reversePc>
	return buffer;
   d6ebc:	4620      	mov	r0, r4
}
   d6ebe:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6ec0:	2000      	movs	r0, #0
   d6ec2:	e7fc      	b.n	d6ebe <ultoa+0x50>

000d6ec4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6ec4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6ec6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6ec8:	460c      	mov	r4, r1
   d6eca:	4615      	mov	r5, r2
	if(a<0){
   d6ecc:	da0e      	bge.n	d6eec <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6ed2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6ed6:	bf14      	ite	ne
   d6ed8:	4258      	negne	r0, r3
   d6eda:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6edc:	2301      	movs	r3, #1
		*buffer = '-';
   d6ede:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6ee0:	462a      	mov	r2, r5
   d6ee2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6ee4:	f7ff ffc3 	bl	d6e6e <ultoa>
	}
	return buffer;
}
   d6ee8:	4620      	mov	r0, r4
   d6eea:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6eec:	2301      	movs	r3, #1
   d6eee:	e7f9      	b.n	d6ee4 <itoa+0x20>

000d6ef0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6ef0:	4b01      	ldr	r3, [pc, #4]	; (d6ef8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6ef2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6ef4:	4770      	bx	lr
   d6ef6:	bf00      	nop
   d6ef8:	2003e3dc 	.word	0x2003e3dc

000d6efc <serialEventRun>:
{
   d6efc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6efe:	4b0b      	ldr	r3, [pc, #44]	; (d6f2c <serialEventRun+0x30>)
   d6f00:	b143      	cbz	r3, d6f14 <serialEventRun+0x18>
   d6f02:	f7ff ff3b 	bl	d6d7c <_Z16_fetch_usbserialv>
   d6f06:	6803      	ldr	r3, [r0, #0]
   d6f08:	691b      	ldr	r3, [r3, #16]
   d6f0a:	4798      	blx	r3
   d6f0c:	2800      	cmp	r0, #0
   d6f0e:	dd01      	ble.n	d6f14 <serialEventRun+0x18>
        serialEvent();
   d6f10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6f14:	4b06      	ldr	r3, [pc, #24]	; (d6f30 <serialEventRun+0x34>)
   d6f16:	b143      	cbz	r3, d6f2a <serialEventRun+0x2e>
   d6f18:	f7ff fea2 	bl	d6c60 <_Z22__fetch_global_Serial1v>
   d6f1c:	6803      	ldr	r3, [r0, #0]
   d6f1e:	691b      	ldr	r3, [r3, #16]
   d6f20:	4798      	blx	r3
   d6f22:	2800      	cmp	r0, #0
   d6f24:	dd01      	ble.n	d6f2a <serialEventRun+0x2e>
        serialEvent1();
   d6f26:	f3af 8000 	nop.w
}
   d6f2a:	bd08      	pop	{r3, pc}
	...

000d6f34 <_post_loop>:
{
   d6f34:	b508      	push	{r3, lr}
	serialEventRun();
   d6f36:	f7ff ffe1 	bl	d6efc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6f3a:	f7fe fd45 	bl	d59c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6f3e:	4b01      	ldr	r3, [pc, #4]	; (d6f44 <_post_loop+0x10>)
   d6f40:	6018      	str	r0, [r3, #0]
}
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	2003e798 	.word	0x2003e798

000d6f48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6f48:	4802      	ldr	r0, [pc, #8]	; (d6f54 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6f4a:	4a03      	ldr	r2, [pc, #12]	; (d6f58 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6f4c:	4903      	ldr	r1, [pc, #12]	; (d6f5c <_Z33system_initialize_user_backup_ramv+0x14>)
   d6f4e:	1a12      	subs	r2, r2, r0
   d6f50:	f002 b902 	b.w	d9158 <memcpy>
   d6f54:	2003f400 	.word	0x2003f400
   d6f58:	2003f404 	.word	0x2003f404
   d6f5c:	000d97b0 	.word	0x000d97b0

000d6f60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6f60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f62:	2300      	movs	r3, #0
   d6f64:	9300      	str	r3, [sp, #0]
   d6f66:	461a      	mov	r2, r3
   d6f68:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f6c:	f7fe fea0 	bl	d5cb0 <system_ctrl_set_result>
}
   d6f70:	b003      	add	sp, #12
   d6f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6f78 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6f78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6f7a:	8843      	ldrh	r3, [r0, #2]
   d6f7c:	2b0a      	cmp	r3, #10
   d6f7e:	d008      	beq.n	d6f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6f80:	2b50      	cmp	r3, #80	; 0x50
   d6f82:	d10b      	bne.n	d6f9c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6f84:	4b09      	ldr	r3, [pc, #36]	; (d6fac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6f86:	681b      	ldr	r3, [r3, #0]
   d6f88:	b14b      	cbz	r3, d6f9e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6f8a:	b003      	add	sp, #12
   d6f8c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6f90:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6f92:	f7ff ffe5 	bl	d6f60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6f96:	b003      	add	sp, #12
   d6f98:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f9c:	2300      	movs	r3, #0
   d6f9e:	9300      	str	r3, [sp, #0]
   d6fa0:	461a      	mov	r2, r3
   d6fa2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6fa6:	f7fe fe83 	bl	d5cb0 <system_ctrl_set_result>
}
   d6faa:	e7f4      	b.n	d6f96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6fac:	2003e788 	.word	0x2003e788

000d6fb0 <module_user_init_hook>:
{
   d6fb0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6fb2:	4c12      	ldr	r4, [pc, #72]	; (d6ffc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6fb4:	4812      	ldr	r0, [pc, #72]	; (d7000 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6fb6:	4d13      	ldr	r5, [pc, #76]	; (d7004 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6fb8:	2100      	movs	r1, #0
   d6fba:	f7fe ff23 	bl	d5e04 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6fbe:	6823      	ldr	r3, [r4, #0]
   d6fc0:	42ab      	cmp	r3, r5
   d6fc2:	4b11      	ldr	r3, [pc, #68]	; (d7008 <module_user_init_hook+0x58>)
   d6fc4:	bf0c      	ite	eq
   d6fc6:	2201      	moveq	r2, #1
   d6fc8:	2200      	movne	r2, #0
   d6fca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6fcc:	d002      	beq.n	d6fd4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6fce:	f7ff ffbb 	bl	d6f48 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6fd2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6fd4:	f7fe fce0 	bl	d5998 <HAL_RNG_GetRandomNumber>
   d6fd8:	4604      	mov	r4, r0
    srand(seed);
   d6fda:	f002 f8d3 	bl	d9184 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6fde:	4b0b      	ldr	r3, [pc, #44]	; (d700c <module_user_init_hook+0x5c>)
   d6fe0:	b113      	cbz	r3, d6fe8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6fe2:	4620      	mov	r0, r4
   d6fe4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6fe8:	2100      	movs	r1, #0
   d6fea:	4808      	ldr	r0, [pc, #32]	; (d700c <module_user_init_hook+0x5c>)
   d6fec:	f7fe fe7a 	bl	d5ce4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6ff4:	4806      	ldr	r0, [pc, #24]	; (d7010 <module_user_init_hook+0x60>)
   d6ff6:	2100      	movs	r1, #0
   d6ff8:	f7fe be50 	b.w	d5c9c <system_ctrl_set_app_request_handler>
   d6ffc:	2003f400 	.word	0x2003f400
   d7000:	000d6ef1 	.word	0x000d6ef1
   d7004:	9a271c1e 	.word	0x9a271c1e
   d7008:	2003e784 	.word	0x2003e784
   d700c:	00000000 	.word	0x00000000
   d7010:	000d6f79 	.word	0x000d6f79

000d7014 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7014:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7016:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7018:	d902      	bls.n	d7020 <pinAvailable+0xc>
    return false;
   d701a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d701c:	b002      	add	sp, #8
   d701e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7020:	f1a0 030b 	sub.w	r3, r0, #11
   d7024:	2b02      	cmp	r3, #2
   d7026:	d81a      	bhi.n	d705e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7028:	4c17      	ldr	r4, [pc, #92]	; (d7088 <pinAvailable+0x74>)
   d702a:	7821      	ldrb	r1, [r4, #0]
   d702c:	f3bf 8f5b 	dmb	ish
   d7030:	f011 0101 	ands.w	r1, r1, #1
   d7034:	d10b      	bne.n	d704e <pinAvailable+0x3a>
   d7036:	4620      	mov	r0, r4
   d7038:	9101      	str	r1, [sp, #4]
   d703a:	f7fd f832 	bl	d40a2 <__cxa_guard_acquire>
   d703e:	9901      	ldr	r1, [sp, #4]
   d7040:	b128      	cbz	r0, d704e <pinAvailable+0x3a>
   d7042:	4812      	ldr	r0, [pc, #72]	; (d708c <pinAvailable+0x78>)
   d7044:	f7ff fc50 	bl	d68e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7048:	4620      	mov	r0, r4
   d704a:	f7fd f82f 	bl	d40ac <__cxa_guard_release>
   d704e:	4b0f      	ldr	r3, [pc, #60]	; (d708c <pinAvailable+0x78>)
   d7050:	7818      	ldrb	r0, [r3, #0]
   d7052:	f7fe fd73 	bl	d5b3c <hal_spi_is_enabled>
   d7056:	2800      	cmp	r0, #0
   d7058:	d1df      	bne.n	d701a <pinAvailable+0x6>
  return true; // 'pin' is available
   d705a:	2001      	movs	r0, #1
   d705c:	e7de      	b.n	d701c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d705e:	2801      	cmp	r0, #1
   d7060:	d809      	bhi.n	d7076 <pinAvailable+0x62>
   d7062:	f000 f86f 	bl	d7144 <_Z19__fetch_global_Wirev>
   d7066:	2100      	movs	r1, #0
   d7068:	7c00      	ldrb	r0, [r0, #16]
   d706a:	f7fe fd2f 	bl	d5acc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d706e:	f080 0001 	eor.w	r0, r0, #1
   d7072:	b2c0      	uxtb	r0, r0
   d7074:	e7d2      	b.n	d701c <pinAvailable+0x8>
   d7076:	3809      	subs	r0, #9
   d7078:	2801      	cmp	r0, #1
   d707a:	d8ee      	bhi.n	d705a <pinAvailable+0x46>
   d707c:	f7ff fdf0 	bl	d6c60 <_Z22__fetch_global_Serial1v>
   d7080:	7c00      	ldrb	r0, [r0, #16]
   d7082:	f7fe fd93 	bl	d5bac <hal_usart_is_enabled>
   d7086:	e7f2      	b.n	d706e <pinAvailable+0x5a>
   d7088:	2003e78c 	.word	0x2003e78c
   d708c:	2003e790 	.word	0x2003e790

000d7090 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7090:	2823      	cmp	r0, #35	; 0x23
{
   d7092:	b538      	push	{r3, r4, r5, lr}
   d7094:	4604      	mov	r4, r0
   d7096:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7098:	d80a      	bhi.n	d70b0 <pinMode+0x20>
   d709a:	29ff      	cmp	r1, #255	; 0xff
   d709c:	d008      	beq.n	d70b0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d709e:	f7ff ffb9 	bl	d7014 <pinAvailable>
   d70a2:	b128      	cbz	r0, d70b0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d70a4:	4629      	mov	r1, r5
   d70a6:	4620      	mov	r0, r4
}
   d70a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d70ac:	f7fe bc9c 	b.w	d59e8 <HAL_Pin_Mode>
}
   d70b0:	bd38      	pop	{r3, r4, r5, pc}

000d70b2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d70b2:	b538      	push	{r3, r4, r5, lr}
   d70b4:	4604      	mov	r4, r0
   d70b6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d70b8:	f7fe fc9e 	bl	d59f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d70bc:	28ff      	cmp	r0, #255	; 0xff
   d70be:	d010      	beq.n	d70e2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d70c0:	2806      	cmp	r0, #6
   d70c2:	d804      	bhi.n	d70ce <digitalWrite+0x1c>
   d70c4:	234d      	movs	r3, #77	; 0x4d
   d70c6:	fa23 f000 	lsr.w	r0, r3, r0
   d70ca:	07c3      	lsls	r3, r0, #31
   d70cc:	d409      	bmi.n	d70e2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d70ce:	4620      	mov	r0, r4
   d70d0:	f7ff ffa0 	bl	d7014 <pinAvailable>
   d70d4:	b128      	cbz	r0, d70e2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d70d6:	4629      	mov	r1, r5
   d70d8:	4620      	mov	r0, r4
}
   d70da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d70de:	f7fe bc93 	b.w	d5a08 <HAL_GPIO_Write>
}
   d70e2:	bd38      	pop	{r3, r4, r5, pc}

000d70e4 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d70e4:	280d      	cmp	r0, #13
{
   d70e6:	b510      	push	{r4, lr}
   d70e8:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d70ea:	bf9c      	itt	ls
   d70ec:	340e      	addls	r4, #14
   d70ee:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d70f0:	4620      	mov	r0, r4
   d70f2:	f7ff ff8f 	bl	d7014 <pinAvailable>
   d70f6:	b150      	cbz	r0, d710e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d70f8:	2103      	movs	r1, #3
   d70fa:	4620      	mov	r0, r4
   d70fc:	f7fe fc6c 	bl	d59d8 <HAL_Validate_Pin_Function>
   d7100:	2803      	cmp	r0, #3
   d7102:	d104      	bne.n	d710e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7104:	4620      	mov	r0, r4
}
   d7106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d710a:	f7fe bc85 	b.w	d5a18 <hal_adc_read>
}
   d710e:	2000      	movs	r0, #0
   d7110:	bd10      	pop	{r4, pc}
	...

000d7114 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7114:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7116:	2300      	movs	r3, #0
   d7118:	2520      	movs	r5, #32
   d711a:	8043      	strh	r3, [r0, #2]
   d711c:	2314      	movs	r3, #20
{
   d711e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7120:	8003      	strh	r3, [r0, #0]
   d7122:	6085      	str	r5, [r0, #8]
   d7124:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7126:	4906      	ldr	r1, [pc, #24]	; (d7140 <_Z17acquireWireBufferv+0x2c>)
   d7128:	4628      	mov	r0, r5
   d712a:	f000 f9a8 	bl	d747e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d712e:	4904      	ldr	r1, [pc, #16]	; (d7140 <_Z17acquireWireBufferv+0x2c>)
	};
   d7130:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7132:	4628      	mov	r0, r5
   d7134:	f000 f9a3 	bl	d747e <_ZnajRKSt9nothrow_t>
	};
   d7138:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d713a:	4620      	mov	r0, r4
   d713c:	bd38      	pop	{r3, r4, r5, pc}
   d713e:	bf00      	nop
   d7140:	000d976c 	.word	0x000d976c

000d7144 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7144:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7146:	4d0f      	ldr	r5, [pc, #60]	; (d7184 <_Z19__fetch_global_Wirev+0x40>)
   d7148:	7829      	ldrb	r1, [r5, #0]
   d714a:	f3bf 8f5b 	dmb	ish
   d714e:	f011 0401 	ands.w	r4, r1, #1
{
   d7152:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7154:	d113      	bne.n	d717e <_Z19__fetch_global_Wirev+0x3a>
   d7156:	4628      	mov	r0, r5
   d7158:	f7fc ffa3 	bl	d40a2 <__cxa_guard_acquire>
   d715c:	b178      	cbz	r0, d717e <_Z19__fetch_global_Wirev+0x3a>
   d715e:	a801      	add	r0, sp, #4
   d7160:	f7ff ffd8 	bl	d7114 <_Z17acquireWireBufferv>
   d7164:	aa01      	add	r2, sp, #4
   d7166:	4621      	mov	r1, r4
   d7168:	4807      	ldr	r0, [pc, #28]	; (d7188 <_Z19__fetch_global_Wirev+0x44>)
   d716a:	f7ff f9af 	bl	d64cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d716e:	4628      	mov	r0, r5
   d7170:	f7fc ff9c 	bl	d40ac <__cxa_guard_release>
   d7174:	4a05      	ldr	r2, [pc, #20]	; (d718c <_Z19__fetch_global_Wirev+0x48>)
   d7176:	4906      	ldr	r1, [pc, #24]	; (d7190 <_Z19__fetch_global_Wirev+0x4c>)
   d7178:	4803      	ldr	r0, [pc, #12]	; (d7188 <_Z19__fetch_global_Wirev+0x44>)
   d717a:	f000 f979 	bl	d7470 <__aeabi_atexit>
	return wire;
}
   d717e:	4802      	ldr	r0, [pc, #8]	; (d7188 <_Z19__fetch_global_Wirev+0x44>)
   d7180:	b007      	add	sp, #28
   d7182:	bd30      	pop	{r4, r5, pc}
   d7184:	2003e79c 	.word	0x2003e79c
   d7188:	2003e7a0 	.word	0x2003e7a0
   d718c:	2003e440 	.word	0x2003e440
   d7190:	000d6475 	.word	0x000d6475

000d7194 <irq_handler>:
}

static void irq_handler(NRF_TIMER_Type        * p_reg,
                        timer_control_block_t * p_cb,
                        uint8_t                 channel_count)
{
   d7194:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7198:	2400      	movs	r4, #0
   d719a:	4606      	mov	r6, r0
   d719c:	460f      	mov	r7, r1
   d719e:	4690      	mov	r8, r2
   d71a0:	f500 75a0 	add.w	r5, r0, #320	; 0x140
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
}

__STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
   d71a4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d71a8:	46a2      	mov	sl, r4
    return (nrf_timer_event_t)
   d71aa:	00a0      	lsls	r0, r4, #2
   d71ac:	f500 73a0 	add.w	r3, r0, #320	; 0x140
   d71b0:	b298      	uxth	r0, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   d71b2:	682b      	ldr	r3, [r5, #0]
    for (i = 0; i < channel_count; ++i)
    {
        nrf_timer_event_t event = nrf_timer_compare_event_get(i);
        nrf_timer_int_mask_t int_mask = nrf_timer_compare_int_get(i);

        if (nrf_timer_event_check(p_reg, event) &&
   d71b4:	b16b      	cbz	r3, d71d2 <irq_handler+0x3e>
    return (bool)(p_reg->INTENSET & timer_int);
   d71b6:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    return (nrf_timer_int_mask_t)
   d71ba:	fa09 f204 	lsl.w	r2, r9, r4
   d71be:	421a      	tst	r2, r3
   d71c0:	d007      	beq.n	d71d2 <irq_handler+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d71c2:	f8c5 a000 	str.w	sl, [r5]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d71c6:	682b      	ldr	r3, [r5, #0]
   d71c8:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d71ca:	9b01      	ldr	r3, [sp, #4]
            nrf_timer_int_enable_check(p_reg, int_mask))
        {
            nrf_timer_event_clear(p_reg, event);
            NRFX_LOG_DEBUG("Compare event, channel: %d.", i);
            p_cb->handler(event, p_cb->context);
   d71cc:	e9d7 3100 	ldrd	r3, r1, [r7]
   d71d0:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
   d71d2:	3401      	adds	r4, #1
   d71d4:	45a0      	cmp	r8, r4
   d71d6:	f105 0504 	add.w	r5, r5, #4
   d71da:	d1e6      	bne.n	d71aa <irq_handler+0x16>
        }
    }
}
   d71dc:	b002      	add	sp, #8
   d71de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d71e4 <nrfx_timer_init>:
{
   d71e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d71e8:	4b57      	ldr	r3, [pc, #348]	; (d7348 <nrfx_timer_init+0x164>)
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   d71ea:	7907      	ldrb	r7, [r0, #4]
{
   d71ec:	4616      	mov	r6, r2
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d71ee:	6802      	ldr	r2, [r0, #0]
   d71f0:	429a      	cmp	r2, r3
{
   d71f2:	4604      	mov	r4, r0
   d71f4:	460d      	mov	r5, r1
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d71f6:	d104      	bne.n	d7202 <nrfx_timer_init+0x1e>
   d71f8:	4a54      	ldr	r2, [pc, #336]	; (d734c <nrfx_timer_init+0x168>)
   d71fa:	2100      	movs	r1, #0
   d71fc:	200a      	movs	r0, #10
   d71fe:	f7fe fd25 	bl	d5c4c <panic_>
    NRFX_ASSERT(p_config);
   d7202:	b925      	cbnz	r5, d720e <nrfx_timer_init+0x2a>
   d7204:	4a51      	ldr	r2, [pc, #324]	; (d734c <nrfx_timer_init+0x168>)
   d7206:	4629      	mov	r1, r5
   d7208:	200a      	movs	r0, #10
   d720a:	f7fe fd1f 	bl	d5c4c <panic_>
    NRFX_ASSERT(timer_event_handler);
   d720e:	b926      	cbnz	r6, d721a <nrfx_timer_init+0x36>
   d7210:	4a4e      	ldr	r2, [pc, #312]	; (d734c <nrfx_timer_init+0x168>)
   d7212:	4631      	mov	r1, r6
   d7214:	200a      	movs	r0, #10
   d7216:	f7fe fd19 	bl	d5c4c <panic_>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   d721a:	4a4d      	ldr	r2, [pc, #308]	; (d7350 <nrfx_timer_init+0x16c>)
   d721c:	230c      	movs	r3, #12
   d721e:	fb03 2307 	mla	r3, r3, r7, r2
   d7222:	4690      	mov	r8, r2
   d7224:	7a1b      	ldrb	r3, [r3, #8]
   d7226:	2b00      	cmp	r3, #0
   d7228:	f040 808c 	bne.w	d7344 <nrfx_timer_init+0x160>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   d722c:	6823      	ldr	r3, [r4, #0]
   d722e:	4a46      	ldr	r2, [pc, #280]	; (d7348 <nrfx_timer_init+0x164>)
   d7230:	4293      	cmp	r3, r2
   d7232:	d00f      	beq.n	d7254 <nrfx_timer_init+0x70>
   d7234:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7238:	4293      	cmp	r3, r2
   d723a:	d00b      	beq.n	d7254 <nrfx_timer_init+0x70>
   d723c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7240:	4293      	cmp	r3, r2
   d7242:	d007      	beq.n	d7254 <nrfx_timer_init+0x70>
   d7244:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   d7248:	4293      	cmp	r3, r2
   d724a:	d003      	beq.n	d7254 <nrfx_timer_init+0x70>
   d724c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7250:	4293      	cmp	r3, r2
   d7252:	d102      	bne.n	d725a <nrfx_timer_init+0x76>
   d7254:	78ab      	ldrb	r3, [r5, #2]
   d7256:	2b03      	cmp	r3, #3
   d7258:	d904      	bls.n	d7264 <nrfx_timer_init+0x80>
   d725a:	4a3c      	ldr	r2, [pc, #240]	; (d734c <nrfx_timer_init+0x168>)
   d725c:	2100      	movs	r1, #0
   d725e:	200a      	movs	r0, #10
   d7260:	f7fe fcf4 	bl	d5c4c <panic_>
    p_cb->handler = timer_event_handler;
   d7264:	230c      	movs	r3, #12
   d7266:	437b      	muls	r3, r7
   d7268:	eb08 0203 	add.w	r2, r8, r3
   d726c:	f848 6003 	str.w	r6, [r8, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7270:	2100      	movs	r1, #0
    p_cb->context = p_config->p_context;
   d7272:	686b      	ldr	r3, [r5, #4]
   d7274:	6053      	str	r3, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7276:	460e      	mov	r6, r1
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7278:	7960      	ldrb	r0, [r4, #5]
   d727a:	6822      	ldr	r2, [r4, #0]
   d727c:	b2cb      	uxtb	r3, r1
   d727e:	4298      	cmp	r0, r3
   d7280:	d857      	bhi.n	d7332 <nrfx_timer_init+0x14e>
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
   d7282:	78ee      	ldrb	r6, [r5, #3]
#define NRFX_IRQ_PRIORITY_SET(irq_number, priority) \
    _NRFX_IRQ_PRIORITY_SET(irq_number, priority)
static inline void _NRFX_IRQ_PRIORITY_SET(IRQn_Type irq_number,
                                          uint8_t   priority)
{
    NRFX_ASSERT(INTERRUPT_PRIORITY_IS_VALID(priority));
   d7284:	1eb3      	subs	r3, r6, #2
   d7286:	2b01      	cmp	r3, #1
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   d7288:	ea4f 3912 	mov.w	r9, r2, lsr #12
   d728c:	f342 3a07 	sbfx	sl, r2, #12, #8
   d7290:	d907      	bls.n	d72a2 <nrfx_timer_init+0xbe>
   d7292:	1f73      	subs	r3, r6, #5
   d7294:	2b02      	cmp	r3, #2
   d7296:	d904      	bls.n	d72a2 <nrfx_timer_init+0xbe>
   d7298:	4a2c      	ldr	r2, [pc, #176]	; (d734c <nrfx_timer_init+0x168>)
   d729a:	2100      	movs	r1, #0
   d729c:	200a      	movs	r0, #10
   d729e:	f7fe fcd5 	bl	d5c4c <panic_>
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   d72a2:	f1ba 0f00 	cmp.w	sl, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d72a6:	bfac      	ite	ge
   d72a8:	f10a 4360 	addge.w	r3, sl, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d72ac:	4b29      	ldrlt	r3, [pc, #164]	; (d7354 <nrfx_timer_init+0x170>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d72ae:	482a      	ldr	r0, [pc, #168]	; (d7358 <nrfx_timer_init+0x174>)
   d72b0:	ea4f 1646 	mov.w	r6, r6, lsl #5
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d72b4:	bfb8      	it	lt
   d72b6:	f009 090f 	andlt.w	r9, r9, #15
   d72ba:	b2f6      	uxtb	r6, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d72bc:	bfaa      	itet	ge
   d72be:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d72c2:	f803 6009 	strblt.w	r6, [r3, r9]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d72c6:	f883 6300 	strbge.w	r6, [r3, #768]	; 0x300
   d72ca:	6823      	ldr	r3, [r4, #0]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d72cc:	f343 3107 	sbfx	r1, r3, #12, #8
   d72d0:	0949      	lsrs	r1, r1, #5
   d72d2:	2201      	movs	r2, #1
   d72d4:	f3c3 3304 	ubfx	r3, r3, #12, #5
   d72d8:	fa02 f303 	lsl.w	r3, r2, r3
   d72dc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   d72e0:	6820      	ldr	r0, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d72e2:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d72e4:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d72e8:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d72ec:	f021 0103 	bic.w	r1, r1, #3
   d72f0:	430b      	orrs	r3, r1
   d72f2:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   d72f6:	6820      	ldr	r0, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d72f8:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d72fa:	f8d0 1508 	ldr.w	r1, [r0, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d72fe:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d7302:	f021 0103 	bic.w	r1, r1, #3
   d7306:	430b      	orrs	r3, r1
   d7308:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
   d730c:	6820      	ldr	r0, [r4, #0]
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d730e:	782b      	ldrb	r3, [r5, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d7310:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d7314:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d7318:	f021 010f 	bic.w	r1, r1, #15
   d731c:	430b      	orrs	r3, r1
   d731e:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d7322:	230c      	movs	r3, #12
   d7324:	fb03 8707 	mla	r7, r3, r7, r8
    return err_code;
   d7328:	2000      	movs	r0, #0
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d732a:	723a      	strb	r2, [r7, #8]
}
   d732c:	b002      	add	sp, #8
   d732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (nrf_timer_event_t)
   d7332:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7334:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   d7338:	3101      	adds	r1, #1
   d733a:	50d6      	str	r6, [r2, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d733c:	58d3      	ldr	r3, [r2, r3]
   d733e:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7340:	9b01      	ldr	r3, [sp, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7342:	e799      	b.n	d7278 <nrfx_timer_init+0x94>
        return err_code;
   d7344:	2008      	movs	r0, #8
   d7346:	e7f1      	b.n	d732c <nrfx_timer_init+0x148>
   d7348:	40008000 	.word	0x40008000
   d734c:	000d59a9 	.word	0x000d59a9
   d7350:	2003e7b4 	.word	0x2003e7b4
   d7354:	e000ed14 	.word	0xe000ed14
   d7358:	e000e100 	.word	0xe000e100

000d735c <nrfx_timer_enable>:
{
   d735c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d735e:	4d0c      	ldr	r5, [pc, #48]	; (d7390 <nrfx_timer_enable+0x34>)
   d7360:	7902      	ldrb	r2, [r0, #4]
   d7362:	210c      	movs	r1, #12
   d7364:	fb01 5202 	mla	r2, r1, r2, r5
{
   d7368:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d736a:	7a12      	ldrb	r2, [r2, #8]
   d736c:	2a01      	cmp	r2, #1
   d736e:	d004      	beq.n	d737a <nrfx_timer_enable+0x1e>
   d7370:	4a08      	ldr	r2, [pc, #32]	; (d7394 <nrfx_timer_enable+0x38>)
   d7372:	2100      	movs	r1, #0
   d7374:	200a      	movs	r0, #10
   d7376:	f7fe fc69 	bl	d5c4c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   d737a:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   d737c:	2201      	movs	r2, #1
   d737e:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   d7380:	7923      	ldrb	r3, [r4, #4]
   d7382:	220c      	movs	r2, #12
   d7384:	fb02 5303 	mla	r3, r2, r3, r5
   d7388:	2202      	movs	r2, #2
   d738a:	721a      	strb	r2, [r3, #8]
}
   d738c:	bd38      	pop	{r3, r4, r5, pc}
   d738e:	bf00      	nop
   d7390:	2003e7b4 	.word	0x2003e7b4
   d7394:	000d59a9 	.word	0x000d59a9

000d7398 <nrfx_timer_disable>:
{
   d7398:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d739a:	4d0a      	ldr	r5, [pc, #40]	; (d73c4 <nrfx_timer_disable+0x2c>)
   d739c:	7902      	ldrb	r2, [r0, #4]
   d739e:	210c      	movs	r1, #12
   d73a0:	fb01 5202 	mla	r2, r1, r2, r5
{
   d73a4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d73a6:	7a11      	ldrb	r1, [r2, #8]
   d73a8:	b919      	cbnz	r1, d73b2 <nrfx_timer_disable+0x1a>
   d73aa:	4a07      	ldr	r2, [pc, #28]	; (d73c8 <nrfx_timer_disable+0x30>)
   d73ac:	200a      	movs	r0, #10
   d73ae:	f7fe fc4d 	bl	d5c4c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   d73b2:	6823      	ldr	r3, [r4, #0]
   d73b4:	2201      	movs	r2, #1
   d73b6:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   d73b8:	7923      	ldrb	r3, [r4, #4]
   d73ba:	210c      	movs	r1, #12
   d73bc:	fb01 5303 	mla	r3, r1, r3, r5
   d73c0:	721a      	strb	r2, [r3, #8]
}
   d73c2:	bd38      	pop	{r3, r4, r5, pc}
   d73c4:	2003e7b4 	.word	0x2003e7b4
   d73c8:	000d59a9 	.word	0x000d59a9

000d73cc <nrfx_timer_clear>:
{
   d73cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d73ce:	4a08      	ldr	r2, [pc, #32]	; (d73f0 <nrfx_timer_clear+0x24>)
   d73d0:	7903      	ldrb	r3, [r0, #4]
   d73d2:	210c      	movs	r1, #12
   d73d4:	fb01 2303 	mla	r3, r1, r3, r2
{
   d73d8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d73da:	7a19      	ldrb	r1, [r3, #8]
   d73dc:	b919      	cbnz	r1, d73e6 <nrfx_timer_clear+0x1a>
   d73de:	4a05      	ldr	r2, [pc, #20]	; (d73f4 <nrfx_timer_clear+0x28>)
   d73e0:	200a      	movs	r0, #10
   d73e2:	f7fe fc33 	bl	d5c4c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   d73e6:	6823      	ldr	r3, [r4, #0]
   d73e8:	2201      	movs	r2, #1
   d73ea:	60da      	str	r2, [r3, #12]
}
   d73ec:	bd10      	pop	{r4, pc}
   d73ee:	bf00      	nop
   d73f0:	2003e7b4 	.word	0x2003e7b4
   d73f4:	000d59a9 	.word	0x000d59a9

000d73f8 <nrfx_timer_compare>:
{
   d73f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
   d73fa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
   d73fe:	6805      	ldr	r5, [r0, #0]
   d7400:	408c      	lsls	r4, r1
    if (enable_int)
   d7402:	b18b      	cbz	r3, d7428 <nrfx_timer_compare+0x30>
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
   d7404:	f101 0350 	add.w	r3, r1, #80	; 0x50
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7408:	009b      	lsls	r3, r3, #2
   d740a:	2600      	movs	r6, #0
   d740c:	50ee      	str	r6, [r5, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d740e:	58eb      	ldr	r3, [r5, r3]
   d7410:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7412:	9b01      	ldr	r3, [sp, #4]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
   d7414:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = timer_int_mask;
   d7416:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_write(p_instance->p_reg, cc_channel, cc_value);
   d741a:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
   d741c:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   d7420:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   d7424:	b002      	add	sp, #8
   d7426:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = timer_int_mask;
   d7428:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
   d742c:	e7f5      	b.n	d741a <nrfx_timer_compare+0x22>

000d742e <nrfx_timer_extended_compare>:
{
   d742e:	b4f0      	push	{r4, r5, r6, r7}
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7430:	6807      	ldr	r7, [r0, #0]
        (TIMER_SHORTS_COMPARE0_CLEAR_Msk << cc_channel));
   d7432:	f240 1601 	movw	r6, #257	; 0x101
    p_reg->SHORTS &= ~(timer_shorts_mask);
   d7436:	f8d7 5200 	ldr.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_disable(p_instance->p_reg,
   d743a:	408e      	lsls	r6, r1
   d743c:	ea25 0506 	bic.w	r5, r5, r6
   d7440:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_enable(p_instance->p_reg, timer_short_mask);
   d7444:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS |= timer_shorts_mask;
   d7446:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   d744a:	432b      	orrs	r3, r5
   d744c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    nrfx_timer_compare(p_instance,
   d7450:	f89d 3010 	ldrb.w	r3, [sp, #16]
}
   d7454:	bcf0      	pop	{r4, r5, r6, r7}
    nrfx_timer_compare(p_instance,
   d7456:	f7ff bfcf 	b.w	d73f8 <nrfx_timer_compare>
	...

000d745c <TIMER4_IRQHandler>:
#endif

#if NRFX_CHECK(NRFX_TIMER4_ENABLED)
void nrfx_timer_4_irq_handler(void)
{
    irq_handler(NRF_TIMER4, &m_cb[NRFX_TIMER4_INST_IDX],
   d745c:	4902      	ldr	r1, [pc, #8]	; (d7468 <TIMER4_IRQHandler+0xc>)
   d745e:	4803      	ldr	r0, [pc, #12]	; (d746c <TIMER4_IRQHandler+0x10>)
   d7460:	2206      	movs	r2, #6
   d7462:	f7ff be97 	b.w	d7194 <irq_handler>
   d7466:	bf00      	nop
   d7468:	2003e7e4 	.word	0x2003e7e4
   d746c:	4001b000 	.word	0x4001b000

000d7470 <__aeabi_atexit>:
   d7470:	460b      	mov	r3, r1
   d7472:	4601      	mov	r1, r0
   d7474:	4618      	mov	r0, r3
   d7476:	f001 be61 	b.w	d913c <__cxa_atexit>

000d747a <_ZdlPvj>:
   d747a:	f7fc be10 	b.w	d409e <_ZdlPv>

000d747e <_ZnajRKSt9nothrow_t>:
   d747e:	f7fc be0c 	b.w	d409a <_Znaj>

000d7482 <_ZSt25__throw_bad_function_callv>:
   d7482:	b508      	push	{r3, lr}
   d7484:	f7fe fca6 	bl	d5dd4 <abort>

000d7488 <pow>:
   d7488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d748c:	ed2d 8b02 	vpush	{d8}
   d7490:	b08d      	sub	sp, #52	; 0x34
   d7492:	ec57 6b10 	vmov	r6, r7, d0
   d7496:	ec55 4b11 	vmov	r4, r5, d1
   d749a:	f000 f9ad 	bl	d77f8 <__ieee754_pow>
   d749e:	4bae      	ldr	r3, [pc, #696]	; (d7758 <pow+0x2d0>)
   d74a0:	eeb0 8a40 	vmov.f32	s16, s0
   d74a4:	eef0 8a60 	vmov.f32	s17, s1
   d74a8:	f993 9000 	ldrsb.w	r9, [r3]
   d74ac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d74b0:	d037      	beq.n	d7522 <pow+0x9a>
   d74b2:	4622      	mov	r2, r4
   d74b4:	462b      	mov	r3, r5
   d74b6:	4620      	mov	r0, r4
   d74b8:	4629      	mov	r1, r5
   d74ba:	f001 fdd9 	bl	d9070 <__aeabi_dcmpun>
   d74be:	4683      	mov	fp, r0
   d74c0:	bb78      	cbnz	r0, d7522 <pow+0x9a>
   d74c2:	4632      	mov	r2, r6
   d74c4:	463b      	mov	r3, r7
   d74c6:	4630      	mov	r0, r6
   d74c8:	4639      	mov	r1, r7
   d74ca:	f001 fdd1 	bl	d9070 <__aeabi_dcmpun>
   d74ce:	4680      	mov	r8, r0
   d74d0:	2800      	cmp	r0, #0
   d74d2:	f040 8093 	bne.w	d75fc <pow+0x174>
   d74d6:	f04f 0a00 	mov.w	sl, #0
   d74da:	f04f 0b00 	mov.w	fp, #0
   d74de:	4630      	mov	r0, r6
   d74e0:	4639      	mov	r1, r7
   d74e2:	4652      	mov	r2, sl
   d74e4:	465b      	mov	r3, fp
   d74e6:	f001 fd91 	bl	d900c <__aeabi_dcmpeq>
   d74ea:	b318      	cbz	r0, d7534 <pow+0xac>
   d74ec:	4652      	mov	r2, sl
   d74ee:	465b      	mov	r3, fp
   d74f0:	4620      	mov	r0, r4
   d74f2:	4629      	mov	r1, r5
   d74f4:	f001 fd8a 	bl	d900c <__aeabi_dcmpeq>
   d74f8:	9000      	str	r0, [sp, #0]
   d74fa:	2800      	cmp	r0, #0
   d74fc:	d057      	beq.n	d75ae <pow+0x126>
   d74fe:	4b97      	ldr	r3, [pc, #604]	; (d775c <pow+0x2d4>)
   d7500:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7504:	2201      	movs	r2, #1
   d7506:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d750a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d750e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7512:	9202      	str	r2, [sp, #8]
   d7514:	9303      	str	r3, [sp, #12]
   d7516:	f1b9 0f00 	cmp.w	r9, #0
   d751a:	f000 8089 	beq.w	d7630 <pow+0x1a8>
   d751e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d7748 <pow+0x2c0>
   d7522:	eeb0 0a48 	vmov.f32	s0, s16
   d7526:	eef0 0a68 	vmov.f32	s1, s17
   d752a:	b00d      	add	sp, #52	; 0x34
   d752c:	ecbd 8b02 	vpop	{d8}
   d7530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7534:	eeb0 0a48 	vmov.f32	s0, s16
   d7538:	eef0 0a68 	vmov.f32	s1, s17
   d753c:	f001 f804 	bl	d8548 <finite>
   d7540:	4680      	mov	r8, r0
   d7542:	2800      	cmp	r0, #0
   d7544:	f000 8082 	beq.w	d764c <pow+0x1c4>
   d7548:	f04f 0800 	mov.w	r8, #0
   d754c:	f04f 0900 	mov.w	r9, #0
   d7550:	ec51 0b18 	vmov	r0, r1, d8
   d7554:	4642      	mov	r2, r8
   d7556:	464b      	mov	r3, r9
   d7558:	f001 fd58 	bl	d900c <__aeabi_dcmpeq>
   d755c:	2800      	cmp	r0, #0
   d755e:	d0e0      	beq.n	d7522 <pow+0x9a>
   d7560:	ec47 6b10 	vmov	d0, r6, r7
   d7564:	f000 fff0 	bl	d8548 <finite>
   d7568:	2800      	cmp	r0, #0
   d756a:	d0da      	beq.n	d7522 <pow+0x9a>
   d756c:	ec45 4b10 	vmov	d0, r4, r5
   d7570:	f000 ffea 	bl	d8548 <finite>
   d7574:	2800      	cmp	r0, #0
   d7576:	d0d4      	beq.n	d7522 <pow+0x9a>
   d7578:	4b77      	ldr	r3, [pc, #476]	; (d7758 <pow+0x2d0>)
   d757a:	4a78      	ldr	r2, [pc, #480]	; (d775c <pow+0x2d4>)
   d757c:	f993 3000 	ldrsb.w	r3, [r3]
   d7580:	9203      	str	r2, [sp, #12]
   d7582:	2104      	movs	r1, #4
   d7584:	2200      	movs	r2, #0
   d7586:	2b02      	cmp	r3, #2
   d7588:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d758c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7590:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7594:	9102      	str	r1, [sp, #8]
   d7596:	920a      	str	r2, [sp, #40]	; 0x28
   d7598:	d004      	beq.n	d75a4 <pow+0x11c>
   d759a:	a802      	add	r0, sp, #8
   d759c:	f000 ffe0 	bl	d8560 <matherr>
   d75a0:	2800      	cmp	r0, #0
   d75a2:	d14a      	bne.n	d763a <pow+0x1b2>
   d75a4:	f7fe fc26 	bl	d5df4 <__errno>
   d75a8:	2322      	movs	r3, #34	; 0x22
   d75aa:	6003      	str	r3, [r0, #0]
   d75ac:	e045      	b.n	d763a <pow+0x1b2>
   d75ae:	ec45 4b10 	vmov	d0, r4, r5
   d75b2:	f000 ffc9 	bl	d8548 <finite>
   d75b6:	2800      	cmp	r0, #0
   d75b8:	d0b3      	beq.n	d7522 <pow+0x9a>
   d75ba:	4652      	mov	r2, sl
   d75bc:	465b      	mov	r3, fp
   d75be:	4620      	mov	r0, r4
   d75c0:	4629      	mov	r1, r5
   d75c2:	f001 fd2d 	bl	d9020 <__aeabi_dcmplt>
   d75c6:	2800      	cmp	r0, #0
   d75c8:	d0ab      	beq.n	d7522 <pow+0x9a>
   d75ca:	4b63      	ldr	r3, [pc, #396]	; (d7758 <pow+0x2d0>)
   d75cc:	9900      	ldr	r1, [sp, #0]
   d75ce:	4a63      	ldr	r2, [pc, #396]	; (d775c <pow+0x2d4>)
   d75d0:	f993 3000 	ldrsb.w	r3, [r3]
   d75d4:	910a      	str	r1, [sp, #40]	; 0x28
   d75d6:	2101      	movs	r1, #1
   d75d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d75dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d75e0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d75e4:	2b00      	cmp	r3, #0
   d75e6:	d16f      	bne.n	d76c8 <pow+0x240>
   d75e8:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d75ec:	a802      	add	r0, sp, #8
   d75ee:	f000 ffb7 	bl	d8560 <matherr>
   d75f2:	2800      	cmp	r0, #0
   d75f4:	d06e      	beq.n	d76d4 <pow+0x24c>
   d75f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d75f8:	b32b      	cbz	r3, d7646 <pow+0x1be>
   d75fa:	e020      	b.n	d763e <pow+0x1b6>
   d75fc:	2200      	movs	r2, #0
   d75fe:	2300      	movs	r3, #0
   d7600:	4620      	mov	r0, r4
   d7602:	4629      	mov	r1, r5
   d7604:	f001 fd02 	bl	d900c <__aeabi_dcmpeq>
   d7608:	2800      	cmp	r0, #0
   d760a:	d08a      	beq.n	d7522 <pow+0x9a>
   d760c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d7748 <pow+0x2c0>
   d7610:	4b52      	ldr	r3, [pc, #328]	; (d775c <pow+0x2d4>)
   d7612:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7616:	2201      	movs	r2, #1
   d7618:	f1b9 0f02 	cmp.w	r9, #2
   d761c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7620:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7624:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7628:	9202      	str	r2, [sp, #8]
   d762a:	9303      	str	r3, [sp, #12]
   d762c:	f43f af79 	beq.w	d7522 <pow+0x9a>
   d7630:	a802      	add	r0, sp, #8
   d7632:	f000 ff95 	bl	d8560 <matherr>
   d7636:	2800      	cmp	r0, #0
   d7638:	d051      	beq.n	d76de <pow+0x256>
   d763a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d763c:	b11b      	cbz	r3, d7646 <pow+0x1be>
   d763e:	f7fe fbd9 	bl	d5df4 <__errno>
   d7642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7644:	6003      	str	r3, [r0, #0]
   d7646:	ed9d 8b08 	vldr	d8, [sp, #32]
   d764a:	e76a      	b.n	d7522 <pow+0x9a>
   d764c:	ec47 6b10 	vmov	d0, r6, r7
   d7650:	f000 ff7a 	bl	d8548 <finite>
   d7654:	2800      	cmp	r0, #0
   d7656:	f43f af77 	beq.w	d7548 <pow+0xc0>
   d765a:	ec45 4b10 	vmov	d0, r4, r5
   d765e:	f000 ff73 	bl	d8548 <finite>
   d7662:	2800      	cmp	r0, #0
   d7664:	f43f af70 	beq.w	d7548 <pow+0xc0>
   d7668:	ec53 2b18 	vmov	r2, r3, d8
   d766c:	ee18 0a10 	vmov	r0, s16
   d7670:	4619      	mov	r1, r3
   d7672:	f001 fcfd 	bl	d9070 <__aeabi_dcmpun>
   d7676:	4b38      	ldr	r3, [pc, #224]	; (d7758 <pow+0x2d0>)
   d7678:	2800      	cmp	r0, #0
   d767a:	f040 8096 	bne.w	d77aa <pow+0x322>
   d767e:	f993 8000 	ldrsb.w	r8, [r3]
   d7682:	900a      	str	r0, [sp, #40]	; 0x28
   d7684:	2303      	movs	r3, #3
   d7686:	9302      	str	r3, [sp, #8]
   d7688:	4b34      	ldr	r3, [pc, #208]	; (d775c <pow+0x2d4>)
   d768a:	9303      	str	r3, [sp, #12]
   d768c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7690:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7694:	f1b8 0f00 	cmp.w	r8, #0
   d7698:	d126      	bne.n	d76e8 <pow+0x260>
   d769a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d776c <pow+0x2e4>
   d769e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d76a2:	4652      	mov	r2, sl
   d76a4:	465b      	mov	r3, fp
   d76a6:	4630      	mov	r0, r6
   d76a8:	4639      	mov	r1, r7
   d76aa:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d76ae:	f001 fcb7 	bl	d9020 <__aeabi_dcmplt>
   d76b2:	bb48      	cbnz	r0, d7708 <pow+0x280>
   d76b4:	a802      	add	r0, sp, #8
   d76b6:	f000 ff53 	bl	d8560 <matherr>
   d76ba:	2800      	cmp	r0, #0
   d76bc:	d19b      	bne.n	d75f6 <pow+0x16e>
   d76be:	f7fe fb99 	bl	d5df4 <__errno>
   d76c2:	2322      	movs	r3, #34	; 0x22
   d76c4:	6003      	str	r3, [r0, #0]
   d76c6:	e796      	b.n	d75f6 <pow+0x16e>
   d76c8:	4925      	ldr	r1, [pc, #148]	; (d7760 <pow+0x2d8>)
   d76ca:	2000      	movs	r0, #0
   d76cc:	2b02      	cmp	r3, #2
   d76ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d76d2:	d18b      	bne.n	d75ec <pow+0x164>
   d76d4:	f7fe fb8e 	bl	d5df4 <__errno>
   d76d8:	2321      	movs	r3, #33	; 0x21
   d76da:	6003      	str	r3, [r0, #0]
   d76dc:	e78b      	b.n	d75f6 <pow+0x16e>
   d76de:	f7fe fb89 	bl	d5df4 <__errno>
   d76e2:	2321      	movs	r3, #33	; 0x21
   d76e4:	6003      	str	r3, [r0, #0]
   d76e6:	e7a8      	b.n	d763a <pow+0x1b2>
   d76e8:	ed9f 7b19 	vldr	d7, [pc, #100]	; d7750 <pow+0x2c8>
   d76ec:	4652      	mov	r2, sl
   d76ee:	465b      	mov	r3, fp
   d76f0:	4630      	mov	r0, r6
   d76f2:	4639      	mov	r1, r7
   d76f4:	ed8d 7b08 	vstr	d7, [sp, #32]
   d76f8:	f001 fc92 	bl	d9020 <__aeabi_dcmplt>
   d76fc:	2800      	cmp	r0, #0
   d76fe:	d137      	bne.n	d7770 <pow+0x2e8>
   d7700:	f1b8 0f02 	cmp.w	r8, #2
   d7704:	d0db      	beq.n	d76be <pow+0x236>
   d7706:	e7d5      	b.n	d76b4 <pow+0x22c>
   d7708:	4b16      	ldr	r3, [pc, #88]	; (d7764 <pow+0x2dc>)
   d770a:	2200      	movs	r2, #0
   d770c:	4620      	mov	r0, r4
   d770e:	4629      	mov	r1, r5
   d7710:	f001 fa14 	bl	d8b3c <__aeabi_dmul>
   d7714:	4602      	mov	r2, r0
   d7716:	460b      	mov	r3, r1
   d7718:	ec43 2b10 	vmov	d0, r2, r3
   d771c:	e9cd 2300 	strd	r2, r3, [sp]
   d7720:	f000 ff2a 	bl	d8578 <rint>
   d7724:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7728:	ec51 0b10 	vmov	r0, r1, d0
   d772c:	f001 fc6e 	bl	d900c <__aeabi_dcmpeq>
   d7730:	2800      	cmp	r0, #0
   d7732:	d136      	bne.n	d77a2 <pow+0x31a>
   d7734:	4b0c      	ldr	r3, [pc, #48]	; (d7768 <pow+0x2e0>)
   d7736:	4908      	ldr	r1, [pc, #32]	; (d7758 <pow+0x2d0>)
   d7738:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d773c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7740:	f991 8000 	ldrsb.w	r8, [r1]
   d7744:	e7dc      	b.n	d7700 <pow+0x278>
   d7746:	bf00      	nop
   d7748:	00000000 	.word	0x00000000
   d774c:	3ff00000 	.word	0x3ff00000
   d7750:	00000000 	.word	0x00000000
   d7754:	7ff00000 	.word	0x7ff00000
   d7758:	2003e3d8 	.word	0x2003e3d8
   d775c:	000d9770 	.word	0x000d9770
   d7760:	fff00000 	.word	0xfff00000
   d7764:	3fe00000 	.word	0x3fe00000
   d7768:	c7efffff 	.word	0xc7efffff
   d776c:	47efffff 	.word	0x47efffff
   d7770:	4b1c      	ldr	r3, [pc, #112]	; (d77e4 <pow+0x35c>)
   d7772:	2200      	movs	r2, #0
   d7774:	4620      	mov	r0, r4
   d7776:	4629      	mov	r1, r5
   d7778:	f001 f9e0 	bl	d8b3c <__aeabi_dmul>
   d777c:	4602      	mov	r2, r0
   d777e:	460b      	mov	r3, r1
   d7780:	ec43 2b10 	vmov	d0, r2, r3
   d7784:	e9cd 2300 	strd	r2, r3, [sp]
   d7788:	f000 fef6 	bl	d8578 <rint>
   d778c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7790:	ec51 0b10 	vmov	r0, r1, d0
   d7794:	f001 fc3a 	bl	d900c <__aeabi_dcmpeq>
   d7798:	b918      	cbnz	r0, d77a2 <pow+0x31a>
   d779a:	4b13      	ldr	r3, [pc, #76]	; (d77e8 <pow+0x360>)
   d779c:	2200      	movs	r2, #0
   d779e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d77a2:	4b12      	ldr	r3, [pc, #72]	; (d77ec <pow+0x364>)
   d77a4:	f993 8000 	ldrsb.w	r8, [r3]
   d77a8:	e7aa      	b.n	d7700 <pow+0x278>
   d77aa:	f993 9000 	ldrsb.w	r9, [r3]
   d77ae:	4b10      	ldr	r3, [pc, #64]	; (d77f0 <pow+0x368>)
   d77b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d77b4:	2201      	movs	r2, #1
   d77b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d77ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d77be:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d77c2:	f1b9 0f00 	cmp.w	r9, #0
   d77c6:	f43f af0f 	beq.w	d75e8 <pow+0x160>
   d77ca:	4652      	mov	r2, sl
   d77cc:	465b      	mov	r3, fp
   d77ce:	4650      	mov	r0, sl
   d77d0:	4659      	mov	r1, fp
   d77d2:	f001 fadd 	bl	d8d90 <__aeabi_ddiv>
   d77d6:	f1b9 0f02 	cmp.w	r9, #2
   d77da:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d77de:	f43f af79 	beq.w	d76d4 <pow+0x24c>
   d77e2:	e703      	b.n	d75ec <pow+0x164>
   d77e4:	3fe00000 	.word	0x3fe00000
   d77e8:	fff00000 	.word	0xfff00000
   d77ec:	2003e3d8 	.word	0x2003e3d8
   d77f0:	000d9770 	.word	0x000d9770
   d77f4:	00000000 	.word	0x00000000

000d77f8 <__ieee754_pow>:
   d77f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77fc:	ec57 6b11 	vmov	r6, r7, d1
   d7800:	ed2d 8b0a 	vpush	{d8-d12}
   d7804:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d7808:	ea5a 0206 	orrs.w	r2, sl, r6
   d780c:	b089      	sub	sp, #36	; 0x24
   d780e:	d03d      	beq.n	d788c <__ieee754_pow+0x94>
   d7810:	ec55 4b10 	vmov	r4, r5, d0
   d7814:	4976      	ldr	r1, [pc, #472]	; (d79f0 <__ieee754_pow+0x1f8>)
   d7816:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d781a:	4588      	cmp	r8, r1
   d781c:	ee10 2a10 	vmov	r2, s0
   d7820:	46a9      	mov	r9, r5
   d7822:	dc2c      	bgt.n	d787e <__ieee754_pow+0x86>
   d7824:	ee11 3a10 	vmov	r3, s2
   d7828:	46bb      	mov	fp, r7
   d782a:	d03a      	beq.n	d78a2 <__ieee754_pow+0xaa>
   d782c:	458a      	cmp	sl, r1
   d782e:	dc26      	bgt.n	d787e <__ieee754_pow+0x86>
   d7830:	496f      	ldr	r1, [pc, #444]	; (d79f0 <__ieee754_pow+0x1f8>)
   d7832:	458a      	cmp	sl, r1
   d7834:	d021      	beq.n	d787a <__ieee754_pow+0x82>
   d7836:	f1b9 0f00 	cmp.w	r9, #0
   d783a:	db3d      	blt.n	d78b8 <__ieee754_pow+0xc0>
   d783c:	2100      	movs	r1, #0
   d783e:	9103      	str	r1, [sp, #12]
   d7840:	2b00      	cmp	r3, #0
   d7842:	d155      	bne.n	d78f0 <__ieee754_pow+0xf8>
   d7844:	4b6a      	ldr	r3, [pc, #424]	; (d79f0 <__ieee754_pow+0x1f8>)
   d7846:	459a      	cmp	sl, r3
   d7848:	f000 80a8 	beq.w	d799c <__ieee754_pow+0x1a4>
   d784c:	4b69      	ldr	r3, [pc, #420]	; (d79f4 <__ieee754_pow+0x1fc>)
   d784e:	459a      	cmp	sl, r3
   d7850:	f000 80b6 	beq.w	d79c0 <__ieee754_pow+0x1c8>
   d7854:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d7858:	f000 8501 	beq.w	d825e <__ieee754_pow+0xa66>
   d785c:	4b66      	ldr	r3, [pc, #408]	; (d79f8 <__ieee754_pow+0x200>)
   d785e:	459b      	cmp	fp, r3
   d7860:	d146      	bne.n	d78f0 <__ieee754_pow+0xf8>
   d7862:	f1b9 0f00 	cmp.w	r9, #0
   d7866:	db43      	blt.n	d78f0 <__ieee754_pow+0xf8>
   d7868:	ec45 4b10 	vmov	d0, r4, r5
   d786c:	b009      	add	sp, #36	; 0x24
   d786e:	ecbd 8b0a 	vpop	{d8-d12}
   d7872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7876:	f000 bd99 	b.w	d83ac <__ieee754_sqrt>
   d787a:	2b00      	cmp	r3, #0
   d787c:	d0db      	beq.n	d7836 <__ieee754_pow+0x3e>
   d787e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d7882:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7886:	ea58 0302 	orrs.w	r3, r8, r2
   d788a:	d10d      	bne.n	d78a8 <__ieee754_pow+0xb0>
   d788c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d79e0 <__ieee754_pow+0x1e8>
   d7890:	ed8d 7b00 	vstr	d7, [sp]
   d7894:	ed9d 0b00 	vldr	d0, [sp]
   d7898:	b009      	add	sp, #36	; 0x24
   d789a:	ecbd 8b0a 	vpop	{d8-d12}
   d789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d78a2:	b90c      	cbnz	r4, d78a8 <__ieee754_pow+0xb0>
   d78a4:	45c2      	cmp	sl, r8
   d78a6:	ddc3      	ble.n	d7830 <__ieee754_pow+0x38>
   d78a8:	4854      	ldr	r0, [pc, #336]	; (d79fc <__ieee754_pow+0x204>)
   d78aa:	b009      	add	sp, #36	; 0x24
   d78ac:	ecbd 8b0a 	vpop	{d8-d12}
   d78b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78b4:	f000 be58 	b.w	d8568 <nan>
   d78b8:	4951      	ldr	r1, [pc, #324]	; (d7a00 <__ieee754_pow+0x208>)
   d78ba:	458a      	cmp	sl, r1
   d78bc:	f300 8087 	bgt.w	d79ce <__ieee754_pow+0x1d6>
   d78c0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d78c4:	458a      	cmp	sl, r1
   d78c6:	dd0f      	ble.n	d78e8 <__ieee754_pow+0xf0>
   d78c8:	ea4f 512a 	mov.w	r1, sl, asr #20
   d78cc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d78d0:	2914      	cmp	r1, #20
   d78d2:	f340 84ce 	ble.w	d8272 <__ieee754_pow+0xa7a>
   d78d6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d78da:	fa23 f001 	lsr.w	r0, r3, r1
   d78de:	fa00 f101 	lsl.w	r1, r0, r1
   d78e2:	4299      	cmp	r1, r3
   d78e4:	f000 8520 	beq.w	d8328 <__ieee754_pow+0xb30>
   d78e8:	2100      	movs	r1, #0
   d78ea:	9103      	str	r1, [sp, #12]
   d78ec:	2b00      	cmp	r3, #0
   d78ee:	d0ad      	beq.n	d784c <__ieee754_pow+0x54>
   d78f0:	ec45 4b10 	vmov	d0, r4, r5
   d78f4:	9206      	str	r2, [sp, #24]
   d78f6:	f000 fe1d 	bl	d8534 <fabs>
   d78fa:	9a06      	ldr	r2, [sp, #24]
   d78fc:	ed8d 0b00 	vstr	d0, [sp]
   d7900:	bb5a      	cbnz	r2, d795a <__ieee754_pow+0x162>
   d7902:	f1b8 0f00 	cmp.w	r8, #0
   d7906:	d004      	beq.n	d7912 <__ieee754_pow+0x11a>
   d7908:	4b3a      	ldr	r3, [pc, #232]	; (d79f4 <__ieee754_pow+0x1fc>)
   d790a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d790e:	429a      	cmp	r2, r3
   d7910:	d123      	bne.n	d795a <__ieee754_pow+0x162>
   d7912:	f1bb 0f00 	cmp.w	fp, #0
   d7916:	da07      	bge.n	d7928 <__ieee754_pow+0x130>
   d7918:	e9dd 2300 	ldrd	r2, r3, [sp]
   d791c:	4935      	ldr	r1, [pc, #212]	; (d79f4 <__ieee754_pow+0x1fc>)
   d791e:	2000      	movs	r0, #0
   d7920:	f001 fa36 	bl	d8d90 <__aeabi_ddiv>
   d7924:	e9cd 0100 	strd	r0, r1, [sp]
   d7928:	f1b9 0f00 	cmp.w	r9, #0
   d792c:	dab2      	bge.n	d7894 <__ieee754_pow+0x9c>
   d792e:	9b03      	ldr	r3, [sp, #12]
   d7930:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d7934:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7938:	ea58 0303 	orrs.w	r3, r8, r3
   d793c:	f040 84be 	bne.w	d82bc <__ieee754_pow+0xac4>
   d7940:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7944:	4610      	mov	r0, r2
   d7946:	4619      	mov	r1, r3
   d7948:	f000 ff40 	bl	d87cc <__aeabi_dsub>
   d794c:	4602      	mov	r2, r0
   d794e:	460b      	mov	r3, r1
   d7950:	f001 fa1e 	bl	d8d90 <__aeabi_ddiv>
   d7954:	e9cd 0100 	strd	r0, r1, [sp]
   d7958:	e79c      	b.n	d7894 <__ieee754_pow+0x9c>
   d795a:	9a03      	ldr	r2, [sp, #12]
   d795c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d7960:	3b01      	subs	r3, #1
   d7962:	9306      	str	r3, [sp, #24]
   d7964:	4313      	orrs	r3, r2
   d7966:	d035      	beq.n	d79d4 <__ieee754_pow+0x1dc>
   d7968:	4b26      	ldr	r3, [pc, #152]	; (d7a04 <__ieee754_pow+0x20c>)
   d796a:	459a      	cmp	sl, r3
   d796c:	dd4e      	ble.n	d7a0c <__ieee754_pow+0x214>
   d796e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7972:	459a      	cmp	sl, r3
   d7974:	4b24      	ldr	r3, [pc, #144]	; (d7a08 <__ieee754_pow+0x210>)
   d7976:	f340 83ed 	ble.w	d8154 <__ieee754_pow+0x95c>
   d797a:	4598      	cmp	r8, r3
   d797c:	f340 836b 	ble.w	d8056 <__ieee754_pow+0x85e>
   d7980:	f1bb 0f00 	cmp.w	fp, #0
   d7984:	f340 836b 	ble.w	d805e <__ieee754_pow+0x866>
   d7988:	a317      	add	r3, pc, #92	; (adr r3, d79e8 <__ieee754_pow+0x1f0>)
   d798a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d798e:	4610      	mov	r0, r2
   d7990:	4619      	mov	r1, r3
   d7992:	f001 f8d3 	bl	d8b3c <__aeabi_dmul>
   d7996:	e9cd 0100 	strd	r0, r1, [sp]
   d799a:	e77b      	b.n	d7894 <__ieee754_pow+0x9c>
   d799c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d79a0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d79a4:	4313      	orrs	r3, r2
   d79a6:	f43f af71 	beq.w	d788c <__ieee754_pow+0x94>
   d79aa:	4b17      	ldr	r3, [pc, #92]	; (d7a08 <__ieee754_pow+0x210>)
   d79ac:	4598      	cmp	r8, r3
   d79ae:	f340 8388 	ble.w	d80c2 <__ieee754_pow+0x8ca>
   d79b2:	f1bb 0f00 	cmp.w	fp, #0
   d79b6:	f2c0 8352 	blt.w	d805e <__ieee754_pow+0x866>
   d79ba:	e9cd 6700 	strd	r6, r7, [sp]
   d79be:	e769      	b.n	d7894 <__ieee754_pow+0x9c>
   d79c0:	f1bb 0f00 	cmp.w	fp, #0
   d79c4:	f2c0 8441 	blt.w	d824a <__ieee754_pow+0xa52>
   d79c8:	e9cd 4500 	strd	r4, r5, [sp]
   d79cc:	e762      	b.n	d7894 <__ieee754_pow+0x9c>
   d79ce:	2102      	movs	r1, #2
   d79d0:	9103      	str	r1, [sp, #12]
   d79d2:	e735      	b.n	d7840 <__ieee754_pow+0x48>
   d79d4:	4622      	mov	r2, r4
   d79d6:	462b      	mov	r3, r5
   d79d8:	e7b4      	b.n	d7944 <__ieee754_pow+0x14c>
   d79da:	bf00      	nop
   d79dc:	f3af 8000 	nop.w
   d79e0:	00000000 	.word	0x00000000
   d79e4:	3ff00000 	.word	0x3ff00000
   d79e8:	8800759c 	.word	0x8800759c
   d79ec:	7e37e43c 	.word	0x7e37e43c
   d79f0:	7ff00000 	.word	0x7ff00000
   d79f4:	3ff00000 	.word	0x3ff00000
   d79f8:	3fe00000 	.word	0x3fe00000
   d79fc:	000d9774 	.word	0x000d9774
   d7a00:	433fffff 	.word	0x433fffff
   d7a04:	41e00000 	.word	0x41e00000
   d7a08:	3fefffff 	.word	0x3fefffff
   d7a0c:	4be4      	ldr	r3, [pc, #912]	; (d7da0 <__ieee754_pow+0x5a8>)
   d7a0e:	ea09 0303 	and.w	r3, r9, r3
   d7a12:	2b00      	cmp	r3, #0
   d7a14:	f040 8416 	bne.w	d8244 <__ieee754_pow+0xa4c>
   d7a18:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7a1c:	4be1      	ldr	r3, [pc, #900]	; (d7da4 <__ieee754_pow+0x5ac>)
   d7a1e:	2200      	movs	r2, #0
   d7a20:	f001 f88c 	bl	d8b3c <__aeabi_dmul>
   d7a24:	e9cd 0100 	strd	r0, r1, [sp]
   d7a28:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d7a2c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d7a30:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7a34:	49dc      	ldr	r1, [pc, #880]	; (d7da8 <__ieee754_pow+0x5b0>)
   d7a36:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d7a3a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d7a3e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d7a42:	1818      	adds	r0, r3, r0
   d7a44:	428a      	cmp	r2, r1
   d7a46:	9007      	str	r0, [sp, #28]
   d7a48:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d7a4c:	f340 83e9 	ble.w	d8222 <__ieee754_pow+0xa2a>
   d7a50:	4bd6      	ldr	r3, [pc, #856]	; (d7dac <__ieee754_pow+0x5b4>)
   d7a52:	429a      	cmp	r2, r3
   d7a54:	f340 843e 	ble.w	d82d4 <__ieee754_pow+0xadc>
   d7a58:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d7d48 <__ieee754_pow+0x550>
   d7a5c:	eeb0 ba47 	vmov.f32	s22, s14
   d7a60:	eef0 ba67 	vmov.f32	s23, s15
   d7a64:	eeb0 ca47 	vmov.f32	s24, s14
   d7a68:	eef0 ca67 	vmov.f32	s25, s15
   d7a6c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d7d50 <__ieee754_pow+0x558>
   d7a70:	3001      	adds	r0, #1
   d7a72:	ec54 3b17 	vmov	r3, r4, d7
   d7a76:	9007      	str	r0, [sp, #28]
   d7a78:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d7a7c:	f04f 0900 	mov.w	r9, #0
   d7a80:	e9dd ab00 	ldrd	sl, fp, [sp]
   d7a84:	ec44 3b18 	vmov	d8, r3, r4
   d7a88:	461a      	mov	r2, r3
   d7a8a:	4650      	mov	r0, sl
   d7a8c:	4623      	mov	r3, r4
   d7a8e:	4641      	mov	r1, r8
   d7a90:	f000 fe9c 	bl	d87cc <__aeabi_dsub>
   d7a94:	ec53 2b18 	vmov	r2, r3, d8
   d7a98:	4604      	mov	r4, r0
   d7a9a:	460d      	mov	r5, r1
   d7a9c:	4650      	mov	r0, sl
   d7a9e:	4641      	mov	r1, r8
   d7aa0:	f000 fe96 	bl	d87d0 <__adddf3>
   d7aa4:	4602      	mov	r2, r0
   d7aa6:	460b      	mov	r3, r1
   d7aa8:	2000      	movs	r0, #0
   d7aaa:	49c1      	ldr	r1, [pc, #772]	; (d7db0 <__ieee754_pow+0x5b8>)
   d7aac:	f001 f970 	bl	d8d90 <__aeabi_ddiv>
   d7ab0:	ec45 4b1a 	vmov	d10, r4, r5
   d7ab4:	ec41 0b19 	vmov	d9, r0, r1
   d7ab8:	ec51 0b1a 	vmov	r0, r1, d10
   d7abc:	ec53 2b19 	vmov	r2, r3, d9
   d7ac0:	f001 f83c 	bl	d8b3c <__aeabi_dmul>
   d7ac4:	46c3      	mov	fp, r8
   d7ac6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7aca:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d7ace:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d7ad2:	eb03 0509 	add.w	r5, r3, r9
   d7ad6:	460a      	mov	r2, r1
   d7ad8:	2300      	movs	r3, #0
   d7ada:	4601      	mov	r1, r0
   d7adc:	e9cd 1200 	strd	r1, r2, [sp]
   d7ae0:	9300      	str	r3, [sp, #0]
   d7ae2:	e9dd 8900 	ldrd	r8, r9, [sp]
   d7ae6:	2400      	movs	r4, #0
   d7ae8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7aec:	462b      	mov	r3, r5
   d7aee:	4622      	mov	r2, r4
   d7af0:	4640      	mov	r0, r8
   d7af2:	4649      	mov	r1, r9
   d7af4:	f001 f822 	bl	d8b3c <__aeabi_dmul>
   d7af8:	4602      	mov	r2, r0
   d7afa:	460b      	mov	r3, r1
   d7afc:	ec51 0b1a 	vmov	r0, r1, d10
   d7b00:	f000 fe64 	bl	d87cc <__aeabi_dsub>
   d7b04:	ec41 0b17 	vmov	d7, r0, r1
   d7b08:	ec53 2b18 	vmov	r2, r3, d8
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	4629      	mov	r1, r5
   d7b10:	ec55 4b17 	vmov	r4, r5, d7
   d7b14:	f000 fe5a 	bl	d87cc <__aeabi_dsub>
   d7b18:	4602      	mov	r2, r0
   d7b1a:	460b      	mov	r3, r1
   d7b1c:	4650      	mov	r0, sl
   d7b1e:	4659      	mov	r1, fp
   d7b20:	f000 fe54 	bl	d87cc <__aeabi_dsub>
   d7b24:	4642      	mov	r2, r8
   d7b26:	464b      	mov	r3, r9
   d7b28:	f001 f808 	bl	d8b3c <__aeabi_dmul>
   d7b2c:	4602      	mov	r2, r0
   d7b2e:	460b      	mov	r3, r1
   d7b30:	4620      	mov	r0, r4
   d7b32:	4629      	mov	r1, r5
   d7b34:	f000 fe4a 	bl	d87cc <__aeabi_dsub>
   d7b38:	ec53 2b19 	vmov	r2, r3, d9
   d7b3c:	f000 fffe 	bl	d8b3c <__aeabi_dmul>
   d7b40:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7b44:	4604      	mov	r4, r0
   d7b46:	460d      	mov	r5, r1
   d7b48:	4652      	mov	r2, sl
   d7b4a:	465b      	mov	r3, fp
   d7b4c:	4650      	mov	r0, sl
   d7b4e:	4659      	mov	r1, fp
   d7b50:	f000 fff4 	bl	d8b3c <__aeabi_dmul>
   d7b54:	a380      	add	r3, pc, #512	; (adr r3, d7d58 <__ieee754_pow+0x560>)
   d7b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b5a:	ec45 4b1a 	vmov	d10, r4, r5
   d7b5e:	4604      	mov	r4, r0
   d7b60:	460d      	mov	r5, r1
   d7b62:	f000 ffeb 	bl	d8b3c <__aeabi_dmul>
   d7b66:	a37e      	add	r3, pc, #504	; (adr r3, d7d60 <__ieee754_pow+0x568>)
   d7b68:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b6c:	f000 fe30 	bl	d87d0 <__adddf3>
   d7b70:	4622      	mov	r2, r4
   d7b72:	462b      	mov	r3, r5
   d7b74:	f000 ffe2 	bl	d8b3c <__aeabi_dmul>
   d7b78:	a37b      	add	r3, pc, #492	; (adr r3, d7d68 <__ieee754_pow+0x570>)
   d7b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b7e:	f000 fe27 	bl	d87d0 <__adddf3>
   d7b82:	4622      	mov	r2, r4
   d7b84:	462b      	mov	r3, r5
   d7b86:	f000 ffd9 	bl	d8b3c <__aeabi_dmul>
   d7b8a:	a379      	add	r3, pc, #484	; (adr r3, d7d70 <__ieee754_pow+0x578>)
   d7b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b90:	f000 fe1e 	bl	d87d0 <__adddf3>
   d7b94:	4622      	mov	r2, r4
   d7b96:	462b      	mov	r3, r5
   d7b98:	f000 ffd0 	bl	d8b3c <__aeabi_dmul>
   d7b9c:	a376      	add	r3, pc, #472	; (adr r3, d7d78 <__ieee754_pow+0x580>)
   d7b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ba2:	f000 fe15 	bl	d87d0 <__adddf3>
   d7ba6:	4622      	mov	r2, r4
   d7ba8:	462b      	mov	r3, r5
   d7baa:	f000 ffc7 	bl	d8b3c <__aeabi_dmul>
   d7bae:	a374      	add	r3, pc, #464	; (adr r3, d7d80 <__ieee754_pow+0x588>)
   d7bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bb4:	f000 fe0c 	bl	d87d0 <__adddf3>
   d7bb8:	4622      	mov	r2, r4
   d7bba:	462b      	mov	r3, r5
   d7bbc:	4604      	mov	r4, r0
   d7bbe:	460d      	mov	r5, r1
   d7bc0:	4610      	mov	r0, r2
   d7bc2:	4619      	mov	r1, r3
   d7bc4:	f000 ffba 	bl	d8b3c <__aeabi_dmul>
   d7bc8:	4602      	mov	r2, r0
   d7bca:	460b      	mov	r3, r1
   d7bcc:	4620      	mov	r0, r4
   d7bce:	4629      	mov	r1, r5
   d7bd0:	f000 ffb4 	bl	d8b3c <__aeabi_dmul>
   d7bd4:	4642      	mov	r2, r8
   d7bd6:	4604      	mov	r4, r0
   d7bd8:	460d      	mov	r5, r1
   d7bda:	464b      	mov	r3, r9
   d7bdc:	4650      	mov	r0, sl
   d7bde:	4659      	mov	r1, fp
   d7be0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d7be4:	f000 fdf4 	bl	d87d0 <__adddf3>
   d7be8:	ec53 2b1a 	vmov	r2, r3, d10
   d7bec:	f000 ffa6 	bl	d8b3c <__aeabi_dmul>
   d7bf0:	4622      	mov	r2, r4
   d7bf2:	462b      	mov	r3, r5
   d7bf4:	f000 fdec 	bl	d87d0 <__adddf3>
   d7bf8:	4642      	mov	r2, r8
   d7bfa:	4604      	mov	r4, r0
   d7bfc:	460d      	mov	r5, r1
   d7bfe:	464b      	mov	r3, r9
   d7c00:	4640      	mov	r0, r8
   d7c02:	4649      	mov	r1, r9
   d7c04:	f000 ff9a 	bl	d8b3c <__aeabi_dmul>
   d7c08:	ec45 4b19 	vmov	d9, r4, r5
   d7c0c:	4b69      	ldr	r3, [pc, #420]	; (d7db4 <__ieee754_pow+0x5bc>)
   d7c0e:	2200      	movs	r2, #0
   d7c10:	4682      	mov	sl, r0
   d7c12:	468b      	mov	fp, r1
   d7c14:	f000 fddc 	bl	d87d0 <__adddf3>
   d7c18:	ec53 2b19 	vmov	r2, r3, d9
   d7c1c:	f000 fdd8 	bl	d87d0 <__adddf3>
   d7c20:	9c00      	ldr	r4, [sp, #0]
   d7c22:	460d      	mov	r5, r1
   d7c24:	4622      	mov	r2, r4
   d7c26:	462b      	mov	r3, r5
   d7c28:	4640      	mov	r0, r8
   d7c2a:	4649      	mov	r1, r9
   d7c2c:	f000 ff86 	bl	d8b3c <__aeabi_dmul>
   d7c30:	4b60      	ldr	r3, [pc, #384]	; (d7db4 <__ieee754_pow+0x5bc>)
   d7c32:	4680      	mov	r8, r0
   d7c34:	4689      	mov	r9, r1
   d7c36:	2200      	movs	r2, #0
   d7c38:	4620      	mov	r0, r4
   d7c3a:	4629      	mov	r1, r5
   d7c3c:	f000 fdc6 	bl	d87cc <__aeabi_dsub>
   d7c40:	4652      	mov	r2, sl
   d7c42:	465b      	mov	r3, fp
   d7c44:	f000 fdc2 	bl	d87cc <__aeabi_dsub>
   d7c48:	4602      	mov	r2, r0
   d7c4a:	460b      	mov	r3, r1
   d7c4c:	ec51 0b19 	vmov	r0, r1, d9
   d7c50:	f000 fdbc 	bl	d87cc <__aeabi_dsub>
   d7c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7c58:	f000 ff70 	bl	d8b3c <__aeabi_dmul>
   d7c5c:	ec49 8b18 	vmov	d8, r8, r9
   d7c60:	4622      	mov	r2, r4
   d7c62:	4680      	mov	r8, r0
   d7c64:	4689      	mov	r9, r1
   d7c66:	462b      	mov	r3, r5
   d7c68:	ec51 0b1a 	vmov	r0, r1, d10
   d7c6c:	f000 ff66 	bl	d8b3c <__aeabi_dmul>
   d7c70:	4602      	mov	r2, r0
   d7c72:	460b      	mov	r3, r1
   d7c74:	4640      	mov	r0, r8
   d7c76:	4649      	mov	r1, r9
   d7c78:	f000 fdaa 	bl	d87d0 <__adddf3>
   d7c7c:	4682      	mov	sl, r0
   d7c7e:	468b      	mov	fp, r1
   d7c80:	4652      	mov	r2, sl
   d7c82:	465b      	mov	r3, fp
   d7c84:	ec51 0b18 	vmov	r0, r1, d8
   d7c88:	f000 fda2 	bl	d87d0 <__adddf3>
   d7c8c:	9c00      	ldr	r4, [sp, #0]
   d7c8e:	a33e      	add	r3, pc, #248	; (adr r3, d7d88 <__ieee754_pow+0x590>)
   d7c90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c94:	4620      	mov	r0, r4
   d7c96:	460d      	mov	r5, r1
   d7c98:	f000 ff50 	bl	d8b3c <__aeabi_dmul>
   d7c9c:	ec53 2b18 	vmov	r2, r3, d8
   d7ca0:	4680      	mov	r8, r0
   d7ca2:	4689      	mov	r9, r1
   d7ca4:	4620      	mov	r0, r4
   d7ca6:	4629      	mov	r1, r5
   d7ca8:	f000 fd90 	bl	d87cc <__aeabi_dsub>
   d7cac:	4602      	mov	r2, r0
   d7cae:	460b      	mov	r3, r1
   d7cb0:	4650      	mov	r0, sl
   d7cb2:	4659      	mov	r1, fp
   d7cb4:	f000 fd8a 	bl	d87cc <__aeabi_dsub>
   d7cb8:	a335      	add	r3, pc, #212	; (adr r3, d7d90 <__ieee754_pow+0x598>)
   d7cba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7cbe:	f000 ff3d 	bl	d8b3c <__aeabi_dmul>
   d7cc2:	ec49 8b19 	vmov	d9, r8, r9
   d7cc6:	a334      	add	r3, pc, #208	; (adr r3, d7d98 <__ieee754_pow+0x5a0>)
   d7cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ccc:	4680      	mov	r8, r0
   d7cce:	4689      	mov	r9, r1
   d7cd0:	4620      	mov	r0, r4
   d7cd2:	4629      	mov	r1, r5
   d7cd4:	f000 ff32 	bl	d8b3c <__aeabi_dmul>
   d7cd8:	4602      	mov	r2, r0
   d7cda:	460b      	mov	r3, r1
   d7cdc:	4640      	mov	r0, r8
   d7cde:	4649      	mov	r1, r9
   d7ce0:	f000 fd76 	bl	d87d0 <__adddf3>
   d7ce4:	ec53 2b1c 	vmov	r2, r3, d12
   d7ce8:	f000 fd72 	bl	d87d0 <__adddf3>
   d7cec:	4682      	mov	sl, r0
   d7cee:	9807      	ldr	r0, [sp, #28]
   d7cf0:	468b      	mov	fp, r1
   d7cf2:	f000 feb9 	bl	d8a68 <__aeabi_i2d>
   d7cf6:	4652      	mov	r2, sl
   d7cf8:	4680      	mov	r8, r0
   d7cfa:	4689      	mov	r9, r1
   d7cfc:	465b      	mov	r3, fp
   d7cfe:	ec51 0b19 	vmov	r0, r1, d9
   d7d02:	f000 fd65 	bl	d87d0 <__adddf3>
   d7d06:	ec53 2b1b 	vmov	r2, r3, d11
   d7d0a:	f000 fd61 	bl	d87d0 <__adddf3>
   d7d0e:	4642      	mov	r2, r8
   d7d10:	464b      	mov	r3, r9
   d7d12:	f000 fd5d 	bl	d87d0 <__adddf3>
   d7d16:	9c00      	ldr	r4, [sp, #0]
   d7d18:	4642      	mov	r2, r8
   d7d1a:	464b      	mov	r3, r9
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	460d      	mov	r5, r1
   d7d20:	f000 fd54 	bl	d87cc <__aeabi_dsub>
   d7d24:	ec53 2b1b 	vmov	r2, r3, d11
   d7d28:	f000 fd50 	bl	d87cc <__aeabi_dsub>
   d7d2c:	ec53 2b19 	vmov	r2, r3, d9
   d7d30:	f000 fd4c 	bl	d87cc <__aeabi_dsub>
   d7d34:	4602      	mov	r2, r0
   d7d36:	460b      	mov	r3, r1
   d7d38:	4650      	mov	r0, sl
   d7d3a:	4659      	mov	r1, fp
   d7d3c:	f000 fd46 	bl	d87cc <__aeabi_dsub>
   d7d40:	4682      	mov	sl, r0
   d7d42:	468b      	mov	fp, r1
   d7d44:	e038      	b.n	d7db8 <__ieee754_pow+0x5c0>
   d7d46:	bf00      	nop
	...
   d7d54:	3ff00000 	.word	0x3ff00000
   d7d58:	4a454eef 	.word	0x4a454eef
   d7d5c:	3fca7e28 	.word	0x3fca7e28
   d7d60:	93c9db65 	.word	0x93c9db65
   d7d64:	3fcd864a 	.word	0x3fcd864a
   d7d68:	a91d4101 	.word	0xa91d4101
   d7d6c:	3fd17460 	.word	0x3fd17460
   d7d70:	518f264d 	.word	0x518f264d
   d7d74:	3fd55555 	.word	0x3fd55555
   d7d78:	db6fabff 	.word	0xdb6fabff
   d7d7c:	3fdb6db6 	.word	0x3fdb6db6
   d7d80:	33333303 	.word	0x33333303
   d7d84:	3fe33333 	.word	0x3fe33333
   d7d88:	e0000000 	.word	0xe0000000
   d7d8c:	3feec709 	.word	0x3feec709
   d7d90:	dc3a03fd 	.word	0xdc3a03fd
   d7d94:	3feec709 	.word	0x3feec709
   d7d98:	145b01f5 	.word	0x145b01f5
   d7d9c:	be3e2fe0 	.word	0xbe3e2fe0
   d7da0:	7ff00000 	.word	0x7ff00000
   d7da4:	43400000 	.word	0x43400000
   d7da8:	0003988e 	.word	0x0003988e
   d7dac:	000bb679 	.word	0x000bb679
   d7db0:	3ff00000 	.word	0x3ff00000
   d7db4:	40080000 	.word	0x40080000
   d7db8:	9b03      	ldr	r3, [sp, #12]
   d7dba:	9a06      	ldr	r2, [sp, #24]
   d7dbc:	3b01      	subs	r3, #1
   d7dbe:	4313      	orrs	r3, r2
   d7dc0:	f040 8178 	bne.w	d80b4 <__ieee754_pow+0x8bc>
   d7dc4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d80d8 <__ieee754_pow+0x8e0>
   d7dc8:	eeb0 9a47 	vmov.f32	s18, s14
   d7dcc:	eef0 9a67 	vmov.f32	s19, s15
   d7dd0:	2300      	movs	r3, #0
   d7dd2:	e9cd 6700 	strd	r6, r7, [sp]
   d7dd6:	9300      	str	r3, [sp, #0]
   d7dd8:	e9dd 8900 	ldrd	r8, r9, [sp]
   d7ddc:	4630      	mov	r0, r6
   d7dde:	4642      	mov	r2, r8
   d7de0:	4639      	mov	r1, r7
   d7de2:	464b      	mov	r3, r9
   d7de4:	f000 fcf2 	bl	d87cc <__aeabi_dsub>
   d7de8:	4622      	mov	r2, r4
   d7dea:	462b      	mov	r3, r5
   d7dec:	f000 fea6 	bl	d8b3c <__aeabi_dmul>
   d7df0:	4632      	mov	r2, r6
   d7df2:	463b      	mov	r3, r7
   d7df4:	4606      	mov	r6, r0
   d7df6:	460f      	mov	r7, r1
   d7df8:	4650      	mov	r0, sl
   d7dfa:	4659      	mov	r1, fp
   d7dfc:	f000 fe9e 	bl	d8b3c <__aeabi_dmul>
   d7e00:	4602      	mov	r2, r0
   d7e02:	460b      	mov	r3, r1
   d7e04:	4630      	mov	r0, r6
   d7e06:	4639      	mov	r1, r7
   d7e08:	f000 fce2 	bl	d87d0 <__adddf3>
   d7e0c:	4642      	mov	r2, r8
   d7e0e:	4682      	mov	sl, r0
   d7e10:	468b      	mov	fp, r1
   d7e12:	464b      	mov	r3, r9
   d7e14:	4620      	mov	r0, r4
   d7e16:	4629      	mov	r1, r5
   d7e18:	f000 fe90 	bl	d8b3c <__aeabi_dmul>
   d7e1c:	4606      	mov	r6, r0
   d7e1e:	460f      	mov	r7, r1
   d7e20:	463b      	mov	r3, r7
   d7e22:	4650      	mov	r0, sl
   d7e24:	4659      	mov	r1, fp
   d7e26:	4632      	mov	r2, r6
   d7e28:	f000 fcd2 	bl	d87d0 <__adddf3>
   d7e2c:	4bc4      	ldr	r3, [pc, #784]	; (d8140 <__ieee754_pow+0x948>)
   d7e2e:	4299      	cmp	r1, r3
   d7e30:	4604      	mov	r4, r0
   d7e32:	460d      	mov	r5, r1
   d7e34:	4688      	mov	r8, r1
   d7e36:	f340 8117 	ble.w	d8068 <__ieee754_pow+0x870>
   d7e3a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7e3e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7e42:	4303      	orrs	r3, r0
   d7e44:	f040 822a 	bne.w	d829c <__ieee754_pow+0xaa4>
   d7e48:	a3a5      	add	r3, pc, #660	; (adr r3, d80e0 <__ieee754_pow+0x8e8>)
   d7e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e4e:	4650      	mov	r0, sl
   d7e50:	4659      	mov	r1, fp
   d7e52:	f000 fcbd 	bl	d87d0 <__adddf3>
   d7e56:	4632      	mov	r2, r6
   d7e58:	ec41 0b18 	vmov	d8, r0, r1
   d7e5c:	463b      	mov	r3, r7
   d7e5e:	4620      	mov	r0, r4
   d7e60:	4629      	mov	r1, r5
   d7e62:	f000 fcb3 	bl	d87cc <__aeabi_dsub>
   d7e66:	4602      	mov	r2, r0
   d7e68:	460b      	mov	r3, r1
   d7e6a:	ec51 0b18 	vmov	r0, r1, d8
   d7e6e:	f001 f8f5 	bl	d905c <__aeabi_dcmpgt>
   d7e72:	2800      	cmp	r0, #0
   d7e74:	f040 8212 	bne.w	d829c <__ieee754_pow+0xaa4>
   d7e78:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d7e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7e80:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7e84:	fa42 f303 	asr.w	r3, r2, r3
   d7e88:	4443      	add	r3, r8
   d7e8a:	49ae      	ldr	r1, [pc, #696]	; (d8144 <__ieee754_pow+0x94c>)
   d7e8c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7e90:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7e94:	fa41 fc02 	asr.w	ip, r1, r2
   d7e98:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d7e9c:	ea23 010c 	bic.w	r1, r3, ip
   d7ea0:	f1c2 0414 	rsb	r4, r2, #20
   d7ea4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d7ea8:	f1b8 0f00 	cmp.w	r8, #0
   d7eac:	460b      	mov	r3, r1
   d7eae:	fa45 f104 	asr.w	r1, r5, r4
   d7eb2:	9103      	str	r1, [sp, #12]
   d7eb4:	f04f 0000 	mov.w	r0, #0
   d7eb8:	bfb8      	it	lt
   d7eba:	4249      	neglt	r1, r1
   d7ebc:	4602      	mov	r2, r0
   d7ebe:	bfb8      	it	lt
   d7ec0:	9103      	strlt	r1, [sp, #12]
   d7ec2:	4630      	mov	r0, r6
   d7ec4:	4639      	mov	r1, r7
   d7ec6:	f000 fc81 	bl	d87cc <__aeabi_dsub>
   d7eca:	4606      	mov	r6, r0
   d7ecc:	460f      	mov	r7, r1
   d7ece:	463b      	mov	r3, r7
   d7ed0:	4650      	mov	r0, sl
   d7ed2:	4659      	mov	r1, fp
   d7ed4:	4632      	mov	r2, r6
   d7ed6:	f000 fc7b 	bl	d87d0 <__adddf3>
   d7eda:	9b03      	ldr	r3, [sp, #12]
   d7edc:	051b      	lsls	r3, r3, #20
   d7ede:	9300      	str	r3, [sp, #0]
   d7ee0:	460d      	mov	r5, r1
   d7ee2:	2400      	movs	r4, #0
   d7ee4:	a380      	add	r3, pc, #512	; (adr r3, d80e8 <__ieee754_pow+0x8f0>)
   d7ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7eea:	4620      	mov	r0, r4
   d7eec:	4629      	mov	r1, r5
   d7eee:	f000 fe25 	bl	d8b3c <__aeabi_dmul>
   d7ef2:	4632      	mov	r2, r6
   d7ef4:	4680      	mov	r8, r0
   d7ef6:	4689      	mov	r9, r1
   d7ef8:	463b      	mov	r3, r7
   d7efa:	4620      	mov	r0, r4
   d7efc:	4629      	mov	r1, r5
   d7efe:	f000 fc65 	bl	d87cc <__aeabi_dsub>
   d7f02:	4602      	mov	r2, r0
   d7f04:	460b      	mov	r3, r1
   d7f06:	4650      	mov	r0, sl
   d7f08:	4659      	mov	r1, fp
   d7f0a:	f000 fc5f 	bl	d87cc <__aeabi_dsub>
   d7f0e:	a378      	add	r3, pc, #480	; (adr r3, d80f0 <__ieee754_pow+0x8f8>)
   d7f10:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f14:	f000 fe12 	bl	d8b3c <__aeabi_dmul>
   d7f18:	a377      	add	r3, pc, #476	; (adr r3, d80f8 <__ieee754_pow+0x900>)
   d7f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f1e:	4606      	mov	r6, r0
   d7f20:	460f      	mov	r7, r1
   d7f22:	4620      	mov	r0, r4
   d7f24:	4629      	mov	r1, r5
   d7f26:	f000 fe09 	bl	d8b3c <__aeabi_dmul>
   d7f2a:	4602      	mov	r2, r0
   d7f2c:	460b      	mov	r3, r1
   d7f2e:	4630      	mov	r0, r6
   d7f30:	4639      	mov	r1, r7
   d7f32:	f000 fc4d 	bl	d87d0 <__adddf3>
   d7f36:	4606      	mov	r6, r0
   d7f38:	460f      	mov	r7, r1
   d7f3a:	4632      	mov	r2, r6
   d7f3c:	463b      	mov	r3, r7
   d7f3e:	4640      	mov	r0, r8
   d7f40:	4649      	mov	r1, r9
   d7f42:	f000 fc45 	bl	d87d0 <__adddf3>
   d7f46:	4642      	mov	r2, r8
   d7f48:	464b      	mov	r3, r9
   d7f4a:	4604      	mov	r4, r0
   d7f4c:	460d      	mov	r5, r1
   d7f4e:	f000 fc3d 	bl	d87cc <__aeabi_dsub>
   d7f52:	4602      	mov	r2, r0
   d7f54:	460b      	mov	r3, r1
   d7f56:	4630      	mov	r0, r6
   d7f58:	4639      	mov	r1, r7
   d7f5a:	f000 fc37 	bl	d87cc <__aeabi_dsub>
   d7f5e:	4622      	mov	r2, r4
   d7f60:	4682      	mov	sl, r0
   d7f62:	468b      	mov	fp, r1
   d7f64:	462b      	mov	r3, r5
   d7f66:	4620      	mov	r0, r4
   d7f68:	4629      	mov	r1, r5
   d7f6a:	f000 fde7 	bl	d8b3c <__aeabi_dmul>
   d7f6e:	a364      	add	r3, pc, #400	; (adr r3, d8100 <__ieee754_pow+0x908>)
   d7f70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f74:	4606      	mov	r6, r0
   d7f76:	460f      	mov	r7, r1
   d7f78:	f000 fde0 	bl	d8b3c <__aeabi_dmul>
   d7f7c:	a362      	add	r3, pc, #392	; (adr r3, d8108 <__ieee754_pow+0x910>)
   d7f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f82:	f000 fc23 	bl	d87cc <__aeabi_dsub>
   d7f86:	4632      	mov	r2, r6
   d7f88:	463b      	mov	r3, r7
   d7f8a:	f000 fdd7 	bl	d8b3c <__aeabi_dmul>
   d7f8e:	a360      	add	r3, pc, #384	; (adr r3, d8110 <__ieee754_pow+0x918>)
   d7f90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7f94:	f000 fc1c 	bl	d87d0 <__adddf3>
   d7f98:	4632      	mov	r2, r6
   d7f9a:	463b      	mov	r3, r7
   d7f9c:	f000 fdce 	bl	d8b3c <__aeabi_dmul>
   d7fa0:	a35d      	add	r3, pc, #372	; (adr r3, d8118 <__ieee754_pow+0x920>)
   d7fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fa6:	f000 fc11 	bl	d87cc <__aeabi_dsub>
   d7faa:	4632      	mov	r2, r6
   d7fac:	463b      	mov	r3, r7
   d7fae:	f000 fdc5 	bl	d8b3c <__aeabi_dmul>
   d7fb2:	a35b      	add	r3, pc, #364	; (adr r3, d8120 <__ieee754_pow+0x928>)
   d7fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fb8:	f000 fc0a 	bl	d87d0 <__adddf3>
   d7fbc:	4632      	mov	r2, r6
   d7fbe:	463b      	mov	r3, r7
   d7fc0:	f000 fdbc 	bl	d8b3c <__aeabi_dmul>
   d7fc4:	4602      	mov	r2, r0
   d7fc6:	460b      	mov	r3, r1
   d7fc8:	4620      	mov	r0, r4
   d7fca:	4629      	mov	r1, r5
   d7fcc:	f000 fbfe 	bl	d87cc <__aeabi_dsub>
   d7fd0:	4606      	mov	r6, r0
   d7fd2:	460f      	mov	r7, r1
   d7fd4:	4632      	mov	r2, r6
   d7fd6:	463b      	mov	r3, r7
   d7fd8:	4620      	mov	r0, r4
   d7fda:	4629      	mov	r1, r5
   d7fdc:	f000 fdae 	bl	d8b3c <__aeabi_dmul>
   d7fe0:	2200      	movs	r2, #0
   d7fe2:	4680      	mov	r8, r0
   d7fe4:	4689      	mov	r9, r1
   d7fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7fea:	4630      	mov	r0, r6
   d7fec:	4639      	mov	r1, r7
   d7fee:	f000 fbed 	bl	d87cc <__aeabi_dsub>
   d7ff2:	4602      	mov	r2, r0
   d7ff4:	460b      	mov	r3, r1
   d7ff6:	4640      	mov	r0, r8
   d7ff8:	4649      	mov	r1, r9
   d7ffa:	f000 fec9 	bl	d8d90 <__aeabi_ddiv>
   d7ffe:	4652      	mov	r2, sl
   d8000:	4606      	mov	r6, r0
   d8002:	460f      	mov	r7, r1
   d8004:	465b      	mov	r3, fp
   d8006:	4620      	mov	r0, r4
   d8008:	4629      	mov	r1, r5
   d800a:	f000 fd97 	bl	d8b3c <__aeabi_dmul>
   d800e:	4652      	mov	r2, sl
   d8010:	465b      	mov	r3, fp
   d8012:	f000 fbdd 	bl	d87d0 <__adddf3>
   d8016:	4602      	mov	r2, r0
   d8018:	460b      	mov	r3, r1
   d801a:	4630      	mov	r0, r6
   d801c:	4639      	mov	r1, r7
   d801e:	f000 fbd5 	bl	d87cc <__aeabi_dsub>
   d8022:	4622      	mov	r2, r4
   d8024:	462b      	mov	r3, r5
   d8026:	f000 fbd1 	bl	d87cc <__aeabi_dsub>
   d802a:	4602      	mov	r2, r0
   d802c:	460b      	mov	r3, r1
   d802e:	2000      	movs	r0, #0
   d8030:	4945      	ldr	r1, [pc, #276]	; (d8148 <__ieee754_pow+0x950>)
   d8032:	f000 fbcb 	bl	d87cc <__aeabi_dsub>
   d8036:	460b      	mov	r3, r1
   d8038:	9900      	ldr	r1, [sp, #0]
   d803a:	4419      	add	r1, r3
   d803c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8040:	4602      	mov	r2, r0
   d8042:	f2c0 8169 	blt.w	d8318 <__ieee754_pow+0xb20>
   d8046:	4610      	mov	r0, r2
   d8048:	ec53 2b19 	vmov	r2, r3, d9
   d804c:	f000 fd76 	bl	d8b3c <__aeabi_dmul>
   d8050:	e9cd 0100 	strd	r0, r1, [sp]
   d8054:	e41e      	b.n	d7894 <__ieee754_pow+0x9c>
   d8056:	f1bb 0f00 	cmp.w	fp, #0
   d805a:	f6ff ac95 	blt.w	d7988 <__ieee754_pow+0x190>
   d805e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d8128 <__ieee754_pow+0x930>
   d8062:	ed8d 7b00 	vstr	d7, [sp]
   d8066:	e415      	b.n	d7894 <__ieee754_pow+0x9c>
   d8068:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d8150 <__ieee754_pow+0x958>
   d806c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8070:	4563      	cmp	r3, ip
   d8072:	f340 810b 	ble.w	d828c <__ieee754_pow+0xa94>
   d8076:	4b35      	ldr	r3, [pc, #212]	; (d814c <__ieee754_pow+0x954>)
   d8078:	440b      	add	r3, r1
   d807a:	4303      	orrs	r3, r0
   d807c:	d10a      	bne.n	d8094 <__ieee754_pow+0x89c>
   d807e:	4632      	mov	r2, r6
   d8080:	463b      	mov	r3, r7
   d8082:	f000 fba3 	bl	d87cc <__aeabi_dsub>
   d8086:	4652      	mov	r2, sl
   d8088:	465b      	mov	r3, fp
   d808a:	f000 ffdd 	bl	d9048 <__aeabi_dcmpge>
   d808e:	2800      	cmp	r0, #0
   d8090:	f43f aef2 	beq.w	d7e78 <__ieee754_pow+0x680>
   d8094:	a326      	add	r3, pc, #152	; (adr r3, d8130 <__ieee754_pow+0x938>)
   d8096:	e9d3 2300 	ldrd	r2, r3, [r3]
   d809a:	ec51 0b19 	vmov	r0, r1, d9
   d809e:	f000 fd4d 	bl	d8b3c <__aeabi_dmul>
   d80a2:	a323      	add	r3, pc, #140	; (adr r3, d8130 <__ieee754_pow+0x938>)
   d80a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80a8:	f000 fd48 	bl	d8b3c <__aeabi_dmul>
   d80ac:	e9cd 0100 	strd	r0, r1, [sp]
   d80b0:	f7ff bbf0 	b.w	d7894 <__ieee754_pow+0x9c>
   d80b4:	ed9f 7b20 	vldr	d7, [pc, #128]	; d8138 <__ieee754_pow+0x940>
   d80b8:	eeb0 9a47 	vmov.f32	s18, s14
   d80bc:	eef0 9a67 	vmov.f32	s19, s15
   d80c0:	e686      	b.n	d7dd0 <__ieee754_pow+0x5d8>
   d80c2:	f1bb 0f00 	cmp.w	fp, #0
   d80c6:	daca      	bge.n	d805e <__ieee754_pow+0x866>
   d80c8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d80cc:	9600      	str	r6, [sp, #0]
   d80ce:	9301      	str	r3, [sp, #4]
   d80d0:	f7ff bbe0 	b.w	d7894 <__ieee754_pow+0x9c>
   d80d4:	f3af 8000 	nop.w
   d80d8:	00000000 	.word	0x00000000
   d80dc:	bff00000 	.word	0xbff00000
   d80e0:	652b82fe 	.word	0x652b82fe
   d80e4:	3c971547 	.word	0x3c971547
   d80e8:	00000000 	.word	0x00000000
   d80ec:	3fe62e43 	.word	0x3fe62e43
   d80f0:	fefa39ef 	.word	0xfefa39ef
   d80f4:	3fe62e42 	.word	0x3fe62e42
   d80f8:	0ca86c39 	.word	0x0ca86c39
   d80fc:	be205c61 	.word	0xbe205c61
   d8100:	72bea4d0 	.word	0x72bea4d0
   d8104:	3e663769 	.word	0x3e663769
   d8108:	c5d26bf1 	.word	0xc5d26bf1
   d810c:	3ebbbd41 	.word	0x3ebbbd41
   d8110:	af25de2c 	.word	0xaf25de2c
   d8114:	3f11566a 	.word	0x3f11566a
   d8118:	16bebd93 	.word	0x16bebd93
   d811c:	3f66c16c 	.word	0x3f66c16c
   d8120:	5555553e 	.word	0x5555553e
   d8124:	3fc55555 	.word	0x3fc55555
	...
   d8130:	c2f8f359 	.word	0xc2f8f359
   d8134:	01a56e1f 	.word	0x01a56e1f
   d8138:	00000000 	.word	0x00000000
   d813c:	3ff00000 	.word	0x3ff00000
   d8140:	408fffff 	.word	0x408fffff
   d8144:	000fffff 	.word	0x000fffff
   d8148:	3ff00000 	.word	0x3ff00000
   d814c:	3f6f3400 	.word	0x3f6f3400
   d8150:	4090cbff 	.word	0x4090cbff
   d8154:	4598      	cmp	r8, r3
   d8156:	f6ff af7e 	blt.w	d8056 <__ieee754_pow+0x85e>
   d815a:	4b91      	ldr	r3, [pc, #580]	; (d83a0 <__ieee754_pow+0xba8>)
   d815c:	4598      	cmp	r8, r3
   d815e:	f73f ac0f 	bgt.w	d7980 <__ieee754_pow+0x188>
   d8162:	4b8f      	ldr	r3, [pc, #572]	; (d83a0 <__ieee754_pow+0xba8>)
   d8164:	2200      	movs	r2, #0
   d8166:	e9dd 0100 	ldrd	r0, r1, [sp]
   d816a:	f000 fb2f 	bl	d87cc <__aeabi_dsub>
   d816e:	a378      	add	r3, pc, #480	; (adr r3, d8350 <__ieee754_pow+0xb58>)
   d8170:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8174:	4604      	mov	r4, r0
   d8176:	460d      	mov	r5, r1
   d8178:	f000 fce0 	bl	d8b3c <__aeabi_dmul>
   d817c:	a376      	add	r3, pc, #472	; (adr r3, d8358 <__ieee754_pow+0xb60>)
   d817e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8182:	4682      	mov	sl, r0
   d8184:	468b      	mov	fp, r1
   d8186:	4620      	mov	r0, r4
   d8188:	4629      	mov	r1, r5
   d818a:	f000 fcd7 	bl	d8b3c <__aeabi_dmul>
   d818e:	4b85      	ldr	r3, [pc, #532]	; (d83a4 <__ieee754_pow+0xbac>)
   d8190:	4680      	mov	r8, r0
   d8192:	4689      	mov	r9, r1
   d8194:	2200      	movs	r2, #0
   d8196:	4620      	mov	r0, r4
   d8198:	4629      	mov	r1, r5
   d819a:	f000 fccf 	bl	d8b3c <__aeabi_dmul>
   d819e:	4602      	mov	r2, r0
   d81a0:	460b      	mov	r3, r1
   d81a2:	a16f      	add	r1, pc, #444	; (adr r1, d8360 <__ieee754_pow+0xb68>)
   d81a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d81a8:	f000 fb10 	bl	d87cc <__aeabi_dsub>
   d81ac:	4622      	mov	r2, r4
   d81ae:	462b      	mov	r3, r5
   d81b0:	f000 fcc4 	bl	d8b3c <__aeabi_dmul>
   d81b4:	4602      	mov	r2, r0
   d81b6:	460b      	mov	r3, r1
   d81b8:	2000      	movs	r0, #0
   d81ba:	497b      	ldr	r1, [pc, #492]	; (d83a8 <__ieee754_pow+0xbb0>)
   d81bc:	f000 fb06 	bl	d87cc <__aeabi_dsub>
   d81c0:	4622      	mov	r2, r4
   d81c2:	462b      	mov	r3, r5
   d81c4:	4604      	mov	r4, r0
   d81c6:	460d      	mov	r5, r1
   d81c8:	4610      	mov	r0, r2
   d81ca:	4619      	mov	r1, r3
   d81cc:	f000 fcb6 	bl	d8b3c <__aeabi_dmul>
   d81d0:	4602      	mov	r2, r0
   d81d2:	460b      	mov	r3, r1
   d81d4:	4620      	mov	r0, r4
   d81d6:	4629      	mov	r1, r5
   d81d8:	f000 fcb0 	bl	d8b3c <__aeabi_dmul>
   d81dc:	a362      	add	r3, pc, #392	; (adr r3, d8368 <__ieee754_pow+0xb70>)
   d81de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81e2:	f000 fcab 	bl	d8b3c <__aeabi_dmul>
   d81e6:	4602      	mov	r2, r0
   d81e8:	460b      	mov	r3, r1
   d81ea:	4640      	mov	r0, r8
   d81ec:	4649      	mov	r1, r9
   d81ee:	f000 faed 	bl	d87cc <__aeabi_dsub>
   d81f2:	4680      	mov	r8, r0
   d81f4:	4689      	mov	r9, r1
   d81f6:	4650      	mov	r0, sl
   d81f8:	4659      	mov	r1, fp
   d81fa:	4642      	mov	r2, r8
   d81fc:	464b      	mov	r3, r9
   d81fe:	f000 fae7 	bl	d87d0 <__adddf3>
   d8202:	2400      	movs	r4, #0
   d8204:	4652      	mov	r2, sl
   d8206:	465b      	mov	r3, fp
   d8208:	4620      	mov	r0, r4
   d820a:	460d      	mov	r5, r1
   d820c:	f000 fade 	bl	d87cc <__aeabi_dsub>
   d8210:	4602      	mov	r2, r0
   d8212:	460b      	mov	r3, r1
   d8214:	4640      	mov	r0, r8
   d8216:	4649      	mov	r1, r9
   d8218:	f000 fad8 	bl	d87cc <__aeabi_dsub>
   d821c:	4682      	mov	sl, r0
   d821e:	468b      	mov	fp, r1
   d8220:	e5ca      	b.n	d7db8 <__ieee754_pow+0x5c0>
   d8222:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8370 <__ieee754_pow+0xb78>
   d8226:	eeb0 ba47 	vmov.f32	s22, s14
   d822a:	eef0 ba67 	vmov.f32	s23, s15
   d822e:	eeb0 ca47 	vmov.f32	s24, s14
   d8232:	eef0 ca67 	vmov.f32	s25, s15
   d8236:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8378 <__ieee754_pow+0xb80>
   d823a:	f04f 0900 	mov.w	r9, #0
   d823e:	ec54 3b17 	vmov	r3, r4, d7
   d8242:	e41d      	b.n	d7a80 <__ieee754_pow+0x288>
   d8244:	2000      	movs	r0, #0
   d8246:	f7ff bbf3 	b.w	d7a30 <__ieee754_pow+0x238>
   d824a:	4955      	ldr	r1, [pc, #340]	; (d83a0 <__ieee754_pow+0xba8>)
   d824c:	4622      	mov	r2, r4
   d824e:	462b      	mov	r3, r5
   d8250:	2000      	movs	r0, #0
   d8252:	f000 fd9d 	bl	d8d90 <__aeabi_ddiv>
   d8256:	e9cd 0100 	strd	r0, r1, [sp]
   d825a:	f7ff bb1b 	b.w	d7894 <__ieee754_pow+0x9c>
   d825e:	4622      	mov	r2, r4
   d8260:	462b      	mov	r3, r5
   d8262:	4620      	mov	r0, r4
   d8264:	4629      	mov	r1, r5
   d8266:	f000 fc69 	bl	d8b3c <__aeabi_dmul>
   d826a:	e9cd 0100 	strd	r0, r1, [sp]
   d826e:	f7ff bb11 	b.w	d7894 <__ieee754_pow+0x9c>
   d8272:	2b00      	cmp	r3, #0
   d8274:	d142      	bne.n	d82fc <__ieee754_pow+0xb04>
   d8276:	f1c1 0114 	rsb	r1, r1, #20
   d827a:	fa4a f001 	asr.w	r0, sl, r1
   d827e:	fa00 f101 	lsl.w	r1, r0, r1
   d8282:	4551      	cmp	r1, sl
   d8284:	d05a      	beq.n	d833c <__ieee754_pow+0xb44>
   d8286:	9303      	str	r3, [sp, #12]
   d8288:	f7ff bae0 	b.w	d784c <__ieee754_pow+0x54>
   d828c:	4a46      	ldr	r2, [pc, #280]	; (d83a8 <__ieee754_pow+0xbb0>)
   d828e:	4293      	cmp	r3, r2
   d8290:	dc5b      	bgt.n	d834a <__ieee754_pow+0xb52>
   d8292:	e9dd 1200 	ldrd	r1, r2, [sp]
   d8296:	9100      	str	r1, [sp, #0]
   d8298:	9103      	str	r1, [sp, #12]
   d829a:	e622      	b.n	d7ee2 <__ieee754_pow+0x6ea>
   d829c:	a338      	add	r3, pc, #224	; (adr r3, d8380 <__ieee754_pow+0xb88>)
   d829e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82a2:	ec51 0b19 	vmov	r0, r1, d9
   d82a6:	f000 fc49 	bl	d8b3c <__aeabi_dmul>
   d82aa:	a335      	add	r3, pc, #212	; (adr r3, d8380 <__ieee754_pow+0xb88>)
   d82ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d82b0:	f000 fc44 	bl	d8b3c <__aeabi_dmul>
   d82b4:	e9cd 0100 	strd	r0, r1, [sp]
   d82b8:	f7ff baec 	b.w	d7894 <__ieee754_pow+0x9c>
   d82bc:	9b03      	ldr	r3, [sp, #12]
   d82be:	2b01      	cmp	r3, #1
   d82c0:	f47f aae8 	bne.w	d7894 <__ieee754_pow+0x9c>
   d82c4:	e9dd 2100 	ldrd	r2, r1, [sp]
   d82c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d82cc:	e9cd 2300 	strd	r2, r3, [sp]
   d82d0:	f7ff bae0 	b.w	d7894 <__ieee754_pow+0x9c>
   d82d4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d8388 <__ieee754_pow+0xb90>
   d82d8:	eeb0 ba47 	vmov.f32	s22, s14
   d82dc:	eef0 ba67 	vmov.f32	s23, s15
   d82e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d8390 <__ieee754_pow+0xb98>
   d82e4:	eeb0 ca47 	vmov.f32	s24, s14
   d82e8:	eef0 ca67 	vmov.f32	s25, s15
   d82ec:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d8398 <__ieee754_pow+0xba0>
   d82f0:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d82f4:	ec54 3b17 	vmov	r3, r4, d7
   d82f8:	f7ff bbc2 	b.w	d7a80 <__ieee754_pow+0x288>
   d82fc:	ec45 4b10 	vmov	d0, r4, r5
   d8300:	9203      	str	r2, [sp, #12]
   d8302:	f000 f917 	bl	d8534 <fabs>
   d8306:	9a03      	ldr	r2, [sp, #12]
   d8308:	ed8d 0b00 	vstr	d0, [sp]
   d830c:	2a00      	cmp	r2, #0
   d830e:	f47f ab61 	bne.w	d79d4 <__ieee754_pow+0x1dc>
   d8312:	9203      	str	r2, [sp, #12]
   d8314:	f7ff baf5 	b.w	d7902 <__ieee754_pow+0x10a>
   d8318:	9803      	ldr	r0, [sp, #12]
   d831a:	ec43 2b10 	vmov	d0, r2, r3
   d831e:	f000 f9bf 	bl	d86a0 <scalbn>
   d8322:	ec51 0b10 	vmov	r0, r1, d0
   d8326:	e68f      	b.n	d8048 <__ieee754_pow+0x850>
   d8328:	f000 0001 	and.w	r0, r0, #1
   d832c:	f1c0 0102 	rsb	r1, r0, #2
   d8330:	9103      	str	r1, [sp, #12]
   d8332:	2b00      	cmp	r3, #0
   d8334:	f43f aa8a 	beq.w	d784c <__ieee754_pow+0x54>
   d8338:	f7ff bada 	b.w	d78f0 <__ieee754_pow+0xf8>
   d833c:	f000 0001 	and.w	r0, r0, #1
   d8340:	f1c0 0302 	rsb	r3, r0, #2
   d8344:	9303      	str	r3, [sp, #12]
   d8346:	f7ff ba81 	b.w	d784c <__ieee754_pow+0x54>
   d834a:	151b      	asrs	r3, r3, #20
   d834c:	e596      	b.n	d7e7c <__ieee754_pow+0x684>
   d834e:	bf00      	nop
   d8350:	60000000 	.word	0x60000000
   d8354:	3ff71547 	.word	0x3ff71547
   d8358:	f85ddf44 	.word	0xf85ddf44
   d835c:	3e54ae0b 	.word	0x3e54ae0b
   d8360:	55555555 	.word	0x55555555
   d8364:	3fd55555 	.word	0x3fd55555
   d8368:	652b82fe 	.word	0x652b82fe
   d836c:	3ff71547 	.word	0x3ff71547
	...
   d837c:	3ff00000 	.word	0x3ff00000
   d8380:	8800759c 	.word	0x8800759c
   d8384:	7e37e43c 	.word	0x7e37e43c
   d8388:	40000000 	.word	0x40000000
   d838c:	3fe2b803 	.word	0x3fe2b803
   d8390:	43cfd006 	.word	0x43cfd006
   d8394:	3e4cfdeb 	.word	0x3e4cfdeb
   d8398:	00000000 	.word	0x00000000
   d839c:	3ff80000 	.word	0x3ff80000
   d83a0:	3ff00000 	.word	0x3ff00000
   d83a4:	3fd00000 	.word	0x3fd00000
   d83a8:	3fe00000 	.word	0x3fe00000

000d83ac <__ieee754_sqrt>:
   d83ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d83b0:	4a5f      	ldr	r2, [pc, #380]	; (d8530 <__ieee754_sqrt+0x184>)
   d83b2:	ec57 6b10 	vmov	r6, r7, d0
   d83b6:	43ba      	bics	r2, r7
   d83b8:	f000 8098 	beq.w	d84ec <__ieee754_sqrt+0x140>
   d83bc:	2f00      	cmp	r7, #0
   d83be:	ee10 4a10 	vmov	r4, s0
   d83c2:	463b      	mov	r3, r7
   d83c4:	dd4e      	ble.n	d8464 <__ieee754_sqrt+0xb8>
   d83c6:	1539      	asrs	r1, r7, #20
   d83c8:	d05b      	beq.n	d8482 <__ieee754_sqrt+0xd6>
   d83ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d83ce:	07ca      	lsls	r2, r1, #31
   d83d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d83d4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d83d8:	d403      	bmi.n	d83e2 <__ieee754_sqrt+0x36>
   d83da:	005b      	lsls	r3, r3, #1
   d83dc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d83e0:	0064      	lsls	r4, r4, #1
   d83e2:	0fe2      	lsrs	r2, r4, #31
   d83e4:	f04f 0c00 	mov.w	ip, #0
   d83e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d83ec:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d83f0:	0064      	lsls	r4, r4, #1
   d83f2:	4666      	mov	r6, ip
   d83f4:	2516      	movs	r5, #22
   d83f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d83fa:	18b1      	adds	r1, r6, r2
   d83fc:	4299      	cmp	r1, r3
   d83fe:	dc02      	bgt.n	d8406 <__ieee754_sqrt+0x5a>
   d8400:	1a5b      	subs	r3, r3, r1
   d8402:	188e      	adds	r6, r1, r2
   d8404:	4494      	add	ip, r2
   d8406:	005b      	lsls	r3, r3, #1
   d8408:	3d01      	subs	r5, #1
   d840a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d840e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8412:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8416:	d1f0      	bne.n	d83fa <__ieee754_sqrt+0x4e>
   d8418:	462f      	mov	r7, r5
   d841a:	2020      	movs	r0, #32
   d841c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8420:	e009      	b.n	d8436 <__ieee754_sqrt+0x8a>
   d8422:	d03e      	beq.n	d84a2 <__ieee754_sqrt+0xf6>
   d8424:	0fe1      	lsrs	r1, r4, #31
   d8426:	3801      	subs	r0, #1
   d8428:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d842c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8430:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8434:	d03e      	beq.n	d84b4 <__ieee754_sqrt+0x108>
   d8436:	42b3      	cmp	r3, r6
   d8438:	eb02 0105 	add.w	r1, r2, r5
   d843c:	ddf1      	ble.n	d8422 <__ieee754_sqrt+0x76>
   d843e:	2900      	cmp	r1, #0
   d8440:	eb01 0502 	add.w	r5, r1, r2
   d8444:	db09      	blt.n	d845a <__ieee754_sqrt+0xae>
   d8446:	46b0      	mov	r8, r6
   d8448:	1b9b      	subs	r3, r3, r6
   d844a:	42a1      	cmp	r1, r4
   d844c:	bf88      	it	hi
   d844e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8452:	1a64      	subs	r4, r4, r1
   d8454:	4417      	add	r7, r2
   d8456:	4646      	mov	r6, r8
   d8458:	e7e4      	b.n	d8424 <__ieee754_sqrt+0x78>
   d845a:	2d00      	cmp	r5, #0
   d845c:	dbf3      	blt.n	d8446 <__ieee754_sqrt+0x9a>
   d845e:	f106 0801 	add.w	r8, r6, #1
   d8462:	e7f1      	b.n	d8448 <__ieee754_sqrt+0x9c>
   d8464:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8468:	4332      	orrs	r2, r6
   d846a:	d036      	beq.n	d84da <__ieee754_sqrt+0x12e>
   d846c:	2f00      	cmp	r7, #0
   d846e:	d14d      	bne.n	d850c <__ieee754_sqrt+0x160>
   d8470:	4639      	mov	r1, r7
   d8472:	0ae2      	lsrs	r2, r4, #11
   d8474:	3915      	subs	r1, #21
   d8476:	0564      	lsls	r4, r4, #21
   d8478:	4613      	mov	r3, r2
   d847a:	2a00      	cmp	r2, #0
   d847c:	d0f9      	beq.n	d8472 <__ieee754_sqrt+0xc6>
   d847e:	02d7      	lsls	r7, r2, #11
   d8480:	d451      	bmi.n	d8526 <__ieee754_sqrt+0x17a>
   d8482:	2000      	movs	r0, #0
   d8484:	005b      	lsls	r3, r3, #1
   d8486:	02de      	lsls	r6, r3, #11
   d8488:	4605      	mov	r5, r0
   d848a:	f100 0001 	add.w	r0, r0, #1
   d848e:	d5f9      	bpl.n	d8484 <__ieee754_sqrt+0xd8>
   d8490:	461a      	mov	r2, r3
   d8492:	4623      	mov	r3, r4
   d8494:	4084      	lsls	r4, r0
   d8496:	f1c0 0020 	rsb	r0, r0, #32
   d849a:	40c3      	lsrs	r3, r0
   d849c:	4313      	orrs	r3, r2
   d849e:	1b49      	subs	r1, r1, r5
   d84a0:	e793      	b.n	d83ca <__ieee754_sqrt+0x1e>
   d84a2:	42a1      	cmp	r1, r4
   d84a4:	d8be      	bhi.n	d8424 <__ieee754_sqrt+0x78>
   d84a6:	2900      	cmp	r1, #0
   d84a8:	eb01 0502 	add.w	r5, r1, r2
   d84ac:	dbd5      	blt.n	d845a <__ieee754_sqrt+0xae>
   d84ae:	4698      	mov	r8, r3
   d84b0:	2300      	movs	r3, #0
   d84b2:	e7ce      	b.n	d8452 <__ieee754_sqrt+0xa6>
   d84b4:	4323      	orrs	r3, r4
   d84b6:	d112      	bne.n	d84de <__ieee754_sqrt+0x132>
   d84b8:	0878      	lsrs	r0, r7, #1
   d84ba:	ea4f 016c 	mov.w	r1, ip, asr #1
   d84be:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d84c2:	f01c 0f01 	tst.w	ip, #1
   d84c6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d84ca:	bf18      	it	ne
   d84cc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d84d0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d84d4:	4602      	mov	r2, r0
   d84d6:	ec43 2b10 	vmov	d0, r2, r3
   d84da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d84de:	1c7b      	adds	r3, r7, #1
   d84e0:	bf16      	itet	ne
   d84e2:	1c78      	addne	r0, r7, #1
   d84e4:	f10c 0c01 	addeq.w	ip, ip, #1
   d84e8:	0840      	lsrne	r0, r0, #1
   d84ea:	e7e6      	b.n	d84ba <__ieee754_sqrt+0x10e>
   d84ec:	ee10 2a10 	vmov	r2, s0
   d84f0:	ee10 0a10 	vmov	r0, s0
   d84f4:	463b      	mov	r3, r7
   d84f6:	4639      	mov	r1, r7
   d84f8:	f000 fb20 	bl	d8b3c <__aeabi_dmul>
   d84fc:	4632      	mov	r2, r6
   d84fe:	463b      	mov	r3, r7
   d8500:	f000 f966 	bl	d87d0 <__adddf3>
   d8504:	ec41 0b10 	vmov	d0, r0, r1
   d8508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d850c:	ee10 2a10 	vmov	r2, s0
   d8510:	4630      	mov	r0, r6
   d8512:	4639      	mov	r1, r7
   d8514:	f000 f95a 	bl	d87cc <__aeabi_dsub>
   d8518:	4602      	mov	r2, r0
   d851a:	460b      	mov	r3, r1
   d851c:	f000 fc38 	bl	d8d90 <__aeabi_ddiv>
   d8520:	ec41 0b10 	vmov	d0, r0, r1
   d8524:	e7d9      	b.n	d84da <__ieee754_sqrt+0x12e>
   d8526:	4623      	mov	r3, r4
   d8528:	2020      	movs	r0, #32
   d852a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d852e:	e7b4      	b.n	d849a <__ieee754_sqrt+0xee>
   d8530:	7ff00000 	.word	0x7ff00000

000d8534 <fabs>:
   d8534:	ec51 0b10 	vmov	r0, r1, d0
   d8538:	ee10 2a10 	vmov	r2, s0
   d853c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8540:	ec43 2b10 	vmov	d0, r2, r3
   d8544:	4770      	bx	lr
   d8546:	bf00      	nop

000d8548 <finite>:
   d8548:	b082      	sub	sp, #8
   d854a:	ed8d 0b00 	vstr	d0, [sp]
   d854e:	9801      	ldr	r0, [sp, #4]
   d8550:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8554:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8558:	0fc0      	lsrs	r0, r0, #31
   d855a:	b002      	add	sp, #8
   d855c:	4770      	bx	lr
   d855e:	bf00      	nop

000d8560 <matherr>:
   d8560:	2000      	movs	r0, #0
   d8562:	4770      	bx	lr
   d8564:	0000      	movs	r0, r0
	...

000d8568 <nan>:
   d8568:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8570 <nan+0x8>
   d856c:	4770      	bx	lr
   d856e:	bf00      	nop
   d8570:	00000000 	.word	0x00000000
   d8574:	7ff80000 	.word	0x7ff80000

000d8578 <rint>:
   d8578:	b5f0      	push	{r4, r5, r6, r7, lr}
   d857a:	ec53 2b10 	vmov	r2, r3, d0
   d857e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8582:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8586:	2813      	cmp	r0, #19
   d8588:	ee10 5a10 	vmov	r5, s0
   d858c:	b083      	sub	sp, #12
   d858e:	4619      	mov	r1, r3
   d8590:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8594:	dc31      	bgt.n	d85fa <rint+0x82>
   d8596:	2800      	cmp	r0, #0
   d8598:	db4c      	blt.n	d8634 <rint+0xbc>
   d859a:	4e3e      	ldr	r6, [pc, #248]	; (d8694 <rint+0x11c>)
   d859c:	4106      	asrs	r6, r0
   d859e:	ea03 0706 	and.w	r7, r3, r6
   d85a2:	4317      	orrs	r7, r2
   d85a4:	d02e      	beq.n	d8604 <rint+0x8c>
   d85a6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d85aa:	431d      	orrs	r5, r3
   d85ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d85b0:	d00c      	beq.n	d85cc <rint+0x54>
   d85b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d85b6:	2813      	cmp	r0, #19
   d85b8:	ea21 0606 	bic.w	r6, r1, r6
   d85bc:	fa43 f100 	asr.w	r1, r3, r0
   d85c0:	ea41 0106 	orr.w	r1, r1, r6
   d85c4:	bf0c      	ite	eq
   d85c6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d85ca:	2500      	movne	r5, #0
   d85cc:	4832      	ldr	r0, [pc, #200]	; (d8698 <rint+0x120>)
   d85ce:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d85d2:	462a      	mov	r2, r5
   d85d4:	e9d4 4500 	ldrd	r4, r5, [r4]
   d85d8:	460b      	mov	r3, r1
   d85da:	4620      	mov	r0, r4
   d85dc:	4629      	mov	r1, r5
   d85de:	f000 f8f7 	bl	d87d0 <__adddf3>
   d85e2:	e9cd 0100 	strd	r0, r1, [sp]
   d85e6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d85ea:	4622      	mov	r2, r4
   d85ec:	462b      	mov	r3, r5
   d85ee:	f000 f8ed 	bl	d87cc <__aeabi_dsub>
   d85f2:	ec41 0b10 	vmov	d0, r0, r1
   d85f6:	b003      	add	sp, #12
   d85f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d85fa:	2833      	cmp	r0, #51	; 0x33
   d85fc:	dd06      	ble.n	d860c <rint+0x94>
   d85fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8602:	d040      	beq.n	d8686 <rint+0x10e>
   d8604:	ec43 2b10 	vmov	d0, r2, r3
   d8608:	b003      	add	sp, #12
   d860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d860c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8614:	40f0      	lsrs	r0, r6
   d8616:	4202      	tst	r2, r0
   d8618:	d0f4      	beq.n	d8604 <rint+0x8c>
   d861a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d861e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8622:	d0d3      	beq.n	d85cc <rint+0x54>
   d8624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d8628:	ea25 0503 	bic.w	r5, r5, r3
   d862c:	fa42 f606 	asr.w	r6, r2, r6
   d8630:	4335      	orrs	r5, r6
   d8632:	e7cb      	b.n	d85cc <rint+0x54>
   d8634:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8638:	4310      	orrs	r0, r2
   d863a:	d0e3      	beq.n	d8604 <rint+0x8c>
   d863c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8640:	4310      	orrs	r0, r2
   d8642:	4245      	negs	r5, r0
   d8644:	4305      	orrs	r5, r0
   d8646:	4814      	ldr	r0, [pc, #80]	; (d8698 <rint+0x120>)
   d8648:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d864c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8650:	0c59      	lsrs	r1, r3, #17
   d8652:	0b2d      	lsrs	r5, r5, #12
   d8654:	0449      	lsls	r1, r1, #17
   d8656:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d865a:	ea45 0301 	orr.w	r3, r5, r1
   d865e:	4630      	mov	r0, r6
   d8660:	4639      	mov	r1, r7
   d8662:	f000 f8b5 	bl	d87d0 <__adddf3>
   d8666:	e9cd 0100 	strd	r0, r1, [sp]
   d866a:	463b      	mov	r3, r7
   d866c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8670:	4632      	mov	r2, r6
   d8672:	f000 f8ab 	bl	d87cc <__aeabi_dsub>
   d8676:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d867a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d867e:	ec41 0b10 	vmov	d0, r0, r1
   d8682:	b003      	add	sp, #12
   d8684:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8686:	ee10 0a10 	vmov	r0, s0
   d868a:	f000 f8a1 	bl	d87d0 <__adddf3>
   d868e:	ec41 0b10 	vmov	d0, r0, r1
   d8692:	e7b9      	b.n	d8608 <rint+0x90>
   d8694:	000fffff 	.word	0x000fffff
   d8698:	000d9778 	.word	0x000d9778
   d869c:	00000000 	.word	0x00000000

000d86a0 <scalbn>:
   d86a0:	b538      	push	{r3, r4, r5, lr}
   d86a2:	ec53 2b10 	vmov	r2, r3, d0
   d86a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d86aa:	461c      	mov	r4, r3
   d86ac:	4605      	mov	r5, r0
   d86ae:	bb81      	cbnz	r1, d8712 <scalbn+0x72>
   d86b0:	ee10 1a10 	vmov	r1, s0
   d86b4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d86b8:	4321      	orrs	r1, r4
   d86ba:	d029      	beq.n	d8710 <scalbn+0x70>
   d86bc:	4619      	mov	r1, r3
   d86be:	2200      	movs	r2, #0
   d86c0:	4b3d      	ldr	r3, [pc, #244]	; (d87b8 <scalbn+0x118>)
   d86c2:	4c3e      	ldr	r4, [pc, #248]	; (d87bc <scalbn+0x11c>)
   d86c4:	ee10 0a10 	vmov	r0, s0
   d86c8:	f000 fa38 	bl	d8b3c <__aeabi_dmul>
   d86cc:	42a5      	cmp	r5, r4
   d86ce:	4602      	mov	r2, r0
   d86d0:	460b      	mov	r3, r1
   d86d2:	db16      	blt.n	d8702 <scalbn+0x62>
   d86d4:	460c      	mov	r4, r1
   d86d6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d86da:	3936      	subs	r1, #54	; 0x36
   d86dc:	4429      	add	r1, r5
   d86de:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d86e2:	4281      	cmp	r1, r0
   d86e4:	dc21      	bgt.n	d872a <scalbn+0x8a>
   d86e6:	2900      	cmp	r1, #0
   d86e8:	dc47      	bgt.n	d877a <scalbn+0xda>
   d86ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d86ee:	da34      	bge.n	d875a <scalbn+0xba>
   d86f0:	f24c 3150 	movw	r1, #50000	; 0xc350
   d86f4:	428d      	cmp	r5, r1
   d86f6:	dc18      	bgt.n	d872a <scalbn+0x8a>
   d86f8:	2b00      	cmp	r3, #0
   d86fa:	a127      	add	r1, pc, #156	; (adr r1, d8798 <scalbn+0xf8>)
   d86fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8700:	db44      	blt.n	d878c <scalbn+0xec>
   d8702:	a325      	add	r3, pc, #148	; (adr r3, d8798 <scalbn+0xf8>)
   d8704:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8708:	f000 fa18 	bl	d8b3c <__aeabi_dmul>
   d870c:	ec41 0b10 	vmov	d0, r0, r1
   d8710:	bd38      	pop	{r3, r4, r5, pc}
   d8712:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8716:	4281      	cmp	r1, r0
   d8718:	d1e0      	bne.n	d86dc <scalbn+0x3c>
   d871a:	ee10 0a10 	vmov	r0, s0
   d871e:	4619      	mov	r1, r3
   d8720:	f000 f856 	bl	d87d0 <__adddf3>
   d8724:	ec41 0b10 	vmov	d0, r0, r1
   d8728:	bd38      	pop	{r3, r4, r5, pc}
   d872a:	2b00      	cmp	r3, #0
   d872c:	a11c      	add	r1, pc, #112	; (adr r1, d87a0 <scalbn+0x100>)
   d872e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8732:	db07      	blt.n	d8744 <scalbn+0xa4>
   d8734:	a31a      	add	r3, pc, #104	; (adr r3, d87a0 <scalbn+0x100>)
   d8736:	e9d3 2300 	ldrd	r2, r3, [r3]
   d873a:	f000 f9ff 	bl	d8b3c <__aeabi_dmul>
   d873e:	ec41 0b10 	vmov	d0, r0, r1
   d8742:	bd38      	pop	{r3, r4, r5, pc}
   d8744:	a118      	add	r1, pc, #96	; (adr r1, d87a8 <scalbn+0x108>)
   d8746:	e9d1 0100 	ldrd	r0, r1, [r1]
   d874a:	a315      	add	r3, pc, #84	; (adr r3, d87a0 <scalbn+0x100>)
   d874c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8750:	f000 f9f4 	bl	d8b3c <__aeabi_dmul>
   d8754:	ec41 0b10 	vmov	d0, r0, r1
   d8758:	e7f3      	b.n	d8742 <scalbn+0xa2>
   d875a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d875e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8762:	3136      	adds	r1, #54	; 0x36
   d8764:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8768:	4610      	mov	r0, r2
   d876a:	4619      	mov	r1, r3
   d876c:	2200      	movs	r2, #0
   d876e:	4b14      	ldr	r3, [pc, #80]	; (d87c0 <scalbn+0x120>)
   d8770:	f000 f9e4 	bl	d8b3c <__aeabi_dmul>
   d8774:	ec41 0b10 	vmov	d0, r0, r1
   d8778:	bd38      	pop	{r3, r4, r5, pc}
   d877a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d877e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8782:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8786:	ec43 2b10 	vmov	d0, r2, r3
   d878a:	bd38      	pop	{r3, r4, r5, pc}
   d878c:	a108      	add	r1, pc, #32	; (adr r1, d87b0 <scalbn+0x110>)
   d878e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8792:	e7b6      	b.n	d8702 <scalbn+0x62>
   d8794:	f3af 8000 	nop.w
   d8798:	c2f8f359 	.word	0xc2f8f359
   d879c:	01a56e1f 	.word	0x01a56e1f
   d87a0:	8800759c 	.word	0x8800759c
   d87a4:	7e37e43c 	.word	0x7e37e43c
   d87a8:	8800759c 	.word	0x8800759c
   d87ac:	fe37e43c 	.word	0xfe37e43c
   d87b0:	c2f8f359 	.word	0xc2f8f359
   d87b4:	81a56e1f 	.word	0x81a56e1f
   d87b8:	43500000 	.word	0x43500000
   d87bc:	ffff3cb0 	.word	0xffff3cb0
   d87c0:	3c900000 	.word	0x3c900000

000d87c4 <__aeabi_drsub>:
   d87c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d87c8:	e002      	b.n	d87d0 <__adddf3>
   d87ca:	bf00      	nop

000d87cc <__aeabi_dsub>:
   d87cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d87d0 <__adddf3>:
   d87d0:	b530      	push	{r4, r5, lr}
   d87d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d87d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d87da:	ea94 0f05 	teq	r4, r5
   d87de:	bf08      	it	eq
   d87e0:	ea90 0f02 	teqeq	r0, r2
   d87e4:	bf1f      	itttt	ne
   d87e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d87ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   d87ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d87f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d87f6:	f000 80e2 	beq.w	d89be <__adddf3+0x1ee>
   d87fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d87fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8802:	bfb8      	it	lt
   d8804:	426d      	neglt	r5, r5
   d8806:	dd0c      	ble.n	d8822 <__adddf3+0x52>
   d8808:	442c      	add	r4, r5
   d880a:	ea80 0202 	eor.w	r2, r0, r2
   d880e:	ea81 0303 	eor.w	r3, r1, r3
   d8812:	ea82 0000 	eor.w	r0, r2, r0
   d8816:	ea83 0101 	eor.w	r1, r3, r1
   d881a:	ea80 0202 	eor.w	r2, r0, r2
   d881e:	ea81 0303 	eor.w	r3, r1, r3
   d8822:	2d36      	cmp	r5, #54	; 0x36
   d8824:	bf88      	it	hi
   d8826:	bd30      	pophi	{r4, r5, pc}
   d8828:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d882c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8830:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8834:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8838:	d002      	beq.n	d8840 <__adddf3+0x70>
   d883a:	4240      	negs	r0, r0
   d883c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8840:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8844:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8848:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d884c:	d002      	beq.n	d8854 <__adddf3+0x84>
   d884e:	4252      	negs	r2, r2
   d8850:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8854:	ea94 0f05 	teq	r4, r5
   d8858:	f000 80a7 	beq.w	d89aa <__adddf3+0x1da>
   d885c:	f1a4 0401 	sub.w	r4, r4, #1
   d8860:	f1d5 0e20 	rsbs	lr, r5, #32
   d8864:	db0d      	blt.n	d8882 <__adddf3+0xb2>
   d8866:	fa02 fc0e 	lsl.w	ip, r2, lr
   d886a:	fa22 f205 	lsr.w	r2, r2, r5
   d886e:	1880      	adds	r0, r0, r2
   d8870:	f141 0100 	adc.w	r1, r1, #0
   d8874:	fa03 f20e 	lsl.w	r2, r3, lr
   d8878:	1880      	adds	r0, r0, r2
   d887a:	fa43 f305 	asr.w	r3, r3, r5
   d887e:	4159      	adcs	r1, r3
   d8880:	e00e      	b.n	d88a0 <__adddf3+0xd0>
   d8882:	f1a5 0520 	sub.w	r5, r5, #32
   d8886:	f10e 0e20 	add.w	lr, lr, #32
   d888a:	2a01      	cmp	r2, #1
   d888c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8890:	bf28      	it	cs
   d8892:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8896:	fa43 f305 	asr.w	r3, r3, r5
   d889a:	18c0      	adds	r0, r0, r3
   d889c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d88a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d88a4:	d507      	bpl.n	d88b6 <__adddf3+0xe6>
   d88a6:	f04f 0e00 	mov.w	lr, #0
   d88aa:	f1dc 0c00 	rsbs	ip, ip, #0
   d88ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   d88b2:	eb6e 0101 	sbc.w	r1, lr, r1
   d88b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d88ba:	d31b      	bcc.n	d88f4 <__adddf3+0x124>
   d88bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d88c0:	d30c      	bcc.n	d88dc <__adddf3+0x10c>
   d88c2:	0849      	lsrs	r1, r1, #1
   d88c4:	ea5f 0030 	movs.w	r0, r0, rrx
   d88c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d88cc:	f104 0401 	add.w	r4, r4, #1
   d88d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d88d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d88d8:	f080 809a 	bcs.w	d8a10 <__adddf3+0x240>
   d88dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d88e0:	bf08      	it	eq
   d88e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d88e6:	f150 0000 	adcs.w	r0, r0, #0
   d88ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d88ee:	ea41 0105 	orr.w	r1, r1, r5
   d88f2:	bd30      	pop	{r4, r5, pc}
   d88f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d88f8:	4140      	adcs	r0, r0
   d88fa:	eb41 0101 	adc.w	r1, r1, r1
   d88fe:	3c01      	subs	r4, #1
   d8900:	bf28      	it	cs
   d8902:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8906:	d2e9      	bcs.n	d88dc <__adddf3+0x10c>
   d8908:	f091 0f00 	teq	r1, #0
   d890c:	bf04      	itt	eq
   d890e:	4601      	moveq	r1, r0
   d8910:	2000      	moveq	r0, #0
   d8912:	fab1 f381 	clz	r3, r1
   d8916:	bf08      	it	eq
   d8918:	3320      	addeq	r3, #32
   d891a:	f1a3 030b 	sub.w	r3, r3, #11
   d891e:	f1b3 0220 	subs.w	r2, r3, #32
   d8922:	da0c      	bge.n	d893e <__adddf3+0x16e>
   d8924:	320c      	adds	r2, #12
   d8926:	dd08      	ble.n	d893a <__adddf3+0x16a>
   d8928:	f102 0c14 	add.w	ip, r2, #20
   d892c:	f1c2 020c 	rsb	r2, r2, #12
   d8930:	fa01 f00c 	lsl.w	r0, r1, ip
   d8934:	fa21 f102 	lsr.w	r1, r1, r2
   d8938:	e00c      	b.n	d8954 <__adddf3+0x184>
   d893a:	f102 0214 	add.w	r2, r2, #20
   d893e:	bfd8      	it	le
   d8940:	f1c2 0c20 	rsble	ip, r2, #32
   d8944:	fa01 f102 	lsl.w	r1, r1, r2
   d8948:	fa20 fc0c 	lsr.w	ip, r0, ip
   d894c:	bfdc      	itt	le
   d894e:	ea41 010c 	orrle.w	r1, r1, ip
   d8952:	4090      	lslle	r0, r2
   d8954:	1ae4      	subs	r4, r4, r3
   d8956:	bfa2      	ittt	ge
   d8958:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d895c:	4329      	orrge	r1, r5
   d895e:	bd30      	popge	{r4, r5, pc}
   d8960:	ea6f 0404 	mvn.w	r4, r4
   d8964:	3c1f      	subs	r4, #31
   d8966:	da1c      	bge.n	d89a2 <__adddf3+0x1d2>
   d8968:	340c      	adds	r4, #12
   d896a:	dc0e      	bgt.n	d898a <__adddf3+0x1ba>
   d896c:	f104 0414 	add.w	r4, r4, #20
   d8970:	f1c4 0220 	rsb	r2, r4, #32
   d8974:	fa20 f004 	lsr.w	r0, r0, r4
   d8978:	fa01 f302 	lsl.w	r3, r1, r2
   d897c:	ea40 0003 	orr.w	r0, r0, r3
   d8980:	fa21 f304 	lsr.w	r3, r1, r4
   d8984:	ea45 0103 	orr.w	r1, r5, r3
   d8988:	bd30      	pop	{r4, r5, pc}
   d898a:	f1c4 040c 	rsb	r4, r4, #12
   d898e:	f1c4 0220 	rsb	r2, r4, #32
   d8992:	fa20 f002 	lsr.w	r0, r0, r2
   d8996:	fa01 f304 	lsl.w	r3, r1, r4
   d899a:	ea40 0003 	orr.w	r0, r0, r3
   d899e:	4629      	mov	r1, r5
   d89a0:	bd30      	pop	{r4, r5, pc}
   d89a2:	fa21 f004 	lsr.w	r0, r1, r4
   d89a6:	4629      	mov	r1, r5
   d89a8:	bd30      	pop	{r4, r5, pc}
   d89aa:	f094 0f00 	teq	r4, #0
   d89ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d89b2:	bf06      	itte	eq
   d89b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d89b8:	3401      	addeq	r4, #1
   d89ba:	3d01      	subne	r5, #1
   d89bc:	e74e      	b.n	d885c <__adddf3+0x8c>
   d89be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d89c2:	bf18      	it	ne
   d89c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89c8:	d029      	beq.n	d8a1e <__adddf3+0x24e>
   d89ca:	ea94 0f05 	teq	r4, r5
   d89ce:	bf08      	it	eq
   d89d0:	ea90 0f02 	teqeq	r0, r2
   d89d4:	d005      	beq.n	d89e2 <__adddf3+0x212>
   d89d6:	ea54 0c00 	orrs.w	ip, r4, r0
   d89da:	bf04      	itt	eq
   d89dc:	4619      	moveq	r1, r3
   d89de:	4610      	moveq	r0, r2
   d89e0:	bd30      	pop	{r4, r5, pc}
   d89e2:	ea91 0f03 	teq	r1, r3
   d89e6:	bf1e      	ittt	ne
   d89e8:	2100      	movne	r1, #0
   d89ea:	2000      	movne	r0, #0
   d89ec:	bd30      	popne	{r4, r5, pc}
   d89ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d89f2:	d105      	bne.n	d8a00 <__adddf3+0x230>
   d89f4:	0040      	lsls	r0, r0, #1
   d89f6:	4149      	adcs	r1, r1
   d89f8:	bf28      	it	cs
   d89fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d89fe:	bd30      	pop	{r4, r5, pc}
   d8a00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a04:	bf3c      	itt	cc
   d8a06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a0a:	bd30      	popcc	{r4, r5, pc}
   d8a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a18:	f04f 0000 	mov.w	r0, #0
   d8a1c:	bd30      	pop	{r4, r5, pc}
   d8a1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a22:	bf1a      	itte	ne
   d8a24:	4619      	movne	r1, r3
   d8a26:	4610      	movne	r0, r2
   d8a28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8a2c:	bf1c      	itt	ne
   d8a2e:	460b      	movne	r3, r1
   d8a30:	4602      	movne	r2, r0
   d8a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a36:	bf06      	itte	eq
   d8a38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8a3c:	ea91 0f03 	teqeq	r1, r3
   d8a40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8a44:	bd30      	pop	{r4, r5, pc}
   d8a46:	bf00      	nop

000d8a48 <__aeabi_ui2d>:
   d8a48:	f090 0f00 	teq	r0, #0
   d8a4c:	bf04      	itt	eq
   d8a4e:	2100      	moveq	r1, #0
   d8a50:	4770      	bxeq	lr
   d8a52:	b530      	push	{r4, r5, lr}
   d8a54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a5c:	f04f 0500 	mov.w	r5, #0
   d8a60:	f04f 0100 	mov.w	r1, #0
   d8a64:	e750      	b.n	d8908 <__adddf3+0x138>
   d8a66:	bf00      	nop

000d8a68 <__aeabi_i2d>:
   d8a68:	f090 0f00 	teq	r0, #0
   d8a6c:	bf04      	itt	eq
   d8a6e:	2100      	moveq	r1, #0
   d8a70:	4770      	bxeq	lr
   d8a72:	b530      	push	{r4, r5, lr}
   d8a74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8a80:	bf48      	it	mi
   d8a82:	4240      	negmi	r0, r0
   d8a84:	f04f 0100 	mov.w	r1, #0
   d8a88:	e73e      	b.n	d8908 <__adddf3+0x138>
   d8a8a:	bf00      	nop

000d8a8c <__aeabi_f2d>:
   d8a8c:	0042      	lsls	r2, r0, #1
   d8a8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8a92:	ea4f 0131 	mov.w	r1, r1, rrx
   d8a96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8a9a:	bf1f      	itttt	ne
   d8a9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8aa0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8aa4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8aa8:	4770      	bxne	lr
   d8aaa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8aae:	bf08      	it	eq
   d8ab0:	4770      	bxeq	lr
   d8ab2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8ab6:	bf04      	itt	eq
   d8ab8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8abc:	4770      	bxeq	lr
   d8abe:	b530      	push	{r4, r5, lr}
   d8ac0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8ac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ac8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8acc:	e71c      	b.n	d8908 <__adddf3+0x138>
   d8ace:	bf00      	nop

000d8ad0 <__aeabi_ul2d>:
   d8ad0:	ea50 0201 	orrs.w	r2, r0, r1
   d8ad4:	bf08      	it	eq
   d8ad6:	4770      	bxeq	lr
   d8ad8:	b530      	push	{r4, r5, lr}
   d8ada:	f04f 0500 	mov.w	r5, #0
   d8ade:	e00a      	b.n	d8af6 <__aeabi_l2d+0x16>

000d8ae0 <__aeabi_l2d>:
   d8ae0:	ea50 0201 	orrs.w	r2, r0, r1
   d8ae4:	bf08      	it	eq
   d8ae6:	4770      	bxeq	lr
   d8ae8:	b530      	push	{r4, r5, lr}
   d8aea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8aee:	d502      	bpl.n	d8af6 <__aeabi_l2d+0x16>
   d8af0:	4240      	negs	r0, r0
   d8af2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8af6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8afa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8afe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b02:	f43f aed8 	beq.w	d88b6 <__adddf3+0xe6>
   d8b06:	f04f 0203 	mov.w	r2, #3
   d8b0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b0e:	bf18      	it	ne
   d8b10:	3203      	addne	r2, #3
   d8b12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b16:	bf18      	it	ne
   d8b18:	3203      	addne	r2, #3
   d8b1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b1e:	f1c2 0320 	rsb	r3, r2, #32
   d8b22:	fa00 fc03 	lsl.w	ip, r0, r3
   d8b26:	fa20 f002 	lsr.w	r0, r0, r2
   d8b2a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8b2e:	ea40 000e 	orr.w	r0, r0, lr
   d8b32:	fa21 f102 	lsr.w	r1, r1, r2
   d8b36:	4414      	add	r4, r2
   d8b38:	e6bd      	b.n	d88b6 <__adddf3+0xe6>
   d8b3a:	bf00      	nop

000d8b3c <__aeabi_dmul>:
   d8b3c:	b570      	push	{r4, r5, r6, lr}
   d8b3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8b42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8b46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8b4a:	bf1d      	ittte	ne
   d8b4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8b50:	ea94 0f0c 	teqne	r4, ip
   d8b54:	ea95 0f0c 	teqne	r5, ip
   d8b58:	f000 f8de 	bleq	d8d18 <__aeabi_dmul+0x1dc>
   d8b5c:	442c      	add	r4, r5
   d8b5e:	ea81 0603 	eor.w	r6, r1, r3
   d8b62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8b66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8b6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8b6e:	bf18      	it	ne
   d8b70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8b7c:	d038      	beq.n	d8bf0 <__aeabi_dmul+0xb4>
   d8b7e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8b82:	f04f 0500 	mov.w	r5, #0
   d8b86:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8b8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8b8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8b92:	f04f 0600 	mov.w	r6, #0
   d8b96:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8b9a:	f09c 0f00 	teq	ip, #0
   d8b9e:	bf18      	it	ne
   d8ba0:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ba4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ba8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8bac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8bb0:	d204      	bcs.n	d8bbc <__aeabi_dmul+0x80>
   d8bb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8bb6:	416d      	adcs	r5, r5
   d8bb8:	eb46 0606 	adc.w	r6, r6, r6
   d8bbc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8bc0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8bc4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8bc8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8bcc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8bd0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8bd4:	bf88      	it	hi
   d8bd6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8bda:	d81e      	bhi.n	d8c1a <__aeabi_dmul+0xde>
   d8bdc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8be0:	bf08      	it	eq
   d8be2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8be6:	f150 0000 	adcs.w	r0, r0, #0
   d8bea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8bee:	bd70      	pop	{r4, r5, r6, pc}
   d8bf0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8bf4:	ea46 0101 	orr.w	r1, r6, r1
   d8bf8:	ea40 0002 	orr.w	r0, r0, r2
   d8bfc:	ea81 0103 	eor.w	r1, r1, r3
   d8c00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c04:	bfc2      	ittt	gt
   d8c06:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c0e:	bd70      	popgt	{r4, r5, r6, pc}
   d8c10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c14:	f04f 0e00 	mov.w	lr, #0
   d8c18:	3c01      	subs	r4, #1
   d8c1a:	f300 80ab 	bgt.w	d8d74 <__aeabi_dmul+0x238>
   d8c1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c22:	bfde      	ittt	le
   d8c24:	2000      	movle	r0, #0
   d8c26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8c2a:	bd70      	pople	{r4, r5, r6, pc}
   d8c2c:	f1c4 0400 	rsb	r4, r4, #0
   d8c30:	3c20      	subs	r4, #32
   d8c32:	da35      	bge.n	d8ca0 <__aeabi_dmul+0x164>
   d8c34:	340c      	adds	r4, #12
   d8c36:	dc1b      	bgt.n	d8c70 <__aeabi_dmul+0x134>
   d8c38:	f104 0414 	add.w	r4, r4, #20
   d8c3c:	f1c4 0520 	rsb	r5, r4, #32
   d8c40:	fa00 f305 	lsl.w	r3, r0, r5
   d8c44:	fa20 f004 	lsr.w	r0, r0, r4
   d8c48:	fa01 f205 	lsl.w	r2, r1, r5
   d8c4c:	ea40 0002 	orr.w	r0, r0, r2
   d8c50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8c54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c5c:	fa21 f604 	lsr.w	r6, r1, r4
   d8c60:	eb42 0106 	adc.w	r1, r2, r6
   d8c64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c68:	bf08      	it	eq
   d8c6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c6e:	bd70      	pop	{r4, r5, r6, pc}
   d8c70:	f1c4 040c 	rsb	r4, r4, #12
   d8c74:	f1c4 0520 	rsb	r5, r4, #32
   d8c78:	fa00 f304 	lsl.w	r3, r0, r4
   d8c7c:	fa20 f005 	lsr.w	r0, r0, r5
   d8c80:	fa01 f204 	lsl.w	r2, r1, r4
   d8c84:	ea40 0002 	orr.w	r0, r0, r2
   d8c88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c90:	f141 0100 	adc.w	r1, r1, #0
   d8c94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c98:	bf08      	it	eq
   d8c9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c9e:	bd70      	pop	{r4, r5, r6, pc}
   d8ca0:	f1c4 0520 	rsb	r5, r4, #32
   d8ca4:	fa00 f205 	lsl.w	r2, r0, r5
   d8ca8:	ea4e 0e02 	orr.w	lr, lr, r2
   d8cac:	fa20 f304 	lsr.w	r3, r0, r4
   d8cb0:	fa01 f205 	lsl.w	r2, r1, r5
   d8cb4:	ea43 0302 	orr.w	r3, r3, r2
   d8cb8:	fa21 f004 	lsr.w	r0, r1, r4
   d8cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cc0:	fa21 f204 	lsr.w	r2, r1, r4
   d8cc4:	ea20 0002 	bic.w	r0, r0, r2
   d8cc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8ccc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8cd0:	bf08      	it	eq
   d8cd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cd6:	bd70      	pop	{r4, r5, r6, pc}
   d8cd8:	f094 0f00 	teq	r4, #0
   d8cdc:	d10f      	bne.n	d8cfe <__aeabi_dmul+0x1c2>
   d8cde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8ce2:	0040      	lsls	r0, r0, #1
   d8ce4:	eb41 0101 	adc.w	r1, r1, r1
   d8ce8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8cec:	bf08      	it	eq
   d8cee:	3c01      	subeq	r4, #1
   d8cf0:	d0f7      	beq.n	d8ce2 <__aeabi_dmul+0x1a6>
   d8cf2:	ea41 0106 	orr.w	r1, r1, r6
   d8cf6:	f095 0f00 	teq	r5, #0
   d8cfa:	bf18      	it	ne
   d8cfc:	4770      	bxne	lr
   d8cfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d02:	0052      	lsls	r2, r2, #1
   d8d04:	eb43 0303 	adc.w	r3, r3, r3
   d8d08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d0c:	bf08      	it	eq
   d8d0e:	3d01      	subeq	r5, #1
   d8d10:	d0f7      	beq.n	d8d02 <__aeabi_dmul+0x1c6>
   d8d12:	ea43 0306 	orr.w	r3, r3, r6
   d8d16:	4770      	bx	lr
   d8d18:	ea94 0f0c 	teq	r4, ip
   d8d1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d20:	bf18      	it	ne
   d8d22:	ea95 0f0c 	teqne	r5, ip
   d8d26:	d00c      	beq.n	d8d42 <__aeabi_dmul+0x206>
   d8d28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d2c:	bf18      	it	ne
   d8d2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d32:	d1d1      	bne.n	d8cd8 <__aeabi_dmul+0x19c>
   d8d34:	ea81 0103 	eor.w	r1, r1, r3
   d8d38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d3c:	f04f 0000 	mov.w	r0, #0
   d8d40:	bd70      	pop	{r4, r5, r6, pc}
   d8d42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8d46:	bf06      	itte	eq
   d8d48:	4610      	moveq	r0, r2
   d8d4a:	4619      	moveq	r1, r3
   d8d4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8d50:	d019      	beq.n	d8d86 <__aeabi_dmul+0x24a>
   d8d52:	ea94 0f0c 	teq	r4, ip
   d8d56:	d102      	bne.n	d8d5e <__aeabi_dmul+0x222>
   d8d58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8d5c:	d113      	bne.n	d8d86 <__aeabi_dmul+0x24a>
   d8d5e:	ea95 0f0c 	teq	r5, ip
   d8d62:	d105      	bne.n	d8d70 <__aeabi_dmul+0x234>
   d8d64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8d68:	bf1c      	itt	ne
   d8d6a:	4610      	movne	r0, r2
   d8d6c:	4619      	movne	r1, r3
   d8d6e:	d10a      	bne.n	d8d86 <__aeabi_dmul+0x24a>
   d8d70:	ea81 0103 	eor.w	r1, r1, r3
   d8d74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d80:	f04f 0000 	mov.w	r0, #0
   d8d84:	bd70      	pop	{r4, r5, r6, pc}
   d8d86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8d8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8d8e:	bd70      	pop	{r4, r5, r6, pc}

000d8d90 <__aeabi_ddiv>:
   d8d90:	b570      	push	{r4, r5, r6, lr}
   d8d92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d9e:	bf1d      	ittte	ne
   d8da0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8da4:	ea94 0f0c 	teqne	r4, ip
   d8da8:	ea95 0f0c 	teqne	r5, ip
   d8dac:	f000 f8a7 	bleq	d8efe <__aeabi_ddiv+0x16e>
   d8db0:	eba4 0405 	sub.w	r4, r4, r5
   d8db4:	ea81 0e03 	eor.w	lr, r1, r3
   d8db8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8dbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8dc0:	f000 8088 	beq.w	d8ed4 <__aeabi_ddiv+0x144>
   d8dc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8dc8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8dcc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8dd0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8dd4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8dd8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8ddc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8de0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8de4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8de8:	429d      	cmp	r5, r3
   d8dea:	bf08      	it	eq
   d8dec:	4296      	cmpeq	r6, r2
   d8dee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8df2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8df6:	d202      	bcs.n	d8dfe <__aeabi_ddiv+0x6e>
   d8df8:	085b      	lsrs	r3, r3, #1
   d8dfa:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dfe:	1ab6      	subs	r6, r6, r2
   d8e00:	eb65 0503 	sbc.w	r5, r5, r3
   d8e04:	085b      	lsrs	r3, r3, #1
   d8e06:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e12:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e16:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e1a:	bf22      	ittt	cs
   d8e1c:	1ab6      	subcs	r6, r6, r2
   d8e1e:	4675      	movcs	r5, lr
   d8e20:	ea40 000c 	orrcs.w	r0, r0, ip
   d8e24:	085b      	lsrs	r3, r3, #1
   d8e26:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e2a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e32:	bf22      	ittt	cs
   d8e34:	1ab6      	subcs	r6, r6, r2
   d8e36:	4675      	movcs	r5, lr
   d8e38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8e3c:	085b      	lsrs	r3, r3, #1
   d8e3e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e42:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e46:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e4a:	bf22      	ittt	cs
   d8e4c:	1ab6      	subcs	r6, r6, r2
   d8e4e:	4675      	movcs	r5, lr
   d8e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8e54:	085b      	lsrs	r3, r3, #1
   d8e56:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e5a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e62:	bf22      	ittt	cs
   d8e64:	1ab6      	subcs	r6, r6, r2
   d8e66:	4675      	movcs	r5, lr
   d8e68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8e6c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8e70:	d018      	beq.n	d8ea4 <__aeabi_ddiv+0x114>
   d8e72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8e76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8e7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8e7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8e82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8e86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8e8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8e8e:	d1c0      	bne.n	d8e12 <__aeabi_ddiv+0x82>
   d8e90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e94:	d10b      	bne.n	d8eae <__aeabi_ddiv+0x11e>
   d8e96:	ea41 0100 	orr.w	r1, r1, r0
   d8e9a:	f04f 0000 	mov.w	r0, #0
   d8e9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8ea2:	e7b6      	b.n	d8e12 <__aeabi_ddiv+0x82>
   d8ea4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ea8:	bf04      	itt	eq
   d8eaa:	4301      	orreq	r1, r0
   d8eac:	2000      	moveq	r0, #0
   d8eae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8eb2:	bf88      	it	hi
   d8eb4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8eb8:	f63f aeaf 	bhi.w	d8c1a <__aeabi_dmul+0xde>
   d8ebc:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ec0:	bf04      	itt	eq
   d8ec2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8ec6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8eca:	f150 0000 	adcs.w	r0, r0, #0
   d8ece:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8ed2:	bd70      	pop	{r4, r5, r6, pc}
   d8ed4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8ed8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8edc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8ee0:	bfc2      	ittt	gt
   d8ee2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8ee6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8eea:	bd70      	popgt	{r4, r5, r6, pc}
   d8eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ef0:	f04f 0e00 	mov.w	lr, #0
   d8ef4:	3c01      	subs	r4, #1
   d8ef6:	e690      	b.n	d8c1a <__aeabi_dmul+0xde>
   d8ef8:	ea45 0e06 	orr.w	lr, r5, r6
   d8efc:	e68d      	b.n	d8c1a <__aeabi_dmul+0xde>
   d8efe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f02:	ea94 0f0c 	teq	r4, ip
   d8f06:	bf08      	it	eq
   d8f08:	ea95 0f0c 	teqeq	r5, ip
   d8f0c:	f43f af3b 	beq.w	d8d86 <__aeabi_dmul+0x24a>
   d8f10:	ea94 0f0c 	teq	r4, ip
   d8f14:	d10a      	bne.n	d8f2c <__aeabi_ddiv+0x19c>
   d8f16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f1a:	f47f af34 	bne.w	d8d86 <__aeabi_dmul+0x24a>
   d8f1e:	ea95 0f0c 	teq	r5, ip
   d8f22:	f47f af25 	bne.w	d8d70 <__aeabi_dmul+0x234>
   d8f26:	4610      	mov	r0, r2
   d8f28:	4619      	mov	r1, r3
   d8f2a:	e72c      	b.n	d8d86 <__aeabi_dmul+0x24a>
   d8f2c:	ea95 0f0c 	teq	r5, ip
   d8f30:	d106      	bne.n	d8f40 <__aeabi_ddiv+0x1b0>
   d8f32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f36:	f43f aefd 	beq.w	d8d34 <__aeabi_dmul+0x1f8>
   d8f3a:	4610      	mov	r0, r2
   d8f3c:	4619      	mov	r1, r3
   d8f3e:	e722      	b.n	d8d86 <__aeabi_dmul+0x24a>
   d8f40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f44:	bf18      	it	ne
   d8f46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f4a:	f47f aec5 	bne.w	d8cd8 <__aeabi_dmul+0x19c>
   d8f4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8f52:	f47f af0d 	bne.w	d8d70 <__aeabi_dmul+0x234>
   d8f56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8f5a:	f47f aeeb 	bne.w	d8d34 <__aeabi_dmul+0x1f8>
   d8f5e:	e712      	b.n	d8d86 <__aeabi_dmul+0x24a>

000d8f60 <__gedf2>:
   d8f60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8f64:	e006      	b.n	d8f74 <__cmpdf2+0x4>
   d8f66:	bf00      	nop

000d8f68 <__ledf2>:
   d8f68:	f04f 0c01 	mov.w	ip, #1
   d8f6c:	e002      	b.n	d8f74 <__cmpdf2+0x4>
   d8f6e:	bf00      	nop

000d8f70 <__cmpdf2>:
   d8f70:	f04f 0c01 	mov.w	ip, #1
   d8f74:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8f78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f84:	bf18      	it	ne
   d8f86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8f8a:	d01b      	beq.n	d8fc4 <__cmpdf2+0x54>
   d8f8c:	b001      	add	sp, #4
   d8f8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8f92:	bf0c      	ite	eq
   d8f94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8f98:	ea91 0f03 	teqne	r1, r3
   d8f9c:	bf02      	ittt	eq
   d8f9e:	ea90 0f02 	teqeq	r0, r2
   d8fa2:	2000      	moveq	r0, #0
   d8fa4:	4770      	bxeq	lr
   d8fa6:	f110 0f00 	cmn.w	r0, #0
   d8faa:	ea91 0f03 	teq	r1, r3
   d8fae:	bf58      	it	pl
   d8fb0:	4299      	cmppl	r1, r3
   d8fb2:	bf08      	it	eq
   d8fb4:	4290      	cmpeq	r0, r2
   d8fb6:	bf2c      	ite	cs
   d8fb8:	17d8      	asrcs	r0, r3, #31
   d8fba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8fbe:	f040 0001 	orr.w	r0, r0, #1
   d8fc2:	4770      	bx	lr
   d8fc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8fc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fcc:	d102      	bne.n	d8fd4 <__cmpdf2+0x64>
   d8fce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8fd2:	d107      	bne.n	d8fe4 <__cmpdf2+0x74>
   d8fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fdc:	d1d6      	bne.n	d8f8c <__cmpdf2+0x1c>
   d8fde:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8fe2:	d0d3      	beq.n	d8f8c <__cmpdf2+0x1c>
   d8fe4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8fe8:	4770      	bx	lr
   d8fea:	bf00      	nop

000d8fec <__aeabi_cdrcmple>:
   d8fec:	4684      	mov	ip, r0
   d8fee:	4610      	mov	r0, r2
   d8ff0:	4662      	mov	r2, ip
   d8ff2:	468c      	mov	ip, r1
   d8ff4:	4619      	mov	r1, r3
   d8ff6:	4663      	mov	r3, ip
   d8ff8:	e000      	b.n	d8ffc <__aeabi_cdcmpeq>
   d8ffa:	bf00      	nop

000d8ffc <__aeabi_cdcmpeq>:
   d8ffc:	b501      	push	{r0, lr}
   d8ffe:	f7ff ffb7 	bl	d8f70 <__cmpdf2>
   d9002:	2800      	cmp	r0, #0
   d9004:	bf48      	it	mi
   d9006:	f110 0f00 	cmnmi.w	r0, #0
   d900a:	bd01      	pop	{r0, pc}

000d900c <__aeabi_dcmpeq>:
   d900c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9010:	f7ff fff4 	bl	d8ffc <__aeabi_cdcmpeq>
   d9014:	bf0c      	ite	eq
   d9016:	2001      	moveq	r0, #1
   d9018:	2000      	movne	r0, #0
   d901a:	f85d fb08 	ldr.w	pc, [sp], #8
   d901e:	bf00      	nop

000d9020 <__aeabi_dcmplt>:
   d9020:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9024:	f7ff ffea 	bl	d8ffc <__aeabi_cdcmpeq>
   d9028:	bf34      	ite	cc
   d902a:	2001      	movcc	r0, #1
   d902c:	2000      	movcs	r0, #0
   d902e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9032:	bf00      	nop

000d9034 <__aeabi_dcmple>:
   d9034:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9038:	f7ff ffe0 	bl	d8ffc <__aeabi_cdcmpeq>
   d903c:	bf94      	ite	ls
   d903e:	2001      	movls	r0, #1
   d9040:	2000      	movhi	r0, #0
   d9042:	f85d fb08 	ldr.w	pc, [sp], #8
   d9046:	bf00      	nop

000d9048 <__aeabi_dcmpge>:
   d9048:	f84d ed08 	str.w	lr, [sp, #-8]!
   d904c:	f7ff ffce 	bl	d8fec <__aeabi_cdrcmple>
   d9050:	bf94      	ite	ls
   d9052:	2001      	movls	r0, #1
   d9054:	2000      	movhi	r0, #0
   d9056:	f85d fb08 	ldr.w	pc, [sp], #8
   d905a:	bf00      	nop

000d905c <__aeabi_dcmpgt>:
   d905c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9060:	f7ff ffc4 	bl	d8fec <__aeabi_cdrcmple>
   d9064:	bf34      	ite	cc
   d9066:	2001      	movcc	r0, #1
   d9068:	2000      	movcs	r0, #0
   d906a:	f85d fb08 	ldr.w	pc, [sp], #8
   d906e:	bf00      	nop

000d9070 <__aeabi_dcmpun>:
   d9070:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9074:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9078:	d102      	bne.n	d9080 <__aeabi_dcmpun+0x10>
   d907a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d907e:	d10a      	bne.n	d9096 <__aeabi_dcmpun+0x26>
   d9080:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9088:	d102      	bne.n	d9090 <__aeabi_dcmpun+0x20>
   d908a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d908e:	d102      	bne.n	d9096 <__aeabi_dcmpun+0x26>
   d9090:	f04f 0000 	mov.w	r0, #0
   d9094:	4770      	bx	lr
   d9096:	f04f 0001 	mov.w	r0, #1
   d909a:	4770      	bx	lr

000d909c <__aeabi_d2f>:
   d909c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d90a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d90a4:	bf24      	itt	cs
   d90a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d90aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d90ae:	d90d      	bls.n	d90cc <__aeabi_d2f+0x30>
   d90b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d90b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d90b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d90bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d90c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d90c4:	bf08      	it	eq
   d90c6:	f020 0001 	biceq.w	r0, r0, #1
   d90ca:	4770      	bx	lr
   d90cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d90d0:	d121      	bne.n	d9116 <__aeabi_d2f+0x7a>
   d90d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d90d6:	bfbc      	itt	lt
   d90d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d90dc:	4770      	bxlt	lr
   d90de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d90e6:	f1c2 0218 	rsb	r2, r2, #24
   d90ea:	f1c2 0c20 	rsb	ip, r2, #32
   d90ee:	fa10 f30c 	lsls.w	r3, r0, ip
   d90f2:	fa20 f002 	lsr.w	r0, r0, r2
   d90f6:	bf18      	it	ne
   d90f8:	f040 0001 	orrne.w	r0, r0, #1
   d90fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9100:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9104:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9108:	ea40 000c 	orr.w	r0, r0, ip
   d910c:	fa23 f302 	lsr.w	r3, r3, r2
   d9110:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9114:	e7cc      	b.n	d90b0 <__aeabi_d2f+0x14>
   d9116:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d911a:	d107      	bne.n	d912c <__aeabi_d2f+0x90>
   d911c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9120:	bf1e      	ittt	ne
   d9122:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9126:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d912a:	4770      	bxne	lr
   d912c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9130:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9134:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9138:	4770      	bx	lr
   d913a:	bf00      	nop

000d913c <__cxa_atexit>:
   d913c:	b510      	push	{r4, lr}
   d913e:	4c05      	ldr	r4, [pc, #20]	; (d9154 <__cxa_atexit+0x18>)
   d9140:	4613      	mov	r3, r2
   d9142:	b12c      	cbz	r4, d9150 <__cxa_atexit+0x14>
   d9144:	460a      	mov	r2, r1
   d9146:	4601      	mov	r1, r0
   d9148:	2002      	movs	r0, #2
   d914a:	f3af 8000 	nop.w
   d914e:	bd10      	pop	{r4, pc}
   d9150:	4620      	mov	r0, r4
   d9152:	e7fc      	b.n	d914e <__cxa_atexit+0x12>
   d9154:	00000000 	.word	0x00000000

000d9158 <memcpy>:
   d9158:	440a      	add	r2, r1
   d915a:	4291      	cmp	r1, r2
   d915c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9160:	d100      	bne.n	d9164 <memcpy+0xc>
   d9162:	4770      	bx	lr
   d9164:	b510      	push	{r4, lr}
   d9166:	f811 4b01 	ldrb.w	r4, [r1], #1
   d916a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d916e:	4291      	cmp	r1, r2
   d9170:	d1f9      	bne.n	d9166 <memcpy+0xe>
   d9172:	bd10      	pop	{r4, pc}

000d9174 <memset>:
   d9174:	4402      	add	r2, r0
   d9176:	4603      	mov	r3, r0
   d9178:	4293      	cmp	r3, r2
   d917a:	d100      	bne.n	d917e <memset+0xa>
   d917c:	4770      	bx	lr
   d917e:	f803 1b01 	strb.w	r1, [r3], #1
   d9182:	e7f9      	b.n	d9178 <memset+0x4>

000d9184 <srand>:
   d9184:	b538      	push	{r3, r4, r5, lr}
   d9186:	4b0d      	ldr	r3, [pc, #52]	; (d91bc <srand+0x38>)
   d9188:	681d      	ldr	r5, [r3, #0]
   d918a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d918c:	4604      	mov	r4, r0
   d918e:	b97b      	cbnz	r3, d91b0 <srand+0x2c>
   d9190:	2018      	movs	r0, #24
   d9192:	f7fc fdff 	bl	d5d94 <malloc>
   d9196:	4a0a      	ldr	r2, [pc, #40]	; (d91c0 <srand+0x3c>)
   d9198:	4b0a      	ldr	r3, [pc, #40]	; (d91c4 <srand+0x40>)
   d919a:	63a8      	str	r0, [r5, #56]	; 0x38
   d919c:	e9c0 2300 	strd	r2, r3, [r0]
   d91a0:	4b09      	ldr	r3, [pc, #36]	; (d91c8 <srand+0x44>)
   d91a2:	6083      	str	r3, [r0, #8]
   d91a4:	230b      	movs	r3, #11
   d91a6:	8183      	strh	r3, [r0, #12]
   d91a8:	2201      	movs	r2, #1
   d91aa:	2300      	movs	r3, #0
   d91ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d91b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d91b2:	2200      	movs	r2, #0
   d91b4:	611c      	str	r4, [r3, #16]
   d91b6:	615a      	str	r2, [r3, #20]
   d91b8:	bd38      	pop	{r3, r4, r5, pc}
   d91ba:	bf00      	nop
   d91bc:	2003e3dc 	.word	0x2003e3dc
   d91c0:	abcd330e 	.word	0xabcd330e
   d91c4:	e66d1234 	.word	0xe66d1234
   d91c8:	0005deec 	.word	0x0005deec

000d91cc <rand>:
   d91cc:	4b13      	ldr	r3, [pc, #76]	; (d921c <rand+0x50>)
   d91ce:	b510      	push	{r4, lr}
   d91d0:	681c      	ldr	r4, [r3, #0]
   d91d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d91d4:	b97b      	cbnz	r3, d91f6 <rand+0x2a>
   d91d6:	2018      	movs	r0, #24
   d91d8:	f7fc fddc 	bl	d5d94 <malloc>
   d91dc:	4a10      	ldr	r2, [pc, #64]	; (d9220 <rand+0x54>)
   d91de:	4b11      	ldr	r3, [pc, #68]	; (d9224 <rand+0x58>)
   d91e0:	63a0      	str	r0, [r4, #56]	; 0x38
   d91e2:	e9c0 2300 	strd	r2, r3, [r0]
   d91e6:	4b10      	ldr	r3, [pc, #64]	; (d9228 <rand+0x5c>)
   d91e8:	6083      	str	r3, [r0, #8]
   d91ea:	230b      	movs	r3, #11
   d91ec:	8183      	strh	r3, [r0, #12]
   d91ee:	2201      	movs	r2, #1
   d91f0:	2300      	movs	r3, #0
   d91f2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d91f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d91f8:	480c      	ldr	r0, [pc, #48]	; (d922c <rand+0x60>)
   d91fa:	690a      	ldr	r2, [r1, #16]
   d91fc:	694b      	ldr	r3, [r1, #20]
   d91fe:	4c0c      	ldr	r4, [pc, #48]	; (d9230 <rand+0x64>)
   d9200:	4350      	muls	r0, r2
   d9202:	fb04 0003 	mla	r0, r4, r3, r0
   d9206:	fba2 3404 	umull	r3, r4, r2, r4
   d920a:	1c5a      	adds	r2, r3, #1
   d920c:	4404      	add	r4, r0
   d920e:	f144 0000 	adc.w	r0, r4, #0
   d9212:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d9216:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d921a:	bd10      	pop	{r4, pc}
   d921c:	2003e3dc 	.word	0x2003e3dc
   d9220:	abcd330e 	.word	0xabcd330e
   d9224:	e66d1234 	.word	0xe66d1234
   d9228:	0005deec 	.word	0x0005deec
   d922c:	5851f42d 	.word	0x5851f42d
   d9230:	4c957f2d 	.word	0x4c957f2d

000d9234 <strcpy>:
   d9234:	4603      	mov	r3, r0
   d9236:	f811 2b01 	ldrb.w	r2, [r1], #1
   d923a:	f803 2b01 	strb.w	r2, [r3], #1
   d923e:	2a00      	cmp	r2, #0
   d9240:	d1f9      	bne.n	d9236 <strcpy+0x2>
   d9242:	4770      	bx	lr

000d9244 <strdup>:
   d9244:	4b02      	ldr	r3, [pc, #8]	; (d9250 <strdup+0xc>)
   d9246:	4601      	mov	r1, r0
   d9248:	6818      	ldr	r0, [r3, #0]
   d924a:	f000 b803 	b.w	d9254 <_strdup_r>
   d924e:	bf00      	nop
   d9250:	2003e3dc 	.word	0x2003e3dc

000d9254 <_strdup_r>:
   d9254:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9256:	4604      	mov	r4, r0
   d9258:	4608      	mov	r0, r1
   d925a:	460d      	mov	r5, r1
   d925c:	f000 f80f 	bl	d927e <strlen>
   d9260:	1c42      	adds	r2, r0, #1
   d9262:	4611      	mov	r1, r2
   d9264:	4620      	mov	r0, r4
   d9266:	9201      	str	r2, [sp, #4]
   d9268:	f7fc fdbc 	bl	d5de4 <_malloc_r>
   d926c:	4604      	mov	r4, r0
   d926e:	b118      	cbz	r0, d9278 <_strdup_r+0x24>
   d9270:	9a01      	ldr	r2, [sp, #4]
   d9272:	4629      	mov	r1, r5
   d9274:	f7ff ff70 	bl	d9158 <memcpy>
   d9278:	4620      	mov	r0, r4
   d927a:	b003      	add	sp, #12
   d927c:	bd30      	pop	{r4, r5, pc}

000d927e <strlen>:
   d927e:	4603      	mov	r3, r0
   d9280:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9284:	2a00      	cmp	r2, #0
   d9286:	d1fb      	bne.n	d9280 <strlen+0x2>
   d9288:	1a18      	subs	r0, r3, r0
   d928a:	3801      	subs	r0, #1
   d928c:	4770      	bx	lr

000d928e <link_code_end>:
	...

000d9290 <dynalib_user>:
   d9290:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d92a0:	0000 0000 7550 736c 2065 6f4c 7473 7b00     ....Pulse Lost.{
   d92b0:	2220 7641 5f67 4354 2231 203a 6425 202c      "Avg_TC1": %d, 
   d92c0:	4122 6776 545f 3150 3a22 2520 2c64 2220     "Avg_TP1": %d, "
   d92d0:	7641 5f67 4354 2232 203a 6425 202c 4122     Avg_TC2": %d, "A
   d92e0:	6776 545f 3250 3a22 2520 2c64 2220 7641     vg_TP2": %d, "Av
   d92f0:	5f67 5346 2252 203a 6425 2020 2020 2020     g_FSR": %d      
   d9300:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9310:	2020 2020 2020 2020 2020 2020 2c20 2220                  , "
   d9320:	7641 5f67 6341 5863 3a22 2520 2c64 2220     Avg_AccX": %d, "
   d9330:	7641 5f67 6341 5963 3a22 2520 2c64 2220     Avg_AccY": %d, "
   d9340:	7641 5f67 6341 5a63 3a22 2520 2c64 2220     Avg_AccZ": %d, "
   d9350:	7641 5f67 7947 5872 3a22 2520 2c64 2220     Avg_GyrX": %d, "
   d9360:	7641 5f67 7947 5972 3a22 2520 2064 2020     Avg_GyrY": %d   
   d9370:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9380:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9390:	202c 4122 6776 475f 7279 225a 203a 6425     , "Avg_GyrZ": %d
   d93a0:	202c 4122 6776 425f 6472 6554 706d 3a22     , "Avg_BrdTemp":
   d93b0:	2520 2c64 2220 614d 5f78 4354 2231 203a      %d, "Max_TC1": 
   d93c0:	6425 202c 4d22 7861 545f 3150 3a22 2520     %d, "Max_TP1": %
   d93d0:	2c64 2220 614d 5f78 4354 2232 203a 6425     d, "Max_TC2": %d
   d93e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d93f0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9400:	2020 2c20 2220 614d 5f78 5054 2232 203a        , "Max_TP2": 
   d9410:	6425 202c 4d22 7861 415f 6363 2258 203a     %d, "Max_AccX": 
   d9420:	6425 202c 4d22 7861 415f 6363 2259 203a     %d, "Max_AccY": 
   d9430:	6425 202c 4d22 7861 415f 6363 225a 203a     %d, "Max_AccZ": 
   d9440:	6425 202c 4d22 7861 475f 7279 2258 203a     %d, "Max_GyrX": 
   d9450:	6425 2020 2020 2020 2020 2020 2020 2020     %d              
   d9460:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9470:	2020 2020 2c20 2220 614d 5f78 7947 5972          , "Max_GyrY
   d9480:	3a22 2520 2c64 2220 614d 5f78 7947 5a72     ": %d, "Max_GyrZ
   d9490:	3a22 2520 2c64 2220 614d 5f78 7242 5464     ": %d, "Max_BrdT
   d94a0:	6d65 2270 203a 6425 202c 5022 6c75 6573     emp": %d, "Pulse
   d94b0:	3a22 2520 2c64 2220 5248 2256 203a 6425     ": %d, "HRV": %d
   d94c0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d94d0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d94e0:	2020 2c20 2220 6142 7474 7265 2279 203a        , "Battery": 
   d94f0:	6625 007d 4445 3141 4500 4144 0032 7553     %f}.EDA1.EDA2.Su
   d9500:	6d6d 7261 5279 7065 726f 0074 6e49 7469     mmaryReport.Init
   d9510:	6169 696c 617a 6974 6e6f 6f20 2066 6874     ialization of th
   d9520:	2065 6573 736e 726f 7220 7465 7275 656e     e sensor returne
   d9530:	3a64 0020 7254 6979 676e 6120 6167 6e69     d: .Trying again
   d9540:	2e2e 002e 6e55 6e6b 776f 206e 7453 7461     ....Unknown Stat
   d9550:	7375 4100 6c6c 6920 2073 6577 6c6c 002e     us.All is well..
   d9560:	6547 656e 6172 206c 7245 6f72 0072 6f4e     General Error.No
   d9570:	2074 6d49 6c70 6d65 6e65 6574 0064 6150     t Implemented.Pa
   d9580:	6172 656d 6574 2072 7245 6f72 0072 7257     rameter Error.Wr
   d9590:	6e6f 2067 4449 4900 766e 6c61 6469 5320     ong ID.Invalid S
   d95a0:	6e65 6f73 0072 6144 6174 5520 646e 7265     ensor.Data Under
   d95b0:	6c66 776f 5300 6e65 6f73 2072 6f4e 2074     flow.Sensor Not 
   d95c0:	7553 7070 726f 6574 0064 0000               Supported...

000d95cc <CSWTCH.31>:
   d95cc:	9553 000d 9560 000d 956e 000d 957e 000d     S...`...n...~...
   d95dc:	958e 000d 9597 000d 95a6 000d 95b5 000d     ................

000d95ec <_ZTV13ICM_20948_I2C>:
	...
   d95f4:	591d 000d                                   .Y..

000d95f8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9600:	5e89 000d 5e8f 000d 5edf 000d 5e9d 000d     .^...^...^...^..
   d9610:	5e8b 000d                                   .^..

000d9614 <_ZTVN5spark13EthernetClassE>:
	...
   d961c:	6457 000d 644d 000d 6443 000d 6439 000d     Wd..Md..Cd..9d..
   d962c:	642d 000d 6421 000d 6415 000d 640d 000d     -d..!d...d...d..
   d963c:	6403 000d 63f9 000d 66e9 000d               .d...c...f..

000d9648 <_ZTV7TwoWire>:
	...
   d9650:	6475 000d 64bf 000d 6497 000d 6477 000d     ud...d...d..wd..
   d9660:	649f 000d 64a7 000d 64af 000d 64b7 000d     .d...d...d...d..

000d9670 <_ZTV9IPAddress>:
	...
   d9678:	659d 000d 658d 000d 658f 000d 7061 0070     .e...e...e..app.

000d9688 <_ZTVN5spark12NetworkClassE>:
	...
   d9690:	6681 000d 668b 000d 6695 000d 669f 000d     .f...f...f...f..
   d96a0:	66a9 000d 66b5 000d 66c1 000d 66cd 000d     .f...f...f...f..
   d96b0:	66d5 000d 66df 000d 66e9 000d 5925 252d     .f...f...f..%Y-%
   d96c0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d96d0:	7361 7463 6d69 0065                         asctime.

000d96d8 <_ZTV11USARTSerial>:
	...
   d96e0:	6bb9 000d 6c25 000d 6bfd 000d 67d1 000d     .k..%l...k...g..
   d96f0:	6bcd 000d 6be9 000d 6bdb 000d 6bf7 000d     .k...k...k...k..
   d9700:	6bbb 000d 6bbf 000d                         .k...k..

000d9708 <_ZTV9USBSerial>:
	...
   d9710:	6cb9 000d 6d21 000d 6cf7 000d 67d1 000d     .l..!m...l...g..
   d9720:	6ce9 000d 6cbb 000d 6ccb 000d 6d1b 000d     .l...l...l...m..
   d9730:	6cdb 000d 6cb5 000d                         .l...l..

000d9738 <_ZTVN5spark9WiFiClassE>:
	...
   d9740:	6e2f 000d 6e25 000d 6e1b 000d 6dd1 000d     /n..%n...n...m..
   d9750:	6e0f 000d 6e03 000d 6df7 000d 6def 000d     .n...n...m...m..
   d9760:	6de5 000d 6ddb 000d 66e9 000d               .m...m...f..

000d976c <_ZSt7nothrow>:
   d976c:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9778 <TWO52>:
   d9778:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9788 <link_const_variable_data_end>:
   d9788:	000d500d 	.word	0x000d500d
   d978c:	000d55bd 	.word	0x000d55bd
   d9790:	000d5e61 	.word	0x000d5e61
   d9794:	000d6461 	.word	0x000d6461
   d9798:	000d6671 	.word	0x000d6671
   d979c:	000d67bd 	.word	0x000d67bd
   d97a0:	000d68cd 	.word	0x000d68cd
   d97a4:	000d6b69 	.word	0x000d6b69
   d97a8:	000d6ba5 	.word	0x000d6ba5
   d97ac:	000d6e39 	.word	0x000d6e39
