
/Users/ethan/Desktop/EDA_Phone_Case_Code_Repo/EDA_Phone_Case/target/2.0.0/argon/EDA_Phone_Case.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005650  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9670  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e3cc  000d9674  0001e3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003ac  2003e444  2003e444  0002e444  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d96ec  000d96ec  000296ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9714  000d9714  00029714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00180d65  00000000  00000000  00029718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019902  00000000  00000000  001aa47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002fcfd  00000000  00000000  001c3d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c68  00000000  00000000  001f3a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007bd0  00000000  00000000  001f66e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d6c4  00000000  00000000  001fe2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040d9c  00000000  00000000  0023b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011062e  00000000  00000000  0027c714  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007ce4  00000000  00000000  0038cd44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f821 	bl	d9078 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f829 	bl	d9094 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3cc 	.word	0x2003e3cc
   d404c:	000d9674 	.word	0x000d9674
   d4050:	2003e444 	.word	0x2003e444
   d4054:	2003e444 	.word	0x2003e444
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 ff33 	bl	d6ecc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9640 	.word	0x000d9640
   d4080:	000d9668 	.word	0x000d9668

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bfd6 	b.w	d5034 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fdeb 	bl	d4c64 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bedd 	b.w	d6e50 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 be01 	b.w	d5c9c <malloc>

000d409a <_Znaj>:
   d409a:	f001 bdff 	b.w	d5c9c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 be05 	b.w	d5cac <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <ICM_20948_execute_w>:
	pdev->_serif = s;
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40b2:	b410      	push	{r4}
   d40b4:	4604      	mov	r4, r0
   d40b6:	4608      	mov	r0, r1
   d40b8:	4611      	mov	r1, r2
   d40ba:	461a      	mov	r2, r3
	if (pdev->_serif->write == NULL)
   d40bc:	6823      	ldr	r3, [r4, #0]
   d40be:	681c      	ldr	r4, [r3, #0]
   d40c0:	b124      	cbz	r4, d40cc <ICM_20948_execute_w+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40c2:	46a4      	mov	ip, r4
   d40c4:	689b      	ldr	r3, [r3, #8]
}
   d40c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40ca:	4760      	bx	ip
}
   d40cc:	2002      	movs	r0, #2
   d40ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40d2:	4770      	bx	lr

000d40d4 <ICM_20948_execute_r>:

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40d4:	b410      	push	{r4}
   d40d6:	4604      	mov	r4, r0
   d40d8:	4608      	mov	r0, r1
   d40da:	4611      	mov	r1, r2
   d40dc:	461a      	mov	r2, r3
	if (pdev->_serif->read == NULL)
   d40de:	6823      	ldr	r3, [r4, #0]
   d40e0:	685c      	ldr	r4, [r3, #4]
   d40e2:	b124      	cbz	r4, d40ee <ICM_20948_execute_r+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40e4:	46a4      	mov	ip, r4
   d40e6:	689b      	ldr	r3, [r3, #8]
}
   d40e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40ec:	4760      	bx	ip
}
   d40ee:	2002      	movs	r0, #2
   d40f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40f4:	4770      	bx	lr

000d40f6 <ICM_20948_set_bank>:
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
}

ICM_20948_Status_e ICM_20948_set_bank(ICM_20948_Device_t *pdev, uint8_t bank)
{
	if (bank > 3)
   d40f6:	2903      	cmp	r1, #3
{
   d40f8:	b507      	push	{r0, r1, r2, lr}
	if (bank > 3)
   d40fa:	d80b      	bhi.n	d4114 <ICM_20948_set_bank+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
   d40fc:	0109      	lsls	r1, r1, #4
   d40fe:	f88d 1007 	strb.w	r1, [sp, #7]
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
   d4102:	2301      	movs	r3, #1
   d4104:	f10d 0207 	add.w	r2, sp, #7
   d4108:	217f      	movs	r1, #127	; 0x7f
   d410a:	f7ff ffd2 	bl	d40b2 <ICM_20948_execute_w>
}
   d410e:	b003      	add	sp, #12
   d4110:	f85d fb04 	ldr.w	pc, [sp], #4
		return ICM_20948_Stat_ParamErr;
   d4114:	2003      	movs	r0, #3
   d4116:	e7fa      	b.n	d410e <ICM_20948_set_bank+0x18>

000d4118 <ICM_20948_i2c_master_slv4_txn>:
{
   d4118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d411c:	b085      	sub	sp, #20
   d411e:	461d      	mov	r5, r3
   d4120:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   d4124:	f88d 2006 	strb.w	r2, [sp, #6]
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4128:	2e00      	cmp	r6, #0
   d412a:	bf14      	ite	ne
   d412c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   d4130:	2300      	moveq	r3, #0
   d4132:	4319      	orrs	r1, r3
{
   d4134:	4604      	mov	r4, r0
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4136:	f88d 1007 	strb.w	r1, [sp, #7]
	retval = ICM_20948_set_bank(pdev, 3);
   d413a:	2103      	movs	r1, #3
   d413c:	f7ff ffdb 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
   d4140:	2301      	movs	r3, #1
   d4142:	f10d 0207 	add.w	r2, sp, #7
   d4146:	2113      	movs	r1, #19
   d4148:	4620      	mov	r0, r4
   d414a:	f7ff ffb2 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d414e:	2800      	cmp	r0, #0
   d4150:	d168      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	retval = ICM_20948_set_bank(pdev, 3);
   d4152:	2103      	movs	r1, #3
   d4154:	4620      	mov	r0, r4
   d4156:	f7ff ffce 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
   d415a:	2301      	movs	r3, #1
   d415c:	f10d 0206 	add.w	r2, sp, #6
   d4160:	2114      	movs	r1, #20
   d4162:	4620      	mov	r0, r4
   d4164:	f7ff ffa5 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d4168:	2800      	cmp	r0, #0
   d416a:	d15b      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	ctrl.REG_DIS = !send_reg_addr;
   d416c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	while (nByte < len)
   d4170:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	ctrl.REG_DIS = !send_reg_addr;
   d4174:	f082 0201 	eor.w	r2, r2, #1
	ctrl.DLY = 0;
   d4178:	0152      	lsls	r2, r2, #5
   d417a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d417e:	f88d 2008 	strb.w	r2, [sp, #8]
	while (nByte < len)
   d4182:	4607      	mov	r7, r0
   d4184:	fa1f f989 	uxth.w	r9, r9
   d4188:	b2bb      	uxth	r3, r7
   d418a:	4599      	cmp	r9, r3
   d418c:	d94a      	bls.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		if (!Rw)
   d418e:	2e00      	cmp	r6, #0
   d4190:	d03c      	beq.n	d420c <ICM_20948_i2c_master_slv4_txn+0xf4>
		retval = ICM_20948_set_bank(pdev, 3);
   d4192:	2103      	movs	r1, #3
   d4194:	4620      	mov	r0, r4
   d4196:	f7ff ffae 	bl	d40f6 <ICM_20948_set_bank>
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
   d419a:	2301      	movs	r3, #1
   d419c:	aa02      	add	r2, sp, #8
   d419e:	2115      	movs	r1, #21
   d41a0:	4620      	mov	r0, r4
   d41a2:	f7ff ff86 	bl	d40b2 <ICM_20948_execute_w>
		if (retval != ICM_20948_Stat_Ok)
   d41a6:	2800      	cmp	r0, #0
   d41a8:	d13c      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		uint32_t count = 0;
   d41aa:	4680      	mov	r8, r0
			retval = ICM_20948_set_bank(pdev, 0);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4620      	mov	r0, r4
   d41b0:	f7ff ffa1 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
   d41b4:	2301      	movs	r3, #1
   d41b6:	aa03      	add	r2, sp, #12
   d41b8:	2117      	movs	r1, #23
   d41ba:	4620      	mov	r0, r4
   d41bc:	f7ff ff8a 	bl	d40d4 <ICM_20948_execute_r>
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
			slave4Done |= (count >= max_cycles);
   d41c4:	f240 31e7 	movw	r1, #999	; 0x3e7
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c8:	461a      	mov	r2, r3
   d41ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d41ce:	4588      	cmp	r8, r1
   d41d0:	bf88      	it	hi
   d41d2:	f043 0301 	orrhi.w	r3, r3, #1
		while (!slave4Done)
   d41d6:	07db      	lsls	r3, r3, #31
			count++;
   d41d8:	f108 0801 	add.w	r8, r8, #1
		while (!slave4Done)
   d41dc:	d5e6      	bpl.n	d41ac <ICM_20948_i2c_master_slv4_txn+0x94>
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
   d41de:	f3c2 1300 	ubfx	r3, r2, #4, #1
		if (txn_failed)
   d41e2:	4588      	cmp	r8, r1
   d41e4:	bf94      	ite	ls
   d41e6:	4698      	movls	r8, r3
   d41e8:	f043 0801 	orrhi.w	r8, r3, #1
   d41ec:	f018 0f01 	tst.w	r8, #1
   d41f0:	d11b      	bne.n	d422a <ICM_20948_i2c_master_slv4_txn+0x112>
		if (Rw)
   d41f2:	b14e      	cbz	r6, d4208 <ICM_20948_i2c_master_slv4_txn+0xf0>
			retval = ICM_20948_set_bank(pdev, 3);
   d41f4:	2103      	movs	r1, #3
   d41f6:	4620      	mov	r0, r4
   d41f8:	f7ff ff7d 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_SLV4_DI, &data[nByte], 1);
   d41fc:	2301      	movs	r3, #1
   d41fe:	19ea      	adds	r2, r5, r7
   d4200:	2117      	movs	r1, #23
   d4202:	4620      	mov	r0, r4
   d4204:	f7ff ff66 	bl	d40d4 <ICM_20948_execute_r>
		nByte++;
   d4208:	3701      	adds	r7, #1
   d420a:	e7bd      	b.n	d4188 <ICM_20948_i2c_master_slv4_txn+0x70>
			retval = ICM_20948_set_bank(pdev, 3);
   d420c:	2103      	movs	r1, #3
   d420e:	4620      	mov	r0, r4
   d4210:	f7ff ff71 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
   d4214:	2301      	movs	r3, #1
   d4216:	19ea      	adds	r2, r5, r7
   d4218:	2116      	movs	r1, #22
   d421a:	4620      	mov	r0, r4
   d421c:	f7ff ff49 	bl	d40b2 <ICM_20948_execute_w>
			if (retval != ICM_20948_Stat_Ok)
   d4220:	2800      	cmp	r0, #0
   d4222:	d0b6      	beq.n	d4192 <ICM_20948_i2c_master_slv4_txn+0x7a>
}
   d4224:	b005      	add	sp, #20
   d4226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ICM_20948_Stat_Err;
   d422a:	2001      	movs	r0, #1
   d422c:	e7fa      	b.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>

000d422e <ICM_20948_i2c_master_single_w>:
{
   d422e:	b530      	push	{r4, r5, lr}
   d4230:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
   d4232:	2401      	movs	r4, #1
   d4234:	2500      	movs	r5, #0
   d4236:	e9cd 5401 	strd	r5, r4, [sp, #4]
   d423a:	9400      	str	r4, [sp, #0]
   d423c:	f7ff ff6c 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4240:	b005      	add	sp, #20
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <ICM_20948_i2c_master_single_r>:
{
   d4244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
   d4246:	2401      	movs	r4, #1
   d4248:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d424c:	9400      	str	r4, [sp, #0]
   d424e:	f7ff ff63 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4252:	b004      	add	sp, #16
   d4254:	bd10      	pop	{r4, pc}

000d4256 <ICM_20948_sw_reset>:

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
   d4256:	b513      	push	{r0, r1, r4, lr}
   d4258:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d425a:	2100      	movs	r1, #0
   d425c:	f7ff ff4b 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4260:	2301      	movs	r3, #1
   d4262:	aa01      	add	r2, sp, #4
   d4264:	2106      	movs	r1, #6
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff34 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d426c:	b958      	cbnz	r0, d4286 <ICM_20948_sw_reset+0x30>
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
   d426e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4276:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d427a:	aa01      	add	r2, sp, #4
   d427c:	2301      	movs	r3, #1
   d427e:	2106      	movs	r1, #6
   d4280:	4620      	mov	r0, r4
   d4282:	f7ff ff16 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d4286:	b002      	add	sp, #8
   d4288:	bd10      	pop	{r4, pc}

000d428a <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
   d428a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d428c:	4604      	mov	r4, r0
   d428e:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4290:	2100      	movs	r1, #0
   d4292:	f7ff ff30 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4296:	2301      	movs	r3, #1
   d4298:	aa01      	add	r2, sp, #4
   d429a:	2106      	movs	r1, #6
   d429c:	4620      	mov	r0, r4
   d429e:	f7ff ff19 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42a2:	b958      	cbnz	r0, d42bc <ICM_20948_sleep+0x32>
	{
		return retval;
	}

	if (on)
   d42a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42a8:	f365 1386 	bfi	r3, r5, #6, #1
   d42ac:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.SLEEP = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42b0:	aa01      	add	r2, sp, #4
   d42b2:	2301      	movs	r3, #1
   d42b4:	2106      	movs	r1, #6
   d42b6:	4620      	mov	r0, r4
   d42b8:	f7ff fefb 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42bc:	b003      	add	sp, #12
   d42be:	bd30      	pop	{r4, r5, pc}

000d42c0 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
   d42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42c2:	4604      	mov	r4, r0
   d42c4:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42c6:	2100      	movs	r1, #0
   d42c8:	f7ff ff15 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42cc:	2301      	movs	r3, #1
   d42ce:	aa01      	add	r2, sp, #4
   d42d0:	2106      	movs	r1, #6
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fefe 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42d8:	b958      	cbnz	r0, d42f2 <ICM_20948_low_power+0x32>
	{
		return retval;
	}

	if (on)
   d42da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42de:	f365 1345 	bfi	r3, r5, #5, #1
   d42e2:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.LP_EN = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42e6:	aa01      	add	r2, sp, #4
   d42e8:	2301      	movs	r3, #1
   d42ea:	2106      	movs	r1, #6
   d42ec:	4620      	mov	r0, r4
   d42ee:	f7ff fee0 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}

000d42f6 <ICM_20948_get_who_am_i>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
   d42f6:	b570      	push	{r4, r5, r6, lr}
   d42f8:	4605      	mov	r5, r0
	if (whoami == NULL)
   d42fa:	460c      	mov	r4, r1
   d42fc:	b151      	cbz	r1, d4314 <ICM_20948_get_who_am_i+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42fe:	2100      	movs	r1, #0
   d4300:	f7ff fef9 	bl	d40f6 <ICM_20948_set_bank>
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d4304:	4622      	mov	r2, r4
   d4306:	4628      	mov	r0, r5
   d4308:	2301      	movs	r3, #1
}
   d430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d430e:	2100      	movs	r1, #0
   d4310:	f7ff bee0 	b.w	d40d4 <ICM_20948_execute_r>
}
   d4314:	2003      	movs	r0, #3
   d4316:	bd70      	pop	{r4, r5, r6, pc}

000d4318 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
   d4318:	b507      	push	{r0, r1, r2, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
   d431a:	2300      	movs	r3, #0
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d431c:	f10d 0107 	add.w	r1, sp, #7
	uint8_t whoami = 0x00;
   d4320:	f88d 3007 	strb.w	r3, [sp, #7]
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d4324:	f7ff ffe7 	bl	d42f6 <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
   d4328:	b920      	cbnz	r0, d4334 <ICM_20948_check_id+0x1c>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
   d432a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d432e:	2bea      	cmp	r3, #234	; 0xea
	{
		return ICM_20948_Stat_WrongID;
   d4330:	bf18      	it	ne
   d4332:	2004      	movne	r0, #4
	}
	return retval;
}
   d4334:	b003      	add	sp, #12
   d4336:	f85d fb04 	ldr.w	pc, [sp], #4

000d433a <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d433a:	f011 0f13 	tst.w	r1, #19
{
   d433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4340:	4606      	mov	r6, r0
   d4342:	460c      	mov	r4, r1
   d4344:	4615      	mov	r5, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d4346:	d02a      	beq.n	d439e <ICM_20948_set_sample_mode+0x64>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4348:	2100      	movs	r1, #0
   d434a:	f7ff fed4 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d434e:	bb20      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d4350:	2301      	movs	r3, #1
   d4352:	aa01      	add	r2, sp, #4
   d4354:	2105      	movs	r1, #5
   d4356:	4630      	mov	r0, r6
   d4358:	f7ff febc 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d435c:	b9e8      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d435e:	07e1      	lsls	r1, r4, #31
	{
		reg.ACCEL_CYCLE = mode;
   d4360:	bf42      	ittt	mi
   d4362:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4366:	f365 1345 	bfimi	r3, r5, #5, #1
   d436a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
   d436e:	07a2      	lsls	r2, r4, #30
	{
		reg.GYRO_CYCLE = mode;
   d4370:	bf42      	ittt	mi
   d4372:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4376:	f365 1304 	bfimi	r3, r5, #4, #1
   d437a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
   d437e:	06e3      	lsls	r3, r4, #27
	{
		reg.I2C_MST_CYCLE = mode;
   d4380:	bf42      	ittt	mi
   d4382:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4386:	f365 1386 	bfimi	r3, r5, #6, #1
   d438a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d438e:	aa01      	add	r2, sp, #4
   d4390:	2301      	movs	r3, #1
   d4392:	2105      	movs	r1, #5
   d4394:	4630      	mov	r0, r6
   d4396:	f7ff fe8c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d439a:	b002      	add	sp, #8
   d439c:	bd70      	pop	{r4, r5, r6, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d439e:	2007      	movs	r0, #7
   d43a0:	e7fb      	b.n	d439a <ICM_20948_set_sample_mode+0x60>

000d43a2 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43a2:	f011 0f03 	tst.w	r1, #3
{
   d43a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43aa:	4606      	mov	r6, r0
   d43ac:	4688      	mov	r8, r1
   d43ae:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43b0:	d041      	beq.n	d4436 <ICM_20948_set_full_scale+0x94>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d43b2:	f011 0401 	ands.w	r4, r1, #1
   d43b6:	d019      	beq.n	d43ec <ICM_20948_set_full_scale+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43b8:	2102      	movs	r1, #2
   d43ba:	f7ff fe9c 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43be:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43c0:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43c2:	aa01      	add	r2, sp, #4
   d43c4:	2114      	movs	r1, #20
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe84 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_FS_SEL = fss.a;
   d43cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d0:	4328      	orrs	r0, r5
		reg.ACCEL_FS_SEL = fss.a;
   d43d2:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d6:	b2c4      	uxtb	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
   d43d8:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43dc:	aa01      	add	r2, sp, #4
   d43de:	2301      	movs	r3, #1
   d43e0:	2114      	movs	r1, #20
   d43e2:	4630      	mov	r0, r6
   d43e4:	f7ff fe65 	bl	d40b2 <ICM_20948_execute_w>
   d43e8:	4304      	orrs	r4, r0
   d43ea:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d43ec:	f018 0f02 	tst.w	r8, #2
   d43f0:	d01d      	beq.n	d442e <ICM_20948_set_full_scale+0x8c>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43f2:	2102      	movs	r1, #2
   d43f4:	4630      	mov	r0, r6
   d43f6:	f7ff fe7e 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d43fa:	2301      	movs	r3, #1
   d43fc:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43fe:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4400:	aa01      	add	r2, sp, #4
   d4402:	4630      	mov	r0, r6
   d4404:	f7ff fe66 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_FS_SEL = fss.g;
   d4408:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d440c:	f3c7 0781 	ubfx	r7, r7, #2, #2
   d4410:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4414:	4328      	orrs	r0, r5
		reg.GYRO_FS_SEL = fss.g;
   d4416:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441a:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441c:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441e:	aa01      	add	r2, sp, #4
   d4420:	4619      	mov	r1, r3
   d4422:	4630      	mov	r0, r6
   d4424:	f7ff fe45 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4428:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d442a:	4304      	orrs	r4, r0
   d442c:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d442e:	4620      	mov	r0, r4
   d4430:	b002      	add	sp, #8
   d4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4436:	2407      	movs	r4, #7
   d4438:	e7f9      	b.n	d442e <ICM_20948_set_full_scale+0x8c>

000d443a <ICM_20948_set_dlpf_cfg>:

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
   d443a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d443c:	b085      	sub	sp, #20
   d443e:	4606      	mov	r6, r0
   d4440:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4444:	078a      	lsls	r2, r1, #30
{
   d4446:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4448:	d042      	beq.n	d44d0 <ICM_20948_set_dlpf_cfg+0x96>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d444a:	f011 0401 	ands.w	r4, r1, #1
   d444e:	d01c      	beq.n	d448a <ICM_20948_set_dlpf_cfg+0x50>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4450:	2102      	movs	r1, #2
   d4452:	f7ff fe50 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4456:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4458:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d445a:	aa03      	add	r2, sp, #12
   d445c:	2114      	movs	r1, #20
   d445e:	4630      	mov	r0, r6
   d4460:	f7ff fe38 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_DLPFCFG = cfg.a;
   d4464:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4468:	f89d 2004 	ldrb.w	r2, [sp, #4]
   d446c:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4470:	4305      	orrs	r5, r0
		reg.ACCEL_DLPFCFG = cfg.a;
   d4472:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4476:	aa03      	add	r2, sp, #12
   d4478:	2301      	movs	r3, #1
   d447a:	2114      	movs	r1, #20
   d447c:	4630      	mov	r0, r6
   d447e:	f7ff fe18 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4482:	b2ed      	uxtb	r5, r5
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4484:	ea45 0400 	orr.w	r4, r5, r0
   d4488:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d448a:	07bb      	lsls	r3, r7, #30
   d448c:	d51d      	bpl.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d448e:	2102      	movs	r1, #2
   d4490:	4630      	mov	r0, r6
   d4492:	f7ff fe30 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4496:	2301      	movs	r3, #1
   d4498:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d449a:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d449c:	aa03      	add	r2, sp, #12
   d449e:	4630      	mov	r0, r6
   d44a0:	f7ff fe18 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_DLPFCFG = cfg.g;
   d44a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d44a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d44ac:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b0:	4328      	orrs	r0, r5
		reg.GYRO_DLPFCFG = cfg.g;
   d44b2:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b6:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b8:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44ba:	aa03      	add	r2, sp, #12
   d44bc:	4619      	mov	r1, r3
   d44be:	4630      	mov	r0, r6
   d44c0:	f7ff fdf7 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c4:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c6:	4304      	orrs	r4, r0
   d44c8:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d44ca:	4620      	mov	r0, r4
   d44cc:	b005      	add	sp, #20
   d44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d44d0:	2407      	movs	r4, #7
   d44d2:	e7fa      	b.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>

000d44d4 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44d4:	f011 0f03 	tst.w	r1, #3
{
   d44d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44dc:	4606      	mov	r6, r0
   d44de:	4688      	mov	r8, r1
   d44e0:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44e2:	d03f      	beq.n	d4564 <ICM_20948_enable_dlpf+0x90>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d44e4:	f011 0401 	ands.w	r4, r1, #1
   d44e8:	d019      	beq.n	d451e <ICM_20948_enable_dlpf+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44ea:	2102      	movs	r1, #2
   d44ec:	f7ff fe03 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f0:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44f2:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f4:	aa01      	add	r2, sp, #4
   d44f6:	2114      	movs	r1, #20
   d44f8:	4630      	mov	r0, r6
   d44fa:	f7ff fdeb 	bl	d40d4 <ICM_20948_execute_r>
   d44fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4502:	4328      	orrs	r0, r5
   d4504:	f367 0300 	bfi	r3, r7, #0, #1
   d4508:	b2c4      	uxtb	r4, r0
		if (enable)
   d450a:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d450e:	aa01      	add	r2, sp, #4
   d4510:	2301      	movs	r3, #1
   d4512:	2114      	movs	r1, #20
   d4514:	4630      	mov	r0, r6
   d4516:	f7ff fdcc 	bl	d40b2 <ICM_20948_execute_w>
   d451a:	4304      	orrs	r4, r0
   d451c:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d451e:	f018 0f02 	tst.w	r8, #2
   d4522:	d01b      	beq.n	d455c <ICM_20948_enable_dlpf+0x88>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4524:	2102      	movs	r1, #2
   d4526:	4630      	mov	r0, r6
   d4528:	f7ff fde5 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d452c:	2301      	movs	r3, #1
   d452e:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4530:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4532:	aa01      	add	r2, sp, #4
   d4534:	4630      	mov	r0, r6
   d4536:	f7ff fdcd 	bl	d40d4 <ICM_20948_execute_r>
   d453a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d453e:	f367 0300 	bfi	r3, r7, #0, #1
   d4542:	4328      	orrs	r0, r5
   d4544:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4548:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454a:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454c:	aa01      	add	r2, sp, #4
   d454e:	4619      	mov	r1, r3
   d4550:	4630      	mov	r0, r6
   d4552:	f7ff fdae 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4556:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4558:	4304      	orrs	r4, r0
   d455a:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d455c:	4620      	mov	r0, r4
   d455e:	b002      	add	sp, #8
   d4560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4564:	2407      	movs	r4, #7
   d4566:	e7f9      	b.n	d455c <ICM_20948_enable_dlpf+0x88>

000d4568 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
   d4568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d456a:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d456c:	2100      	movs	r1, #0
{
   d456e:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d4570:	f7ff fdc1 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4574:	b990      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4576:	2301      	movs	r3, #1
   d4578:	aa01      	add	r2, sp, #4
   d457a:	210f      	movs	r1, #15
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff fda9 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4582:	b958      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
   d4584:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4588:	f365 0341 	bfi	r3, r5, #1, #1
   d458c:	f88d 3004 	strb.w	r3, [sp, #4]
	retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4590:	aa01      	add	r2, sp, #4
   d4592:	2301      	movs	r3, #1
   d4594:	210f      	movs	r1, #15
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff fd8b 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d459c:	b003      	add	sp, #12
   d459e:	bd30      	pop	{r4, r5, pc}

000d45a0 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
   d45a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45a2:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a4:	2100      	movs	r1, #0
{
   d45a6:	4604      	mov	r4, r0
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a8:	f7ff ffde 	bl	d4568 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
   d45ac:	bb90      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
   d45ae:	2103      	movs	r1, #3
   d45b0:	4620      	mov	r0, r4
   d45b2:	f7ff fda0 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45b6:	bb68      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45b8:	2301      	movs	r3, #1
   d45ba:	466a      	mov	r2, sp
   d45bc:	4619      	mov	r1, r3
   d45be:	4620      	mov	r0, r4
   d45c0:	f7ff fd88 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45c4:	bb30      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
   d45c6:	f89d 3000 	ldrb.w	r3, [sp]
   d45ca:	f023 031f 	bic.w	r3, r3, #31
   d45ce:	f043 0317 	orr.w	r3, r3, #23
   d45d2:	f88d 3000 	strb.w	r3, [sp]
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45d6:	2301      	movs	r3, #1
   d45d8:	466a      	mov	r2, sp
   d45da:	4619      	mov	r1, r3
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff fd68 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d45e2:	b9b8      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d45e4:	4601      	mov	r1, r0
   d45e6:	4620      	mov	r0, r4
   d45e8:	f7ff fd85 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45ec:	b990      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d45ee:	2301      	movs	r3, #1
   d45f0:	aa01      	add	r2, sp, #4
   d45f2:	2103      	movs	r1, #3
   d45f4:	4620      	mov	r0, r4
   d45f6:	f7ff fd6d 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45fa:	b958      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	if (enable)
   d45fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4600:	f365 1345 	bfi	r3, r5, #5, #1
   d4604:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	else
	{
		reg.I2C_MST_EN = 0;
	}
	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d4608:	aa01      	add	r2, sp, #4
   d460a:	2301      	movs	r3, #1
   d460c:	2103      	movs	r1, #3
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff fd4f 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d4614:	b003      	add	sp, #12
   d4616:	bd30      	pop	{r4, r5, pc}

000d4618 <ICM_20948_i2c_master_reset>:

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
   d4618:	b513      	push	{r0, r1, r4, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
   d461a:	2100      	movs	r1, #0
{
   d461c:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d461e:	f7ff fd6a 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4622:	b990      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d4624:	2301      	movs	r3, #1
   d4626:	aa01      	add	r2, sp, #4
   d4628:	2103      	movs	r1, #3
   d462a:	4620      	mov	r0, r4
   d462c:	f7ff fd52 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4630:	b958      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
   d4632:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4636:	f043 0302 	orr.w	r3, r3, #2
   d463a:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d463e:	aa01      	add	r2, sp, #4
   d4640:	2301      	movs	r3, #1
   d4642:	2103      	movs	r1, #3
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff fd34 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d464a:	b002      	add	sp, #8
   d464c:	bd10      	pop	{r4, pc}

000d464e <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
   d464e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4652:	2903      	cmp	r1, #3
   d4654:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   d4658:	4605      	mov	r5, r0
   d465a:	460c      	mov	r4, r1
   d465c:	4617      	mov	r7, r2
   d465e:	461e      	mov	r6, r3
   d4660:	d847      	bhi.n	d46f2 <ICM_20948_i2c_master_configure_slave+0xa4>
		break;
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
   d4662:	2103      	movs	r1, #3
   d4664:	f7ff fd47 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4668:	2800      	cmp	r0, #0
   d466a:	d13f      	bne.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
   d466c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4670:	f367 0306 	bfi	r3, r7, #0, #7
   d4674:	f88d 3004 	strb.w	r3, [sp, #4]
	if (Rw)
   d4678:	f1b8 0f00 	cmp.w	r8, #0
   d467c:	d004      	beq.n	d4688 <ICM_20948_i2c_master_configure_slave+0x3a>
	{
		address.RNW = 1;
   d467e:	b2db      	uxtb	r3, r3
   d4680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4684:	f88d 3004 	strb.w	r3, [sp, #4]
   d4688:	00a4      	lsls	r4, r4, #2
   d468a:	b2e4      	uxtb	r4, r4
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
   d468c:	1ce1      	adds	r1, r4, #3
   d468e:	2301      	movs	r3, #1
   d4690:	aa01      	add	r2, sp, #4
   d4692:	b2c9      	uxtb	r1, r1
   d4694:	4628      	mov	r0, r5
   d4696:	f7ff fd0c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d469a:	bb38      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d469c:	1d21      	adds	r1, r4, #4
   d469e:	2301      	movs	r3, #1
   d46a0:	aa02      	add	r2, sp, #8
   d46a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d46a6:	4628      	mov	r0, r5
	subaddress.REG = reg;
   d46a8:	f88d 6008 	strb.w	r6, [sp, #8]
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d46ac:	f7ff fd01 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d46b0:	b9e0      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
   d46b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d46b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d46ba:	f003 030f 	and.w	r3, r3, #15
   d46be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d46c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   d46c6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d46ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d46d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46d6:	1d61      	adds	r1, r4, #5
	ctrl.LENG = len;
   d46d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   d46dc:	f88d 300c 	strb.w	r3, [sp, #12]
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46e0:	aa03      	add	r2, sp, #12
   d46e2:	2301      	movs	r3, #1
   d46e4:	b2c9      	uxtb	r1, r1
   d46e6:	4628      	mov	r0, r5
   d46e8:	f7ff fce3 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d46ec:	b004      	add	sp, #16
   d46ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d46f2:	2003      	movs	r0, #3
   d46f4:	e7fa      	b.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>

000d46f6 <ICM_20948_get_agmt>:

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
   d46f6:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
   d46fa:	4680      	mov	r8, r0
   d46fc:	b08b      	sub	sp, #44	; 0x2c
	if (pagmt == NULL)
   d46fe:	460f      	mov	r7, r1
   d4700:	2900      	cmp	r1, #0
   d4702:	f000 808f 	beq.w	d4824 <ICM_20948_get_agmt+0x12e>
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
   d4706:	2100      	movs	r1, #0
   d4708:	f7ff fcf5 	bl	d40f6 <ICM_20948_set_bank>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d470c:	2317      	movs	r3, #23
	retval |= ICM_20948_set_bank(pdev, 0);
   d470e:	4606      	mov	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d4710:	aa04      	add	r2, sp, #16
   d4712:	212d      	movs	r1, #45	; 0x2d
   d4714:	4640      	mov	r0, r8
   d4716:	f7ff fcdd 	bl	d40d4 <ICM_20948_execute_r>

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
   d471a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   d471e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4726:	803b      	strh	r3, [r7, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
   d4728:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d472c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   d4730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4734:	807b      	strh	r3, [r7, #2]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
   d4736:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d473a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d473e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4742:	80bb      	strh	r3, [r7, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
   d4744:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d4748:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d474c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4750:	80fb      	strh	r3, [r7, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
   d4752:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d4756:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d475a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d475e:	813b      	strh	r3, [r7, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
   d4760:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4764:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d476c:	817b      	strh	r3, [r7, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
   d476e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4772:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d4776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d477a:	827b      	strh	r3, [r7, #18]

	pagmt->magStat1 = buff[14];
   d477c:	f89d 301e 	ldrb.w	r3, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4780:	f89d 2020 	ldrb.w	r2, [sp, #32]
	pagmt->magStat1 = buff[14];
   d4784:	757b      	strb	r3, [r7, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4786:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d478a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d478e:	81bb      	strh	r3, [r7, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
   d4790:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   d4794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d479c:	81fb      	strh	r3, [r7, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d479e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   d47a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d47a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47aa:	4330      	orrs	r0, r6
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d47ac:	823b      	strh	r3, [r7, #16]
	pagmt->magStat2 = buff[22];
   d47ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   d47b2:	75bb      	strb	r3, [r7, #22]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47b4:	b2c4      	uxtb	r4, r0

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
   d47b6:	2102      	movs	r1, #2
   d47b8:	4640      	mov	r0, r8
   d47ba:	f7ff fc9c 	bl	d40f6 <ICM_20948_set_bank>
   d47be:	4320      	orrs	r0, r4
   d47c0:	b2c6      	uxtb	r6, r0
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47c2:	2301      	movs	r3, #1
   d47c4:	aa01      	add	r2, sp, #4
   d47c6:	2114      	movs	r1, #20
   d47c8:	4640      	mov	r0, r8
   d47ca:	f7ff fc83 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d47d2:	7d3a      	ldrb	r2, [r7, #20]
   d47d4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d47d8:	f363 0201 	bfi	r2, r3, #0, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47dc:	4330      	orrs	r0, r6
   d47de:	b2c6      	uxtb	r6, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47e0:	753a      	strb	r2, [r7, #20]
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
   d47e2:	2102      	movs	r1, #2
   d47e4:	4640      	mov	r0, r8
   d47e6:	f7ff fc86 	bl	d40f6 <ICM_20948_set_bank>
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47ea:	2301      	movs	r3, #1
   d47ec:	4619      	mov	r1, r3
	retval |= ICM_20948_set_bank(pdev, 2);
   d47ee:	4306      	orrs	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47f0:	aa02      	add	r2, sp, #8
   d47f2:	4640      	mov	r0, r8
   d47f4:	f7ff fc6e 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d47f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d47fc:	7d3a      	ldrb	r2, [r7, #20]
   d47fe:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d4802:	f363 0283 	bfi	r2, r3, #2, #2
	retval |= ICM_20948_set_bank(pdev, 2);
   d4806:	b2f4      	uxtb	r4, r6
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4808:	4304      	orrs	r4, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d480a:	753a      	strb	r2, [r7, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d480c:	2301      	movs	r3, #1
   d480e:	aa03      	add	r2, sp, #12
   d4810:	2115      	movs	r1, #21
   d4812:	4640      	mov	r0, r8
   d4814:	f7ff fc5e 	bl	d40d4 <ICM_20948_execute_r>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4818:	b2e4      	uxtb	r4, r4
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d481a:	4320      	orrs	r0, r4
   d481c:	b2c0      	uxtb	r0, r0

	return retval;
}
   d481e:	b00b      	add	sp, #44	; 0x2c
   d4820:	e8bd 81d0 	ldmia.w	sp!, {r4, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d4824:	2003      	movs	r0, #3
   d4826:	e7fa      	b.n	d481e <ICM_20948_get_agmt+0x128>

000d4828 <_Z21PulseSensorAmped_dataii>:
  // Serial.println((millis() - loopTimer));
}


void PulseSensorAmped_data(int BPM, int IBI){  //This is clunky.  Could clean up later
  pulse = BPM;
   d4828:	4b01      	ldr	r3, [pc, #4]	; (d4830 <_Z21PulseSensorAmped_dataii+0x8>)
   d482a:	6018      	str	r0, [r3, #0]
}
   d482c:	4770      	bx	lr
   d482e:	bf00      	nop
   d4830:	2003e560 	.word	0x2003e560
   d4834:	00000000 	.word	0x00000000

000d4838 <_Z12calculateHRVi>:


void calculateHRV(int IBI){
   d4838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d483a:	ed2d 8b02 	vpush	{d8}
  float avg_ibi = 0;
  float ibi_stdev = 0;

  /*  Add the latest IBI to the buffer */
  ibi_buffer[ibiBufferCounter] = IBI;
   d483e:	4a2e      	ldr	r2, [pc, #184]	; (d48f8 <_Z12calculateHRVi+0xc0>)
   d4840:	492e      	ldr	r1, [pc, #184]	; (d48fc <_Z12calculateHRVi+0xc4>)
   d4842:	7813      	ldrb	r3, [r2, #0]
   d4844:	4d2d      	ldr	r5, [pc, #180]	; (d48fc <_Z12calculateHRVi+0xc4>)
   d4846:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  ibiBufferCounter++;
   d484a:	3301      	adds	r3, #1
   d484c:	b2db      	uxtb	r3, r3
  if (ibiBufferCounter >= IBI_BUFFER_SIZE){
   d484e:	2b04      	cmp	r3, #4
    ibiBufferCounter = 0;
   d4850:	bf88      	it	hi
   d4852:	2300      	movhi	r3, #0
  float avg_ibi = 0;
   d4854:	eddf 8a2a 	vldr	s17, [pc, #168]	; d4900 <_Z12calculateHRVi+0xc8>
    ibiBufferCounter = 0;
   d4858:	7013      	strb	r3, [r2, #0]
void calculateHRV(int IBI){
   d485a:	4629      	mov	r1, r5
  }

  /*  Compute the Standard Deviation  */
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d485c:	2200      	movs	r2, #0
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d485e:	2005      	movs	r0, #5
   d4860:	f851 3b04 	ldr.w	r3, [r1], #4
   d4864:	fbb3 f3f0 	udiv	r3, r3, r0
   d4868:	ee07 3a90 	vmov	s15, r3
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d486c:	3201      	adds	r2, #1
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d486e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4872:	2a05      	cmp	r2, #5
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4874:	ee78 8aa7 	vadd.f32	s17, s17, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4878:	d1f2      	bne.n	d4860 <_Z12calculateHRVi+0x28>
  float ibi_stdev = 0;
   d487a:	ed9f 8a21 	vldr	s16, [pc, #132]	; d4900 <_Z12calculateHRVi+0xc8>
  }
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d487e:	2400      	movs	r4, #0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d4880:	ecf5 7a01 	vldmia	r5!, {s15}
   d4884:	eef8 7a67 	vcvt.f32.u32	s15, s15
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d4888:	3401      	adds	r4, #1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d488a:	ee77 7ae8 	vsub.f32	s15, s15, s17
   d488e:	ee17 0a90 	vmov	r0, s15
   d4892:	f004 f88b 	bl	d89ac <__aeabi_f2d>
   d4896:	4602      	mov	r2, r0
   d4898:	460b      	mov	r3, r1
   d489a:	f004 f8df 	bl	d8a5c <__aeabi_dmul>
   d489e:	4606      	mov	r6, r0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48a0:	ee18 0a10 	vmov	r0, s16
   d48a4:	460f      	mov	r7, r1
   d48a6:	f004 f881 	bl	d89ac <__aeabi_f2d>
   d48aa:	4602      	mov	r2, r0
   d48ac:	460b      	mov	r3, r1
   d48ae:	4630      	mov	r0, r6
   d48b0:	4639      	mov	r1, r7
   d48b2:	f003 ff1d 	bl	d86f0 <__adddf3>
   d48b6:	f004 fb81 	bl	d8fbc <__aeabi_d2f>
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48ba:	2c05      	cmp	r4, #5
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48bc:	ee08 0a10 	vmov	s16, r0
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48c0:	d1de      	bne.n	d4880 <_Z12calculateHRVi+0x48>
   d48c2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
   d48c6:	eec8 7a27 	vdiv.f32	s15, s16, s15
   d48ca:	ee17 0a90 	vmov	r0, s15
   d48ce:	f004 f86d 	bl	d89ac <__aeabi_f2d>
   d48d2:	ed9f 1b07 	vldr	d1, [pc, #28]	; d48f0 <_Z12calculateHRVi+0xb8>
   d48d6:	ec41 0b10 	vmov	d0, r0, r1
   d48da:	f002 fd65 	bl	d73a8 <pow>
   d48de:	ec51 0b10 	vmov	r0, r1, d0
  }
  ibi_stdev /= IBI_BUFFER_SIZE;
  ibi_stdev = pow(ibi_stdev, 0.5);
   d48e2:	f004 fb6b 	bl	d8fbc <__aeabi_d2f>
   d48e6:	4b07      	ldr	r3, [pc, #28]	; (d4904 <_Z12calculateHRVi+0xcc>)
   d48e8:	6018      	str	r0, [r3, #0]

  hrv = ibi_stdev;
}
   d48ea:	ecbd 8b02 	vpop	{d8}
   d48ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48f0:	00000000 	.word	0x00000000
   d48f4:	3fe00000 	.word	0x3fe00000
   d48f8:	2003e514 	.word	0x2003e514
   d48fc:	2003e518 	.word	0x2003e518
   d4900:	00000000 	.word	0x00000000
   d4904:	2003e510 	.word	0x2003e510

000d4908 <_Z21PulseSensorAmped_lostv>:


void PulseSensorAmped_lost(void) {
  //Serial.println("Pulse Lost");
}
   d4908:	4770      	bx	lr
   d490a:	0000      	movs	r0, r0
   d490c:	0000      	movs	r0, r0
	...

000d4910 <_Z20computeSummaryReportv>:


void computeSummaryReport(){
   d4910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  avg_tc1 = avg_tc1 / baseReadCounter;
   d4914:	4968      	ldr	r1, [pc, #416]	; (d4ab8 <_Z20computeSummaryReportv+0x1a8>)
  avg_tc2 = avg_tc2 / baseReadCounter;
  avg_accx = avg_accx / baseReadCounter;
   d4916:	4d69      	ldr	r5, [pc, #420]	; (d4abc <_Z20computeSummaryReportv+0x1ac>)
  avg_accy = avg_accy / baseReadCounter;
   d4918:	4e69      	ldr	r6, [pc, #420]	; (d4ac0 <_Z20computeSummaryReportv+0x1b0>)
  avg_accz = avg_accz / baseReadCounter;
   d491a:	4f6a      	ldr	r7, [pc, #424]	; (d4ac4 <_Z20computeSummaryReportv+0x1b4>)
  avg_gyrx = avg_gyrx / baseReadCounter;
   d491c:	f8df 8208 	ldr.w	r8, [pc, #520]	; d4b28 <_Z20computeSummaryReportv+0x218>
  avg_gyry = avg_gyry / baseReadCounter;
   d4920:	f8df 9208 	ldr.w	r9, [pc, #520]	; d4b2c <_Z20computeSummaryReportv+0x21c>
  avg_gyrz = avg_gyrz / baseReadCounter;
   d4924:	f8df a208 	ldr.w	sl, [pc, #520]	; d4b30 <_Z20computeSummaryReportv+0x220>
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d4928:	f8df b208 	ldr.w	fp, [pc, #520]	; d4b34 <_Z20computeSummaryReportv+0x224>
  avg_tc2 = avg_tc2 / baseReadCounter;
   d492c:	4866      	ldr	r0, [pc, #408]	; (d4ac8 <_Z20computeSummaryReportv+0x1b8>)
  avg_tc1 = avg_tc1 / baseReadCounter;
   d492e:	4b67      	ldr	r3, [pc, #412]	; (d4acc <_Z20computeSummaryReportv+0x1bc>)
   d4930:	680a      	ldr	r2, [r1, #0]
   d4932:	681b      	ldr	r3, [r3, #0]
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d4934:	4c66      	ldr	r4, [pc, #408]	; (d4ad0 <_Z20computeSummaryReportv+0x1c0>)
  avg_tc1 = avg_tc1 / baseReadCounter;
   d4936:	fb92 f2f3 	sdiv	r2, r2, r3
   d493a:	600a      	str	r2, [r1, #0]
  avg_tc2 = avg_tc2 / baseReadCounter;
   d493c:	6802      	ldr	r2, [r0, #0]
   d493e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4942:	6002      	str	r2, [r0, #0]
  avg_accx = avg_accx / baseReadCounter;
   d4944:	682a      	ldr	r2, [r5, #0]
   d4946:	fb92 f2f3 	sdiv	r2, r2, r3
   d494a:	602a      	str	r2, [r5, #0]
  avg_accy = avg_accy / baseReadCounter;
   d494c:	6832      	ldr	r2, [r6, #0]
   d494e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4952:	6032      	str	r2, [r6, #0]
  avg_accz = avg_accz / baseReadCounter;
   d4954:	683a      	ldr	r2, [r7, #0]
   d4956:	fb92 f2f3 	sdiv	r2, r2, r3
   d495a:	603a      	str	r2, [r7, #0]
  avg_gyrx = avg_gyrx / baseReadCounter;
   d495c:	f8d8 2000 	ldr.w	r2, [r8]
   d4960:	fb92 f2f3 	sdiv	r2, r2, r3
   d4964:	f8c8 2000 	str.w	r2, [r8]
  avg_gyry = avg_gyry / baseReadCounter;
   d4968:	f8d9 2000 	ldr.w	r2, [r9]
   d496c:	fb92 f2f3 	sdiv	r2, r2, r3
   d4970:	f8c9 2000 	str.w	r2, [r9]
  avg_gyrz = avg_gyrz / baseReadCounter;
   d4974:	f8da 2000 	ldr.w	r2, [sl]
   d4978:	fb92 f2f3 	sdiv	r2, r2, r3
   d497c:	f8ca 2000 	str.w	r2, [sl]
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d4980:	f8db 2000 	ldr.w	r2, [fp]
   d4984:	fb92 f3f3 	sdiv	r3, r2, r3
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d4988:	4a52      	ldr	r2, [pc, #328]	; (d4ad4 <_Z20computeSummaryReportv+0x1c4>)
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d498a:	f8cb 3000 	str.w	r3, [fp]
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d498e:	6812      	ldr	r2, [r2, #0]
   d4990:	6823      	ldr	r3, [r4, #0]
   d4992:	fb93 f3f2 	sdiv	r3, r3, r2
   d4996:	6023      	str	r3, [r4, #0]
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d4998:	4b4f      	ldr	r3, [pc, #316]	; (d4ad8 <_Z20computeSummaryReportv+0x1c8>)
   d499a:	4850      	ldr	r0, [pc, #320]	; (d4adc <_Z20computeSummaryReportv+0x1cc>)
  avg_fsr = avg_fsr / fsrReadCounter;
   d499c:	4c50      	ldr	r4, [pc, #320]	; (d4ae0 <_Z20computeSummaryReportv+0x1d0>)
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d499e:	6802      	ldr	r2, [r0, #0]
   d49a0:	4619      	mov	r1, r3
   d49a2:	681b      	ldr	r3, [r3, #0]
   d49a4:	fb93 f3f2 	sdiv	r3, r3, r2
   d49a8:	600b      	str	r3, [r1, #0]
  avg_fsr = avg_fsr / fsrReadCounter;
   d49aa:	494e      	ldr	r1, [pc, #312]	; (d4ae4 <_Z20computeSummaryReportv+0x1d4>)
   d49ac:	6823      	ldr	r3, [r4, #0]
   d49ae:	680a      	ldr	r2, [r1, #0]
   d49b0:	fb93 f3f2 	sdiv	r3, r3, r2
void computeSummaryReport(){
   d49b4:	b09f      	sub	sp, #124	; 0x7c

  float voltage = analogRead(BATT) * 0.0011224;
   d49b6:	2021      	movs	r0, #33	; 0x21
  avg_fsr = avg_fsr / fsrReadCounter;
   d49b8:	6023      	str	r3, [r4, #0]
  float voltage = analogRead(BATT) * 0.0011224;
   d49ba:	f002 fb21 	bl	d7000 <analogRead>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;

  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d49be:	4b4a      	ldr	r3, [pc, #296]	; (d4ae8 <_Z20computeSummaryReportv+0x1d8>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	9318      	str	r3, [sp, #96]	; 0x60
  float voltage = analogRead(BATT) * 0.0011224;
   d49c4:	f003 ffe0 	bl	d8988 <__aeabi_i2d>
   d49c8:	a339      	add	r3, pc, #228	; (adr r3, d4ab0 <_Z20computeSummaryReportv+0x1a0>)
   d49ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49ce:	f004 f845 	bl	d8a5c <__aeabi_dmul>
   d49d2:	f004 faf3 	bl	d8fbc <__aeabi_d2f>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;
   d49d6:	f003 ffe9 	bl	d89ac <__aeabi_f2d>
   d49da:	4b44      	ldr	r3, [pc, #272]	; (d4aec <_Z20computeSummaryReportv+0x1dc>)
   d49dc:	2200      	movs	r2, #0
   d49de:	f003 fe85 	bl	d86ec <__aeabi_dsub>
   d49e2:	4b43      	ldr	r3, [pc, #268]	; (d4af0 <_Z20computeSummaryReportv+0x1e0>)
   d49e4:	2200      	movs	r2, #0
   d49e6:	f004 f963 	bl	d8cb0 <__aeabi_ddiv>
   d49ea:	2200      	movs	r2, #0
   d49ec:	4b41      	ldr	r3, [pc, #260]	; (d4af4 <_Z20computeSummaryReportv+0x1e4>)
   d49ee:	f004 f835 	bl	d8a5c <__aeabi_dmul>
   d49f2:	f004 fae3 	bl	d8fbc <__aeabi_d2f>
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d49f6:	f003 ffd9 	bl	d89ac <__aeabi_f2d>
   d49fa:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   d49fe:	4b3e      	ldr	r3, [pc, #248]	; (d4af8 <_Z20computeSummaryReportv+0x1e8>)
   d4a00:	6818      	ldr	r0, [r3, #0]
   d4a02:	f003 ffd3 	bl	d89ac <__aeabi_f2d>
   d4a06:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d4a0a:	4b3c      	ldr	r3, [pc, #240]	; (d4afc <_Z20computeSummaryReportv+0x1ec>)
   d4a0c:	4a32      	ldr	r2, [pc, #200]	; (d4ad8 <_Z20computeSummaryReportv+0x1c8>)
   d4a0e:	681b      	ldr	r3, [r3, #0]
   d4a10:	9312      	str	r3, [sp, #72]	; 0x48
   d4a12:	4b3b      	ldr	r3, [pc, #236]	; (d4b00 <_Z20computeSummaryReportv+0x1f0>)
   d4a14:	482c      	ldr	r0, [pc, #176]	; (d4ac8 <_Z20computeSummaryReportv+0x1b8>)
   d4a16:	681b      	ldr	r3, [r3, #0]
   d4a18:	9311      	str	r3, [sp, #68]	; 0x44
   d4a1a:	4b3a      	ldr	r3, [pc, #232]	; (d4b04 <_Z20computeSummaryReportv+0x1f4>)
   d4a1c:	4926      	ldr	r1, [pc, #152]	; (d4ab8 <_Z20computeSummaryReportv+0x1a8>)
   d4a1e:	681b      	ldr	r3, [r3, #0]
   d4a20:	9310      	str	r3, [sp, #64]	; 0x40
   d4a22:	4b39      	ldr	r3, [pc, #228]	; (d4b08 <_Z20computeSummaryReportv+0x1f8>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	930f      	str	r3, [sp, #60]	; 0x3c
   d4a28:	4b38      	ldr	r3, [pc, #224]	; (d4b0c <_Z20computeSummaryReportv+0x1fc>)
   d4a2a:	681b      	ldr	r3, [r3, #0]
   d4a2c:	930e      	str	r3, [sp, #56]	; 0x38
   d4a2e:	4b38      	ldr	r3, [pc, #224]	; (d4b10 <_Z20computeSummaryReportv+0x200>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	930d      	str	r3, [sp, #52]	; 0x34
   d4a34:	4b37      	ldr	r3, [pc, #220]	; (d4b14 <_Z20computeSummaryReportv+0x204>)
   d4a36:	681b      	ldr	r3, [r3, #0]
   d4a38:	930c      	str	r3, [sp, #48]	; 0x30
   d4a3a:	4b37      	ldr	r3, [pc, #220]	; (d4b18 <_Z20computeSummaryReportv+0x208>)
   d4a3c:	681b      	ldr	r3, [r3, #0]
   d4a3e:	930b      	str	r3, [sp, #44]	; 0x2c
   d4a40:	4b36      	ldr	r3, [pc, #216]	; (d4b1c <_Z20computeSummaryReportv+0x20c>)
   d4a42:	681b      	ldr	r3, [r3, #0]
   d4a44:	930a      	str	r3, [sp, #40]	; 0x28
   d4a46:	f8db 3000 	ldr.w	r3, [fp]
   d4a4a:	9309      	str	r3, [sp, #36]	; 0x24
   d4a4c:	f8da 3000 	ldr.w	r3, [sl]
   d4a50:	9308      	str	r3, [sp, #32]
   d4a52:	f8d9 3000 	ldr.w	r3, [r9]
   d4a56:	9307      	str	r3, [sp, #28]
   d4a58:	f8d8 3000 	ldr.w	r3, [r8]
   d4a5c:	9306      	str	r3, [sp, #24]
   d4a5e:	683b      	ldr	r3, [r7, #0]
   d4a60:	9305      	str	r3, [sp, #20]
   d4a62:	6833      	ldr	r3, [r6, #0]
   d4a64:	9304      	str	r3, [sp, #16]
   d4a66:	682b      	ldr	r3, [r5, #0]
   d4a68:	9303      	str	r3, [sp, #12]
   d4a6a:	6823      	ldr	r3, [r4, #0]
   d4a6c:	9302      	str	r3, [sp, #8]
   d4a6e:	6813      	ldr	r3, [r2, #0]
   d4a70:	9301      	str	r3, [sp, #4]
   d4a72:	6803      	ldr	r3, [r0, #0]
   d4a74:	4c16      	ldr	r4, [pc, #88]	; (d4ad0 <_Z20computeSummaryReportv+0x1c0>)
   d4a76:	9300      	str	r3, [sp, #0]
   d4a78:	6823      	ldr	r3, [r4, #0]
   d4a7a:	680a      	ldr	r2, [r1, #0]
   d4a7c:	4928      	ldr	r1, [pc, #160]	; (d4b20 <_Z20computeSummaryReportv+0x210>)
   d4a7e:	ac1a      	add	r4, sp, #104	; 0x68
   d4a80:	4620      	mov	r0, r4
                                  , \"MGyrY\": %d, \"MGyrZ\": %d, \"HR\": %d, \"HRV\": %f \
                                  , \"Batt\": %f, \"MFSR\": %d}" \
                                  , avg_tc1, avg_tp1, avg_tc2, avg_tp2, avg_fsr, avg_accx, avg_accy, avg_accz, \
                                  avg_gyrx, avg_gyry, avg_gyrz, avg_brdtemp, max_tp1, max_tp2, \
                                  max_accx, max_accy, max_accz, max_gyrx, max_gyry, max_gyrz, pulse, \
                                  hrv, batt_perc, max_fsr);
   d4a82:	ac1a      	add	r4, sp, #104	; 0x68
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d4a84:	f001 ffd0 	bl	d6a28 <_ZN6String6formatEPKcz>
                                  hrv, batt_perc, max_fsr);
   d4a88:	4621      	mov	r1, r4
   d4a8a:	4826      	ldr	r0, [pc, #152]	; (d4b24 <_Z20computeSummaryReportv+0x214>)
   d4a8c:	ac1a      	add	r4, sp, #104	; 0x68
   d4a8e:	f001 ff4f 	bl	d6930 <_ZN6StringaSEOS_>
   d4a92:	4620      	mov	r0, r4
   d4a94:	f001 feb6 	bl	d6804 <_ZN6StringD1Ev>

  baseReadCounter = 0;
   d4a98:	4a0c      	ldr	r2, [pc, #48]	; (d4acc <_Z20computeSummaryReportv+0x1bc>)
  tp1ReadCounter = 0;
  tp2ReadCounter = 0;
   d4a9a:	4810      	ldr	r0, [pc, #64]	; (d4adc <_Z20computeSummaryReportv+0x1cc>)
  fsrReadCounter = 0;
   d4a9c:	4911      	ldr	r1, [pc, #68]	; (d4ae4 <_Z20computeSummaryReportv+0x1d4>)
  baseReadCounter = 0;
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	6013      	str	r3, [r2, #0]
  tp1ReadCounter = 0;
   d4aa2:	4a0c      	ldr	r2, [pc, #48]	; (d4ad4 <_Z20computeSummaryReportv+0x1c4>)
  tp2ReadCounter = 0;
   d4aa4:	6003      	str	r3, [r0, #0]
  tp1ReadCounter = 0;
   d4aa6:	6013      	str	r3, [r2, #0]
  fsrReadCounter = 0;
   d4aa8:	600b      	str	r3, [r1, #0]
}
   d4aaa:	b01f      	add	sp, #124	; 0x7c
   d4aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ab0:	d2c10294 	.word	0xd2c10294
   d4ab4:	3f5263af 	.word	0x3f5263af
   d4ab8:	2003e4bc 	.word	0x2003e4bc
   d4abc:	2003e49c 	.word	0x2003e49c
   d4ac0:	2003e4a0 	.word	0x2003e4a0
   d4ac4:	2003e4a4 	.word	0x2003e4a4
   d4ac8:	2003e4c0 	.word	0x2003e4c0
   d4acc:	2003e4cc 	.word	0x2003e4cc
   d4ad0:	2003e4c4 	.word	0x2003e4c4
   d4ad4:	2003e584 	.word	0x2003e584
   d4ad8:	2003e4c8 	.word	0x2003e4c8
   d4adc:	2003e58c 	.word	0x2003e58c
   d4ae0:	2003e4ac 	.word	0x2003e4ac
   d4ae4:	2003e500 	.word	0x2003e500
   d4ae8:	2003e53c 	.word	0x2003e53c
   d4aec:	40080000 	.word	0x40080000
   d4af0:	3ff20000 	.word	0x3ff20000
   d4af4:	40590000 	.word	0x40590000
   d4af8:	2003e510 	.word	0x2003e510
   d4afc:	2003e560 	.word	0x2003e560
   d4b00:	2003e548 	.word	0x2003e548
   d4b04:	2003e544 	.word	0x2003e544
   d4b08:	2003e540 	.word	0x2003e540
   d4b0c:	2003e534 	.word	0x2003e534
   d4b10:	2003e530 	.word	0x2003e530
   d4b14:	2003e52c 	.word	0x2003e52c
   d4b18:	2003e558 	.word	0x2003e558
   d4b1c:	2003e554 	.word	0x2003e554
   d4b20:	000d91c4 	.word	0x000d91c4
   d4b24:	2003e568 	.word	0x2003e568
   d4b28:	2003e4b0 	.word	0x2003e4b0
   d4b2c:	2003e4b4 	.word	0x2003e4b4
   d4b30:	2003e4b8 	.word	0x2003e4b8
   d4b34:	2003e4a8 	.word	0x2003e4a8

000d4b38 <_Z17updateSummaryValsPi>:


void updateSummaryVals(int summaryArray[9]){
  avg_tc1 = avg_tc1 + summaryArray[0];
   d4b38:	4a2d      	ldr	r2, [pc, #180]	; (d4bf0 <_Z17updateSummaryValsPi+0xb8>)
   d4b3a:	6803      	ldr	r3, [r0, #0]
   d4b3c:	6811      	ldr	r1, [r2, #0]
   d4b3e:	440b      	add	r3, r1
   d4b40:	6013      	str	r3, [r2, #0]
  if(summaryArray[0] > max_tc1){
   d4b42:	4b2c      	ldr	r3, [pc, #176]	; (d4bf4 <_Z17updateSummaryValsPi+0xbc>)
   d4b44:	6802      	ldr	r2, [r0, #0]
   d4b46:	6819      	ldr	r1, [r3, #0]
   d4b48:	428a      	cmp	r2, r1
    max_tc1 = summaryArray[0];
  }
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4b4a:	492b      	ldr	r1, [pc, #172]	; (d4bf8 <_Z17updateSummaryValsPi+0xc0>)
    max_tc1 = summaryArray[0];
   d4b4c:	bfc8      	it	gt
   d4b4e:	601a      	strgt	r2, [r3, #0]
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4b50:	680a      	ldr	r2, [r1, #0]
   d4b52:	6843      	ldr	r3, [r0, #4]
   d4b54:	441a      	add	r2, r3
   d4b56:	600a      	str	r2, [r1, #0]
  if(summaryArray[1] > max_tc2){
   d4b58:	4a28      	ldr	r2, [pc, #160]	; (d4bfc <_Z17updateSummaryValsPi+0xc4>)
   d4b5a:	6811      	ldr	r1, [r2, #0]
   d4b5c:	428b      	cmp	r3, r1
    max_tc2 = summaryArray[1];
  }
  avg_accx = avg_accx + summaryArray[2];
   d4b5e:	4928      	ldr	r1, [pc, #160]	; (d4c00 <_Z17updateSummaryValsPi+0xc8>)
    max_tc2 = summaryArray[1];
   d4b60:	bfc8      	it	gt
   d4b62:	6013      	strgt	r3, [r2, #0]
  avg_accx = avg_accx + summaryArray[2];
   d4b64:	680a      	ldr	r2, [r1, #0]
   d4b66:	6883      	ldr	r3, [r0, #8]
   d4b68:	441a      	add	r2, r3
   d4b6a:	600a      	str	r2, [r1, #0]
  if(summaryArray[2] > max_accx){
   d4b6c:	4a25      	ldr	r2, [pc, #148]	; (d4c04 <_Z17updateSummaryValsPi+0xcc>)
   d4b6e:	6811      	ldr	r1, [r2, #0]
   d4b70:	428b      	cmp	r3, r1
    max_accx = summaryArray[2];
  }
  avg_accy = avg_accy + summaryArray[3];
   d4b72:	4925      	ldr	r1, [pc, #148]	; (d4c08 <_Z17updateSummaryValsPi+0xd0>)
    max_accx = summaryArray[2];
   d4b74:	bfc8      	it	gt
   d4b76:	6013      	strgt	r3, [r2, #0]
  avg_accy = avg_accy + summaryArray[3];
   d4b78:	680a      	ldr	r2, [r1, #0]
   d4b7a:	68c3      	ldr	r3, [r0, #12]
   d4b7c:	441a      	add	r2, r3
   d4b7e:	600a      	str	r2, [r1, #0]
  if(summaryArray[3] > max_accy){
   d4b80:	4a22      	ldr	r2, [pc, #136]	; (d4c0c <_Z17updateSummaryValsPi+0xd4>)
   d4b82:	6811      	ldr	r1, [r2, #0]
   d4b84:	428b      	cmp	r3, r1
    max_accy = summaryArray[3];
  }
  avg_accz = avg_accz + summaryArray[4];
   d4b86:	4922      	ldr	r1, [pc, #136]	; (d4c10 <_Z17updateSummaryValsPi+0xd8>)
    max_accy = summaryArray[3];
   d4b88:	bfc8      	it	gt
   d4b8a:	6013      	strgt	r3, [r2, #0]
  avg_accz = avg_accz + summaryArray[4];
   d4b8c:	6903      	ldr	r3, [r0, #16]
   d4b8e:	680a      	ldr	r2, [r1, #0]
   d4b90:	441a      	add	r2, r3
   d4b92:	600a      	str	r2, [r1, #0]
  if(summaryArray[4] > max_accz){
   d4b94:	4a1f      	ldr	r2, [pc, #124]	; (d4c14 <_Z17updateSummaryValsPi+0xdc>)
   d4b96:	6811      	ldr	r1, [r2, #0]
   d4b98:	428b      	cmp	r3, r1
    max_accz = summaryArray[4];
  }
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4b9a:	491f      	ldr	r1, [pc, #124]	; (d4c18 <_Z17updateSummaryValsPi+0xe0>)
    max_accz = summaryArray[4];
   d4b9c:	bfc8      	it	gt
   d4b9e:	6013      	strgt	r3, [r2, #0]
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4ba0:	6943      	ldr	r3, [r0, #20]
   d4ba2:	680a      	ldr	r2, [r1, #0]
   d4ba4:	441a      	add	r2, r3
   d4ba6:	600a      	str	r2, [r1, #0]
  if(summaryArray[5] > max_gyrx){
   d4ba8:	4a1c      	ldr	r2, [pc, #112]	; (d4c1c <_Z17updateSummaryValsPi+0xe4>)
   d4baa:	6811      	ldr	r1, [r2, #0]
   d4bac:	428b      	cmp	r3, r1
    max_gyrx = summaryArray[5];
  }
  avg_gyry = avg_gyry + summaryArray[6];
   d4bae:	491c      	ldr	r1, [pc, #112]	; (d4c20 <_Z17updateSummaryValsPi+0xe8>)
    max_gyrx = summaryArray[5];
   d4bb0:	bfc8      	it	gt
   d4bb2:	6013      	strgt	r3, [r2, #0]
  avg_gyry = avg_gyry + summaryArray[6];
   d4bb4:	6983      	ldr	r3, [r0, #24]
   d4bb6:	680a      	ldr	r2, [r1, #0]
   d4bb8:	441a      	add	r2, r3
   d4bba:	600a      	str	r2, [r1, #0]
  if(summaryArray[6] > max_gyry){
   d4bbc:	4a19      	ldr	r2, [pc, #100]	; (d4c24 <_Z17updateSummaryValsPi+0xec>)
   d4bbe:	6811      	ldr	r1, [r2, #0]
   d4bc0:	428b      	cmp	r3, r1
    max_gyry = summaryArray[6];
  }
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4bc2:	4919      	ldr	r1, [pc, #100]	; (d4c28 <_Z17updateSummaryValsPi+0xf0>)
    max_gyry = summaryArray[6];
   d4bc4:	bfc8      	it	gt
   d4bc6:	6013      	strgt	r3, [r2, #0]
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4bc8:	69c3      	ldr	r3, [r0, #28]
   d4bca:	680a      	ldr	r2, [r1, #0]
   d4bcc:	441a      	add	r2, r3
   d4bce:	600a      	str	r2, [r1, #0]
  if(summaryArray[7] > max_gyrz){
   d4bd0:	4a16      	ldr	r2, [pc, #88]	; (d4c2c <_Z17updateSummaryValsPi+0xf4>)
   d4bd2:	6811      	ldr	r1, [r2, #0]
   d4bd4:	428b      	cmp	r3, r1
    max_gyrz = summaryArray[7];
  }
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4bd6:	4916      	ldr	r1, [pc, #88]	; (d4c30 <_Z17updateSummaryValsPi+0xf8>)
    max_gyrz = summaryArray[7];
   d4bd8:	bfc8      	it	gt
   d4bda:	6013      	strgt	r3, [r2, #0]
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4bdc:	6a03      	ldr	r3, [r0, #32]
   d4bde:	680a      	ldr	r2, [r1, #0]
   d4be0:	441a      	add	r2, r3
   d4be2:	600a      	str	r2, [r1, #0]
  if(summaryArray[8] > max_brdtemp){
   d4be4:	4a13      	ldr	r2, [pc, #76]	; (d4c34 <_Z17updateSummaryValsPi+0xfc>)
   d4be6:	6811      	ldr	r1, [r2, #0]
   d4be8:	428b      	cmp	r3, r1
    max_brdtemp = summaryArray[8];
   d4bea:	bfc8      	it	gt
   d4bec:	6013      	strgt	r3, [r2, #0]
  }
}
   d4bee:	4770      	bx	lr
   d4bf0:	2003e4bc 	.word	0x2003e4bc
   d4bf4:	2003e54c 	.word	0x2003e54c
   d4bf8:	2003e4c0 	.word	0x2003e4c0
   d4bfc:	2003e550 	.word	0x2003e550
   d4c00:	2003e49c 	.word	0x2003e49c
   d4c04:	2003e52c 	.word	0x2003e52c
   d4c08:	2003e4a0 	.word	0x2003e4a0
   d4c0c:	2003e530 	.word	0x2003e530
   d4c10:	2003e4a4 	.word	0x2003e4a4
   d4c14:	2003e534 	.word	0x2003e534
   d4c18:	2003e4b0 	.word	0x2003e4b0
   d4c1c:	2003e540 	.word	0x2003e540
   d4c20:	2003e4b4 	.word	0x2003e4b4
   d4c24:	2003e544 	.word	0x2003e544
   d4c28:	2003e4b8 	.word	0x2003e4b8
   d4c2c:	2003e548 	.word	0x2003e548
   d4c30:	2003e4a8 	.word	0x2003e4a8
   d4c34:	2003e538 	.word	0x2003e538

000d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4c38:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4c3a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4c3c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4c3e:	b17c      	cbz	r4, d4c60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4c40:	6863      	ldr	r3, [r4, #4]
   d4c42:	3b01      	subs	r3, #1
   d4c44:	6063      	str	r3, [r4, #4]
   d4c46:	b95b      	cbnz	r3, d4c60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4c48:	6823      	ldr	r3, [r4, #0]
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	689b      	ldr	r3, [r3, #8]
   d4c4e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4c50:	68a3      	ldr	r3, [r4, #8]
   d4c52:	3b01      	subs	r3, #1
   d4c54:	60a3      	str	r3, [r4, #8]
   d4c56:	b91b      	cbnz	r3, d4c60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4c58:	6823      	ldr	r3, [r4, #0]
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	68db      	ldr	r3, [r3, #12]
   d4c5e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4c60:	4628      	mov	r0, r5
   d4c62:	bd38      	pop	{r3, r4, r5, pc}

000d4c64 <loop>:
void loop() {
   d4c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((edaTurnCounter == 1) && ((millis()-edaReadTimer) >= 20)){
   d4c68:	4c8e      	ldr	r4, [pc, #568]	; (d4ea4 <loop+0x240>)
   d4c6a:	7825      	ldrb	r5, [r4, #0]
   d4c6c:	2d01      	cmp	r5, #1
void loop() {
   d4c6e:	b091      	sub	sp, #68	; 0x44
  if((edaTurnCounter == 1) && ((millis()-edaReadTimer) >= 20)){
   d4c70:	d12a      	bne.n	d4cc8 <loop+0x64>
   d4c72:	4e8d      	ldr	r6, [pc, #564]	; (d4ea8 <loop+0x244>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c74:	f000 fe3c 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
   d4c78:	6833      	ldr	r3, [r6, #0]
   d4c7a:	1ac0      	subs	r0, r0, r3
   d4c7c:	2813      	cmp	r0, #19
   d4c7e:	d923      	bls.n	d4cc8 <loop+0x64>
   d4c80:	f000 fe36 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
    eda1 = ads_eda.readADC_SingleEnded(0);
   d4c84:	2100      	movs	r1, #0
    edaReadTimer = millis();
   d4c86:	6030      	str	r0, [r6, #0]
    eda1 = ads_eda.readADC_SingleEnded(0);
   d4c88:	4888      	ldr	r0, [pc, #544]	; (d4eac <loop+0x248>)
   d4c8a:	4e89      	ldr	r6, [pc, #548]	; (d4eb0 <loop+0x24c>)
   d4c8c:	f000 fa8f 	bl	d51ae <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4c90:	4988      	ldr	r1, [pc, #544]	; (d4eb4 <loop+0x250>)
   d4c92:	6030      	str	r0, [r6, #0]
   d4c94:	a807      	add	r0, sp, #28
   d4c96:	f001 fe40 	bl	d691a <_ZN6StringC1ERKS_>
    eda1Report = eda1Report + String(eda1) + ' '; //EDA1
   d4c9a:	220a      	movs	r2, #10
   d4c9c:	6831      	ldr	r1, [r6, #0]
   d4c9e:	a803      	add	r0, sp, #12
   d4ca0:	f001 fe60 	bl	d6964 <_ZN6StringC1Eih>
   d4ca4:	a903      	add	r1, sp, #12
   d4ca6:	a807      	add	r0, sp, #28
   d4ca8:	f001 fe93 	bl	d69d2 <_ZplRK15StringSumHelperRK6String>
   d4cac:	2120      	movs	r1, #32
   d4cae:	f001 feb1 	bl	d6a14 <_ZplRK15StringSumHelperc>
   d4cb2:	4601      	mov	r1, r0
   d4cb4:	487f      	ldr	r0, [pc, #508]	; (d4eb4 <loop+0x250>)
   d4cb6:	f001 fe21 	bl	d68fc <_ZN6StringaSERKS_>
   d4cba:	a803      	add	r0, sp, #12
   d4cbc:	f001 fda2 	bl	d6804 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4cc0:	a807      	add	r0, sp, #28
   d4cc2:	f001 fd9f 	bl	d6804 <_ZN6StringD1Ev>
    edaTurnCounter = 1;
   d4cc6:	7025      	strb	r5, [r4, #0]
  tc1 = analogRead(TC1);
   d4cc8:	2012      	movs	r0, #18
   d4cca:	f002 f999 	bl	d7000 <analogRead>
   d4cce:	f8df 9270 	ldr.w	r9, [pc, #624]	; d4f40 <loop+0x2dc>
  ICM.getAGMT();  // Update IMU Values
   d4cd2:	4c79      	ldr	r4, [pc, #484]	; (d4eb8 <loop+0x254>)
  tc1 = analogRead(TC1);
   d4cd4:	f8c9 0000 	str.w	r0, [r9]
  tc2 = analogRead(TC2);
   d4cd8:	2011      	movs	r0, #17
   d4cda:	f002 f991 	bl	d7000 <analogRead>
   d4cde:	f8df 8264 	ldr.w	r8, [pc, #612]	; d4f44 <loop+0x2e0>
  ICM.getAGMT();  // Update IMU Values
   d4ce2:	1d21      	adds	r1, r4, #4
  tc2 = analogRead(TC2);
   d4ce4:	f8c8 0000 	str.w	r0, [r8]
  ICM.getAGMT();  // Update IMU Values
   d4ce8:	a807      	add	r0, sp, #28
   d4cea:	f000 fc57 	bl	d559c <_ZN9ICM_209487getAGMTEv>
  accx = ICM.agmt.acc.axes.x;
   d4cee:	4b73      	ldr	r3, [pc, #460]	; (d4ebc <loop+0x258>)
   d4cf0:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
   d4cf4:	601f      	str	r7, [r3, #0]
  accy = ICM.agmt.acc.axes.y;
   d4cf6:	4b72      	ldr	r3, [pc, #456]	; (d4ec0 <loop+0x25c>)
   d4cf8:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
   d4cfc:	601e      	str	r6, [r3, #0]
  accz = ICM.agmt.acc.axes.z;
   d4cfe:	4b71      	ldr	r3, [pc, #452]	; (d4ec4 <loop+0x260>)
   d4d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d4d04:	601d      	str	r5, [r3, #0]
  gyrx = ICM.agmt.gyr.axes.x;
   d4d06:	4b70      	ldr	r3, [pc, #448]	; (d4ec8 <loop+0x264>)
   d4d08:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
   d4d0c:	6018      	str	r0, [r3, #0]
  gyry = ICM.agmt.gyr.axes.y;
   d4d0e:	4b6f      	ldr	r3, [pc, #444]	; (d4ecc <loop+0x268>)
   d4d10:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4d14:	6019      	str	r1, [r3, #0]
  gyrz = ICM.agmt.gyr.axes.z;
   d4d16:	4b6e      	ldr	r3, [pc, #440]	; (d4ed0 <loop+0x26c>)
   d4d18:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4d1c:	601a      	str	r2, [r3, #0]
  brdtemp = ICM.agmt.tmp.val;
   d4d1e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
   d4d22:	4c6c      	ldr	r4, [pc, #432]	; (d4ed4 <loop+0x270>)
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  baseReadCounter++;
   d4d28:	4a6b      	ldr	r2, [pc, #428]	; (d4ed8 <loop+0x274>)
  brdtemp = ICM.agmt.tmp.val;
   d4d2a:	6023      	str	r3, [r4, #0]
  baseReadCounter++;
   d4d2c:	6813      	ldr	r3, [r2, #0]
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d2e:	f8d9 4000 	ldr.w	r4, [r9]
   d4d32:	9407      	str	r4, [sp, #28]
   d4d34:	f8d8 4000 	ldr.w	r4, [r8]
  baseReadCounter++;
   d4d38:	3301      	adds	r3, #1
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d3a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  updateSummaryVals(summaryArray);
   d4d3e:	a807      	add	r0, sp, #28
  baseReadCounter++;
   d4d40:	6013      	str	r3, [r2, #0]
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d42:	e9cd 4708 	strd	r4, r7, [sp, #32]
   d4d46:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d4d4a:	4c64      	ldr	r4, [pc, #400]	; (d4edc <loop+0x278>)
  updateSummaryVals(summaryArray);
   d4d4c:	f7ff fef4 	bl	d4b38 <_Z17updateSummaryValsPi>
  PulseSensorAmped.process();
   d4d50:	4863      	ldr	r0, [pc, #396]	; (d4ee0 <loop+0x27c>)
   d4d52:	f000 fbb3 	bl	d54bc <_ZN21PulseSensorAmpedClass7processEv>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4d56:	f000 fdc3 	bl	d58e0 <HAL_Timer_Get_Micro_Seconds>
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d4d5a:	6823      	ldr	r3, [r4, #0]
   d4d5c:	1ac0      	subs	r0, r0, r3
   d4d5e:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4d62:	4298      	cmp	r0, r3
   d4d64:	d91f      	bls.n	d4da6 <loop+0x142>
   d4d66:	f000 fdbb 	bl	d58e0 <HAL_Timer_Get_Micro_Seconds>
    otherReadTimer = micros();
   d4d6a:	6020      	str	r0, [r4, #0]
    switch (readTurnCounter){ //Take turns reading from each line
   d4d6c:	4c5d      	ldr	r4, [pc, #372]	; (d4ee4 <loop+0x280>)
   d4d6e:	7823      	ldrb	r3, [r4, #0]
   d4d70:	2b02      	cmp	r3, #2
   d4d72:	d02c      	beq.n	d4dce <loop+0x16a>
   d4d74:	2b03      	cmp	r3, #3
   d4d76:	d03f      	beq.n	d4df8 <loop+0x194>
   d4d78:	2b01      	cmp	r3, #1
   d4d7a:	d114      	bne.n	d4da6 <loop+0x142>
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d4d7c:	485a      	ldr	r0, [pc, #360]	; (d4ee8 <loop+0x284>)
   d4d7e:	2100      	movs	r1, #0
   d4d80:	f000 fa15 	bl	d51ae <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp1 = avg_tp1 + tp1;
   d4d84:	4a59      	ldr	r2, [pc, #356]	; (d4eec <loop+0x288>)
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d4d86:	4b5a      	ldr	r3, [pc, #360]	; (d4ef0 <loop+0x28c>)
   d4d88:	6018      	str	r0, [r3, #0]
        avg_tp1 = avg_tp1 + tp1;
   d4d8a:	6813      	ldr	r3, [r2, #0]
   d4d8c:	4403      	add	r3, r0
   d4d8e:	6013      	str	r3, [r2, #0]
        if(tp1 > max_tp1){
   d4d90:	4b58      	ldr	r3, [pc, #352]	; (d4ef4 <loop+0x290>)
   d4d92:	681a      	ldr	r2, [r3, #0]
   d4d94:	4290      	cmp	r0, r2
        tp1ReadCounter++;
   d4d96:	4a58      	ldr	r2, [pc, #352]	; (d4ef8 <loop+0x294>)
          max_tp1 = tp1;
   d4d98:	bfc8      	it	gt
   d4d9a:	6018      	strgt	r0, [r3, #0]
        tp1ReadCounter++;
   d4d9c:	6813      	ldr	r3, [r2, #0]
   d4d9e:	3301      	adds	r3, #1
   d4da0:	6013      	str	r3, [r2, #0]
        readTurnCounter = 2;
   d4da2:	2302      	movs	r3, #2
        readTurnCounter = 1;
   d4da4:	7023      	strb	r3, [r4, #0]
  if((millis() - reportTimer) >= 1001){
   d4da6:	4c55      	ldr	r4, [pc, #340]	; (d4efc <loop+0x298>)
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4da8:	f000 fda2 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
   d4dac:	6823      	ldr	r3, [r4, #0]
   d4dae:	1ac0      	subs	r0, r0, r3
   d4db0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4db4:	d908      	bls.n	d4dc8 <loop+0x164>
   d4db6:	f000 fd9b 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
    reportTimer = millis();
   d4dba:	6020      	str	r0, [r4, #0]
    switch (reportTurnCounter){
   d4dbc:	4c50      	ldr	r4, [pc, #320]	; (d4f00 <loop+0x29c>)
   d4dbe:	7823      	ldrb	r3, [r4, #0]
   d4dc0:	2b01      	cmp	r3, #1
   d4dc2:	d02e      	beq.n	d4e22 <loop+0x1be>
   d4dc4:	2b03      	cmp	r3, #3
   d4dc6:	d053      	beq.n	d4e70 <loop+0x20c>
}
   d4dc8:	b011      	add	sp, #68	; 0x44
   d4dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d4dce:	4846      	ldr	r0, [pc, #280]	; (d4ee8 <loop+0x284>)
   d4dd0:	2101      	movs	r1, #1
   d4dd2:	f000 f9ec 	bl	d51ae <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp2 = avg_tp2 + tp2;
   d4dd6:	4a4b      	ldr	r2, [pc, #300]	; (d4f04 <loop+0x2a0>)
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d4dd8:	4b4b      	ldr	r3, [pc, #300]	; (d4f08 <loop+0x2a4>)
   d4dda:	6018      	str	r0, [r3, #0]
        avg_tp2 = avg_tp2 + tp2;
   d4ddc:	6813      	ldr	r3, [r2, #0]
   d4dde:	4403      	add	r3, r0
   d4de0:	6013      	str	r3, [r2, #0]
        if(tp2 > max_tp2){
   d4de2:	4b4a      	ldr	r3, [pc, #296]	; (d4f0c <loop+0x2a8>)
   d4de4:	681a      	ldr	r2, [r3, #0]
   d4de6:	4290      	cmp	r0, r2
        tp2ReadCounter++;
   d4de8:	4a49      	ldr	r2, [pc, #292]	; (d4f10 <loop+0x2ac>)
          max_tp2 = tp2;
   d4dea:	bfc8      	it	gt
   d4dec:	6018      	strgt	r0, [r3, #0]
        tp2ReadCounter++;
   d4dee:	6813      	ldr	r3, [r2, #0]
   d4df0:	3301      	adds	r3, #1
   d4df2:	6013      	str	r3, [r2, #0]
        readTurnCounter = 3;
   d4df4:	2303      	movs	r3, #3
   d4df6:	e7d5      	b.n	d4da4 <loop+0x140>
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d4df8:	483b      	ldr	r0, [pc, #236]	; (d4ee8 <loop+0x284>)
   d4dfa:	2102      	movs	r1, #2
   d4dfc:	f000 f9d7 	bl	d51ae <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_fsr = avg_fsr + fsr;
   d4e00:	4a44      	ldr	r2, [pc, #272]	; (d4f14 <loop+0x2b0>)
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d4e02:	4b45      	ldr	r3, [pc, #276]	; (d4f18 <loop+0x2b4>)
   d4e04:	6018      	str	r0, [r3, #0]
        avg_fsr = avg_fsr + fsr;
   d4e06:	6813      	ldr	r3, [r2, #0]
   d4e08:	4403      	add	r3, r0
   d4e0a:	6013      	str	r3, [r2, #0]
        if(fsr > max_fsr){
   d4e0c:	4b43      	ldr	r3, [pc, #268]	; (d4f1c <loop+0x2b8>)
   d4e0e:	681a      	ldr	r2, [r3, #0]
   d4e10:	4290      	cmp	r0, r2
        fsrReadCounter++;
   d4e12:	4a43      	ldr	r2, [pc, #268]	; (d4f20 <loop+0x2bc>)
          max_fsr = fsr;
   d4e14:	bfc8      	it	gt
   d4e16:	6018      	strgt	r0, [r3, #0]
        fsrReadCounter++;
   d4e18:	6813      	ldr	r3, [r2, #0]
   d4e1a:	3301      	adds	r3, #1
   d4e1c:	6013      	str	r3, [r2, #0]
        readTurnCounter = 1;
   d4e1e:	2301      	movs	r3, #1
   d4e20:	e7c0      	b.n	d4da4 <loop+0x140>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e22:	f000 fed3 	bl	d5bcc <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4e26:	b1e0      	cbz	r0, d4e62 <loop+0x1fe>
	StringSumHelper(const String &s) : String(s) {}
   d4e28:	4d22      	ldr	r5, [pc, #136]	; (d4eb4 <loop+0x250>)
   d4e2a:	a803      	add	r0, sp, #12
   d4e2c:	4629      	mov	r1, r5
   d4e2e:	f001 fd74 	bl	d691a <_ZN6StringC1ERKS_>
          eda1Report = eda1Report + "\"}";
   d4e32:	493c      	ldr	r1, [pc, #240]	; (d4f24 <loop+0x2c0>)
   d4e34:	a803      	add	r0, sp, #12
   d4e36:	f001 fdd8 	bl	d69ea <_ZplRK15StringSumHelperPKc>
   d4e3a:	4601      	mov	r1, r0
   d4e3c:	4628      	mov	r0, r5
   d4e3e:	f001 fd5d 	bl	d68fc <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4e42:	a803      	add	r0, sp, #12
   d4e44:	f001 fcde 	bl	d6804 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e48:	4b37      	ldr	r3, [pc, #220]	; (d4f28 <loop+0x2c4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e4a:	4938      	ldr	r1, [pc, #224]	; (d4f2c <loop+0x2c8>)
   d4e4c:	781b      	ldrb	r3, [r3, #0]
   d4e4e:	f88d 3000 	strb.w	r3, [sp]
   d4e52:	a803      	add	r0, sp, #12
   d4e54:	682a      	ldr	r2, [r5, #0]
   d4e56:	233c      	movs	r3, #60	; 0x3c
   d4e58:	f001 f8dc 	bl	d6014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e5c:	a804      	add	r0, sp, #16
   d4e5e:	f7ff feeb 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        eda1Report = "{ \"EDA1\": \"";
   d4e62:	4933      	ldr	r1, [pc, #204]	; (d4f30 <loop+0x2cc>)
   d4e64:	4813      	ldr	r0, [pc, #76]	; (d4eb4 <loop+0x250>)
   d4e66:	f001 fd6b 	bl	d6940 <_ZN6StringaSEPKc>
        reportTurnCounter = 3;
   d4e6a:	2303      	movs	r3, #3
        reportTurnCounter = 1;
   d4e6c:	7023      	strb	r3, [r4, #0]
}
   d4e6e:	e7ab      	b.n	d4dc8 <loop+0x164>
        computeSummaryReport();
   d4e70:	f7ff fd4e 	bl	d4910 <_Z20computeSummaryReportv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e74:	f000 feaa 	bl	d5bcc <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4e78:	b168      	cbz	r0, d4e96 <loop+0x232>
   d4e7a:	4b2b      	ldr	r3, [pc, #172]	; (d4f28 <loop+0x2c4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e7c:	4a2d      	ldr	r2, [pc, #180]	; (d4f34 <loop+0x2d0>)
   d4e7e:	781b      	ldrb	r3, [r3, #0]
   d4e80:	f88d 3000 	strb.w	r3, [sp]
   d4e84:	a803      	add	r0, sp, #12
   d4e86:	6812      	ldr	r2, [r2, #0]
   d4e88:	492b      	ldr	r1, [pc, #172]	; (d4f38 <loop+0x2d4>)
   d4e8a:	233c      	movs	r3, #60	; 0x3c
   d4e8c:	f001 f8c2 	bl	d6014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4e90:	a804      	add	r0, sp, #16
   d4e92:	f7ff fed1 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        summaryReport = "";
   d4e96:	4929      	ldr	r1, [pc, #164]	; (d4f3c <loop+0x2d8>)
   d4e98:	4826      	ldr	r0, [pc, #152]	; (d4f34 <loop+0x2d0>)
   d4e9a:	f001 fd51 	bl	d6940 <_ZN6StringaSEPKc>
        reportTurnCounter = 1;
   d4e9e:	2301      	movs	r3, #1
   d4ea0:	e7e4      	b.n	d4e6c <loop+0x208>
   d4ea2:	bf00      	nop
   d4ea4:	2003e3cc 	.word	0x2003e3cc
   d4ea8:	2003e4f8 	.word	0x2003e4f8
   d4eac:	2003e490 	.word	0x2003e490
   d4eb0:	2003e4d4 	.word	0x2003e4d4
   d4eb4:	2003e4d8 	.word	0x2003e4d8
   d4eb8:	2003e448 	.word	0x2003e448
   d4ebc:	2003e484 	.word	0x2003e484
   d4ec0:	2003e488 	.word	0x2003e488
   d4ec4:	2003e48c 	.word	0x2003e48c
   d4ec8:	2003e504 	.word	0x2003e504
   d4ecc:	2003e508 	.word	0x2003e508
   d4ed0:	2003e50c 	.word	0x2003e50c
   d4ed4:	2003e4d0 	.word	0x2003e4d0
   d4ed8:	2003e4cc 	.word	0x2003e4cc
   d4edc:	2003e55c 	.word	0x2003e55c
   d4ee0:	2003e590 	.word	0x2003e590
   d4ee4:	2003e3cd 	.word	0x2003e3cd
   d4ee8:	2003e496 	.word	0x2003e496
   d4eec:	2003e4c4 	.word	0x2003e4c4
   d4ef0:	2003e580 	.word	0x2003e580
   d4ef4:	2003e554 	.word	0x2003e554
   d4ef8:	2003e584 	.word	0x2003e584
   d4efc:	2003e564 	.word	0x2003e564
   d4f00:	2003e3ce 	.word	0x2003e3ce
   d4f04:	2003e4c8 	.word	0x2003e4c8
   d4f08:	2003e588 	.word	0x2003e588
   d4f0c:	2003e558 	.word	0x2003e558
   d4f10:	2003e58c 	.word	0x2003e58c
   d4f14:	2003e4ac 	.word	0x2003e4ac
   d4f18:	2003e4fc 	.word	0x2003e4fc
   d4f1c:	2003e53c 	.word	0x2003e53c
   d4f20:	2003e500 	.word	0x2003e500
   d4f24:	000d939d 	.word	0x000d939d
   d4f28:	2003e480 	.word	0x2003e480
   d4f2c:	000d93a0 	.word	0x000d93a0
   d4f30:	000d93a5 	.word	0x000d93a5
   d4f34:	2003e568 	.word	0x2003e568
   d4f38:	000d93b1 	.word	0x000d93b1
   d4f3c:	000d93e6 	.word	0x000d93e6
   d4f40:	2003e578 	.word	0x2003e578
   d4f44:	2003e57c 	.word	0x2003e57c

000d4f48 <_GLOBAL__sub_I_reportTurnCounter>:
      delay(500);
    }else{
      initialized = true;
    }
  }
   d4f48:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d4f4a:	4b18      	ldr	r3, [pc, #96]	; (d4fac <_GLOBAL__sub_I_reportTurnCounter+0x64>)
String eda1Report = "";
   d4f4c:	4d18      	ldr	r5, [pc, #96]	; (d4fb0 <_GLOBAL__sub_I_reportTurnCounter+0x68>)
   d4f4e:	4e19      	ldr	r6, [pc, #100]	; (d4fb4 <_GLOBAL__sub_I_reportTurnCounter+0x6c>)
   d4f50:	4c19      	ldr	r4, [pc, #100]	; (d4fb8 <_GLOBAL__sub_I_reportTurnCounter+0x70>)
   d4f52:	2201      	movs	r2, #1
   d4f54:	701a      	strb	r2, [r3, #0]
   d4f56:	4629      	mov	r1, r5
   d4f58:	4630      	mov	r0, r6
   d4f5a:	f001 fc9e 	bl	d689a <_ZN6StringC1EPKc>
   d4f5e:	4630      	mov	r0, r6
String eda2Report = "";
   d4f60:	4e16      	ldr	r6, [pc, #88]	; (d4fbc <_GLOBAL__sub_I_reportTurnCounter+0x74>)
String eda1Report = "";
   d4f62:	4a17      	ldr	r2, [pc, #92]	; (d4fc0 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4f64:	4621      	mov	r1, r4
   d4f66:	f002 fa11 	bl	d738c <__aeabi_atexit>
String eda2Report = "";
   d4f6a:	4629      	mov	r1, r5
   d4f6c:	4630      	mov	r0, r6
   d4f6e:	f001 fc94 	bl	d689a <_ZN6StringC1EPKc>
   d4f72:	4630      	mov	r0, r6
String summaryReport = "";
   d4f74:	4e13      	ldr	r6, [pc, #76]	; (d4fc4 <_GLOBAL__sub_I_reportTurnCounter+0x7c>)
String eda2Report = "";
   d4f76:	4a12      	ldr	r2, [pc, #72]	; (d4fc0 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4f78:	4621      	mov	r1, r4
   d4f7a:	f002 fa07 	bl	d738c <__aeabi_atexit>
String summaryReport = "";
   d4f7e:	4629      	mov	r1, r5
   d4f80:	4630      	mov	r0, r6
   d4f82:	f001 fc8a 	bl	d689a <_ZN6StringC1EPKc>
   d4f86:	4621      	mov	r1, r4
   d4f88:	4a0d      	ldr	r2, [pc, #52]	; (d4fc0 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4f8a:	4630      	mov	r0, r6
   d4f8c:	f002 f9fe 	bl	d738c <__aeabi_atexit>
ICM_20948_I2C ICM;
   d4f90:	480d      	ldr	r0, [pc, #52]	; (d4fc8 <_GLOBAL__sub_I_reportTurnCounter+0x80>)
   d4f92:	f000 fbad 	bl	d56f0 <_ZN13ICM_20948_I2CC1Ev>
Adafruit_ADS1115 ads_other(0x48);
   d4f96:	2148      	movs	r1, #72	; 0x48
   d4f98:	480c      	ldr	r0, [pc, #48]	; (d4fcc <_GLOBAL__sub_I_reportTurnCounter+0x84>)
   d4f9a:	f000 f8f8 	bl	d518e <_ZN16Adafruit_ADS1115C1Eh>
   d4f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_ADS1115 ads_eda(0x49);
   d4fa2:	480b      	ldr	r0, [pc, #44]	; (d4fd0 <_GLOBAL__sub_I_reportTurnCounter+0x88>)
   d4fa4:	2149      	movs	r1, #73	; 0x49
   d4fa6:	f000 b8f2 	b.w	d518e <_ZN16Adafruit_ADS1115C1Eh>
   d4faa:	bf00      	nop
   d4fac:	2003e480 	.word	0x2003e480
   d4fb0:	000d93e6 	.word	0x000d93e6
   d4fb4:	2003e4d8 	.word	0x2003e4d8
   d4fb8:	000d6805 	.word	0x000d6805
   d4fbc:	2003e4e8 	.word	0x2003e4e8
   d4fc0:	2003e444 	.word	0x2003e444
   d4fc4:	2003e568 	.word	0x2003e568
   d4fc8:	2003e448 	.word	0x2003e448
   d4fcc:	2003e496 	.word	0x2003e496
   d4fd0:	2003e490 	.word	0x2003e490

000d4fd4 <_Z13initializeIMUv>:
void initializeIMU(){
   d4fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ICM.begin( Wire, AD0_VAL );
   d4fd6:	4d14      	ldr	r5, [pc, #80]	; (d5028 <_Z13initializeIMUv+0x54>)
    Serial.print( F("Initialization of the sensor returned: ") );
   d4fd8:	4e14      	ldr	r6, [pc, #80]	; (d502c <_Z13initializeIMUv+0x58>)
    Serial.println( ICM.statusString() );
   d4fda:	1d2f      	adds	r7, r5, #4
    ICM.begin( Wire, AD0_VAL );
   d4fdc:	f002 f840 	bl	d7060 <_Z19__fetch_global_Wirev>
   d4fe0:	23ff      	movs	r3, #255	; 0xff
   d4fe2:	2200      	movs	r2, #0
   d4fe4:	4601      	mov	r1, r0
   d4fe6:	4810      	ldr	r0, [pc, #64]	; (d5028 <_Z13initializeIMUv+0x54>)
   d4fe8:	f000 fc2c 	bl	d5844 <_ZN13ICM_20948_I2C5beginER7TwoWirebh>
    Serial.print( F("Initialization of the sensor returned: ") );
   d4fec:	f001 fe54 	bl	d6c98 <_Z16_fetch_usbserialv>
   d4ff0:	4631      	mov	r1, r6
   d4ff2:	f001 fb9c 	bl	d672e <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println( ICM.statusString() );
   d4ff6:	f001 fe4f 	bl	d6c98 <_Z16_fetch_usbserialv>
   d4ffa:	2108      	movs	r1, #8
   d4ffc:	4604      	mov	r4, r0
   d4ffe:	4638      	mov	r0, r7
   d5000:	f000 fae4 	bl	d55cc <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>
   d5004:	4601      	mov	r1, r0
   d5006:	4620      	mov	r0, r4
   d5008:	f001 fba1 	bl	d674e <_ZN5Print7printlnEPKc>
    if( ICM.status != ICM_20948_Stat_Ok ){
   d500c:	f895 3020 	ldrb.w	r3, [r5, #32]
   d5010:	b14b      	cbz	r3, d5026 <_Z13initializeIMUv+0x52>
      Serial.println( "Trying again..." );
   d5012:	f001 fe41 	bl	d6c98 <_Z16_fetch_usbserialv>
   d5016:	4906      	ldr	r1, [pc, #24]	; (d5030 <_Z13initializeIMUv+0x5c>)
   d5018:	f001 fb99 	bl	d674e <_ZN5Print7printlnEPKc>
      delay(500);
   d501c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5020:	f000 fe7c 	bl	d5d1c <delay>
   d5024:	e7da      	b.n	d4fdc <_Z13initializeIMUv+0x8>
   d5026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5028:	2003e448 	.word	0x2003e448
   d502c:	000d93bf 	.word	0x000d93bf
   d5030:	000d93e7 	.word	0x000d93e7

000d5034 <setup>:
void setup() {
   d5034:	b538      	push	{r3, r4, r5, lr}
  Wire.begin();
   d5036:	f002 f813 	bl	d7060 <_Z19__fetch_global_Wirev>
   d503a:	f001 f9e1 	bl	d6400 <_ZN7TwoWire5beginEv>
  Wire.setClock(400000);  //The IMU is capped at the 400khz level
   d503e:	f002 f80f 	bl	d7060 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d5042:	4927      	ldr	r1, [pc, #156]	; (d50e0 <setup+0xac>)
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d5044:	4d27      	ldr	r5, [pc, #156]	; (d50e4 <setup+0xb0>)
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d5046:	4c28      	ldr	r4, [pc, #160]	; (d50e8 <setup+0xb4>)
   d5048:	f001 f9d6 	bl	d63f8 <_ZN7TwoWire8setSpeedEm>
  initializeIMU();  // ***This will become blocking when we add the Rev3 sleep code ***
   d504c:	f7ff ffc2 	bl	d4fd4 <_Z13initializeIMUv>
  pinMode(TC1,INPUT);  //Local temp compensation PTC resistors from the thermopile assemblies
   d5050:	2100      	movs	r1, #0
   d5052:	2012      	movs	r0, #18
   d5054:	f001 ffaa 	bl	d6fac <pinMode>
  pinMode(TC2,INPUT);
   d5058:	2100      	movs	r1, #0
   d505a:	2011      	movs	r0, #17
   d505c:	f001 ffa6 	bl	d6fac <pinMode>
  pinMode(eda1_out,OUTPUT);  //To send voltage out into the hand
   d5060:	2101      	movs	r1, #1
   d5062:	2005      	movs	r0, #5
   d5064:	f001 ffa2 	bl	d6fac <pinMode>
  pinMode(eda2_out,OUTPUT);
   d5068:	2101      	movs	r1, #1
   d506a:	2004      	movs	r0, #4
   d506c:	f001 ff9e 	bl	d6fac <pinMode>
  pinMode(led_on,OUTPUT);  //To turn the pulse LED on
   d5070:	2101      	movs	r1, #1
   d5072:	2007      	movs	r0, #7
   d5074:	f001 ff9a 	bl	d6fac <pinMode>
  pinMode(slp,OUTPUT);  //To turn off much of the board functionality when not in use
   d5078:	2101      	movs	r1, #1
   d507a:	2008      	movs	r0, #8
   d507c:	f001 ff96 	bl	d6fac <pinMode>
  digitalWrite(eda1_out,HIGH);  //On constant for now, later only have this on sometimes to prevent shorts
   d5080:	2101      	movs	r1, #1
   d5082:	2005      	movs	r0, #5
   d5084:	f001 ffa3 	bl	d6fce <digitalWrite>
  digitalWrite(eda2_out,HIGH);
   d5088:	2101      	movs	r1, #1
   d508a:	2004      	movs	r0, #4
   d508c:	f001 ff9f 	bl	d6fce <digitalWrite>
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d5090:	2100      	movs	r1, #0
   d5092:	4628      	mov	r0, r5
   d5094:	f000 f889 	bl	d51aa <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d5098:	f44f 7100 	mov.w	r1, #512	; 0x200
   d509c:	4620      	mov	r0, r4
   d509e:	f000 f884 	bl	d51aa <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_other.begin();
   d50a2:	4628      	mov	r0, r5
   d50a4:	f000 f87a 	bl	d519c <_ZN16Adafruit_ADS10155beginEv>
  ads_eda.begin();
   d50a8:	4620      	mov	r0, r4
   d50aa:	f000 f877 	bl	d519c <_ZN16Adafruit_ADS10155beginEv>
  digitalWrite(led_on,HIGH);  //For now this is on all the time.  Doesn't seem to work well with the library if partiall off.
   d50ae:	2101      	movs	r1, #1
   d50b0:	2007      	movs	r0, #7
   d50b2:	f001 ff8c 	bl	d6fce <digitalWrite>
  PulseSensorAmped.attach(PULSE_SIGNAL_PIN);
   d50b6:	210f      	movs	r1, #15
   d50b8:	480c      	ldr	r0, [pc, #48]	; (d50ec <setup+0xb8>)
   d50ba:	f000 f8ed 	bl	d5298 <_ZN21PulseSensorAmpedClass6attachEi>
  PulseSensorAmped.start();  //Start reading heart beats
   d50be:	480b      	ldr	r0, [pc, #44]	; (d50ec <setup+0xb8>)
   d50c0:	f000 f8f2 	bl	d52a8 <_ZN21PulseSensorAmpedClass5startEv>
   d50c4:	f000 fc14 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
  reportTimer = millis();  //Timer to avoid sending reports more than once per second (Particle cap)
   d50c8:	4b09      	ldr	r3, [pc, #36]	; (d50f0 <setup+0xbc>)
   d50ca:	6018      	str	r0, [r3, #0]
   d50cc:	f000 fc10 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
  edaReadTimer = millis();  //Timer to rate limit EDA readings to the Particle publishing size cap (622 bytes)
   d50d0:	4b08      	ldr	r3, [pc, #32]	; (d50f4 <setup+0xc0>)
   d50d2:	6018      	str	r0, [r3, #0]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d50d4:	f000 fc04 	bl	d58e0 <HAL_Timer_Get_Micro_Seconds>
  otherReadTimer = micros();  //Timer to rate limit the other ADS signals to the max rate of the ADS1115
   d50d8:	4b07      	ldr	r3, [pc, #28]	; (d50f8 <setup+0xc4>)
   d50da:	6018      	str	r0, [r3, #0]
}
   d50dc:	bd38      	pop	{r3, r4, r5, pc}
   d50de:	bf00      	nop
   d50e0:	00061a80 	.word	0x00061a80
   d50e4:	2003e496 	.word	0x2003e496
   d50e8:	2003e490 	.word	0x2003e490
   d50ec:	2003e590 	.word	0x2003e590
   d50f0:	2003e564 	.word	0x2003e564
   d50f4:	2003e4f8 	.word	0x2003e4f8
   d50f8:	2003e55c 	.word	0x2003e55c

000d50fc <_ZL8i2cwriteh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
    @param x byte to write
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
   d50fc:	b507      	push	{r0, r1, r2, lr}
   d50fe:	9001      	str	r0, [sp, #4]
#if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d5100:	f001 ffae 	bl	d7060 <_Z19__fetch_global_Wirev>
   d5104:	6803      	ldr	r3, [r0, #0]
   d5106:	9901      	ldr	r1, [sp, #4]
   d5108:	689b      	ldr	r3, [r3, #8]
#else
  Wire.send(x);
#endif
}
   d510a:	b003      	add	sp, #12
   d510c:	f85d eb04 	ldr.w	lr, [sp], #4
  Wire.write((uint8_t)x);
   d5110:	4718      	bx	r3

000d5112 <_ZL7i2creadv>:
static uint8_t i2cread(void) {
   d5112:	b508      	push	{r3, lr}
  return Wire.read();
   d5114:	f001 ffa4 	bl	d7060 <_Z19__fetch_global_Wirev>
   d5118:	6803      	ldr	r3, [r0, #0]
   d511a:	695b      	ldr	r3, [r3, #20]
   d511c:	4798      	blx	r3
}
   d511e:	b2c0      	uxtb	r0, r0
   d5120:	bd08      	pop	{r3, pc}

000d5122 <_ZL13writeRegisterhht>:
    @param i2cAddress I2C address of device
    @param reg register address to write to
    @param value value to write to register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
   d5122:	b570      	push	{r4, r5, r6, lr}
   d5124:	4606      	mov	r6, r0
   d5126:	4614      	mov	r4, r2
   d5128:	460d      	mov	r5, r1
  Wire.beginTransmission(i2cAddress);
   d512a:	f001 ff99 	bl	d7060 <_Z19__fetch_global_Wirev>
   d512e:	4631      	mov	r1, r6
   d5130:	f001 f998 	bl	d6464 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
   d5134:	4628      	mov	r0, r5
   d5136:	f7ff ffe1 	bl	d50fc <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value >> 8));
   d513a:	0a20      	lsrs	r0, r4, #8
   d513c:	f7ff ffde 	bl	d50fc <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
   d5140:	b2e0      	uxtb	r0, r4
   d5142:	f7ff ffdb 	bl	d50fc <_ZL8i2cwriteh>
  Wire.endTransmission();
   d5146:	f001 ff8b 	bl	d7060 <_Z19__fetch_global_Wirev>
}
   d514a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d514e:	f001 b991 	b.w	d6474 <_ZN7TwoWire15endTransmissionEv>

000d5152 <_ZL12readRegisterhh.constprop.0>:
    @param i2cAddress I2C address of device
    @param reg register address to read from
    @return 16 bit register value read
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
   d5152:	b513      	push	{r0, r1, r4, lr}
   d5154:	9001      	str	r0, [sp, #4]
  Wire.beginTransmission(i2cAddress);
   d5156:	f001 ff83 	bl	d7060 <_Z19__fetch_global_Wirev>
   d515a:	9901      	ldr	r1, [sp, #4]
   d515c:	f001 f982 	bl	d6464 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(reg);
   d5160:	2000      	movs	r0, #0
   d5162:	f7ff ffcb 	bl	d50fc <_ZL8i2cwriteh>
  Wire.endTransmission();
   d5166:	f001 ff7b 	bl	d7060 <_Z19__fetch_global_Wirev>
   d516a:	f001 f983 	bl	d6474 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
   d516e:	f001 ff77 	bl	d7060 <_Z19__fetch_global_Wirev>
   d5172:	9901      	ldr	r1, [sp, #4]
   d5174:	2202      	movs	r2, #2
   d5176:	f001 f972 	bl	d645e <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());
   d517a:	f7ff ffca 	bl	d5112 <_ZL7i2creadv>
   d517e:	4604      	mov	r4, r0
   d5180:	f7ff ffc7 	bl	d5112 <_ZL7i2creadv>
   d5184:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
   d5188:	b280      	uxth	r0, r0
   d518a:	b002      	add	sp, #8
   d518c:	bd10      	pop	{r4, pc}

000d518e <_ZN16Adafruit_ADS1115C1Eh>:
/**************************************************************************/
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
  m_conversionDelay = ADS1015_CONVERSIONDELAY;
  m_bitShift = 4;
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d518e:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
    @param i2cAddress I2C address of device
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
   d5190:	7001      	strb	r1, [r0, #0]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d5192:	2102      	movs	r1, #2
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5194:	8082      	strh	r2, [r0, #4]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d5196:	7041      	strb	r1, [r0, #1]
  m_bitShift = 0;
   d5198:	7082      	strb	r2, [r0, #2]
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d519a:	4770      	bx	lr

000d519c <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() { Wire.begin(); }
   d519c:	b508      	push	{r3, lr}
   d519e:	f001 ff5f 	bl	d7060 <_Z19__fetch_global_Wirev>
   d51a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d51a6:	f001 b92b 	b.w	d6400 <_ZN7TwoWire5beginEv>

000d51aa <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
/*!
    @brief  Sets the gain and input voltage range
    @param gain gain setting to use
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain) { m_gain = gain; }
   d51aa:	8081      	strh	r1, [r0, #4]
   d51ac:	4770      	bx	lr

000d51ae <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
    @param channel ADC channel to read
    @return the ADC reading
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3) {
   d51ae:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
   d51b0:	b510      	push	{r4, lr}
   d51b2:	4604      	mov	r4, r0
  if (channel > 3) {
   d51b4:	d822      	bhi.n	d51fc <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel) {
   d51b6:	2902      	cmp	r1, #2
  config |= m_gain;
   d51b8:	8882      	ldrh	r2, [r0, #4]
  switch (channel) {
   d51ba:	d019      	beq.n	d51f0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
   d51bc:	2903      	cmp	r1, #3
   d51be:	d01a      	beq.n	d51f6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
   d51c0:	2901      	cmp	r1, #1
  case (0):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
   d51c2:	bf14      	ite	ne
   d51c4:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
    break;
  case (1):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d51c8:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
    break;
  case (2):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    break;
  case (3):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d51cc:	f042 0243 	orr.w	r2, r2, #67	; 0x43

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d51d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   d51d4:	2101      	movs	r1, #1
   d51d6:	7820      	ldrb	r0, [r4, #0]
   d51d8:	f7ff ffa3 	bl	d5122 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d51dc:	7860      	ldrb	r0, [r4, #1]
   d51de:	f000 fd9d 	bl	d5d1c <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d51e2:	7820      	ldrb	r0, [r4, #0]
   d51e4:	f7ff ffb5 	bl	d5152 <_ZL12readRegisterhh.constprop.0>
   d51e8:	78a3      	ldrb	r3, [r4, #2]
   d51ea:	4118      	asrs	r0, r3
   d51ec:	b280      	uxth	r0, r0
}
   d51ee:	bd10      	pop	{r4, pc}
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d51f0:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
   d51f4:	e7ea      	b.n	d51cc <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d51f6:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
   d51fa:	e7e7      	b.n	d51cc <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
   d51fc:	2000      	movs	r0, #0
   d51fe:	e7f6      	b.n	d51ee <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

000d5200 <_Z5timerj>:
    // Timer Event 
    //if (NRF_TIMER4->EVENTS_COMPARE[0] != 0)
    PulseSensorAmped.update();
}

void timer(unsigned ms) {
   d5200:	b5f0      	push	{r4, r5, r6, r7, lr}

    // Set priority as high as possible.
    timer_config.interrupt_priority = 3;

    // Init the timer
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5202:	4c21      	ldr	r4, [pc, #132]	; (d5288 <_Z5timerj+0x88>)
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d5204:	4921      	ldr	r1, [pc, #132]	; (d528c <_Z5timerj+0x8c>)
void timer(unsigned ms) {
   d5206:	b085      	sub	sp, #20
   d5208:	4605      	mov	r5, r0
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d520a:	2201      	movs	r2, #1
   d520c:	201b      	movs	r0, #27
   d520e:	f001 f934 	bl	d647a <_Z21attachInterruptDirect9IRQn_TypePFvvEb>
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d5212:	2600      	movs	r6, #0
   d5214:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5218:	4a1d      	ldr	r2, [pc, #116]	; (d5290 <_Z5timerj+0x90>)
   d521a:	a902      	add	r1, sp, #8
   d521c:	4620      	mov	r0, r4
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d521e:	e9cd 3602 	strd	r3, r6, [sp, #8]
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5222:	f001 ff6d 	bl	d7100 <nrfx_timer_init>
    // if( err_code != NRF_SUCCESS ) Log.error("nrfx_timer_error");

    // Disable and clear the timer.
    nrfx_timer_disable(&timer4);
   d5226:	4620      	mov	r0, r4
   d5228:	f002 f844 	bl	d72b4 <nrfx_timer_disable>
    nrfx_timer_clear(&timer4);
   d522c:	4620      	mov	r0, r4
   d522e:	f002 f85b 	bl	d72e8 <nrfx_timer_clear>

    // Calculate the ticks for 50 uS
    uint32_t ticks = nrfx_timer_us_to_ticks(&timer4,ms*1000);
   d5232:	6823      	ldr	r3, [r4, #0]
                              TIMER_PRESCALER_PRESCALER_Msk);
}

__STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type * p_reg)
{
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
   d5234:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   d5238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                                               nrf_timer_frequency_t frequency)
{
    // The "frequency" parameter here is actually the prescaler value, and the
    // timer runs at the following frequency: f = 16 MHz / 2^prescaler.
    uint32_t prescaler = (uint32_t)frequency;
    uint64_t ticks = ((time_us * 16ULL) >> prescaler);
   d523c:	b2db      	uxtb	r3, r3
   d523e:	fb02 f005 	mul.w	r0, r2, r5
   d5242:	0f02      	lsrs	r2, r0, #28
   d5244:	f1c3 0720 	rsb	r7, r3, #32
   d5248:	0100      	lsls	r0, r0, #4
   d524a:	f1a3 0120 	sub.w	r1, r3, #32
   d524e:	fa20 f403 	lsr.w	r4, r0, r3
   d5252:	fa02 f707 	lsl.w	r7, r2, r7
   d5256:	433c      	orrs	r4, r7
   d5258:	fa22 f101 	lsr.w	r1, r2, r1
   d525c:	fa22 f503 	lsr.w	r5, r2, r3
   d5260:	430c      	orrs	r4, r1
    NRFX_ASSERT(ticks <= UINT32_MAX);
   d5262:	2d01      	cmp	r5, #1
   d5264:	bf08      	it	eq
   d5266:	2c00      	cmpeq	r4, #0
   d5268:	d304      	bcc.n	d5274 <_Z5timerj+0x74>
   d526a:	4a0a      	ldr	r2, [pc, #40]	; (d5294 <_Z5timerj+0x94>)
   d526c:	4631      	mov	r1, r6
   d526e:	200a      	movs	r0, #10
   d5270:	f000 fc70 	bl	d5b54 <panic_>

    // Set the compare for the start and the end
    nrfx_timer_extended_compare(&timer4, NRF_TIMER_CC_CHANNEL0, ticks, NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK, true);
   d5274:	2301      	movs	r3, #1
   d5276:	4804      	ldr	r0, [pc, #16]	; (d5288 <_Z5timerj+0x88>)
   d5278:	9300      	str	r3, [sp, #0]
   d527a:	4622      	mov	r2, r4
   d527c:	2100      	movs	r1, #0
   d527e:	f002 f864 	bl	d734a <nrfx_timer_extended_compare>
}
   d5282:	b005      	add	sp, #20
   d5284:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5286:	bf00      	nop
   d5288:	2003e3d0 	.word	0x2003e3d0
   d528c:	000d7379 	.word	0x000d7379
   d5290:	000d54b1 	.word	0x000d54b1
   d5294:	000d58d1 	.word	0x000d58d1

000d5298 <_ZN21PulseSensorAmpedClass6attachEi>:
}                     
                                                                                                                                                                                                                                                                              
// Configure the sensor
void PulseSensorAmpedClass::attach(int pin) {
  // Do not allow analog pin to change
  if(analogPin==-1) {
   d5298:	6803      	ldr	r3, [r0, #0]
   d529a:	3301      	adds	r3, #1
    analogPin = pin;
   d529c:	bf08      	it	eq
   d529e:	6001      	streq	r1, [r0, #0]
  }
  timer(2); // Enable a 2ms timer.
   d52a0:	2002      	movs	r0, #2
   d52a2:	f7ff bfad 	b.w	d5200 <_Z5timerj>
	...

000d52a8 <_ZN21PulseSensorAmpedClass5startEv>:
}

void PulseSensorAmpedClass::start(void) {
   d52a8:	b510      	push	{r4, lr}
  // Only allow the sensor to start/stop if the pin is configured
  // Start TIMER (If pin configured)
  if(analogPin != -1)
   d52aa:	6803      	ldr	r3, [r0, #0]
   d52ac:	3301      	adds	r3, #1
void PulseSensorAmpedClass::start(void) {
   d52ae:	4604      	mov	r4, r0
  if(analogPin != -1)
   d52b0:	d002      	beq.n	d52b8 <_ZN21PulseSensorAmpedClass5startEv+0x10>
      nrfx_timer_enable(&timer4);
   d52b2:	480c      	ldr	r0, [pc, #48]	; (d52e4 <_ZN21PulseSensorAmpedClass5startEv+0x3c>)
   d52b4:	f001 ffe0 	bl	d7278 <nrfx_timer_enable>

  // Re-initialize variables:
  sampleCounter = 0;
  lastBeatTime = 0; 
  peak = 512;
   d52b8:	f44f 7200 	mov.w	r2, #512	; 0x200
  trough = 512;
   d52bc:	e9c4 2206 	strd	r2, r2, [r4, #24]
  thresh = 525;
  amplitude = 100;
   d52c0:	f240 210d 	movw	r1, #525	; 0x20d
   d52c4:	2264      	movs	r2, #100	; 0x64
   d52c6:	e9c4 1208 	strd	r1, r2, [r4, #32]
  IBI = 600;
   d52ca:	f44f 7216 	mov.w	r2, #600	; 0x258
  sampleCounter = 0;
   d52ce:	2300      	movs	r3, #0
  IBI = 600;
   d52d0:	60e2      	str	r2, [r4, #12]
  pulse = false;
   d52d2:	f44f 7280 	mov.w	r2, #256	; 0x100
  lastBeatTime = 0; 
   d52d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  pulse = false;
   d52da:	8522      	strh	r2, [r4, #40]	; 0x28
  pulseLost = true;
  beatCount = 0;
   d52dc:	62e3      	str	r3, [r4, #44]	; 0x2c
  postUpdate = false;
   d52de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d52e2:	bd10      	pop	{r4, pc}
   d52e4:	2003e3d0 	.word	0x2003e3d0

000d52e8 <_ZN21PulseSensorAmpedClass6updateEv>:
  postUpdate = false;
}



void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d52e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned rate[10];                         // array to average IBI values for average rate
  static unsigned beatCount = 0;

  if(fakeData) {
   d52ea:	7903      	ldrb	r3, [r0, #4]
void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d52ec:	4604      	mov	r4, r0
  if(fakeData) {
   d52ee:	b313      	cbz	r3, d5336 <_ZN21PulseSensorAmpedClass6updateEv+0x4e>
    // Send an update once per second
    if(beatCount >= 500) {
   d52f0:	4d6b      	ldr	r5, [pc, #428]	; (d54a0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d52f2:	682b      	ldr	r3, [r5, #0]
   d52f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d52f8:	d30c      	bcc.n	d5314 <_ZN21PulseSensorAmpedClass6updateEv+0x2c>
       if(random(100)<2) {
   d52fa:	2064      	movs	r0, #100	; 0x64
   d52fc:	f001 fa4f 	bl	d679e <_Z6randomi>
   d5300:	2801      	cmp	r0, #1
   d5302:	dc0b      	bgt.n	d531c <_ZN21PulseSensorAmpedClass6updateEv+0x34>
         BPM = -1;
   d5304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
       } else {
        IBI = random(770,1100);
        BPM = 60000/IBI;        
   d5308:	60a3      	str	r3, [r4, #8]
       }
       postUpdate = true;
   d530a:	2301      	movs	r3, #1
   d530c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
       beatCount = 0;
   d5310:	2300      	movs	r3, #0
   d5312:	602b      	str	r3, [r5, #0]
    }
    beatCount++;
   d5314:	682b      	ldr	r3, [r5, #0]
   d5316:	3301      	adds	r3, #1
   d5318:	602b      	str	r3, [r5, #0]
    trough = signal;                 // set T default
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
    pulseLost = true;
    beatCount = 0;
  }
}
   d531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        IBI = random(770,1100);
   d531c:	f240 414c 	movw	r1, #1100	; 0x44c
   d5320:	f240 3002 	movw	r0, #770	; 0x302
   d5324:	f001 fa46 	bl	d67b4 <_Z6randomii>
   d5328:	60e0      	str	r0, [r4, #12]
        BPM = 60000/IBI;        
   d532a:	68e2      	ldr	r2, [r4, #12]
   d532c:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5330:	fbb3 f3f2 	udiv	r3, r3, r2
   d5334:	e7e8      	b.n	d5308 <_ZN21PulseSensorAmpedClass6updateEv+0x20>
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d5336:	4d5b      	ldr	r5, [pc, #364]	; (d54a4 <_ZN21PulseSensorAmpedClass6updateEv+0x1bc>)
    hal_adc_set_sample_time(sample_time);
}

inline int32_t __attribute__((deprecated("Use hal_adc_read() instead"), always_inline))
HAL_ADC_Read(pin_t pin) {
    return hal_adc_read(pin);
   d5338:	8800      	ldrh	r0, [r0, #0]
   d533a:	f000 fb01 	bl	d5940 <hal_adc_read>
   d533e:	4a5a      	ldr	r2, [pc, #360]	; (d54a8 <_ZN21PulseSensorAmpedClass6updateEv+0x1c0>)
   d5340:	682b      	ldr	r3, [r5, #0]
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d5342:	6926      	ldr	r6, [r4, #16]
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d5344:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  filterIndex = (filterIndex+1)%5;
   d5348:	2105      	movs	r1, #5
   d534a:	3301      	adds	r3, #1
   d534c:	fbb3 f0f1 	udiv	r0, r3, r1
   d5350:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5354:	1a1b      	subs	r3, r3, r0
   d5356:	602b      	str	r3, [r5, #0]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d5358:	e9d2 3500 	ldrd	r3, r5, [r2]
   d535c:	441d      	add	r5, r3
   d535e:	6893      	ldr	r3, [r2, #8]
   d5360:	441d      	add	r5, r3
   d5362:	68d3      	ldr	r3, [r2, #12]
   d5364:	441d      	add	r5, r3
   d5366:	6913      	ldr	r3, [r2, #16]
  if(signal < thresh) {         // Update trough based on threshold
   d5368:	6a22      	ldr	r2, [r4, #32]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d536a:	441d      	add	r5, r3
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d536c:	6963      	ldr	r3, [r4, #20]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d536e:	fbb5 f5f1 	udiv	r5, r5, r1
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d5372:	3602      	adds	r6, #2
  if(signal < thresh) {         // Update trough based on threshold
   d5374:	4295      	cmp	r5, r2
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d5376:	6126      	str	r6, [r4, #16]
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d5378:	eba6 0603 	sub.w	r6, r6, r3
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d537c:	68e3      	ldr	r3, [r4, #12]
   d537e:	fbb3 f3f1 	udiv	r3, r3, r1
   d5382:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if(signal < thresh) {         // Update trough based on threshold
   d5386:	da23      	bge.n	d53d0 <_ZN21PulseSensorAmpedClass6updateEv+0xe8>
    if(beyondDicrotic) {       // avoid dicrotic noise when finding trough
   d5388:	429e      	cmp	r6, r3
   d538a:	d904      	bls.n	d5396 <_ZN21PulseSensorAmpedClass6updateEv+0xae>
      trough = min(signal, trough);
   d538c:	69e3      	ldr	r3, [r4, #28]
   d538e:	42ab      	cmp	r3, r5
   d5390:	bfd4      	ite	le
   d5392:	61e3      	strle	r3, [r4, #28]
   d5394:	61e5      	strgt	r5, [r4, #28]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d5396:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d539a:	2b00      	cmp	r3, #0
   d539c:	d05f      	beq.n	d545e <_ZN21PulseSensorAmpedClass6updateEv+0x176>
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d539e:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d53a2:	1a9b      	subs	r3, r3, r2
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d53a4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   d53a8:	eb02 0261 	add.w	r2, r2, r1, asr #1
    trough = thresh;                          // Trough won't update until beyond threshold
   d53ac:	e9c4 2206 	strd	r2, r2, [r4, #24]
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d53b0:	6222      	str	r2, [r4, #32]
    if(amplitude>300)
   d53b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    pulse = false;                            // Update status
   d53b6:	f04f 0200 	mov.w	r2, #0
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d53ba:	6263      	str	r3, [r4, #36]	; 0x24
    pulse = false;                            // Update status
   d53bc:	8522      	strh	r2, [r4, #40]	; 0x28
    if(amplitude>300)
   d53be:	dd02      	ble.n	d53c6 <_ZN21PulseSensorAmpedClass6updateEv+0xde>
      postUpdate = true;
   d53c0:	2301      	movs	r3, #1
   d53c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d53c6:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d53ca:	429e      	cmp	r6, r3
   d53cc:	d84f      	bhi.n	d546e <_ZN21PulseSensorAmpedClass6updateEv+0x186>
   d53ce:	e7a4      	b.n	d531a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    peak = max(signal, peak);  
   d53d0:	69a1      	ldr	r1, [r4, #24]
   d53d2:	42a9      	cmp	r1, r5
   d53d4:	bfac      	ite	ge
   d53d6:	61a1      	strge	r1, [r4, #24]
   d53d8:	61a5      	strlt	r5, [r4, #24]
  if(elapsedTime > 250){                         // Assume at least 250ms between beats (i.e., BPM<240); Helps avoid noise
   d53da:	2efa      	cmp	r6, #250	; 0xfa
   d53dc:	d99d      	bls.n	d531a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if((signal > thresh) && (pulse == false) && beyondDicrotic) {        
   d53de:	4295      	cmp	r5, r2
   d53e0:	dd3d      	ble.n	d545e <_ZN21PulseSensorAmpedClass6updateEv+0x176>
   d53e2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   d53e6:	2a00      	cmp	r2, #0
   d53e8:	d136      	bne.n	d5458 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
   d53ea:	429e      	cmp	r6, r3
   d53ec:	d934      	bls.n	d5458 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
      pulse = true;
   d53ee:	2301      	movs	r3, #1
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS (Starting from point the threshold is exceeded)
   d53f0:	60e6      	str	r6, [r4, #12]
      calculateHRV(IBI);
   d53f2:	68e0      	ldr	r0, [r4, #12]
      pulse = true;
   d53f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      calculateHRV(IBI);
   d53f8:	f7ff fa1e 	bl	d4838 <_Z12calculateHRVi>
      rate[beatCount%10] = IBI;
   d53fc:	4928      	ldr	r1, [pc, #160]	; (d54a0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
      lastBeatTime = sampleCounter;               // keep track of the start time of this beat
   d53fe:	6923      	ldr	r3, [r4, #16]
   d5400:	6163      	str	r3, [r4, #20]
      rate[beatCount%10] = IBI;
   d5402:	680b      	ldr	r3, [r1, #0]
   d5404:	4f29      	ldr	r7, [pc, #164]	; (d54ac <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d5406:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   d540a:	200a      	movs	r0, #10
   d540c:	fbb3 f2f0 	udiv	r2, r3, r0
   d5410:	fb00 3212 	mls	r2, r0, r2, r3
      beatCount++;
   d5414:	3301      	adds	r3, #1
      if(beatCount<3) {
   d5416:	2b02      	cmp	r3, #2
      rate[beatCount%10] = IBI;
   d5418:	f847 c022 	str.w	ip, [r7, r2, lsl #2]
      beatCount++;
   d541c:	600b      	str	r3, [r1, #0]
      if(beatCount<3) {
   d541e:	f67f af7c 	bls.w	d531a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
      } else if(beatCount==3) {
   d5422:	2b03      	cmp	r3, #3
        rate[0]=(rate[1]+rate[2])/2;  
   d5424:	bf01      	itttt	eq
   d5426:	e9d7 2101 	ldrdeq	r2, r1, [r7, #4]
   d542a:	1852      	addeq	r2, r2, r1
   d542c:	0852      	lsreq	r2, r2, #1
   d542e:	603a      	streq	r2, [r7, #0]
      int maxIndex = min(beatCount, 10);      
   d5430:	481e      	ldr	r0, [pc, #120]	; (d54ac <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d5432:	2b0a      	cmp	r3, #10
      word runningTotal = 0;
   d5434:	f04f 0200 	mov.w	r2, #0
      int maxIndex = min(beatCount, 10);      
   d5438:	bf28      	it	cs
   d543a:	230a      	movcs	r3, #10
      for(int i=0; i<maxIndex; i++) {
   d543c:	4611      	mov	r1, r2
        runningTotal += rate[i];              
   d543e:	f850 7b04 	ldr.w	r7, [r0], #4
      for(int i=0; i<maxIndex; i++) {
   d5442:	3101      	adds	r1, #1
   d5444:	428b      	cmp	r3, r1
        runningTotal += rate[i];              
   d5446:	443a      	add	r2, r7
      for(int i=0; i<maxIndex; i++) {
   d5448:	dcf9      	bgt.n	d543e <_ZN21PulseSensorAmpedClass6updateEv+0x156>
      runningTotal /= maxIndex;               // average the last 10 IBI values 
   d544a:	fbb2 f3f3 	udiv	r3, r2, r3
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
   d544e:	f64e 2260 	movw	r2, #60000	; 0xea60
   d5452:	fbb2 f3f3 	udiv	r3, r2, r3
   d5456:	60a3      	str	r3, [r4, #8]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d5458:	6a23      	ldr	r3, [r4, #32]
   d545a:	429d      	cmp	r5, r3
   d545c:	db9b      	blt.n	d5396 <_ZN21PulseSensorAmpedClass6updateEv+0xae>
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d545e:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d5462:	429e      	cmp	r6, r3
   d5464:	f67f af59 	bls.w	d531a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if(!pulseLost) {                       // If it was good, notify the loss
   d5468:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d546c:	b92b      	cbnz	r3, d547a <_ZN21PulseSensorAmpedClass6updateEv+0x192>
      BPM = -1;
   d546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5472:	60a3      	str	r3, [r4, #8]
      postUpdate = true;
   d5474:	2301      	movs	r3, #1
   d5476:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    thresh = trough + (peak-trough)/3;  // set thresh default
   d547a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d547e:	2103      	movs	r1, #3
   d5480:	1a9b      	subs	r3, r3, r2
   d5482:	fb93 f3f1 	sdiv	r3, r3, r1
   d5486:	4413      	add	r3, r2
   d5488:	6223      	str	r3, [r4, #32]
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
   d548a:	6923      	ldr	r3, [r4, #16]
   d548c:	6163      	str	r3, [r4, #20]
    pulseLost = true;
   d548e:	2301      	movs	r3, #1
   d5490:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    beatCount = 0;
   d5494:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d5496:	2200      	movs	r2, #0
    trough = signal;                 // set T default
   d5498:	e9c4 5506 	strd	r5, r5, [r4, #24]
    beatCount = 0;
   d549c:	601a      	str	r2, [r3, #0]
   d549e:	e73c      	b.n	d531a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
   d54a0:	2003e604 	.word	0x2003e604
   d54a4:	2003e5c4 	.word	0x2003e5c4
   d54a8:	2003e5c8 	.word	0x2003e5c8
   d54ac:	2003e5dc 	.word	0x2003e5dc

000d54b0 <_Z9timer_isr17nrf_timer_event_tPv>:
    PulseSensorAmped.update();
   d54b0:	4801      	ldr	r0, [pc, #4]	; (d54b8 <_Z9timer_isr17nrf_timer_event_tPv+0x8>)
   d54b2:	f7ff bf19 	b.w	d52e8 <_ZN21PulseSensorAmpedClass6updateEv>
   d54b6:	bf00      	nop
   d54b8:	2003e590 	.word	0x2003e590

000d54bc <_ZN21PulseSensorAmpedClass7processEv>:

void PulseSensorAmpedClass::process(void) {
   d54bc:	b510      	push	{r4, lr}
  // Put updates into foreground
  if(postUpdate) {
   d54be:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void PulseSensorAmpedClass::process(void) {
   d54c2:	4604      	mov	r4, r0
  if(postUpdate) {
   d54c4:	b14b      	cbz	r3, d54da <_ZN21PulseSensorAmpedClass7processEv+0x1e>
    if(BPM>=0)
   d54c6:	6883      	ldr	r3, [r0, #8]
   d54c8:	2b00      	cmp	r3, #0
   d54ca:	db07      	blt.n	d54dc <_ZN21PulseSensorAmpedClass7processEv+0x20>
      PulseSensorAmped_data(BPM, IBI);
   d54cc:	6880      	ldr	r0, [r0, #8]
   d54ce:	68e1      	ldr	r1, [r4, #12]
   d54d0:	f7ff f9aa 	bl	d4828 <_Z21PulseSensorAmped_dataii>
    else 
      PulseSensorAmped_lost();	         
    postUpdate = false;
   d54d4:	2300      	movs	r3, #0
   d54d6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  } 
}
   d54da:	bd10      	pop	{r4, pc}
      PulseSensorAmped_lost();	         
   d54dc:	f7ff fa14 	bl	d4908 <_Z21PulseSensorAmped_lostv>
   d54e0:	e7f8      	b.n	d54d4 <_ZN21PulseSensorAmpedClass7processEv+0x18>
	...

000d54e4 <_GLOBAL__sub_I_PulseSensorAmped>:
  analogPin = -1;
   d54e4:	4b03      	ldr	r3, [pc, #12]	; (d54f4 <_GLOBAL__sub_I_PulseSensorAmped+0x10>)
   d54e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d54ea:	601a      	str	r2, [r3, #0]
  fakeData = false;
   d54ec:	2200      	movs	r2, #0
   d54ee:	711a      	strb	r2, [r3, #4]
}
   d54f0:	4770      	bx	lr
   d54f2:	bf00      	nop
   d54f4:	2003e590 	.word	0x2003e590

000d54f8 <_Z19ICM_20948_write_I2ChPhmPv>:
    return ICM_20948_Stat_Ok;
}

// serif functions for the I2C and SPI classes
ICM_20948_Status_e ICM_20948_write_I2C(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
   d54f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d54fa:	4606      	mov	r6, r0
   d54fc:	460d      	mov	r5, r1
   d54fe:	9201      	str	r2, [sp, #4]
    if (user == NULL)
   d5500:	b1bb      	cbz	r3, d5532 <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c; // Cast user field to ICM_20948_I2C type and extract the I2C interface pointer
   d5502:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d5504:	b1ac      	cbz	r4, d5532 <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d5506:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   d550a:	4620      	mov	r0, r4
   d550c:	f000 ffaa 	bl	d6464 <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d5510:	6823      	ldr	r3, [r4, #0]
   d5512:	4631      	mov	r1, r6
   d5514:	689b      	ldr	r3, [r3, #8]
   d5516:	4620      	mov	r0, r4
   d5518:	4798      	blx	r3
    _i2c->write(data, len);
   d551a:	6823      	ldr	r3, [r4, #0]
   d551c:	9a01      	ldr	r2, [sp, #4]
   d551e:	68db      	ldr	r3, [r3, #12]
   d5520:	4629      	mov	r1, r5
   d5522:	4620      	mov	r0, r4
   d5524:	4798      	blx	r3
    _i2c->endTransmission();
   d5526:	4620      	mov	r0, r4
   d5528:	f000 ffa4 	bl	d6474 <_ZN7TwoWire15endTransmissionEv>
    //     delay(10);
    // }

    // delay(10);

    return ICM_20948_Stat_Ok;
   d552c:	2000      	movs	r0, #0
}
   d552e:	b002      	add	sp, #8
   d5530:	bd70      	pop	{r4, r5, r6, pc}
        return ICM_20948_Stat_ParamErr;
   d5532:	2003      	movs	r0, #3
   d5534:	e7fb      	b.n	d552e <_Z19ICM_20948_write_I2ChPhmPv+0x36>

000d5536 <_Z18ICM_20948_read_I2ChPhmPv>:

ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
   d5536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d553a:	4607      	mov	r7, r0
   d553c:	460e      	mov	r6, r1
   d553e:	4615      	mov	r5, r2
    if (user == NULL)
   d5540:	b32b      	cbz	r3, d558e <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c;
   d5542:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d5544:	b31c      	cbz	r4, d558e <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
   d5546:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d554a:	4620      	mov	r0, r4
   d554c:	4641      	mov	r1, r8
   d554e:	f000 ff89 	bl	d6464 <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d5552:	6823      	ldr	r3, [r4, #0]
   d5554:	4639      	mov	r1, r7
   d5556:	689b      	ldr	r3, [r3, #8]
   d5558:	4620      	mov	r0, r4
   d555a:	4798      	blx	r3
    _i2c->endTransmission(false); // Send repeated start
   d555c:	2100      	movs	r1, #0
   d555e:	4620      	mov	r0, r4
   d5560:	f000 ff84 	bl	d646c <_ZN7TwoWire15endTransmissionEh>

    uint32_t offset = 0;
    uint32_t num_received = _i2c->requestFrom(addr, len);
   d5564:	462a      	mov	r2, r5
   d5566:	4641      	mov	r1, r8
   d5568:	4620      	mov	r0, r4
   d556a:	f000 ff78 	bl	d645e <_ZN7TwoWire11requestFromEhj>
    //     }else{
    //         break;
    //     }
    // }

    if (num_received == len)
   d556e:	4285      	cmp	r5, r0
   d5570:	d110      	bne.n	d5594 <_Z18ICM_20948_read_I2ChPhmPv+0x5e>
   d5572:	2700      	movs	r7, #0
    {
        for (uint8_t i = 0; i < len; i++)
   d5574:	fa5f f887 	uxtb.w	r8, r7
   d5578:	4545      	cmp	r5, r8
   d557a:	f107 0701 	add.w	r7, r7, #1
   d557e:	d90b      	bls.n	d5598 <_Z18ICM_20948_read_I2ChPhmPv+0x62>
        {
            buff[i] = _i2c->read();
   d5580:	6823      	ldr	r3, [r4, #0]
   d5582:	4620      	mov	r0, r4
   d5584:	695b      	ldr	r3, [r3, #20]
   d5586:	4798      	blx	r3
   d5588:	f806 0008 	strb.w	r0, [r6, r8]
        for (uint8_t i = 0; i < len; i++)
   d558c:	e7f2      	b.n	d5574 <_Z18ICM_20948_read_I2ChPhmPv+0x3e>
        return ICM_20948_Stat_ParamErr;
   d558e:	2003      	movs	r0, #3
    if (len != 0)
    {
        return ICM_20948_Stat_NoData;
    }
    return ICM_20948_Stat_Ok;
}
   d5590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ICM_20948_Stat_NoData;
   d5594:	2006      	movs	r0, #6
   d5596:	e7fb      	b.n	d5590 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>
        return ICM_20948_Stat_Ok;
   d5598:	2000      	movs	r0, #0
   d559a:	e7f9      	b.n	d5590 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>

000d559c <_ZN9ICM_209487getAGMTEv>:
{
   d559c:	b570      	push	{r4, r5, r6, lr}
   d559e:	460c      	mov	r4, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
   d55a0:	1d0d      	adds	r5, r1, #4
{
   d55a2:	4606      	mov	r6, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
   d55a4:	4629      	mov	r1, r5
   d55a6:	4620      	mov	r0, r4
   d55a8:	f7ff f8a5 	bl	d46f6 <ICM_20948_get_agmt>
   d55ac:	f804 0f1c 	strb.w	r0, [r4, #28]!
    return agmt;
   d55b0:	462b      	mov	r3, r5
   d55b2:	4635      	mov	r5, r6
   d55b4:	461a      	mov	r2, r3
   d55b6:	ca03      	ldmia	r2!, {r0, r1}
   d55b8:	42a2      	cmp	r2, r4
   d55ba:	6028      	str	r0, [r5, #0]
   d55bc:	6069      	str	r1, [r5, #4]
   d55be:	4613      	mov	r3, r2
   d55c0:	f105 0508 	add.w	r5, r5, #8
   d55c4:	d1f6      	bne.n	d55b4 <_ZN9ICM_209487getAGMTEv+0x18>
}
   d55c6:	4630      	mov	r0, r6
   d55c8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d55cc <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>:
    if (stat == ICM_20948_Stat_NUM)
   d55cc:	2908      	cmp	r1, #8
        val = status;
   d55ce:	bf08      	it	eq
   d55d0:	7f01      	ldrbeq	r1, [r0, #28]
    switch (val)
   d55d2:	2907      	cmp	r1, #7
   d55d4:	bf9a      	itte	ls
   d55d6:	4b02      	ldrls	r3, [pc, #8]	; (d55e0 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x14>)
   d55d8:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
   d55dc:	4801      	ldrhi	r0, [pc, #4]	; (d55e4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x18>)
}
   d55de:	4770      	bx	lr
   d55e0:	000d9480 	.word	0x000d9480
   d55e4:	000d93f7 	.word	0x000d93f7

000d55e8 <_ZN9ICM_209487swResetEv>:
{
   d55e8:	b510      	push	{r4, lr}
   d55ea:	4604      	mov	r4, r0
    status = ICM_20948_sw_reset(&_device);
   d55ec:	f7fe fe33 	bl	d4256 <ICM_20948_sw_reset>
   d55f0:	7720      	strb	r0, [r4, #28]
}
   d55f2:	bd10      	pop	{r4, pc}

000d55f4 <_ZN9ICM_209485sleepEb>:
{
   d55f4:	b510      	push	{r4, lr}
   d55f6:	4604      	mov	r4, r0
    status = ICM_20948_sleep(&_device, on);
   d55f8:	f7fe fe47 	bl	d428a <ICM_20948_sleep>
   d55fc:	7720      	strb	r0, [r4, #28]
}
   d55fe:	bd10      	pop	{r4, pc}

000d5600 <_ZN9ICM_209488lowPowerEb>:
{
   d5600:	b510      	push	{r4, lr}
   d5602:	4604      	mov	r4, r0
    status = ICM_20948_low_power(&_device, on);
   d5604:	f7fe fe5c 	bl	d42c0 <ICM_20948_low_power>
   d5608:	7720      	strb	r0, [r4, #28]
}
   d560a:	bd10      	pop	{r4, pc}

000d560c <_ZN9ICM_209487checkIDEv>:
{
   d560c:	b510      	push	{r4, lr}
   d560e:	4604      	mov	r4, r0
    status = ICM_20948_check_id(&_device);
   d5610:	f7fe fe82 	bl	d4318 <ICM_20948_check_id>
   d5614:	7720      	strb	r0, [r4, #28]
}
   d5616:	bd10      	pop	{r4, pc}

000d5618 <_ZN9ICM_2094813setSampleModeEhh>:
{
   d5618:	b510      	push	{r4, lr}
   d561a:	4604      	mov	r4, r0
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
   d561c:	f7fe fe8d 	bl	d433a <ICM_20948_set_sample_mode>
   d5620:	7720      	strb	r0, [r4, #28]
}
   d5622:	bd10      	pop	{r4, pc}

000d5624 <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>:
{
   d5624:	b510      	push	{r4, lr}
   d5626:	4604      	mov	r4, r0
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
   d5628:	f7fe febb 	bl	d43a2 <ICM_20948_set_full_scale>
   d562c:	7720      	strb	r0, [r4, #28]
}
   d562e:	bd10      	pop	{r4, pc}

000d5630 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>:
{
   d5630:	b513      	push	{r0, r1, r4, lr}
   d5632:	f8ad 2004 	strh.w	r2, [sp, #4]
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5636:	9a01      	ldr	r2, [sp, #4]
{
   d5638:	4604      	mov	r4, r0
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d563a:	f7fe fefe 	bl	d443a <ICM_20948_set_dlpf_cfg>
   d563e:	7720      	strb	r0, [r4, #28]
}
   d5640:	b002      	add	sp, #8
   d5642:	bd10      	pop	{r4, pc}

000d5644 <_ZN9ICM_2094810enableDLPFEhb>:
{
   d5644:	b510      	push	{r4, lr}
   d5646:	4604      	mov	r4, r0
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
   d5648:	f7fe ff44 	bl	d44d4 <ICM_20948_enable_dlpf>
   d564c:	7720      	strb	r0, [r4, #28]
}
   d564e:	bd10      	pop	{r4, pc}

000d5650 <_ZN9ICM_2094820i2cMasterPassthroughEb>:
{
   d5650:	b510      	push	{r4, lr}
   d5652:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
   d5654:	f7fe ff88 	bl	d4568 <ICM_20948_i2c_master_passthrough>
   d5658:	7720      	strb	r0, [r4, #28]
}
   d565a:	bd10      	pop	{r4, pc}

000d565c <_ZN9ICM_2094815i2cMasterEnableEb>:
{
   d565c:	b510      	push	{r4, lr}
   d565e:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_enable(&_device, enable);
   d5660:	f7fe ff9e 	bl	d45a0 <ICM_20948_i2c_master_enable>
   d5664:	7720      	strb	r0, [r4, #28]
}
   d5666:	bd10      	pop	{r4, pc}

000d5668 <_ZN9ICM_2094814i2cMasterResetEv>:
{
   d5668:	b510      	push	{r4, lr}
   d566a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_reset(&_device);
   d566c:	f7fe ffd4 	bl	d4618 <ICM_20948_i2c_master_reset>
   d5670:	7720      	strb	r0, [r4, #28]
}
   d5672:	bd10      	pop	{r4, pc}

000d5674 <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>:
{
   d5674:	b530      	push	{r4, r5, lr}
   d5676:	b087      	sub	sp, #28
   d5678:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
   d567a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
   d567e:	9505      	str	r5, [sp, #20]
   d5680:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   d5684:	9504      	str	r5, [sp, #16]
   d5686:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d568a:	9503      	str	r5, [sp, #12]
   d568c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d5690:	9502      	str	r5, [sp, #8]
   d5692:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5696:	9501      	str	r5, [sp, #4]
   d5698:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   d569c:	9500      	str	r5, [sp, #0]
   d569e:	f7fe ffd6 	bl	d464e <ICM_20948_i2c_master_configure_slave>
   d56a2:	7720      	strb	r0, [r4, #28]
}
   d56a4:	b007      	add	sp, #28
   d56a6:	bd30      	pop	{r4, r5, pc}

000d56a8 <_ZN9ICM_2094816i2cMasterSingleWEhhh>:
{
   d56a8:	b513      	push	{r0, r1, r4, lr}
   d56aa:	f88d 3007 	strb.w	r3, [sp, #7]
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d56ae:	f10d 0307 	add.w	r3, sp, #7
{
   d56b2:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d56b4:	f7fe fdbb 	bl	d422e <ICM_20948_i2c_master_single_w>
   d56b8:	7720      	strb	r0, [r4, #28]
}
   d56ba:	b002      	add	sp, #8
   d56bc:	bd10      	pop	{r4, pc}

000d56be <_ZN9ICM_2094816i2cMasterSingleREhh>:
{
   d56be:	b513      	push	{r0, r1, r4, lr}
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d56c0:	f10d 0307 	add.w	r3, sp, #7
{
   d56c4:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d56c6:	f7fe fdbd 	bl	d4244 <ICM_20948_i2c_master_single_r>
   d56ca:	7720      	strb	r0, [r4, #28]
}
   d56cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d56d0:	b002      	add	sp, #8
   d56d2:	bd10      	pop	{r4, pc}

000d56d4 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>:
{
   d56d4:	460a      	mov	r2, r1
    uint8_t data = i2cMasterSingleR(MAG_AK09916_I2C_ADDR, reg);
   d56d6:	210c      	movs	r1, #12
   d56d8:	f7ff bff1 	b.w	d56be <_ZN9ICM_2094816i2cMasterSingleREhh>

000d56dc <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>:
{
   d56dc:	b510      	push	{r4, lr}
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d56de:	7813      	ldrb	r3, [r2, #0]
   d56e0:	460a      	mov	r2, r1
   d56e2:	210c      	movs	r1, #12
{
   d56e4:	4604      	mov	r4, r0
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d56e6:	f7ff ffdf 	bl	d56a8 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
   d56ea:	7720      	strb	r0, [r4, #28]
}
   d56ec:	bd10      	pop	{r4, pc}
	...

000d56f0 <_ZN13ICM_20948_I2CC1Ev>:
ICM_20948_I2C::ICM_20948_I2C()
   d56f0:	4b01      	ldr	r3, [pc, #4]	; (d56f8 <_ZN13ICM_20948_I2CC1Ev+0x8>)
   d56f2:	6003      	str	r3, [r0, #0]
}
   d56f4:	4770      	bx	lr
   d56f6:	bf00      	nop
   d56f8:	000d94a8 	.word	0x000d94a8

000d56fc <_ZN9ICM_209489magWhoIAmEv>:
{
   d56fc:	b538      	push	{r3, r4, r5, lr}
    whoiam1 = readMag(AK09916_REG_WIA1);
   d56fe:	2100      	movs	r1, #0
{
   d5700:	4604      	mov	r4, r0
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5702:	f7ff ffe7 	bl	d56d4 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    whoiam2 = readMag(AK09916_REG_WIA2);
   d5706:	2101      	movs	r1, #1
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5708:	4605      	mov	r5, r0
    whoiam2 = readMag(AK09916_REG_WIA2);
   d570a:	4620      	mov	r0, r4
   d570c:	f7ff ffe2 	bl	d56d4 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
   d5710:	2d48      	cmp	r5, #72	; 0x48
   d5712:	d104      	bne.n	d571e <_ZN9ICM_209489magWhoIAmEv+0x22>
   d5714:	2809      	cmp	r0, #9
   d5716:	d102      	bne.n	d571e <_ZN9ICM_209489magWhoIAmEv+0x22>
    status = retval;
   d5718:	2000      	movs	r0, #0
    status = retval;
   d571a:	7720      	strb	r0, [r4, #28]
}
   d571c:	bd38      	pop	{r3, r4, r5, pc}
    status = retval;
   d571e:	2004      	movs	r0, #4
   d5720:	e7fb      	b.n	d571a <_ZN9ICM_209489magWhoIAmEv+0x1e>

000d5722 <_ZN9ICM_2094819startupMagnetometerEv>:
{
   d5722:	b530      	push	{r4, r5, lr}
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5724:	2100      	movs	r1, #0
{
   d5726:	b089      	sub	sp, #36	; 0x24
   d5728:	4604      	mov	r4, r0
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d572a:	f7ff ff91 	bl	d5650 <_ZN9ICM_2094820i2cMasterPassthroughEb>
    i2cMasterEnable(true);
   d572e:	2101      	movs	r1, #1
   d5730:	4620      	mov	r0, r4
   d5732:	f7ff ff93 	bl	d565c <_ZN9ICM_2094815i2cMasterEnableEb>
   d5736:	2505      	movs	r5, #5
        retval = magWhoIAm();
   d5738:	4620      	mov	r0, r4
   d573a:	f7ff ffdf 	bl	d56fc <_ZN9ICM_209489magWhoIAmEv>
        if (retval == ICM_20948_Stat_Ok)
   d573e:	b158      	cbz	r0, d5758 <_ZN9ICM_2094819startupMagnetometerEv+0x36>
        i2cMasterReset(); //Otherwise, reset the master I2C and try again
   d5740:	4620      	mov	r0, r4
   d5742:	3d01      	subs	r5, #1
   d5744:	f7ff ff90 	bl	d5668 <_ZN9ICM_2094814i2cMasterResetEv>
    while (tries < maxTries)
   d5748:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d574c:	d1f4      	bne.n	d5738 <_ZN9ICM_2094819startupMagnetometerEv+0x16>
        status = ICM_20948_Stat_WrongID;
   d574e:	2004      	movs	r0, #4
   d5750:	e01f      	b.n	d5792 <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    return status;
   d5752:	7f20      	ldrb	r0, [r4, #28]
}
   d5754:	b009      	add	sp, #36	; 0x24
   d5756:	bd30      	pop	{r4, r5, pc}
    reg.MODE = AK09916_mode_cont_100hz;
   d5758:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d575c:	2208      	movs	r2, #8
   d575e:	f362 0304 	bfi	r3, r2, #0, #5
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5762:	2131      	movs	r1, #49	; 0x31
   d5764:	aa07      	add	r2, sp, #28
   d5766:	4620      	mov	r0, r4
    reg.MODE = AK09916_mode_cont_100hz;
   d5768:	f88d 301c 	strb.w	r3, [sp, #28]
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d576c:	f7ff ffb6 	bl	d56dc <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>
    if (retval != ICM_20948_Stat_Ok)
   d5770:	b978      	cbnz	r0, d5792 <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    retval = i2cMasterConfigureSlave(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false);
   d5772:	2301      	movs	r3, #1
   d5774:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d5778:	2309      	movs	r3, #9
   d577a:	e9cd 0004 	strd	r0, r0, [sp, #16]
   d577e:	9003      	str	r0, [sp, #12]
   d5780:	9300      	str	r3, [sp, #0]
   d5782:	4601      	mov	r1, r0
   d5784:	2310      	movs	r3, #16
   d5786:	220c      	movs	r2, #12
   d5788:	4620      	mov	r0, r4
   d578a:	f7ff ff73 	bl	d5674 <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>
    if (retval != ICM_20948_Stat_Ok)
   d578e:	2800      	cmp	r0, #0
   d5790:	d0df      	beq.n	d5752 <_ZN9ICM_2094819startupMagnetometerEv+0x30>
        status = ICM_20948_Stat_WrongID;
   d5792:	7720      	strb	r0, [r4, #28]
        return status;
   d5794:	e7de      	b.n	d5754 <_ZN9ICM_2094819startupMagnetometerEv+0x32>

000d5796 <_ZN9ICM_2094814startupDefaultEv>:
{
   d5796:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5798:	4605      	mov	r5, r0
    retval = checkID();
   d579a:	f7ff ff37 	bl	d560c <_ZN9ICM_209487checkIDEv>
    if (retval != ICM_20948_Stat_Ok)
   d579e:	4604      	mov	r4, r0
   d57a0:	b118      	cbz	r0, d57aa <_ZN9ICM_2094814startupDefaultEv+0x14>
        status = retval;
   d57a2:	772c      	strb	r4, [r5, #28]
}
   d57a4:	4620      	mov	r0, r4
   d57a6:	b003      	add	sp, #12
   d57a8:	bd30      	pop	{r4, r5, pc}
    retval = swReset();
   d57aa:	4628      	mov	r0, r5
   d57ac:	f7ff ff1c 	bl	d55e8 <_ZN9ICM_209487swResetEv>
    if (retval != ICM_20948_Stat_Ok)
   d57b0:	4604      	mov	r4, r0
   d57b2:	2800      	cmp	r0, #0
   d57b4:	d1f5      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    delay(50);
   d57b6:	2032      	movs	r0, #50	; 0x32
   d57b8:	f000 fab0 	bl	d5d1c <delay>
    retval = sleep(false);
   d57bc:	4621      	mov	r1, r4
   d57be:	4628      	mov	r0, r5
   d57c0:	f7ff ff18 	bl	d55f4 <_ZN9ICM_209485sleepEb>
    if (retval != ICM_20948_Stat_Ok)
   d57c4:	4604      	mov	r4, r0
   d57c6:	2800      	cmp	r0, #0
   d57c8:	d1eb      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = lowPower(false);
   d57ca:	4601      	mov	r1, r0
   d57cc:	4628      	mov	r0, r5
   d57ce:	f7ff ff17 	bl	d5600 <_ZN9ICM_209488lowPowerEb>
    if (retval != ICM_20948_Stat_Ok)
   d57d2:	4604      	mov	r4, r0
   d57d4:	2800      	cmp	r0, #0
   d57d6:	d1e4      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
   d57d8:	4602      	mov	r2, r0
   d57da:	2103      	movs	r1, #3
   d57dc:	4628      	mov	r0, r5
   d57de:	f7ff ff1b 	bl	d5618 <_ZN9ICM_2094813setSampleModeEhh>
    if (retval != ICM_20948_Stat_Ok)
   d57e2:	4604      	mov	r4, r0
   d57e4:	2800      	cmp	r0, #0
   d57e6:	d1dc      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
   d57e8:	f04f 0200 	mov.w	r2, #0
   d57ec:	2103      	movs	r1, #3
   d57ee:	4628      	mov	r0, r5
   d57f0:	f7ff ff18 	bl	d5624 <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
    if (retval != ICM_20948_Stat_Ok)
   d57f4:	4604      	mov	r4, r0
   d57f6:	2800      	cmp	r0, #0
   d57f8:	d1d3      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    dlpcfg.a = acc_d473bw_n499bw;
   d57fa:	f240 7307 	movw	r3, #1799	; 0x707
   d57fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
   d5802:	9a01      	ldr	r2, [sp, #4]
   d5804:	2103      	movs	r1, #3
   d5806:	4628      	mov	r0, r5
   d5808:	f7ff ff12 	bl	d5630 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>
    if (retval != ICM_20948_Stat_Ok)
   d580c:	4604      	mov	r4, r0
   d580e:	2800      	cmp	r0, #0
   d5810:	d1c7      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Acc, false);
   d5812:	4602      	mov	r2, r0
   d5814:	2101      	movs	r1, #1
   d5816:	4628      	mov	r0, r5
   d5818:	f7ff ff14 	bl	d5644 <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d581c:	4604      	mov	r4, r0
   d581e:	2800      	cmp	r0, #0
   d5820:	d1bf      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
   d5822:	4602      	mov	r2, r0
   d5824:	2102      	movs	r1, #2
   d5826:	4628      	mov	r0, r5
   d5828:	f7ff ff0c 	bl	d5644 <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d582c:	4604      	mov	r4, r0
   d582e:	2800      	cmp	r0, #0
   d5830:	d1b7      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = startupMagnetometer();
   d5832:	4628      	mov	r0, r5
   d5834:	f7ff ff75 	bl	d5722 <_ZN9ICM_2094819startupMagnetometerEv>
    if (retval != ICM_20948_Stat_Ok)
   d5838:	4604      	mov	r4, r0
   d583a:	2800      	cmp	r0, #0
   d583c:	d1b1      	bne.n	d57a2 <_ZN9ICM_2094814startupDefaultEv+0xc>
    return status;
   d583e:	7f2c      	ldrb	r4, [r5, #28]
   d5840:	e7b0      	b.n	d57a4 <_ZN9ICM_2094814startupDefaultEv+0xe>
	...

000d5844 <_ZN13ICM_20948_I2C5beginER7TwoWirebh>:
{
   d5844:	b510      	push	{r4, lr}
   d5846:	4604      	mov	r4, r0
   d5848:	4618      	mov	r0, r3
    _ad0 = ad0pin;
   d584a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    _i2c = &wirePort;
   d584e:	6261      	str	r1, [r4, #36]	; 0x24
    _ad0val = ad0val;
   d5850:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if (_ad0val)
   d5854:	b9f2      	cbnz	r2, d5894 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x50>
    _addr = ICM_20948_I2C_ADDR_AD0;
   d5856:	2268      	movs	r2, #104	; 0x68
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5858:	28ff      	cmp	r0, #255	; 0xff
        _addr = ICM_20948_I2C_ADDR_AD1;
   d585a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d585e:	d002      	beq.n	d5866 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x22>
        pinMode(_ad0, OUTPUT);
   d5860:	2101      	movs	r1, #1
   d5862:	f001 fba3 	bl	d6fac <pinMode>
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5866:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   d586a:	28ff      	cmp	r0, #255	; 0xff
   d586c:	d003      	beq.n	d5876 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x32>
        digitalWrite(_ad0, _ad0val);
   d586e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d5872:	f001 fbac 	bl	d6fce <digitalWrite>
    _serif.write = ICM_20948_write_I2C;
   d5876:	4b08      	ldr	r3, [pc, #32]	; (d5898 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x54>)
   d5878:	62e3      	str	r3, [r4, #44]	; 0x2c
    _serif.read = ICM_20948_read_I2C;
   d587a:	4b08      	ldr	r3, [pc, #32]	; (d589c <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x58>)
    _device._serif = &_serif;
   d587c:	4620      	mov	r0, r4
    _serif.user = (void *)this; // refer to yourself in the user field
   d587e:	e9c4 340c 	strd	r3, r4, [r4, #48]	; 0x30
    _device._serif = &_serif;
   d5882:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   d5886:	f840 3f04 	str.w	r3, [r0, #4]!
    status = startupDefault();
   d588a:	f7ff ff84 	bl	d5796 <_ZN9ICM_2094814startupDefaultEv>
   d588e:	f884 0020 	strb.w	r0, [r4, #32]
}
   d5892:	bd10      	pop	{r4, pc}
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5894:	2269      	movs	r2, #105	; 0x69
   d5896:	e7df      	b.n	d5858 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x14>
   d5898:	000d54f9 	.word	0x000d54f9
   d589c:	000d5537 	.word	0x000d5537

000d58a0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <os_mutex_recursive_create+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	00030248 	.word	0x00030248

000d58b0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <os_mutex_recursive_destroy+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	00030248 	.word	0x00030248

000d58c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_RNG_GetRandomNumber+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	685b      	ldr	r3, [r3, #4]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	00030218 	.word	0x00030218

000d58d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_Delay_Microseconds+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	68db      	ldr	r3, [r3, #12]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	00030218 	.word	0x00030218

000d58e0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_Timer_Get_Micro_Seconds+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	691b      	ldr	r3, [r3, #16]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	00030218 	.word	0x00030218

000d58f0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	695b      	ldr	r3, [r3, #20]
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030218 	.word	0x00030218

000d5900 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <HAL_Validate_Pin_Function+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	685b      	ldr	r3, [r3, #4]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	0003022c 	.word	0x0003022c

000d5910 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <HAL_Pin_Mode+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	689b      	ldr	r3, [r3, #8]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	0003022c 	.word	0x0003022c

000d5920 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <HAL_Get_Pin_Mode+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	68db      	ldr	r3, [r3, #12]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	0003022c 	.word	0x0003022c

000d5930 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <HAL_GPIO_Write+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	691b      	ldr	r3, [r3, #16]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	0003022c 	.word	0x0003022c

000d5940 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <hal_adc_read+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	0003022c 	.word	0x0003022c

000d5950 <HAL_Set_Direct_Interrupt_Handler>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
DYNALIB_FN(35, hal_gpio, HAL_Interrupts_Detach_Ext, int(uint16_t, uint8_t, void*))
DYNALIB_FN(36, hal_gpio, HAL_Set_Direct_Interrupt_Handler, int(IRQn_Type irqn, HAL_Direct_Interrupt_Handler handler, uint32_t flags, void* reserved))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b03      	ldr	r3, [pc, #12]	; (d5960 <HAL_Set_Direct_Interrupt_Handler+0x10>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d595a:	9301      	str	r3, [sp, #4]
   d595c:	bd08      	pop	{r3, pc}
   d595e:	0000      	.short	0x0000
   d5960:	0003022c 	.word	0x0003022c

000d5964 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <hal_i2c_set_speed+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	681b      	ldr	r3, [r3, #0]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030228 	.word	0x00030228

000d5974 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <hal_i2c_begin+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	68db      	ldr	r3, [r3, #12]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030228 	.word	0x00030228

000d5984 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <hal_i2c_begin_transmission+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	699b      	ldr	r3, [r3, #24]
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030228 	.word	0x00030228

000d5994 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <hal_i2c_end_transmission+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	69db      	ldr	r3, [r3, #28]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030228 	.word	0x00030228

000d59a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <hal_i2c_write+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	6a1b      	ldr	r3, [r3, #32]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030228 	.word	0x00030228

000d59b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <hal_i2c_available+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030228 	.word	0x00030228

000d59c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <hal_i2c_read+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030228 	.word	0x00030228

000d59d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <hal_i2c_peek+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	00030228 	.word	0x00030228

000d59e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <hal_i2c_flush+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	00030228 	.word	0x00030228

000d59f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <hal_i2c_is_enabled+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030228 	.word	0x00030228

000d5a04 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <hal_i2c_init+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030228 	.word	0x00030228

000d5a14 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <hal_i2c_request_ex+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030228 	.word	0x00030228

000d5a24 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <inet_inet_ntop+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	695b      	ldr	r3, [r3, #20]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030264 	.word	0x00030264

000d5a34 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <netdb_freeaddrinfo+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	689b      	ldr	r3, [r3, #8]
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030268 	.word	0x00030268

000d5a44 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <netdb_getaddrinfo+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	68db      	ldr	r3, [r3, #12]
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030268 	.word	0x00030268

000d5a54 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <hal_spi_init+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	69db      	ldr	r3, [r3, #28]
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030230 	.word	0x00030230

000d5a64 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <hal_spi_is_enabled+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6a1b      	ldr	r3, [r3, #32]
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030230 	.word	0x00030230

000d5a74 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <hal_usart_init+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	681b      	ldr	r3, [r3, #0]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	0003023c 	.word	0x0003023c

000d5a84 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <hal_usart_write+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	68db      	ldr	r3, [r3, #12]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	0003023c 	.word	0x0003023c

000d5a94 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <hal_usart_available+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	691b      	ldr	r3, [r3, #16]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	0003023c 	.word	0x0003023c

000d5aa4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <hal_usart_read+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	695b      	ldr	r3, [r3, #20]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	0003023c 	.word	0x0003023c

000d5ab4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <hal_usart_peek+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	699b      	ldr	r3, [r3, #24]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	0003023c 	.word	0x0003023c

000d5ac4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <hal_usart_flush+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	69db      	ldr	r3, [r3, #28]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	0003023c 	.word	0x0003023c

000d5ad4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <hal_usart_is_enabled+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	6a1b      	ldr	r3, [r3, #32]
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	0003023c 	.word	0x0003023c

000d5ae4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <hal_usart_available_data_for_write+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	0003023c 	.word	0x0003023c

000d5af4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <HAL_USB_USART_Init+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	681b      	ldr	r3, [r3, #0]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	0003024c 	.word	0x0003024c

000d5b04 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <HAL_USB_USART_Available_Data+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	691b      	ldr	r3, [r3, #16]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	0003024c 	.word	0x0003024c

000d5b14 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	695b      	ldr	r3, [r3, #20]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	0003024c 	.word	0x0003024c

000d5b24 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <HAL_USB_USART_Receive_Data+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	699b      	ldr	r3, [r3, #24]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	0003024c 	.word	0x0003024c

000d5b34 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <HAL_USB_USART_Send_Data+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	69db      	ldr	r3, [r3, #28]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	0003024c 	.word	0x0003024c

000d5b44 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <HAL_USB_USART_Flush_Data+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	6a1b      	ldr	r3, [r3, #32]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	0003024c 	.word	0x0003024c

000d5b54 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <panic_+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	00030260 	.word	0x00030260

000d5b64 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <set_system_mode+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	685b      	ldr	r3, [r3, #4]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	00030220 	.word	0x00030220

000d5b74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <system_delay_ms+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	695b      	ldr	r3, [r3, #20]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	00030220 	.word	0x00030220

000d5b84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <application_thread_current+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	00030220 	.word	0x00030220

000d5b94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <application_thread_invoke+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	00030220 	.word	0x00030220

000d5ba4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b03      	ldr	r3, [pc, #12]	; (d5bb4 <system_ctrl_set_app_request_handler+0x10>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5bae:	9301      	str	r3, [sp, #4]
   d5bb0:	bd08      	pop	{r3, pc}
   d5bb2:	0000      	.short	0x0000
   d5bb4:	00030220 	.word	0x00030220

000d5bb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b03      	ldr	r3, [pc, #12]	; (d5bc8 <system_ctrl_set_result+0x10>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5bc2:	9301      	str	r3, [sp, #4]
   d5bc4:	bd08      	pop	{r3, pc}
   d5bc6:	0000      	.short	0x0000
   d5bc8:	00030220 	.word	0x00030220

000d5bcc <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <spark_cloud_flag_connected+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	695b      	ldr	r3, [r3, #20]
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030244 	.word	0x00030244

000d5bdc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <spark_send_event+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	6a1b      	ldr	r3, [r3, #32]
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030244 	.word	0x00030244

000d5bec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030244 	.word	0x00030244

000d5bfc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <network_connect+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	685b      	ldr	r3, [r3, #4]
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030240 	.word	0x00030240

000d5c0c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <network_connecting+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	689b      	ldr	r3, [r3, #8]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030240 	.word	0x00030240

000d5c1c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <network_disconnect+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	68db      	ldr	r3, [r3, #12]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030240 	.word	0x00030240

000d5c2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <network_ready+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	691b      	ldr	r3, [r3, #16]
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030240 	.word	0x00030240

000d5c3c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <network_on+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	695b      	ldr	r3, [r3, #20]
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030240 	.word	0x00030240

000d5c4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <network_off+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	699b      	ldr	r3, [r3, #24]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030240 	.word	0x00030240

000d5c5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <network_listen+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	69db      	ldr	r3, [r3, #28]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	00030240 	.word	0x00030240

000d5c6c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <network_listening+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	6a1b      	ldr	r3, [r3, #32]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	00030240 	.word	0x00030240

000d5c7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <network_set_listen_timeout+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	00030240 	.word	0x00030240

000d5c8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <network_get_listen_timeout+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	00030240 	.word	0x00030240

000d5c9c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <malloc+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	681b      	ldr	r3, [r3, #0]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	0003021c 	.word	0x0003021c

000d5cac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <free+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	685b      	ldr	r3, [r3, #4]
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	0003021c 	.word	0x0003021c

000d5cbc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <realloc+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	689b      	ldr	r3, [r3, #8]
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	0003021c 	.word	0x0003021c

000d5ccc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <vsnprintf+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	0003021c 	.word	0x0003021c

000d5cdc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <abort+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	0003021c 	.word	0x0003021c

000d5cec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <_malloc_r+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	0003021c 	.word	0x0003021c

000d5cfc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <__errno+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	0003021c 	.word	0x0003021c

000d5d0c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <newlib_impure_ptr_callback+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	0003021c 	.word	0x0003021c

000d5d1c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5d1c:	2100      	movs	r1, #0
   d5d1e:	f7ff bf29 	b.w	d5b74 <system_delay_ms>

000d5d22 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5d22:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5d24:	6883      	ldr	r3, [r0, #8]
   d5d26:	4604      	mov	r4, r0
   d5d28:	b90b      	cbnz	r3, d5d2e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5d2a:	f001 fb38 	bl	d739e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5d2e:	68c3      	ldr	r3, [r0, #12]
   d5d30:	4798      	blx	r3
      if (_M_manager)
   d5d32:	68a3      	ldr	r3, [r4, #8]
   d5d34:	b11b      	cbz	r3, d5d3e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d36:	2203      	movs	r2, #3
   d5d38:	4621      	mov	r1, r4
   d5d3a:	4620      	mov	r0, r4
   d5d3c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5d3e:	4620      	mov	r0, r4
   d5d40:	2110      	movs	r1, #16
}
   d5d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5d46:	f001 bb26 	b.w	d7396 <_ZdlPvj>

000d5d4a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5d4a:	b510      	push	{r4, lr}
   d5d4c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5d4e:	6800      	ldr	r0, [r0, #0]
   d5d50:	b108      	cbz	r0, d5d56 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5d52:	f7ff fdad 	bl	d58b0 <os_mutex_recursive_destroy>
    }
   d5d56:	4620      	mov	r0, r4
   d5d58:	bd10      	pop	{r4, pc}

000d5d5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5d5a:	680b      	ldr	r3, [r1, #0]
   d5d5c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5d5e:	b113      	cbz	r3, d5d66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5d60:	685a      	ldr	r2, [r3, #4]
   d5d62:	3201      	adds	r2, #1
   d5d64:	605a      	str	r2, [r3, #4]
      }
   d5d66:	4770      	bx	lr

000d5d68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5d68:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5d6a:	4c06      	ldr	r4, [pc, #24]	; (d5d84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5d6c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5d6e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5d70:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5d72:	f7ff fd95 	bl	d58a0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5d76:	4620      	mov	r0, r4
   d5d78:	4a03      	ldr	r2, [pc, #12]	; (d5d88 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5d7a:	4904      	ldr	r1, [pc, #16]	; (d5d8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5d80:	f001 bb04 	b.w	d738c <__aeabi_atexit>
   d5d84:	2003e608 	.word	0x2003e608
   d5d88:	2003e444 	.word	0x2003e444
   d5d8c:	000d5d4b 	.word	0x000d5d4b

000d5d90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d90:	4770      	bx	lr

000d5d92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5d92:	2000      	movs	r0, #0
   d5d94:	4770      	bx	lr

000d5d96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5d96:	b510      	push	{r4, lr}
   d5d98:	2110      	movs	r1, #16
   d5d9a:	4604      	mov	r4, r0
   d5d9c:	f001 fafb 	bl	d7396 <_ZdlPvj>
   d5da0:	4620      	mov	r0, r4
   d5da2:	bd10      	pop	{r4, pc}

000d5da4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5da4:	b508      	push	{r3, lr}
      { delete this; }
   d5da6:	f7ff fff6 	bl	d5d96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5daa:	bd08      	pop	{r3, pc}

000d5dac <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5dac:	b510      	push	{r4, lr}
      if (_M_manager)
   d5dae:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5db0:	4604      	mov	r4, r0
      if (_M_manager)
   d5db2:	b113      	cbz	r3, d5dba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5db4:	2203      	movs	r2, #3
   d5db6:	4601      	mov	r1, r0
   d5db8:	4798      	blx	r3
    }
   d5dba:	4620      	mov	r0, r4
   d5dbc:	bd10      	pop	{r4, pc}

000d5dbe <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5dbe:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5dc0:	2200      	movs	r2, #0
   d5dc2:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5dc6:	6002      	str	r2, [r0, #0]
   d5dc8:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5dca:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dcc:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5dce:	680c      	ldr	r4, [r1, #0]
   d5dd0:	8085      	strh	r5, [r0, #4]
   d5dd2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dd4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5dd6:	bd30      	pop	{r4, r5, pc}

000d5dd8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5dd8:	b510      	push	{r4, lr}
   d5dda:	4604      	mov	r4, r0
    free((void*)msg_);
   d5ddc:	6800      	ldr	r0, [r0, #0]
   d5dde:	f7ff ff65 	bl	d5cac <free>
}
   d5de2:	4620      	mov	r0, r4
   d5de4:	bd10      	pop	{r4, pc}

000d5de6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5de6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5de8:	68c4      	ldr	r4, [r0, #12]
   d5dea:	b1f4      	cbz	r4, d5e2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5dec:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5dee:	2b02      	cmp	r3, #2
   d5df0:	d103      	bne.n	d5dfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5df2:	f104 000c 	add.w	r0, r4, #12
   d5df6:	f7ff ffef 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5dfa:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5dfc:	b135      	cbz	r5, d5e0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5dfe:	4628      	mov	r0, r5
   d5e00:	f7ff ffd4 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
   d5e04:	2110      	movs	r1, #16
   d5e06:	4628      	mov	r0, r5
   d5e08:	f001 fac5 	bl	d7396 <_ZdlPvj>
   d5e0c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5e0e:	b135      	cbz	r5, d5e1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5e10:	4628      	mov	r0, r5
   d5e12:	f7ff ffcb 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
   d5e16:	2110      	movs	r1, #16
   d5e18:	4628      	mov	r0, r5
   d5e1a:	f001 fabc 	bl	d7396 <_ZdlPvj>
   d5e1e:	4620      	mov	r0, r4
   d5e20:	2114      	movs	r1, #20
   d5e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5e26:	f001 bab6 	b.w	d7396 <_ZdlPvj>
   d5e2a:	bd38      	pop	{r3, r4, r5, pc}

000d5e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e2e:	460e      	mov	r6, r1
   d5e30:	4604      	mov	r4, r0
   d5e32:	f856 3b04 	ldr.w	r3, [r6], #4
   d5e36:	9300      	str	r3, [sp, #0]
   d5e38:	460d      	mov	r5, r1
   d5e3a:	a801      	add	r0, sp, #4
   d5e3c:	4631      	mov	r1, r6
   d5e3e:	f7ff ff8c 	bl	d5d5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e42:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5e44:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5e46:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5e48:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5e4a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5e4c:	2300      	movs	r3, #0
   d5e4e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5e50:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5e52:	f7fe fef1 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e56:	4630      	mov	r0, r6
   d5e58:	f7fe feee 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	2108      	movs	r1, #8
   d5e60:	f001 fa99 	bl	d7396 <_ZdlPvj>
        return p;
    }
   d5e64:	4620      	mov	r0, r4
   d5e66:	b002      	add	sp, #8
   d5e68:	bd70      	pop	{r4, r5, r6, pc}

000d5e6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5e6a:	b513      	push	{r0, r1, r4, lr}
   d5e6c:	460b      	mov	r3, r1
   d5e6e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e70:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5e74:	466c      	mov	r4, sp
   d5e76:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e7a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e7e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e82:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5e86:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e8a:	b002      	add	sp, #8
   d5e8c:	bd10      	pop	{r4, pc}

000d5e8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5e8e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5e90:	b510      	push	{r4, lr}
      if (_M_empty())
   d5e92:	b90a      	cbnz	r2, d5e98 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e94:	f001 fa83 	bl	d739e <_ZSt25__throw_bad_function_callv>
    }
   d5e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e9c:	68c3      	ldr	r3, [r0, #12]
   d5e9e:	4718      	bx	r3

000d5ea0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ea0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5ea2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5ea4:	f100 0110 	add.w	r1, r0, #16
   d5ea8:	f7ff fff1 	bl	d5e8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5eac:	bd08      	pop	{r3, pc}

000d5eae <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5eae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5eb0:	b510      	push	{r4, lr}
      if (_M_empty())
   d5eb2:	b90a      	cbnz	r2, d5eb8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5eb4:	f001 fa73 	bl	d739e <_ZSt25__throw_bad_function_callv>
    }
   d5eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ebc:	68c3      	ldr	r3, [r0, #12]
   d5ebe:	4718      	bx	r3

000d5ec0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ec0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5ec2:	6800      	ldr	r0, [r0, #0]
   d5ec4:	f100 0110 	add.w	r1, r0, #16
   d5ec8:	f7ff fff1 	bl	d5eae <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5ecc:	bd08      	pop	{r3, pc}
	...

000d5ed0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5ed0:	b538      	push	{r3, r4, r5, lr}
   d5ed2:	2300      	movs	r3, #0
   d5ed4:	4604      	mov	r4, r0
   d5ed6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5ed8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5eda:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5edc:	f7fe f8db 	bl	d4096 <_Znwj>
   d5ee0:	b128      	cbz	r0, d5eee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5ee2:	2301      	movs	r3, #1
   d5ee4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5ee8:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5eea:	6003      	str	r3, [r0, #0]
   d5eec:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5eee:	6020      	str	r0, [r4, #0]
	}
   d5ef0:	4620      	mov	r0, r4
   d5ef2:	bd38      	pop	{r3, r4, r5, pc}
   d5ef4:	000d94b4 	.word	0x000d94b4

000d5ef8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5ef8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5efa:	2300      	movs	r3, #0
   d5efc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5efe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5f00:	4604      	mov	r4, r0
   d5f02:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5f04:	b12b      	cbz	r3, d5f12 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5f06:	2202      	movs	r2, #2
   d5f08:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5f0a:	68eb      	ldr	r3, [r5, #12]
   d5f0c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5f0e:	68ab      	ldr	r3, [r5, #8]
   d5f10:	60a3      	str	r3, [r4, #8]
    }
   d5f12:	4620      	mov	r0, r4
   d5f14:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5f18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f1a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5f1c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5f1e:	4668      	mov	r0, sp
   d5f20:	f7ff ff4d 	bl	d5dbe <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5f24:	f04f 0302 	mov.w	r3, #2
   d5f28:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5f2c:	2a00      	cmp	r2, #0
   d5f2e:	d103      	bne.n	d5f38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5f30:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5f34:	2900      	cmp	r1, #0
   d5f36:	d1f7      	bne.n	d5f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5f38:	d125      	bne.n	d5f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5f3a:	f104 050c 	add.w	r5, r4, #12
   d5f3e:	4669      	mov	r1, sp
   d5f40:	4628      	mov	r0, r5
   d5f42:	f7ff ff3c 	bl	d5dbe <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5f46:	f3bf 8f5b 	dmb	ish
   d5f4a:	2301      	movs	r3, #1
   d5f4c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5f4e:	2000      	movs	r0, #0
   d5f50:	f104 0308 	add.w	r3, r4, #8
   d5f54:	f3bf 8f5b 	dmb	ish
   d5f58:	e853 6f00 	ldrex	r6, [r3]
   d5f5c:	e843 0200 	strex	r2, r0, [r3]
   d5f60:	2a00      	cmp	r2, #0
   d5f62:	d1f9      	bne.n	d5f58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5f64:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5f68:	b16e      	cbz	r6, d5f86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5f6a:	f7ff fe0b 	bl	d5b84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5f6e:	b178      	cbz	r0, d5f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5f70:	4629      	mov	r1, r5
   d5f72:	4630      	mov	r0, r6
   d5f74:	f7ff ff8b 	bl	d5e8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5f78:	4630      	mov	r0, r6
   d5f7a:	f7ff ff17 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5f7e:	2110      	movs	r1, #16
   d5f80:	4630      	mov	r0, r6
   d5f82:	f001 fa08 	bl	d7396 <_ZdlPvj>
        p_->setError(std::move(error));
   d5f86:	4668      	mov	r0, sp
   d5f88:	f7ff ff26 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
    }
   d5f8c:	b009      	add	sp, #36	; 0x24
   d5f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f90:	4631      	mov	r1, r6
   d5f92:	a802      	add	r0, sp, #8
   d5f94:	f7ff ffb0 	bl	d5ef8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5f98:	68e0      	ldr	r0, [r4, #12]
   d5f9a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5f9e:	b108      	cbz	r0, d5fa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5fa0:	f003 f8e0 	bl	d9164 <strdup>
        type_(type) {
   d5fa4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5fa6:	2010      	movs	r0, #16
   d5fa8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5fac:	f7fe f873 	bl	d4096 <_Znwj>
   d5fb0:	4605      	mov	r5, r0
   d5fb2:	b1e8      	cbz	r0, d5ff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5fb4:	2700      	movs	r7, #0
   d5fb6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5fb8:	2018      	movs	r0, #24
   d5fba:	f7fe f86c 	bl	d4096 <_Znwj>
   d5fbe:	4604      	mov	r4, r0
   d5fc0:	b188      	cbz	r0, d5fe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5fc2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5fc4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5fc6:	a802      	add	r0, sp, #8
   d5fc8:	f7ff ff4f 	bl	d5e6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fcc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5fce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fd0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5fd2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5fd4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5fd6:	a906      	add	r1, sp, #24
   d5fd8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fda:	60e3      	str	r3, [r4, #12]
   d5fdc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5fe0:	9205      	str	r2, [sp, #20]
   d5fe2:	f7ff feec 	bl	d5dbe <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5fe6:	4b08      	ldr	r3, [pc, #32]	; (d6008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5fe8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5fea:	4b08      	ldr	r3, [pc, #32]	; (d600c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5fec:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5fee:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5ff0:	a806      	add	r0, sp, #24
   d5ff2:	f7ff fef1 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5ff6:	a802      	add	r0, sp, #8
   d5ff8:	f7ff fed8 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5ffc:	2200      	movs	r2, #0
   d5ffe:	4629      	mov	r1, r5
   d6000:	4803      	ldr	r0, [pc, #12]	; (d6010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6002:	f7ff fdc7 	bl	d5b94 <application_thread_invoke>
   d6006:	e7b7      	b.n	d5f78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6008:	000d5ea1 	.word	0x000d5ea1
   d600c:	000d6139 	.word	0x000d6139
   d6010:	000d5d23 	.word	0x000d5d23

000d6014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6018:	b08a      	sub	sp, #40	; 0x28
   d601a:	4605      	mov	r5, r0
   d601c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6020:	460c      	mov	r4, r1
   d6022:	4617      	mov	r7, r2
   d6024:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6026:	f7ff fdd1 	bl	d5bcc <spark_cloud_flag_connected>
   d602a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d602c:	4682      	mov	sl, r0
   d602e:	bb38      	cbnz	r0, d6080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6030:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6034:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6036:	a905      	add	r1, sp, #20
   d6038:	4630      	mov	r0, r6
   d603a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d603e:	f7ff febe 	bl	d5dbe <_ZN8particle5ErrorC1EOS0_>
   d6042:	2014      	movs	r0, #20
   d6044:	f7fe f827 	bl	d4096 <_Znwj>
   d6048:	4604      	mov	r4, r0
   d604a:	b148      	cbz	r0, d6060 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d604c:	2302      	movs	r3, #2
   d604e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6050:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6052:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6056:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6058:	4631      	mov	r1, r6
   d605a:	300c      	adds	r0, #12
   d605c:	f7ff feaf 	bl	d5dbe <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6060:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6062:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6064:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6068:	f7ff ff32 	bl	d5ed0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d606c:	4630      	mov	r0, r6
   d606e:	f7ff feb3 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6072:	a805      	add	r0, sp, #20
   d6074:	f7ff feb0 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6078:	4628      	mov	r0, r5
   d607a:	b00a      	add	sp, #40	; 0x28
   d607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6080:	230c      	movs	r3, #12
   d6082:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6086:	2014      	movs	r0, #20
   d6088:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d608c:	9307      	str	r3, [sp, #28]
   d608e:	f7fe f802 	bl	d4096 <_Znwj>
   d6092:	4601      	mov	r1, r0
   d6094:	b128      	cbz	r0, d60a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6096:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d609a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d609e:	f880 a001 	strb.w	sl, [r0, #1]
   d60a2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d60a4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d60a6:	f7ff ff13 	bl	d5ed0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d60aa:	4b22      	ldr	r3, [pc, #136]	; (d6134 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d60ac:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d60ae:	2008      	movs	r0, #8
   d60b0:	f7fd fff1 	bl	d4096 <_Znwj>
   d60b4:	4682      	mov	sl, r0
   d60b6:	b128      	cbz	r0, d60c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d60b8:	9b03      	ldr	r3, [sp, #12]
   d60ba:	f840 3b04 	str.w	r3, [r0], #4
   d60be:	a904      	add	r1, sp, #16
   d60c0:	f7ff fe4b 	bl	d5d5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d60c4:	9600      	str	r6, [sp, #0]
   d60c6:	fa5f f389 	uxtb.w	r3, r9
   d60ca:	4642      	mov	r2, r8
   d60cc:	4639      	mov	r1, r7
   d60ce:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d60d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d60d4:	f7ff fd82 	bl	d5bdc <spark_send_event>
   d60d8:	b9b8      	cbnz	r0, d610a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d60da:	9b03      	ldr	r3, [sp, #12]
   d60dc:	785b      	ldrb	r3, [r3, #1]
   d60de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d60e2:	b993      	cbnz	r3, d610a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d60e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d60e8:	a905      	add	r1, sp, #20
   d60ea:	a803      	add	r0, sp, #12
   d60ec:	9205      	str	r2, [sp, #20]
   d60ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d60f2:	f7ff ff11 	bl	d5f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d60f6:	a805      	add	r0, sp, #20
   d60f8:	f7ff fe6e 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d60fc:	a805      	add	r0, sp, #20
   d60fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6100:	f7ff fe94 	bl	d5e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6104:	a806      	add	r0, sp, #24
   d6106:	f7fe fd97 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d610a:	9b03      	ldr	r3, [sp, #12]
   d610c:	9305      	str	r3, [sp, #20]
   d610e:	a904      	add	r1, sp, #16
   d6110:	a806      	add	r0, sp, #24
   d6112:	f7ff fe22 	bl	d5d5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6116:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6118:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d611a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d611c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d611e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6120:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6122:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6124:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6126:	f7fe fd87 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d612a:	a804      	add	r0, sp, #16
   d612c:	f7fe fd84 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6130:	e7a2      	b.n	d6078 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6132:	bf00      	nop
   d6134:	000d61fd 	.word	0x000d61fd

000d6138 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6138:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d613c:	4605      	mov	r5, r0
	  switch (__op)
   d613e:	d007      	beq.n	d6150 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6140:	2a03      	cmp	r2, #3
   d6142:	d018      	beq.n	d6176 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6144:	2a01      	cmp	r2, #1
   d6146:	d101      	bne.n	d614c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6148:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d614a:	6003      	str	r3, [r0, #0]
	}
   d614c:	2000      	movs	r0, #0
   d614e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6150:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6152:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6154:	f7fd ff9f 	bl	d4096 <_Znwj>
   d6158:	4604      	mov	r4, r0
   d615a:	b150      	cbz	r0, d6172 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d615c:	4631      	mov	r1, r6
   d615e:	f7ff fecb 	bl	d5ef8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6162:	6930      	ldr	r0, [r6, #16]
   d6164:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6168:	b108      	cbz	r0, d616e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d616a:	f002 fffb 	bl	d9164 <strdup>
        type_(type) {
   d616e:	6120      	str	r0, [r4, #16]
   d6170:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6172:	602c      	str	r4, [r5, #0]
	}
   d6174:	e7ea      	b.n	d614c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6176:	6804      	ldr	r4, [r0, #0]
   d6178:	2c00      	cmp	r4, #0
   d617a:	d0e7      	beq.n	d614c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d617c:	f104 0010 	add.w	r0, r4, #16
   d6180:	f7ff fe2a 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6184:	4620      	mov	r0, r4
   d6186:	f7ff fe11 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d618a:	2118      	movs	r1, #24
   d618c:	4620      	mov	r0, r4
   d618e:	f001 f902 	bl	d7396 <_ZdlPvj>
   d6192:	e7db      	b.n	d614c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6194 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6194:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6196:	2300      	movs	r3, #0
   d6198:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d619a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d619c:	4604      	mov	r4, r0
   d619e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d61a0:	b12b      	cbz	r3, d61ae <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d61a2:	2202      	movs	r2, #2
   d61a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d61a6:	68eb      	ldr	r3, [r5, #12]
   d61a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d61aa:	68ab      	ldr	r3, [r5, #8]
   d61ac:	60a3      	str	r3, [r4, #8]
    }
   d61ae:	4620      	mov	r0, r4
   d61b0:	bd38      	pop	{r3, r4, r5, pc}

000d61b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d61b2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d61b4:	b570      	push	{r4, r5, r6, lr}
   d61b6:	4604      	mov	r4, r0
	  switch (__op)
   d61b8:	d007      	beq.n	d61ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d61ba:	2a03      	cmp	r2, #3
   d61bc:	d012      	beq.n	d61e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d61be:	2a01      	cmp	r2, #1
   d61c0:	d101      	bne.n	d61c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d61c2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d61c4:	6003      	str	r3, [r0, #0]
	}
   d61c6:	2000      	movs	r0, #0
   d61c8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d61ca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d61cc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d61ce:	f7fd ff62 	bl	d4096 <_Znwj>
   d61d2:	4605      	mov	r5, r0
   d61d4:	b120      	cbz	r0, d61e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d61d6:	4631      	mov	r1, r6
   d61d8:	f7ff ffdc 	bl	d6194 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d61dc:	7c33      	ldrb	r3, [r6, #16]
   d61de:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d61e0:	6025      	str	r5, [r4, #0]
	}
   d61e2:	e7f0      	b.n	d61c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d61e4:	6804      	ldr	r4, [r0, #0]
   d61e6:	2c00      	cmp	r4, #0
   d61e8:	d0ed      	beq.n	d61c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d61ea:	4620      	mov	r0, r4
   d61ec:	f7ff fdde 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d61f0:	2114      	movs	r1, #20
   d61f2:	4620      	mov	r0, r4
   d61f4:	f001 f8cf 	bl	d7396 <_ZdlPvj>
   d61f8:	e7e5      	b.n	d61c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d61fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d61fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61fe:	b089      	sub	sp, #36	; 0x24
   d6200:	4604      	mov	r4, r0
   d6202:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6204:	a801      	add	r0, sp, #4
   d6206:	4611      	mov	r1, r2
   d6208:	f7ff fe10 	bl	d5e2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d620c:	b1a4      	cbz	r4, d6238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d620e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6210:	b11d      	cbz	r5, d621a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6212:	4628      	mov	r0, r5
   d6214:	f002 ffa6 	bl	d9164 <strdup>
   d6218:	4605      	mov	r5, r0
   d621a:	a801      	add	r0, sp, #4
   d621c:	a903      	add	r1, sp, #12
        type_(type) {
   d621e:	9503      	str	r5, [sp, #12]
   d6220:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6224:	f7ff fe78 	bl	d5f18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6228:	a803      	add	r0, sp, #12
   d622a:	f7ff fdd5 	bl	d5dd8 <_ZN8particle5ErrorD1Ev>
   d622e:	a802      	add	r0, sp, #8
   d6230:	f7fe fd02 	bl	d4c38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6234:	b009      	add	sp, #36	; 0x24
   d6236:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6238:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d623a:	2301      	movs	r3, #1
   d623c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6240:	2a00      	cmp	r2, #0
   d6242:	d103      	bne.n	d624c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6244:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6248:	2900      	cmp	r1, #0
   d624a:	d1f7      	bne.n	d623c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d624c:	d1ef      	bne.n	d622e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d624e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6250:	f3bf 8f5b 	dmb	ish
   d6254:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6256:	1d2b      	adds	r3, r5, #4
   d6258:	f3bf 8f5b 	dmb	ish
   d625c:	e853 6f00 	ldrex	r6, [r3]
   d6260:	e843 4200 	strex	r2, r4, [r3]
   d6264:	2a00      	cmp	r2, #0
   d6266:	d1f9      	bne.n	d625c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6268:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d626c:	2e00      	cmp	r6, #0
   d626e:	d0de      	beq.n	d622e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6270:	4620      	mov	r0, r4
   d6272:	f7ff fc87 	bl	d5b84 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6276:	4607      	mov	r7, r0
   d6278:	b160      	cbz	r0, d6294 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d627a:	f105 010c 	add.w	r1, r5, #12
   d627e:	4630      	mov	r0, r6
   d6280:	f7ff fe15 	bl	d5eae <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6284:	4630      	mov	r0, r6
   d6286:	f7ff fd91 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d628a:	2110      	movs	r1, #16
   d628c:	4630      	mov	r0, r6
   d628e:	f001 f882 	bl	d7396 <_ZdlPvj>
   d6292:	e7cc      	b.n	d622e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6294:	4631      	mov	r1, r6
   d6296:	a803      	add	r0, sp, #12
   d6298:	f7ff ff7c 	bl	d6194 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d629c:	7b2b      	ldrb	r3, [r5, #12]
   d629e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d62a2:	2010      	movs	r0, #16
   d62a4:	f7fd fef7 	bl	d4096 <_Znwj>
   d62a8:	4605      	mov	r5, r0
   d62aa:	b1d0      	cbz	r0, d62e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d62ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62ae:	2014      	movs	r0, #20
   d62b0:	f7fd fef1 	bl	d4096 <_Znwj>
   d62b4:	4604      	mov	r4, r0
   d62b6:	b178      	cbz	r0, d62d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d62b8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d62ba:	4601      	mov	r1, r0
   d62bc:	a803      	add	r0, sp, #12
   d62be:	f7ff fdd4 	bl	d5e6a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d62c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d62c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d62ca:	9205      	str	r2, [sp, #20]
   d62cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d62ce:	60e3      	str	r3, [r4, #12]
   d62d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d62d4:	9206      	str	r2, [sp, #24]
   d62d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d62d8:	4b06      	ldr	r3, [pc, #24]	; (d62f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d62da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d62dc:	4b06      	ldr	r3, [pc, #24]	; (d62f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d62de:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d62e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d62e2:	a803      	add	r0, sp, #12
   d62e4:	f7ff fd62 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d62e8:	2200      	movs	r2, #0
   d62ea:	4629      	mov	r1, r5
   d62ec:	4803      	ldr	r0, [pc, #12]	; (d62fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d62ee:	f7ff fc51 	bl	d5b94 <application_thread_invoke>
   d62f2:	e7c7      	b.n	d6284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d62f4:	000d5ec1 	.word	0x000d5ec1
   d62f8:	000d61b3 	.word	0x000d61b3
   d62fc:	000d5d23 	.word	0x000d5d23

000d6300 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6300:	2200      	movs	r2, #0
   d6302:	6840      	ldr	r0, [r0, #4]
   d6304:	4611      	mov	r1, r2
   d6306:	f7ff bcb1 	b.w	d5c6c <network_listening>

000d630a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d630a:	2200      	movs	r2, #0
   d630c:	6840      	ldr	r0, [r0, #4]
   d630e:	4611      	mov	r1, r2
   d6310:	f7ff bcbc 	b.w	d5c8c <network_get_listen_timeout>

000d6314 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6314:	6840      	ldr	r0, [r0, #4]
   d6316:	2200      	movs	r2, #0
   d6318:	f7ff bcb0 	b.w	d5c7c <network_set_listen_timeout>

000d631c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d631c:	6840      	ldr	r0, [r0, #4]
   d631e:	2200      	movs	r2, #0
   d6320:	f081 0101 	eor.w	r1, r1, #1
   d6324:	f7ff bc9a 	b.w	d5c5c <network_listen>

000d6328 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6328:	2300      	movs	r3, #0
   d632a:	6840      	ldr	r0, [r0, #4]
   d632c:	461a      	mov	r2, r3
   d632e:	4619      	mov	r1, r3
   d6330:	f7ff bc8c 	b.w	d5c4c <network_off>

000d6334 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6334:	2300      	movs	r3, #0
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	461a      	mov	r2, r3
   d633a:	4619      	mov	r1, r3
   d633c:	f7ff bc7e 	b.w	d5c3c <network_on>

000d6340 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6340:	2200      	movs	r2, #0
   d6342:	6840      	ldr	r0, [r0, #4]
   d6344:	4611      	mov	r1, r2
   d6346:	f7ff bc71 	b.w	d5c2c <network_ready>

000d634a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d634a:	2200      	movs	r2, #0
   d634c:	6840      	ldr	r0, [r0, #4]
   d634e:	4611      	mov	r1, r2
   d6350:	f7ff bc5c 	b.w	d5c0c <network_connecting>

000d6354 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6354:	6840      	ldr	r0, [r0, #4]
   d6356:	2200      	movs	r2, #0
   d6358:	2102      	movs	r1, #2
   d635a:	f7ff bc5f 	b.w	d5c1c <network_disconnect>

000d635e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d635e:	2300      	movs	r3, #0
   d6360:	6840      	ldr	r0, [r0, #4]
   d6362:	461a      	mov	r2, r3
   d6364:	f7ff bc4a 	b.w	d5bfc <network_connect>

000d6368 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6368:	4b02      	ldr	r3, [pc, #8]	; (d6374 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d636a:	2203      	movs	r2, #3
   d636c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d636e:	4a02      	ldr	r2, [pc, #8]	; (d6378 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6370:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6372:	4770      	bx	lr
   d6374:	2003e60c 	.word	0x2003e60c
   d6378:	000d94d0 	.word	0x000d94d0

000d637c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d637c:	4770      	bx	lr

000d637e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d637e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6380:	4606      	mov	r6, r0
   d6382:	4615      	mov	r5, r2
   d6384:	460c      	mov	r4, r1
   d6386:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6388:	42bc      	cmp	r4, r7
   d638a:	d006      	beq.n	d639a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d638c:	6833      	ldr	r3, [r6, #0]
   d638e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6392:	689b      	ldr	r3, [r3, #8]
   d6394:	4630      	mov	r0, r6
   d6396:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6398:	e7f6      	b.n	d6388 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d639a:	4628      	mov	r0, r5
   d639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d639e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d639e:	7c00      	ldrb	r0, [r0, #16]
   d63a0:	2200      	movs	r2, #0
   d63a2:	f7ff baff 	b.w	d59a4 <hal_i2c_write>

000d63a6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d63a6:	7c00      	ldrb	r0, [r0, #16]
   d63a8:	2100      	movs	r1, #0
   d63aa:	f7ff bb03 	b.w	d59b4 <hal_i2c_available>

000d63ae <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d63ae:	7c00      	ldrb	r0, [r0, #16]
   d63b0:	2100      	movs	r1, #0
   d63b2:	f7ff bb07 	b.w	d59c4 <hal_i2c_read>

000d63b6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d63b6:	7c00      	ldrb	r0, [r0, #16]
   d63b8:	2100      	movs	r1, #0
   d63ba:	f7ff bb0b 	b.w	d59d4 <hal_i2c_peek>

000d63be <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d63be:	7c00      	ldrb	r0, [r0, #16]
   d63c0:	2100      	movs	r1, #0
   d63c2:	f7ff bb0f 	b.w	d59e4 <hal_i2c_flush>

000d63c6 <_ZN7TwoWireD0Ev>:
   d63c6:	b510      	push	{r4, lr}
   d63c8:	2114      	movs	r1, #20
   d63ca:	4604      	mov	r4, r0
   d63cc:	f000 ffe3 	bl	d7396 <_ZdlPvj>
   d63d0:	4620      	mov	r0, r4
   d63d2:	bd10      	pop	{r4, pc}

000d63d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d63d4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d63d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63da:	4604      	mov	r4, r0
   d63dc:	4608      	mov	r0, r1
   d63de:	2100      	movs	r1, #0
   d63e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d63e4:	4b03      	ldr	r3, [pc, #12]	; (d63f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d63e6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d63e8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d63ea:	4611      	mov	r1, r2
   d63ec:	f7ff fb0a 	bl	d5a04 <hal_i2c_init>
}
   d63f0:	4620      	mov	r0, r4
   d63f2:	bd10      	pop	{r4, pc}
   d63f4:	000d9504 	.word	0x000d9504

000d63f8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d63f8:	7c00      	ldrb	r0, [r0, #16]
   d63fa:	2200      	movs	r2, #0
   d63fc:	f7ff bab2 	b.w	d5964 <hal_i2c_set_speed>

000d6400 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6400:	2300      	movs	r3, #0
   d6402:	7c00      	ldrb	r0, [r0, #16]
   d6404:	461a      	mov	r2, r3
   d6406:	4619      	mov	r1, r3
   d6408:	f7ff bab4 	b.w	d5974 <hal_i2c_begin>

000d640c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d640c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d640e:	2200      	movs	r2, #0
   d6410:	2314      	movs	r3, #20
   d6412:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6416:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d641a:	780b      	ldrb	r3, [r1, #0]
   d641c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6420:	684b      	ldr	r3, [r1, #4]
   d6422:	9303      	str	r3, [sp, #12]
   d6424:	68cb      	ldr	r3, [r1, #12]
   d6426:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6428:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d642a:	7a0b      	ldrb	r3, [r1, #8]
   d642c:	9305      	str	r3, [sp, #20]
   d642e:	a901      	add	r1, sp, #4
   d6430:	f7ff faf0 	bl	d5a14 <hal_i2c_request_ex>
}
   d6434:	b007      	add	sp, #28
   d6436:	f85d fb04 	ldr.w	pc, [sp], #4

000d643a <_ZN7TwoWire11requestFromEhjh>:
{
   d643a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d643c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d643e:	f88d 1000 	strb.w	r1, [sp]
   d6442:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6446:	9103      	str	r1, [sp, #12]
   d6448:	bf18      	it	ne
   d644a:	2301      	movne	r3, #1
   d644c:	4669      	mov	r1, sp
    size_ = size;
   d644e:	9201      	str	r2, [sp, #4]
   d6450:	f88d 3008 	strb.w	r3, [sp, #8]
   d6454:	f7ff ffda 	bl	d640c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6458:	b005      	add	sp, #20
   d645a:	f85d fb04 	ldr.w	pc, [sp], #4

000d645e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d645e:	2301      	movs	r3, #1
   d6460:	f7ff bfeb 	b.w	d643a <_ZN7TwoWire11requestFromEhjh>

000d6464 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6464:	7c00      	ldrb	r0, [r0, #16]
   d6466:	2200      	movs	r2, #0
   d6468:	f7ff ba8c 	b.w	d5984 <hal_i2c_begin_transmission>

000d646c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d646c:	7c00      	ldrb	r0, [r0, #16]
   d646e:	2200      	movs	r2, #0
   d6470:	f7ff ba90 	b.w	d5994 <hal_i2c_end_transmission>

000d6474 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6474:	2101      	movs	r1, #1
   d6476:	f7ff bff9 	b.w	d646c <_ZN7TwoWire15endTransmissionEh>

000d647a <_Z21attachInterruptDirect9IRQn_TypePFvvEb>:
    return ok;
}

bool attachInterruptDirect(IRQn_Type irq, HAL_Direct_Interrupt_Handler handler, bool enable)
{
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d647a:	2a00      	cmp	r2, #0
{
   d647c:	b508      	push	{r3, lr}
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d647e:	f04f 0300 	mov.w	r3, #0
   d6482:	bf14      	ite	ne
   d6484:	2204      	movne	r2, #4
   d6486:	461a      	moveq	r2, r3
   d6488:	f7ff fa62 	bl	d5950 <HAL_Set_Direct_Interrupt_Handler>
    return ok;
}
   d648c:	fab0 f080 	clz	r0, r0
   d6490:	0940      	lsrs	r0, r0, #5
   d6492:	bd08      	pop	{r3, pc}

000d6494 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6494:	4770      	bx	lr

000d6496 <_ZN9IPAddressD0Ev>:
   d6496:	b510      	push	{r4, lr}
   d6498:	2118      	movs	r1, #24
   d649a:	4604      	mov	r4, r0
   d649c:	f000 ff7b 	bl	d7396 <_ZdlPvj>
   d64a0:	4620      	mov	r0, r4
   d64a2:	bd10      	pop	{r4, pc}

000d64a4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64a6:	7d03      	ldrb	r3, [r0, #20]
   d64a8:	2b06      	cmp	r3, #6
{
   d64aa:	b08d      	sub	sp, #52	; 0x34
   d64ac:	460e      	mov	r6, r1
   d64ae:	f100 0704 	add.w	r7, r0, #4
   d64b2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d64b6:	d012      	beq.n	d64de <_ZNK9IPAddress7printToER5Print+0x3a>
   d64b8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d64bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d64c0:	220a      	movs	r2, #10
   d64c2:	4630      	mov	r0, r6
   d64c4:	f000 f94d 	bl	d6762 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d64c8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d64ca:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d64cc:	d019      	beq.n	d6502 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d64ce:	2c00      	cmp	r4, #0
   d64d0:	d0f4      	beq.n	d64bc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d64d2:	212e      	movs	r1, #46	; 0x2e
   d64d4:	4630      	mov	r0, r6
   d64d6:	f000 f927 	bl	d6728 <_ZN5Print5printEc>
   d64da:	4404      	add	r4, r0
   d64dc:	e7ee      	b.n	d64bc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64de:	232f      	movs	r3, #47	; 0x2f
   d64e0:	466a      	mov	r2, sp
   d64e2:	4639      	mov	r1, r7
   d64e4:	200a      	movs	r0, #10
		buf[0] = 0;
   d64e6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64ea:	f7ff fa9b 	bl	d5a24 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d64ee:	4668      	mov	r0, sp
   d64f0:	f002 fe55 	bl	d919e <strlen>
   d64f4:	6833      	ldr	r3, [r6, #0]
   d64f6:	4602      	mov	r2, r0
   d64f8:	68db      	ldr	r3, [r3, #12]
   d64fa:	4669      	mov	r1, sp
   d64fc:	4630      	mov	r0, r6
   d64fe:	4798      	blx	r3
   d6500:	4604      	mov	r4, r0
    }
    return n;
}
   d6502:	4620      	mov	r0, r4
   d6504:	b00d      	add	sp, #52	; 0x34
   d6506:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6508 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6508:	b510      	push	{r4, lr}
   d650a:	4b05      	ldr	r3, [pc, #20]	; (d6520 <_ZN9IPAddressC1Ev+0x18>)
   d650c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d650e:	2211      	movs	r2, #17
   d6510:	f840 3b04 	str.w	r3, [r0], #4
   d6514:	2100      	movs	r1, #0
   d6516:	f002 fdbd 	bl	d9094 <memset>
}
   d651a:	4620      	mov	r0, r4
   d651c:	bd10      	pop	{r4, pc}
   d651e:	bf00      	nop
   d6520:	000d952c 	.word	0x000d952c

000d6524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6524:	4603      	mov	r3, r0
   d6526:	4a07      	ldr	r2, [pc, #28]	; (d6544 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6528:	b510      	push	{r4, lr}
   d652a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d652e:	f101 0210 	add.w	r2, r1, #16
   d6532:	f851 4b04 	ldr.w	r4, [r1], #4
   d6536:	f843 4b04 	str.w	r4, [r3], #4
   d653a:	4291      	cmp	r1, r2
   d653c:	d1f9      	bne.n	d6532 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d653e:	780a      	ldrb	r2, [r1, #0]
   d6540:	701a      	strb	r2, [r3, #0]
}
   d6542:	bd10      	pop	{r4, pc}
   d6544:	000d952c 	.word	0x000d952c

000d6548 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6548:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d654a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d654e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6552:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6556:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d655a:	2304      	movs	r3, #4
   d655c:	6041      	str	r1, [r0, #4]
   d655e:	7503      	strb	r3, [r0, #20]
}
   d6560:	bd10      	pop	{r4, pc}

000d6562 <_ZN9IPAddressaSEPKh>:
{
   d6562:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6564:	78cb      	ldrb	r3, [r1, #3]
   d6566:	9300      	str	r3, [sp, #0]
   d6568:	788b      	ldrb	r3, [r1, #2]
   d656a:	784a      	ldrb	r2, [r1, #1]
   d656c:	7809      	ldrb	r1, [r1, #0]
   d656e:	f7ff ffeb 	bl	d6548 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6572:	b002      	add	sp, #8
   d6574:	bd10      	pop	{r4, pc}
	...

000d6578 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6578:	4b01      	ldr	r3, [pc, #4]	; (d6580 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d657a:	4a02      	ldr	r2, [pc, #8]	; (d6584 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d657c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d657e:	4770      	bx	lr
   d6580:	2003e614 	.word	0x2003e614
   d6584:	000d9538 	.word	0x000d9538

000d6588 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6588:	2300      	movs	r3, #0
   d658a:	6840      	ldr	r0, [r0, #4]
   d658c:	461a      	mov	r2, r3
   d658e:	f7ff bb35 	b.w	d5bfc <network_connect>

000d6592 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6592:	6840      	ldr	r0, [r0, #4]
   d6594:	2200      	movs	r2, #0
   d6596:	2102      	movs	r1, #2
   d6598:	f7ff bb40 	b.w	d5c1c <network_disconnect>

000d659c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d659c:	2200      	movs	r2, #0
   d659e:	6840      	ldr	r0, [r0, #4]
   d65a0:	4611      	mov	r1, r2
   d65a2:	f7ff bb33 	b.w	d5c0c <network_connecting>

000d65a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d65a6:	2200      	movs	r2, #0
   d65a8:	6840      	ldr	r0, [r0, #4]
   d65aa:	4611      	mov	r1, r2
   d65ac:	f7ff bb3e 	b.w	d5c2c <network_ready>

000d65b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d65b0:	2300      	movs	r3, #0
   d65b2:	6840      	ldr	r0, [r0, #4]
   d65b4:	461a      	mov	r2, r3
   d65b6:	4619      	mov	r1, r3
   d65b8:	f7ff bb40 	b.w	d5c3c <network_on>

000d65bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d65bc:	2300      	movs	r3, #0
   d65be:	6840      	ldr	r0, [r0, #4]
   d65c0:	461a      	mov	r2, r3
   d65c2:	4619      	mov	r1, r3
   d65c4:	f7ff bb42 	b.w	d5c4c <network_off>

000d65c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d65c8:	6840      	ldr	r0, [r0, #4]
   d65ca:	2200      	movs	r2, #0
   d65cc:	f081 0101 	eor.w	r1, r1, #1
   d65d0:	f7ff bb44 	b.w	d5c5c <network_listen>

000d65d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d65d4:	6840      	ldr	r0, [r0, #4]
   d65d6:	2200      	movs	r2, #0
   d65d8:	f7ff bb50 	b.w	d5c7c <network_set_listen_timeout>

000d65dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d65dc:	2200      	movs	r2, #0
   d65de:	6840      	ldr	r0, [r0, #4]
   d65e0:	4611      	mov	r1, r2
   d65e2:	f7ff bb53 	b.w	d5c8c <network_get_listen_timeout>

000d65e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d65e6:	2200      	movs	r2, #0
   d65e8:	6840      	ldr	r0, [r0, #4]
   d65ea:	4611      	mov	r1, r2
   d65ec:	f7ff bb3e 	b.w	d5c6c <network_listening>

000d65f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d65f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d65f4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d65f6:	b095      	sub	sp, #84	; 0x54
   d65f8:	4616      	mov	r6, r2
   d65fa:	460d      	mov	r5, r1
   d65fc:	4607      	mov	r7, r0
    IPAddress addr;
   d65fe:	f7ff ff83 	bl	d6508 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6602:	4621      	mov	r1, r4
   d6604:	2218      	movs	r2, #24
   d6606:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6608:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d660a:	f002 fd43 	bl	d9094 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d660e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6610:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6614:	4621      	mov	r1, r4
   d6616:	466b      	mov	r3, sp
   d6618:	aa0c      	add	r2, sp, #48	; 0x30
   d661a:	4630      	mov	r0, r6
   d661c:	f7ff fa12 	bl	d5a44 <netdb_getaddrinfo>
    if (!r) {
   d6620:	4604      	mov	r4, r0
   d6622:	2800      	cmp	r0, #0
   d6624:	d146      	bne.n	d66b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6626:	4602      	mov	r2, r0
   d6628:	2101      	movs	r1, #1
   d662a:	6868      	ldr	r0, [r5, #4]
   d662c:	f7ff fafe 	bl	d5c2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6630:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6632:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6634:	4622      	mov	r2, r4
   d6636:	6868      	ldr	r0, [r5, #4]
   d6638:	f7ff faf8 	bl	d5c2c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d663c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d663e:	4681      	mov	r9, r0
        bool ok = false;
   d6640:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6642:	2e00      	cmp	r6, #0
   d6644:	d036      	beq.n	d66b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6646:	2900      	cmp	r1, #0
   d6648:	d134      	bne.n	d66b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d664a:	6873      	ldr	r3, [r6, #4]
   d664c:	2b02      	cmp	r3, #2
   d664e:	d003      	beq.n	d6658 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6650:	2b0a      	cmp	r3, #10
   d6652:	d00b      	beq.n	d666c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6654:	69f6      	ldr	r6, [r6, #28]
   d6656:	e7f4      	b.n	d6642 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6658:	f1b8 0f00 	cmp.w	r8, #0
   d665c:	d004      	beq.n	d6668 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d665e:	6971      	ldr	r1, [r6, #20]
   d6660:	4638      	mov	r0, r7
   d6662:	3104      	adds	r1, #4
   d6664:	f7ff ff7d 	bl	d6562 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6668:	4641      	mov	r1, r8
   d666a:	e7f3      	b.n	d6654 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d666c:	f1b9 0f00 	cmp.w	r9, #0
   d6670:	d101      	bne.n	d6676 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6672:	4649      	mov	r1, r9
   d6674:	e7ee      	b.n	d6654 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6676:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6678:	2210      	movs	r2, #16
   d667a:	a801      	add	r0, sp, #4
   d667c:	f002 fd0a 	bl	d9094 <memset>
                    a.v = 6;
   d6680:	2306      	movs	r3, #6
   d6682:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6686:	ad01      	add	r5, sp, #4
   d6688:	f104 0308 	add.w	r3, r4, #8
   d668c:	3418      	adds	r4, #24
   d668e:	6818      	ldr	r0, [r3, #0]
   d6690:	6859      	ldr	r1, [r3, #4]
   d6692:	462a      	mov	r2, r5
   d6694:	c203      	stmia	r2!, {r0, r1}
   d6696:	3308      	adds	r3, #8
   d6698:	42a3      	cmp	r3, r4
   d669a:	4615      	mov	r5, r2
   d669c:	d1f7      	bne.n	d668e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d669e:	a901      	add	r1, sp, #4
   d66a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d66a2:	ad07      	add	r5, sp, #28
   d66a4:	f7ff ff3e 	bl	d6524 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d66a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d66aa:	1d3c      	adds	r4, r7, #4
   d66ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d66ae:	682b      	ldr	r3, [r5, #0]
   d66b0:	7023      	strb	r3, [r4, #0]
   d66b2:	e7de      	b.n	d6672 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d66b4:	9800      	ldr	r0, [sp, #0]
   d66b6:	f7ff f9bd 	bl	d5a34 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d66ba:	4638      	mov	r0, r7
   d66bc:	b015      	add	sp, #84	; 0x54
   d66be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d66c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d66c4:	4b02      	ldr	r3, [pc, #8]	; (d66d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d66c6:	4a03      	ldr	r2, [pc, #12]	; (d66d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d66c8:	601a      	str	r2, [r3, #0]
   d66ca:	2200      	movs	r2, #0
   d66cc:	605a      	str	r2, [r3, #4]

} // spark
   d66ce:	4770      	bx	lr
   d66d0:	2003e618 	.word	0x2003e618
   d66d4:	000d9544 	.word	0x000d9544

000d66d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d66d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66da:	4606      	mov	r6, r0
   d66dc:	460d      	mov	r5, r1
  size_t n = 0;
   d66de:	188f      	adds	r7, r1, r2
   d66e0:	2400      	movs	r4, #0
  while (size--) {
   d66e2:	42bd      	cmp	r5, r7
   d66e4:	d00c      	beq.n	d6700 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d66e6:	6833      	ldr	r3, [r6, #0]
   d66e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d66ec:	689b      	ldr	r3, [r3, #8]
   d66ee:	4630      	mov	r0, r6
   d66f0:	4798      	blx	r3
     if (chunk>=0)
   d66f2:	1e03      	subs	r3, r0, #0
   d66f4:	db01      	blt.n	d66fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d66f6:	441c      	add	r4, r3
  while (size--) {
   d66f8:	e7f3      	b.n	d66e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d66fa:	2c00      	cmp	r4, #0
   d66fc:	bf08      	it	eq
   d66fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6700:	4620      	mov	r0, r4
   d6702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6704 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6704:	b513      	push	{r0, r1, r4, lr}
   d6706:	4604      	mov	r4, r0
    }
   d6708:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d670a:	b159      	cbz	r1, d6724 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d670c:	9101      	str	r1, [sp, #4]
   d670e:	f002 fd46 	bl	d919e <strlen>
   d6712:	6823      	ldr	r3, [r4, #0]
   d6714:	9901      	ldr	r1, [sp, #4]
   d6716:	68db      	ldr	r3, [r3, #12]
   d6718:	4602      	mov	r2, r0
   d671a:	4620      	mov	r0, r4
    }
   d671c:	b002      	add	sp, #8
   d671e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6722:	4718      	bx	r3
    }
   d6724:	b002      	add	sp, #8
   d6726:	bd10      	pop	{r4, pc}

000d6728 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6728:	6803      	ldr	r3, [r0, #0]
   d672a:	689b      	ldr	r3, [r3, #8]
   d672c:	4718      	bx	r3

000d672e <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d672e:	b508      	push	{r3, lr}
  return write(str);
   d6730:	f7ff ffe8 	bl	d6704 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d6734:	bd08      	pop	{r3, pc}

000d6736 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d6736:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6738:	210d      	movs	r1, #13
{
   d673a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d673c:	f7ff fff4 	bl	d6728 <_ZN5Print5printEc>
  n += print('\n');
   d6740:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6742:	4604      	mov	r4, r0
  n += print('\n');
   d6744:	4628      	mov	r0, r5
   d6746:	f7ff ffef 	bl	d6728 <_ZN5Print5printEc>
  return n;
}
   d674a:	4420      	add	r0, r4
   d674c:	bd38      	pop	{r3, r4, r5, pc}

000d674e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d674e:	b538      	push	{r3, r4, r5, lr}
   d6750:	4605      	mov	r5, r0
  return write(str);
   d6752:	f7ff ffd7 	bl	d6704 <_ZN5Print5writeEPKc>
   d6756:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6758:	4628      	mov	r0, r5
   d675a:	f7ff ffec 	bl	d6736 <_ZN5Print7printlnEv>
  return n;
}
   d675e:	4420      	add	r0, r4
   d6760:	bd38      	pop	{r3, r4, r5, pc}

000d6762 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6762:	b530      	push	{r4, r5, lr}
   d6764:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6766:	2300      	movs	r3, #0
   d6768:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d676c:	2a01      	cmp	r2, #1
   d676e:	bf98      	it	ls
   d6770:	220a      	movls	r2, #10
   d6772:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6774:	460d      	mov	r5, r1
   d6776:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d677a:	fb01 5312 	mls	r3, r1, r2, r5
   d677e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6782:	2b09      	cmp	r3, #9
   d6784:	bf94      	ite	ls
   d6786:	3330      	addls	r3, #48	; 0x30
   d6788:	3337      	addhi	r3, #55	; 0x37
   d678a:	b2db      	uxtb	r3, r3
  } while(n);
   d678c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d678e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6792:	d9ef      	bls.n	d6774 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6794:	4621      	mov	r1, r4
   d6796:	f7ff ffb5 	bl	d6704 <_ZN5Print5writeEPKc>
}
   d679a:	b00b      	add	sp, #44	; 0x2c
   d679c:	bd30      	pop	{r4, r5, pc}

000d679e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d679e:	b510      	push	{r4, lr}
  if (0 == max) {
   d67a0:	4604      	mov	r4, r0
   d67a2:	b128      	cbz	r0, d67b0 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d67a4:	f002 fca2 	bl	d90ec <rand>
   d67a8:	fb90 f3f4 	sdiv	r3, r0, r4
   d67ac:	fb03 0414 	mls	r4, r3, r4, r0
}
   d67b0:	4620      	mov	r0, r4
   d67b2:	bd10      	pop	{r4, pc}

000d67b4 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d67b4:	4288      	cmp	r0, r1
{
   d67b6:	b510      	push	{r4, lr}
   d67b8:	4604      	mov	r4, r0
  if (min >= max) {
   d67ba:	da03      	bge.n	d67c4 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d67bc:	1a08      	subs	r0, r1, r0
   d67be:	f7ff ffee 	bl	d679e <_Z6randomi>
   d67c2:	4404      	add	r4, r0
}
   d67c4:	4620      	mov	r0, r4
   d67c6:	bd10      	pop	{r4, pc}

000d67c8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d67c8:	b510      	push	{r4, lr}
   d67ca:	4604      	mov	r4, r0
   d67cc:	f7ff faee 	bl	d5dac <_ZNSt14_Function_baseD1Ev>
   d67d0:	4620      	mov	r0, r4
   d67d2:	bd10      	pop	{r4, pc}

000d67d4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d67d4:	4803      	ldr	r0, [pc, #12]	; (d67e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d67d6:	4a04      	ldr	r2, [pc, #16]	; (d67e8 <_GLOBAL__sub_I_RGB+0x14>)
   d67d8:	4904      	ldr	r1, [pc, #16]	; (d67ec <_GLOBAL__sub_I_RGB+0x18>)
   d67da:	2300      	movs	r3, #0
   d67dc:	6083      	str	r3, [r0, #8]
   d67de:	f000 bdd5 	b.w	d738c <__aeabi_atexit>
   d67e2:	bf00      	nop
   d67e4:	2003e620 	.word	0x2003e620
   d67e8:	2003e444 	.word	0x2003e444
   d67ec:	000d67c9 	.word	0x000d67c9

000d67f0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d67f0:	b510      	push	{r4, lr}
   d67f2:	4604      	mov	r4, r0
   d67f4:	4608      	mov	r0, r1
{
    _spi = spi;
   d67f6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d67f8:	f7ff f92c 	bl	d5a54 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d67fc:	2300      	movs	r3, #0
   d67fe:	6063      	str	r3, [r4, #4]
}
   d6800:	4620      	mov	r0, r4
   d6802:	bd10      	pop	{r4, pc}

000d6804 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6804:	b510      	push	{r4, lr}
   d6806:	4604      	mov	r4, r0
{
	free(buffer);
   d6808:	6800      	ldr	r0, [r0, #0]
   d680a:	f7ff fa4f 	bl	d5cac <free>
}
   d680e:	4620      	mov	r0, r4
   d6810:	bd10      	pop	{r4, pc}

000d6812 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6812:	b510      	push	{r4, lr}
   d6814:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6816:	6800      	ldr	r0, [r0, #0]
   d6818:	b108      	cbz	r0, d681e <_ZN6String10invalidateEv+0xc>
   d681a:	f7ff fa47 	bl	d5cac <free>
	buffer = NULL;
   d681e:	2300      	movs	r3, #0
	capacity = len = 0;
   d6820:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6824:	6023      	str	r3, [r4, #0]
}
   d6826:	bd10      	pop	{r4, pc}

000d6828 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6828:	b538      	push	{r3, r4, r5, lr}
   d682a:	4604      	mov	r4, r0
   d682c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d682e:	6800      	ldr	r0, [r0, #0]
   d6830:	3101      	adds	r1, #1
   d6832:	f7ff fa43 	bl	d5cbc <realloc>
	if (newbuffer) {
   d6836:	b110      	cbz	r0, d683e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6838:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d683c:	2001      	movs	r0, #1
	}
	return 0;
}
   d683e:	bd38      	pop	{r3, r4, r5, pc}

000d6840 <_ZN6String7reserveEj>:
{
   d6840:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6842:	6803      	ldr	r3, [r0, #0]
{
   d6844:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6846:	b123      	cbz	r3, d6852 <_ZN6String7reserveEj+0x12>
   d6848:	6843      	ldr	r3, [r0, #4]
   d684a:	428b      	cmp	r3, r1
   d684c:	d301      	bcc.n	d6852 <_ZN6String7reserveEj+0x12>
   d684e:	2001      	movs	r0, #1
}
   d6850:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6852:	4620      	mov	r0, r4
   d6854:	f7ff ffe8 	bl	d6828 <_ZN6String12changeBufferEj>
   d6858:	2800      	cmp	r0, #0
   d685a:	d0f9      	beq.n	d6850 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d685c:	68a3      	ldr	r3, [r4, #8]
   d685e:	2b00      	cmp	r3, #0
   d6860:	d1f5      	bne.n	d684e <_ZN6String7reserveEj+0xe>
   d6862:	6822      	ldr	r2, [r4, #0]
   d6864:	7013      	strb	r3, [r2, #0]
   d6866:	e7f2      	b.n	d684e <_ZN6String7reserveEj+0xe>

000d6868 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6868:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d686a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d686c:	4611      	mov	r1, r2
   d686e:	9201      	str	r2, [sp, #4]
{
   d6870:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6872:	f7ff ffe5 	bl	d6840 <_ZN6String7reserveEj>
   d6876:	9a01      	ldr	r2, [sp, #4]
   d6878:	b928      	cbnz	r0, d6886 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d687a:	4620      	mov	r0, r4
   d687c:	f7ff ffc9 	bl	d6812 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6880:	4620      	mov	r0, r4
   d6882:	b003      	add	sp, #12
   d6884:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6886:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6888:	4629      	mov	r1, r5
   d688a:	6820      	ldr	r0, [r4, #0]
   d688c:	f002 fbf4 	bl	d9078 <memcpy>
	buffer[len] = 0;
   d6890:	6822      	ldr	r2, [r4, #0]
   d6892:	68a3      	ldr	r3, [r4, #8]
   d6894:	2100      	movs	r1, #0
   d6896:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6898:	e7f2      	b.n	d6880 <_ZN6String4copyEPKcj+0x18>

000d689a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d689a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d689c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d689e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d68a2:	4604      	mov	r4, r0
	len = 0;
   d68a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d68a6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d68a8:	b141      	cbz	r1, d68bc <_ZN6StringC1EPKc+0x22>
   d68aa:	4608      	mov	r0, r1
   d68ac:	9101      	str	r1, [sp, #4]
   d68ae:	f002 fc76 	bl	d919e <strlen>
   d68b2:	9901      	ldr	r1, [sp, #4]
   d68b4:	4602      	mov	r2, r0
   d68b6:	4620      	mov	r0, r4
   d68b8:	f7ff ffd6 	bl	d6868 <_ZN6String4copyEPKcj>
}
   d68bc:	4620      	mov	r0, r4
   d68be:	b002      	add	sp, #8
   d68c0:	bd10      	pop	{r4, pc}

000d68c2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d68c2:	b538      	push	{r3, r4, r5, lr}
   d68c4:	4605      	mov	r5, r0
	if (buffer) {
   d68c6:	6800      	ldr	r0, [r0, #0]
{
   d68c8:	460c      	mov	r4, r1
	if (buffer) {
   d68ca:	b168      	cbz	r0, d68e8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d68cc:	686a      	ldr	r2, [r5, #4]
   d68ce:	688b      	ldr	r3, [r1, #8]
   d68d0:	429a      	cmp	r2, r3
   d68d2:	d307      	bcc.n	d68e4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d68d4:	6809      	ldr	r1, [r1, #0]
   d68d6:	f002 fc3d 	bl	d9154 <strcpy>
			len = rhs.len;
   d68da:	68a3      	ldr	r3, [r4, #8]
   d68dc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d68de:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d68e0:	60a3      	str	r3, [r4, #8]
}
   d68e2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d68e4:	f7ff f9e2 	bl	d5cac <free>
	buffer = rhs.buffer;
   d68e8:	6823      	ldr	r3, [r4, #0]
   d68ea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d68ec:	6863      	ldr	r3, [r4, #4]
   d68ee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d68f0:	68a3      	ldr	r3, [r4, #8]
   d68f2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d68f4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d68f6:	e9c4 3300 	strd	r3, r3, [r4]
   d68fa:	e7f1      	b.n	d68e0 <_ZN6String4moveERS_+0x1e>

000d68fc <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d68fc:	4288      	cmp	r0, r1
{
   d68fe:	b510      	push	{r4, lr}
   d6900:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6902:	d005      	beq.n	d6910 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6904:	680b      	ldr	r3, [r1, #0]
   d6906:	b12b      	cbz	r3, d6914 <_ZN6StringaSERKS_+0x18>
   d6908:	688a      	ldr	r2, [r1, #8]
   d690a:	4619      	mov	r1, r3
   d690c:	f7ff ffac 	bl	d6868 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6910:	4620      	mov	r0, r4
   d6912:	bd10      	pop	{r4, pc}
	else invalidate();
   d6914:	f7ff ff7d 	bl	d6812 <_ZN6String10invalidateEv>
   d6918:	e7fa      	b.n	d6910 <_ZN6StringaSERKS_+0x14>

000d691a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d691a:	b510      	push	{r4, lr}
	buffer = NULL;
   d691c:	2300      	movs	r3, #0
String::String(const String &value)
   d691e:	4604      	mov	r4, r0
	capacity = 0;
   d6920:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6924:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6926:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6928:	f7ff ffe8 	bl	d68fc <_ZN6StringaSERKS_>
}
   d692c:	4620      	mov	r0, r4
   d692e:	bd10      	pop	{r4, pc}

000d6930 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6930:	4288      	cmp	r0, r1
{
   d6932:	b510      	push	{r4, lr}
   d6934:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6936:	d001      	beq.n	d693c <_ZN6StringaSEOS_+0xc>
   d6938:	f7ff ffc3 	bl	d68c2 <_ZN6String4moveERS_>
	return *this;
}
   d693c:	4620      	mov	r0, r4
   d693e:	bd10      	pop	{r4, pc}

000d6940 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6940:	b513      	push	{r0, r1, r4, lr}
   d6942:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6944:	b159      	cbz	r1, d695e <_ZN6StringaSEPKc+0x1e>
   d6946:	4608      	mov	r0, r1
   d6948:	9101      	str	r1, [sp, #4]
   d694a:	f002 fc28 	bl	d919e <strlen>
   d694e:	9901      	ldr	r1, [sp, #4]
   d6950:	4602      	mov	r2, r0
   d6952:	4620      	mov	r0, r4
   d6954:	f7ff ff88 	bl	d6868 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6958:	4620      	mov	r0, r4
   d695a:	b002      	add	sp, #8
   d695c:	bd10      	pop	{r4, pc}
	else invalidate();
   d695e:	f7ff ff58 	bl	d6812 <_ZN6String10invalidateEv>
   d6962:	e7f9      	b.n	d6958 <_ZN6StringaSEPKc+0x18>

000d6964 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6964:	b510      	push	{r4, lr}
   d6966:	4604      	mov	r4, r0
   d6968:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d696a:	2300      	movs	r3, #0
	capacity = 0;
   d696c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6970:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6972:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6974:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6976:	a901      	add	r1, sp, #4
   d6978:	f000 fa32 	bl	d6de0 <itoa>
	*this = buf;
   d697c:	a901      	add	r1, sp, #4
   d697e:	4620      	mov	r0, r4
   d6980:	f7ff ffde 	bl	d6940 <_ZN6StringaSEPKc>
}
   d6984:	4620      	mov	r0, r4
   d6986:	b00a      	add	sp, #40	; 0x28
   d6988:	bd10      	pop	{r4, pc}

000d698a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d698a:	b570      	push	{r4, r5, r6, lr}
   d698c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d698e:	460e      	mov	r6, r1
   d6990:	b909      	cbnz	r1, d6996 <_ZN6String6concatEPKcj+0xc>
   d6992:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6994:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6996:	b16a      	cbz	r2, d69b4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6998:	6884      	ldr	r4, [r0, #8]
   d699a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d699c:	4621      	mov	r1, r4
   d699e:	f7ff ff4f 	bl	d6840 <_ZN6String7reserveEj>
   d69a2:	2800      	cmp	r0, #0
   d69a4:	d0f5      	beq.n	d6992 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d69a6:	6828      	ldr	r0, [r5, #0]
   d69a8:	68ab      	ldr	r3, [r5, #8]
   d69aa:	4631      	mov	r1, r6
   d69ac:	4418      	add	r0, r3
   d69ae:	f002 fbd1 	bl	d9154 <strcpy>
	len = newlen;
   d69b2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d69b4:	2001      	movs	r0, #1
   d69b6:	e7ed      	b.n	d6994 <_ZN6String6concatEPKcj+0xa>

000d69b8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d69b8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d69ba:	2300      	movs	r3, #0
	buf[0] = c;
   d69bc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d69c0:	2201      	movs	r2, #1
   d69c2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d69c4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d69c8:	f7ff ffdf 	bl	d698a <_ZN6String6concatEPKcj>
}
   d69cc:	b003      	add	sp, #12
   d69ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d69d2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d69d2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d69d4:	688a      	ldr	r2, [r1, #8]
   d69d6:	6809      	ldr	r1, [r1, #0]
{
   d69d8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d69da:	f7ff ffd6 	bl	d698a <_ZN6String6concatEPKcj>
   d69de:	b910      	cbnz	r0, d69e6 <_ZplRK15StringSumHelperRK6String+0x14>
   d69e0:	4620      	mov	r0, r4
   d69e2:	f7ff ff16 	bl	d6812 <_ZN6String10invalidateEv>
	return a;
}
   d69e6:	4620      	mov	r0, r4
   d69e8:	bd10      	pop	{r4, pc}

000d69ea <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d69ea:	b513      	push	{r0, r1, r4, lr}
   d69ec:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d69ee:	b929      	cbnz	r1, d69fc <_ZplRK15StringSumHelperPKc+0x12>
   d69f0:	4620      	mov	r0, r4
   d69f2:	f7ff ff0e 	bl	d6812 <_ZN6String10invalidateEv>
	return a;
}
   d69f6:	4620      	mov	r0, r4
   d69f8:	b002      	add	sp, #8
   d69fa:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d69fc:	4608      	mov	r0, r1
   d69fe:	9101      	str	r1, [sp, #4]
   d6a00:	f002 fbcd 	bl	d919e <strlen>
   d6a04:	9901      	ldr	r1, [sp, #4]
   d6a06:	4602      	mov	r2, r0
   d6a08:	4620      	mov	r0, r4
   d6a0a:	f7ff ffbe 	bl	d698a <_ZN6String6concatEPKcj>
   d6a0e:	2800      	cmp	r0, #0
   d6a10:	d0ee      	beq.n	d69f0 <_ZplRK15StringSumHelperPKc+0x6>
   d6a12:	e7f0      	b.n	d69f6 <_ZplRK15StringSumHelperPKc+0xc>

000d6a14 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   d6a14:	b510      	push	{r4, lr}
   d6a16:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   d6a18:	f7ff ffce 	bl	d69b8 <_ZN6String6concatEc>
   d6a1c:	b910      	cbnz	r0, d6a24 <_ZplRK15StringSumHelperc+0x10>
   d6a1e:	4620      	mov	r0, r4
   d6a20:	f7ff fef7 	bl	d6812 <_ZN6String10invalidateEv>
	return a;
}
   d6a24:	4620      	mov	r0, r4
   d6a26:	bd10      	pop	{r4, pc}

000d6a28 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6a28:	b40e      	push	{r1, r2, r3}
   d6a2a:	b570      	push	{r4, r5, r6, lr}
   d6a2c:	b087      	sub	sp, #28
   d6a2e:	ad0b      	add	r5, sp, #44	; 0x2c
   d6a30:	4604      	mov	r4, r0
   d6a32:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6a36:	9201      	str	r2, [sp, #4]
   d6a38:	462b      	mov	r3, r5
   d6a3a:	2105      	movs	r1, #5
   d6a3c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d6a3e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6a40:	f7ff f944 	bl	d5ccc <vsnprintf>
    va_end(marker);

    String result;
   d6a44:	490b      	ldr	r1, [pc, #44]	; (d6a74 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6a46:	4606      	mov	r6, r0
    String result;
   d6a48:	4620      	mov	r0, r4
   d6a4a:	f7ff ff26 	bl	d689a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d6a4e:	4631      	mov	r1, r6
   d6a50:	4620      	mov	r0, r4
   d6a52:	f7ff fef5 	bl	d6840 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6a56:	6820      	ldr	r0, [r4, #0]
   d6a58:	b130      	cbz	r0, d6a68 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6a5a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d6a5c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6a5e:	462b      	mov	r3, r5
   d6a60:	1c71      	adds	r1, r6, #1
   d6a62:	f7ff f933 	bl	d5ccc <vsnprintf>
        va_end(marker);
        result.len = n;
   d6a66:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d6a68:	4620      	mov	r0, r4
   d6a6a:	b007      	add	sp, #28
   d6a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6a70:	b003      	add	sp, #12
   d6a72:	4770      	bx	lr
   d6a74:	000d93e6 	.word	0x000d93e6

000d6a78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6a78:	b510      	push	{r4, lr}
   d6a7a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6a7c:	6800      	ldr	r0, [r0, #0]
   d6a7e:	b118      	cbz	r0, d6a88 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6a80:	f7ff f914 	bl	d5cac <free>
            wakeupSource_ = nullptr;
   d6a84:	2300      	movs	r3, #0
   d6a86:	6023      	str	r3, [r4, #0]
        }
    }
   d6a88:	bd10      	pop	{r4, pc}

000d6a8a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6a8a:	b510      	push	{r4, lr}
   d6a8c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6a8e:	f7ff fff3 	bl	d6a78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6a92:	4620      	mov	r0, r4
   d6a94:	bd10      	pop	{r4, pc}
	...

000d6a98 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a98:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6a9a:	4b09      	ldr	r3, [pc, #36]	; (d6ac0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6a9c:	4c09      	ldr	r4, [pc, #36]	; (d6ac4 <_GLOBAL__sub_I_System+0x2c>)
   d6a9e:	2202      	movs	r2, #2
   d6aa0:	2000      	movs	r0, #0
   d6aa2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6aa4:	4b08      	ldr	r3, [pc, #32]	; (d6ac8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6aa6:	6020      	str	r0, [r4, #0]
   d6aa8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6aaa:	71a0      	strb	r0, [r4, #6]
   d6aac:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6aae:	f7ff f859 	bl	d5b64 <set_system_mode>
SystemClass System;
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	4a05      	ldr	r2, [pc, #20]	; (d6acc <_GLOBAL__sub_I_System+0x34>)
   d6ab6:	4906      	ldr	r1, [pc, #24]	; (d6ad0 <_GLOBAL__sub_I_System+0x38>)
   d6ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6abc:	f000 bc66 	b.w	d738c <__aeabi_atexit>
   d6ac0:	2003e63c 	.word	0x2003e63c
   d6ac4:	2003e630 	.word	0x2003e630
   d6ac8:	ffff0000 	.word	0xffff0000
   d6acc:	2003e444 	.word	0x2003e444
   d6ad0:	000d6a8b 	.word	0x000d6a8b

000d6ad4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6ad4:	4b02      	ldr	r3, [pc, #8]	; (d6ae0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6ad6:	681a      	ldr	r2, [r3, #0]
   d6ad8:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6ada:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6adc:	4770      	bx	lr
   d6ade:	bf00      	nop
   d6ae0:	2003e3d8 	.word	0x2003e3d8
   d6ae4:	2003e640 	.word	0x2003e640

000d6ae8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6ae8:	4770      	bx	lr

000d6aea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6aea:	7441      	strb	r1, [r0, #17]
}
   d6aec:	4770      	bx	lr

000d6aee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6aee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6af0:	7c00      	ldrb	r0, [r0, #16]
   d6af2:	f7fe fff7 	bl	d5ae4 <hal_usart_available_data_for_write>
}
   d6af6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6afa:	bd08      	pop	{r3, pc}

000d6afc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6afc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6afe:	7c00      	ldrb	r0, [r0, #16]
   d6b00:	f7fe ffc8 	bl	d5a94 <hal_usart_available>
}
   d6b04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b08:	bd08      	pop	{r3, pc}

000d6b0a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6b0a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6b0c:	7c00      	ldrb	r0, [r0, #16]
   d6b0e:	f7fe ffd1 	bl	d5ab4 <hal_usart_peek>
}
   d6b12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b16:	bd08      	pop	{r3, pc}

000d6b18 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6b18:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6b1a:	7c00      	ldrb	r0, [r0, #16]
   d6b1c:	f7fe ffc2 	bl	d5aa4 <hal_usart_read>
}
   d6b20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b24:	bd08      	pop	{r3, pc}

000d6b26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6b26:	7c00      	ldrb	r0, [r0, #16]
   d6b28:	f7fe bfcc 	b.w	d5ac4 <hal_usart_flush>

000d6b2c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6b2e:	7c45      	ldrb	r5, [r0, #17]
{
   d6b30:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6b32:	b12d      	cbz	r5, d6b40 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6b34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b36:	b003      	add	sp, #12
   d6b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6b3c:	f7fe bfa2 	b.w	d5a84 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6b40:	7c00      	ldrb	r0, [r0, #16]
   d6b42:	9101      	str	r1, [sp, #4]
   d6b44:	f7fe ffce 	bl	d5ae4 <hal_usart_available_data_for_write>
   d6b48:	2800      	cmp	r0, #0
   d6b4a:	9901      	ldr	r1, [sp, #4]
   d6b4c:	dcf2      	bgt.n	d6b34 <_ZN11USARTSerial5writeEh+0x8>
}
   d6b4e:	4628      	mov	r0, r5
   d6b50:	b003      	add	sp, #12
   d6b52:	bd30      	pop	{r4, r5, pc}

000d6b54 <_ZN11USARTSerialD0Ev>:
   d6b54:	b510      	push	{r4, lr}
   d6b56:	2114      	movs	r1, #20
   d6b58:	4604      	mov	r4, r0
   d6b5a:	f000 fc1c 	bl	d7396 <_ZdlPvj>
   d6b5e:	4620      	mov	r0, r4
   d6b60:	bd10      	pop	{r4, pc}
	...

000d6b64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6b64:	b510      	push	{r4, lr}
   d6b66:	f04f 0c00 	mov.w	ip, #0
   d6b6a:	4604      	mov	r4, r0
   d6b6c:	4608      	mov	r0, r1
   d6b6e:	4611      	mov	r1, r2
   d6b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b74:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6b78:	4a04      	ldr	r2, [pc, #16]	; (d6b8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6b7a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6b7c:	2201      	movs	r2, #1
  _serial = serial;
   d6b7e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6b80:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6b82:	461a      	mov	r2, r3
   d6b84:	f7fe ff76 	bl	d5a74 <hal_usart_init>
}
   d6b88:	4620      	mov	r0, r4
   d6b8a:	bd10      	pop	{r4, pc}
   d6b8c:	000d9594 	.word	0x000d9594

000d6b90 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b90:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b92:	4c0e      	ldr	r4, [pc, #56]	; (d6bcc <_Z22__fetch_global_Serial1v+0x3c>)
   d6b94:	7821      	ldrb	r1, [r4, #0]
   d6b96:	f3bf 8f5b 	dmb	ish
   d6b9a:	f011 0101 	ands.w	r1, r1, #1
   d6b9e:	d112      	bne.n	d6bc6 <_Z22__fetch_global_Serial1v+0x36>
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	9101      	str	r1, [sp, #4]
   d6ba4:	f7fd fa7d 	bl	d40a2 <__cxa_guard_acquire>
   d6ba8:	9901      	ldr	r1, [sp, #4]
   d6baa:	b160      	cbz	r0, d6bc6 <_Z22__fetch_global_Serial1v+0x36>
   d6bac:	4a08      	ldr	r2, [pc, #32]	; (d6bd0 <_Z22__fetch_global_Serial1v+0x40>)
   d6bae:	4b09      	ldr	r3, [pc, #36]	; (d6bd4 <_Z22__fetch_global_Serial1v+0x44>)
   d6bb0:	4809      	ldr	r0, [pc, #36]	; (d6bd8 <_Z22__fetch_global_Serial1v+0x48>)
   d6bb2:	f7ff ffd7 	bl	d6b64 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	f7fd fa78 	bl	d40ac <__cxa_guard_release>
   d6bbc:	4a07      	ldr	r2, [pc, #28]	; (d6bdc <_Z22__fetch_global_Serial1v+0x4c>)
   d6bbe:	4908      	ldr	r1, [pc, #32]	; (d6be0 <_Z22__fetch_global_Serial1v+0x50>)
   d6bc0:	4805      	ldr	r0, [pc, #20]	; (d6bd8 <_Z22__fetch_global_Serial1v+0x48>)
   d6bc2:	f000 fbe3 	bl	d738c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6bc6:	4804      	ldr	r0, [pc, #16]	; (d6bd8 <_Z22__fetch_global_Serial1v+0x48>)
   d6bc8:	b002      	add	sp, #8
   d6bca:	bd10      	pop	{r4, pc}
   d6bcc:	2003e644 	.word	0x2003e644
   d6bd0:	2003e648 	.word	0x2003e648
   d6bd4:	2003e6cc 	.word	0x2003e6cc
   d6bd8:	2003e750 	.word	0x2003e750
   d6bdc:	2003e444 	.word	0x2003e444
   d6be0:	000d6ae9 	.word	0x000d6ae9

000d6be4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6be4:	7441      	strb	r1, [r0, #17]
}
   d6be6:	4770      	bx	lr

000d6be8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6be8:	4770      	bx	lr

000d6bea <_ZN9USBSerial4readEv>:
{
   d6bea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6bec:	2100      	movs	r1, #0
   d6bee:	7c00      	ldrb	r0, [r0, #16]
   d6bf0:	f7fe ff98 	bl	d5b24 <HAL_USB_USART_Receive_Data>
}
   d6bf4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6bf8:	bd08      	pop	{r3, pc}

000d6bfa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6bfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6bfc:	2101      	movs	r1, #1
   d6bfe:	7c00      	ldrb	r0, [r0, #16]
   d6c00:	f7fe ff90 	bl	d5b24 <HAL_USB_USART_Receive_Data>
}
   d6c04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6c08:	bd08      	pop	{r3, pc}

000d6c0a <_ZN9USBSerial17availableForWriteEv>:
{
   d6c0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c0c:	7c00      	ldrb	r0, [r0, #16]
   d6c0e:	f7fe ff81 	bl	d5b14 <HAL_USB_USART_Available_Data_For_Write>
}
   d6c12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c16:	bd08      	pop	{r3, pc}

000d6c18 <_ZN9USBSerial9availableEv>:
{
   d6c18:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c1a:	7c00      	ldrb	r0, [r0, #16]
   d6c1c:	f7fe ff72 	bl	d5b04 <HAL_USB_USART_Available_Data>
}
   d6c20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c24:	bd08      	pop	{r3, pc}

000d6c26 <_ZN9USBSerial5writeEh>:
{
   d6c26:	b513      	push	{r0, r1, r4, lr}
   d6c28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c2a:	7c00      	ldrb	r0, [r0, #16]
{
   d6c2c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6c2e:	f7fe ff71 	bl	d5b14 <HAL_USB_USART_Available_Data_For_Write>
   d6c32:	2800      	cmp	r0, #0
   d6c34:	9901      	ldr	r1, [sp, #4]
   d6c36:	dc01      	bgt.n	d6c3c <_ZN9USBSerial5writeEh+0x16>
   d6c38:	7c60      	ldrb	r0, [r4, #17]
   d6c3a:	b120      	cbz	r0, d6c46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6c3c:	7c20      	ldrb	r0, [r4, #16]
   d6c3e:	f7fe ff79 	bl	d5b34 <HAL_USB_USART_Send_Data>
   d6c42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6c46:	b002      	add	sp, #8
   d6c48:	bd10      	pop	{r4, pc}

000d6c4a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6c4a:	7c00      	ldrb	r0, [r0, #16]
   d6c4c:	f7fe bf7a 	b.w	d5b44 <HAL_USB_USART_Flush_Data>

000d6c50 <_ZN9USBSerialD0Ev>:
   d6c50:	b510      	push	{r4, lr}
   d6c52:	2114      	movs	r1, #20
   d6c54:	4604      	mov	r4, r0
   d6c56:	f000 fb9e 	bl	d7396 <_ZdlPvj>
   d6c5a:	4620      	mov	r0, r4
   d6c5c:	bd10      	pop	{r4, pc}
	...

000d6c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6c60:	b510      	push	{r4, lr}
   d6c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c66:	4604      	mov	r4, r0
   d6c68:	4608      	mov	r0, r1
   d6c6a:	2100      	movs	r1, #0
   d6c6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6c70:	4b04      	ldr	r3, [pc, #16]	; (d6c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6c72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6c74:	2301      	movs	r3, #1
  _serial = serial;
   d6c76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6c78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6c7a:	4611      	mov	r1, r2
   d6c7c:	f7fe ff3a 	bl	d5af4 <HAL_USB_USART_Init>
}
   d6c80:	4620      	mov	r0, r4
   d6c82:	bd10      	pop	{r4, pc}
   d6c84:	000d95c4 	.word	0x000d95c4

000d6c88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c88:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c8a:	2214      	movs	r2, #20
{
   d6c8c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c8e:	2100      	movs	r1, #0
   d6c90:	f002 fa00 	bl	d9094 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6c94:	4620      	mov	r0, r4
   d6c96:	bd10      	pop	{r4, pc}

000d6c98 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6c98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c9a:	4c10      	ldr	r4, [pc, #64]	; (d6cdc <_Z16_fetch_usbserialv+0x44>)
{
   d6c9c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6c9e:	a803      	add	r0, sp, #12
   d6ca0:	f7ff fff2 	bl	d6c88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ca4:	7821      	ldrb	r1, [r4, #0]
   d6ca6:	f3bf 8f5b 	dmb	ish
   d6caa:	f011 0101 	ands.w	r1, r1, #1
   d6cae:	d111      	bne.n	d6cd4 <_Z16_fetch_usbserialv+0x3c>
   d6cb0:	4620      	mov	r0, r4
   d6cb2:	9101      	str	r1, [sp, #4]
   d6cb4:	f7fd f9f5 	bl	d40a2 <__cxa_guard_acquire>
   d6cb8:	9901      	ldr	r1, [sp, #4]
   d6cba:	b158      	cbz	r0, d6cd4 <_Z16_fetch_usbserialv+0x3c>
   d6cbc:	aa03      	add	r2, sp, #12
   d6cbe:	4808      	ldr	r0, [pc, #32]	; (d6ce0 <_Z16_fetch_usbserialv+0x48>)
   d6cc0:	f7ff ffce 	bl	d6c60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7fd f9f1 	bl	d40ac <__cxa_guard_release>
   d6cca:	4a06      	ldr	r2, [pc, #24]	; (d6ce4 <_Z16_fetch_usbserialv+0x4c>)
   d6ccc:	4906      	ldr	r1, [pc, #24]	; (d6ce8 <_Z16_fetch_usbserialv+0x50>)
   d6cce:	4804      	ldr	r0, [pc, #16]	; (d6ce0 <_Z16_fetch_usbserialv+0x48>)
   d6cd0:	f000 fb5c 	bl	d738c <__aeabi_atexit>
	return _usbserial;
}
   d6cd4:	4802      	ldr	r0, [pc, #8]	; (d6ce0 <_Z16_fetch_usbserialv+0x48>)
   d6cd6:	b008      	add	sp, #32
   d6cd8:	bd10      	pop	{r4, pc}
   d6cda:	bf00      	nop
   d6cdc:	2003e764 	.word	0x2003e764
   d6ce0:	2003e768 	.word	0x2003e768
   d6ce4:	2003e444 	.word	0x2003e444
   d6ce8:	000d6be9 	.word	0x000d6be9

000d6cec <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6cec:	2200      	movs	r2, #0
   d6cee:	6840      	ldr	r0, [r0, #4]
   d6cf0:	4611      	mov	r1, r2
   d6cf2:	f7fe bf9b 	b.w	d5c2c <network_ready>

000d6cf6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cf6:	2200      	movs	r2, #0
   d6cf8:	6840      	ldr	r0, [r0, #4]
   d6cfa:	4611      	mov	r1, r2
   d6cfc:	f7fe bfb6 	b.w	d5c6c <network_listening>

000d6d00 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6d00:	2200      	movs	r2, #0
   d6d02:	6840      	ldr	r0, [r0, #4]
   d6d04:	4611      	mov	r1, r2
   d6d06:	f7fe bfc1 	b.w	d5c8c <network_get_listen_timeout>

000d6d0a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6d0a:	6840      	ldr	r0, [r0, #4]
   d6d0c:	2200      	movs	r2, #0
   d6d0e:	f7fe bfb5 	b.w	d5c7c <network_set_listen_timeout>

000d6d12 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6d12:	6840      	ldr	r0, [r0, #4]
   d6d14:	2200      	movs	r2, #0
   d6d16:	f081 0101 	eor.w	r1, r1, #1
   d6d1a:	f7fe bf9f 	b.w	d5c5c <network_listen>

000d6d1e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6d1e:	2300      	movs	r3, #0
   d6d20:	6840      	ldr	r0, [r0, #4]
   d6d22:	461a      	mov	r2, r3
   d6d24:	4619      	mov	r1, r3
   d6d26:	f7fe bf91 	b.w	d5c4c <network_off>

000d6d2a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	6840      	ldr	r0, [r0, #4]
   d6d2e:	461a      	mov	r2, r3
   d6d30:	4619      	mov	r1, r3
   d6d32:	f7fe bf83 	b.w	d5c3c <network_on>

000d6d36 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6d36:	2200      	movs	r2, #0
   d6d38:	6840      	ldr	r0, [r0, #4]
   d6d3a:	4611      	mov	r1, r2
   d6d3c:	f7fe bf66 	b.w	d5c0c <network_connecting>

000d6d40 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d40:	6840      	ldr	r0, [r0, #4]
   d6d42:	2200      	movs	r2, #0
   d6d44:	2102      	movs	r1, #2
   d6d46:	f7fe bf69 	b.w	d5c1c <network_disconnect>

000d6d4a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6d4a:	2300      	movs	r3, #0
   d6d4c:	6840      	ldr	r0, [r0, #4]
   d6d4e:	461a      	mov	r2, r3
   d6d50:	f7fe bf54 	b.w	d5bfc <network_connect>

000d6d54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6d54:	4b02      	ldr	r3, [pc, #8]	; (d6d60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6d56:	2204      	movs	r2, #4
   d6d58:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6d5a:	4a02      	ldr	r2, [pc, #8]	; (d6d64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6d5c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6d5e:	4770      	bx	lr
   d6d60:	2003e77c 	.word	0x2003e77c
   d6d64:	000d95f4 	.word	0x000d95f4

000d6d68 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6d68:	b510      	push	{r4, lr}
   d6d6a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6d6c:	f002 fa17 	bl	d919e <strlen>
   d6d70:	3801      	subs	r0, #1
   d6d72:	1823      	adds	r3, r4, r0
   d6d74:	4620      	mov	r0, r4
	while(i<j){
   d6d76:	4283      	cmp	r3, r0
   d6d78:	d906      	bls.n	d6d88 <_Z11str_reversePc+0x20>
		c = *i;
   d6d7a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6d7c:	7819      	ldrb	r1, [r3, #0]
   d6d7e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6d82:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6d86:	e7f6      	b.n	d6d76 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6d88:	bd10      	pop	{r4, pc}

000d6d8a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6d8a:	b570      	push	{r4, r5, r6, lr}
   d6d8c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6d8e:	1e91      	subs	r1, r2, #2
   d6d90:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6d92:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6d94:	d822      	bhi.n	d6ddc <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6d96:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6d98:	b16d      	cbz	r5, d6db6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6d9a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6d9e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6da2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6da4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6da6:	bf94      	ite	ls
   d6da8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6daa:	3157      	addhi	r1, #87	; 0x57
   d6dac:	b2c9      	uxtb	r1, r1
   d6dae:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6db2:	4635      	mov	r5, r6
	while(a){
   d6db4:	e7f0      	b.n	d6d98 <ultoa+0xe>
   d6db6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6db8:	4423      	add	r3, r4
            *ptr++ = '0';
   d6dba:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6dbc:	4293      	cmp	r3, r2
   d6dbe:	d902      	bls.n	d6dc6 <ultoa+0x3c>
            *ptr++ = '0';
   d6dc0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6dc4:	e7fa      	b.n	d6dbc <ultoa+0x32>
   d6dc6:	1a1a      	subs	r2, r3, r0
   d6dc8:	4283      	cmp	r3, r0
   d6dca:	bf38      	it	cc
   d6dcc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6dce:	2300      	movs	r3, #0
   d6dd0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6dd2:	4620      	mov	r0, r4
   d6dd4:	f7ff ffc8 	bl	d6d68 <_Z11str_reversePc>
	return buffer;
   d6dd8:	4620      	mov	r0, r4
}
   d6dda:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6ddc:	2000      	movs	r0, #0
   d6dde:	e7fc      	b.n	d6dda <ultoa+0x50>

000d6de0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6de0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6de2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6de4:	460c      	mov	r4, r1
   d6de6:	4615      	mov	r5, r2
	if(a<0){
   d6de8:	da0e      	bge.n	d6e08 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6dee:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6df2:	bf14      	ite	ne
   d6df4:	4258      	negne	r0, r3
   d6df6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6df8:	2301      	movs	r3, #1
		*buffer = '-';
   d6dfa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6dfc:	462a      	mov	r2, r5
   d6dfe:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6e00:	f7ff ffc3 	bl	d6d8a <ultoa>
	}
	return buffer;
}
   d6e04:	4620      	mov	r0, r4
   d6e06:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6e08:	2301      	movs	r3, #1
   d6e0a:	e7f9      	b.n	d6e00 <itoa+0x20>

000d6e0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6e0c:	4b01      	ldr	r3, [pc, #4]	; (d6e14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6e0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6e10:	4770      	bx	lr
   d6e12:	bf00      	nop
   d6e14:	2003e3e0 	.word	0x2003e3e0

000d6e18 <serialEventRun>:
{
   d6e18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6e1a:	4b0b      	ldr	r3, [pc, #44]	; (d6e48 <serialEventRun+0x30>)
   d6e1c:	b143      	cbz	r3, d6e30 <serialEventRun+0x18>
   d6e1e:	f7ff ff3b 	bl	d6c98 <_Z16_fetch_usbserialv>
   d6e22:	6803      	ldr	r3, [r0, #0]
   d6e24:	691b      	ldr	r3, [r3, #16]
   d6e26:	4798      	blx	r3
   d6e28:	2800      	cmp	r0, #0
   d6e2a:	dd01      	ble.n	d6e30 <serialEventRun+0x18>
        serialEvent();
   d6e2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6e30:	4b06      	ldr	r3, [pc, #24]	; (d6e4c <serialEventRun+0x34>)
   d6e32:	b143      	cbz	r3, d6e46 <serialEventRun+0x2e>
   d6e34:	f7ff feac 	bl	d6b90 <_Z22__fetch_global_Serial1v>
   d6e38:	6803      	ldr	r3, [r0, #0]
   d6e3a:	691b      	ldr	r3, [r3, #16]
   d6e3c:	4798      	blx	r3
   d6e3e:	2800      	cmp	r0, #0
   d6e40:	dd01      	ble.n	d6e46 <serialEventRun+0x2e>
        serialEvent1();
   d6e42:	f3af 8000 	nop.w
}
   d6e46:	bd08      	pop	{r3, pc}
	...

000d6e50 <_post_loop>:
{
   d6e50:	b508      	push	{r3, lr}
	serialEventRun();
   d6e52:	f7ff ffe1 	bl	d6e18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6e56:	f7fe fd4b 	bl	d58f0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6e5a:	4b01      	ldr	r3, [pc, #4]	; (d6e60 <_post_loop+0x10>)
   d6e5c:	6018      	str	r0, [r3, #0]
}
   d6e5e:	bd08      	pop	{r3, pc}
   d6e60:	2003e798 	.word	0x2003e798

000d6e64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6e64:	4802      	ldr	r0, [pc, #8]	; (d6e70 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6e66:	4a03      	ldr	r2, [pc, #12]	; (d6e74 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6e68:	4903      	ldr	r1, [pc, #12]	; (d6e78 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6e6a:	1a12      	subs	r2, r2, r0
   d6e6c:	f002 b904 	b.w	d9078 <memcpy>
   d6e70:	2003f400 	.word	0x2003f400
   d6e74:	2003f404 	.word	0x2003f404
   d6e78:	000d9670 	.word	0x000d9670

000d6e7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6e7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e7e:	2300      	movs	r3, #0
   d6e80:	9300      	str	r3, [sp, #0]
   d6e82:	461a      	mov	r2, r3
   d6e84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e88:	f7fe fe96 	bl	d5bb8 <system_ctrl_set_result>
}
   d6e8c:	b003      	add	sp, #12
   d6e8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e94 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6e94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6e96:	8843      	ldrh	r3, [r0, #2]
   d6e98:	2b0a      	cmp	r3, #10
   d6e9a:	d008      	beq.n	d6eae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6e9c:	2b50      	cmp	r3, #80	; 0x50
   d6e9e:	d10b      	bne.n	d6eb8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6ea0:	4b09      	ldr	r3, [pc, #36]	; (d6ec8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6ea2:	681b      	ldr	r3, [r3, #0]
   d6ea4:	b14b      	cbz	r3, d6eba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6ea6:	b003      	add	sp, #12
   d6ea8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6eac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6eae:	f7ff ffe5 	bl	d6e7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6eb2:	b003      	add	sp, #12
   d6eb4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6eb8:	2300      	movs	r3, #0
   d6eba:	9300      	str	r3, [sp, #0]
   d6ebc:	461a      	mov	r2, r3
   d6ebe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ec2:	f7fe fe79 	bl	d5bb8 <system_ctrl_set_result>
}
   d6ec6:	e7f4      	b.n	d6eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6ec8:	2003e788 	.word	0x2003e788

000d6ecc <module_user_init_hook>:
{
   d6ecc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6ece:	4c12      	ldr	r4, [pc, #72]	; (d6f18 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6ed0:	4812      	ldr	r0, [pc, #72]	; (d6f1c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6ed2:	4d13      	ldr	r5, [pc, #76]	; (d6f20 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6ed4:	2100      	movs	r1, #0
   d6ed6:	f7fe ff19 	bl	d5d0c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6eda:	6823      	ldr	r3, [r4, #0]
   d6edc:	42ab      	cmp	r3, r5
   d6ede:	4b11      	ldr	r3, [pc, #68]	; (d6f24 <module_user_init_hook+0x58>)
   d6ee0:	bf0c      	ite	eq
   d6ee2:	2201      	moveq	r2, #1
   d6ee4:	2200      	movne	r2, #0
   d6ee6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6ee8:	d002      	beq.n	d6ef0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6eea:	f7ff ffbb 	bl	d6e64 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6eee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6ef0:	f7fe fce6 	bl	d58c0 <HAL_RNG_GetRandomNumber>
   d6ef4:	4604      	mov	r4, r0
    srand(seed);
   d6ef6:	f002 f8d5 	bl	d90a4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6efa:	4b0b      	ldr	r3, [pc, #44]	; (d6f28 <module_user_init_hook+0x5c>)
   d6efc:	b113      	cbz	r3, d6f04 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6efe:	4620      	mov	r0, r4
   d6f00:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6f04:	2100      	movs	r1, #0
   d6f06:	4808      	ldr	r0, [pc, #32]	; (d6f28 <module_user_init_hook+0x5c>)
   d6f08:	f7fe fe70 	bl	d5bec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f10:	4806      	ldr	r0, [pc, #24]	; (d6f2c <module_user_init_hook+0x60>)
   d6f12:	2100      	movs	r1, #0
   d6f14:	f7fe be46 	b.w	d5ba4 <system_ctrl_set_app_request_handler>
   d6f18:	2003f400 	.word	0x2003f400
   d6f1c:	000d6e0d 	.word	0x000d6e0d
   d6f20:	9a271c1e 	.word	0x9a271c1e
   d6f24:	2003e784 	.word	0x2003e784
   d6f28:	00000000 	.word	0x00000000
   d6f2c:	000d6e95 	.word	0x000d6e95

000d6f30 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6f30:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6f32:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6f34:	d902      	bls.n	d6f3c <pinAvailable+0xc>
    return false;
   d6f36:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6f38:	b002      	add	sp, #8
   d6f3a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6f3c:	f1a0 030b 	sub.w	r3, r0, #11
   d6f40:	2b02      	cmp	r3, #2
   d6f42:	d81a      	bhi.n	d6f7a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6f44:	4c17      	ldr	r4, [pc, #92]	; (d6fa4 <pinAvailable+0x74>)
   d6f46:	7821      	ldrb	r1, [r4, #0]
   d6f48:	f3bf 8f5b 	dmb	ish
   d6f4c:	f011 0101 	ands.w	r1, r1, #1
   d6f50:	d10b      	bne.n	d6f6a <pinAvailable+0x3a>
   d6f52:	4620      	mov	r0, r4
   d6f54:	9101      	str	r1, [sp, #4]
   d6f56:	f7fd f8a4 	bl	d40a2 <__cxa_guard_acquire>
   d6f5a:	9901      	ldr	r1, [sp, #4]
   d6f5c:	b128      	cbz	r0, d6f6a <pinAvailable+0x3a>
   d6f5e:	4812      	ldr	r0, [pc, #72]	; (d6fa8 <pinAvailable+0x78>)
   d6f60:	f7ff fc46 	bl	d67f0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6f64:	4620      	mov	r0, r4
   d6f66:	f7fd f8a1 	bl	d40ac <__cxa_guard_release>
   d6f6a:	4b0f      	ldr	r3, [pc, #60]	; (d6fa8 <pinAvailable+0x78>)
   d6f6c:	7818      	ldrb	r0, [r3, #0]
   d6f6e:	f7fe fd79 	bl	d5a64 <hal_spi_is_enabled>
   d6f72:	2800      	cmp	r0, #0
   d6f74:	d1df      	bne.n	d6f36 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6f76:	2001      	movs	r0, #1
   d6f78:	e7de      	b.n	d6f38 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6f7a:	2801      	cmp	r0, #1
   d6f7c:	d809      	bhi.n	d6f92 <pinAvailable+0x62>
   d6f7e:	f000 f86f 	bl	d7060 <_Z19__fetch_global_Wirev>
   d6f82:	2100      	movs	r1, #0
   d6f84:	7c00      	ldrb	r0, [r0, #16]
   d6f86:	f7fe fd35 	bl	d59f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6f8a:	f080 0001 	eor.w	r0, r0, #1
   d6f8e:	b2c0      	uxtb	r0, r0
   d6f90:	e7d2      	b.n	d6f38 <pinAvailable+0x8>
   d6f92:	3809      	subs	r0, #9
   d6f94:	2801      	cmp	r0, #1
   d6f96:	d8ee      	bhi.n	d6f76 <pinAvailable+0x46>
   d6f98:	f7ff fdfa 	bl	d6b90 <_Z22__fetch_global_Serial1v>
   d6f9c:	7c00      	ldrb	r0, [r0, #16]
   d6f9e:	f7fe fd99 	bl	d5ad4 <hal_usart_is_enabled>
   d6fa2:	e7f2      	b.n	d6f8a <pinAvailable+0x5a>
   d6fa4:	2003e78c 	.word	0x2003e78c
   d6fa8:	2003e790 	.word	0x2003e790

000d6fac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fac:	2823      	cmp	r0, #35	; 0x23
{
   d6fae:	b538      	push	{r3, r4, r5, lr}
   d6fb0:	4604      	mov	r4, r0
   d6fb2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6fb4:	d80a      	bhi.n	d6fcc <pinMode+0x20>
   d6fb6:	29ff      	cmp	r1, #255	; 0xff
   d6fb8:	d008      	beq.n	d6fcc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6fba:	f7ff ffb9 	bl	d6f30 <pinAvailable>
   d6fbe:	b128      	cbz	r0, d6fcc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6fc0:	4629      	mov	r1, r5
   d6fc2:	4620      	mov	r0, r4
}
   d6fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6fc8:	f7fe bca2 	b.w	d5910 <HAL_Pin_Mode>
}
   d6fcc:	bd38      	pop	{r3, r4, r5, pc}

000d6fce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6fce:	b538      	push	{r3, r4, r5, lr}
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6fd4:	f7fe fca4 	bl	d5920 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6fd8:	28ff      	cmp	r0, #255	; 0xff
   d6fda:	d010      	beq.n	d6ffe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6fdc:	2806      	cmp	r0, #6
   d6fde:	d804      	bhi.n	d6fea <digitalWrite+0x1c>
   d6fe0:	234d      	movs	r3, #77	; 0x4d
   d6fe2:	fa23 f000 	lsr.w	r0, r3, r0
   d6fe6:	07c3      	lsls	r3, r0, #31
   d6fe8:	d409      	bmi.n	d6ffe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6fea:	4620      	mov	r0, r4
   d6fec:	f7ff ffa0 	bl	d6f30 <pinAvailable>
   d6ff0:	b128      	cbz	r0, d6ffe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ff2:	4629      	mov	r1, r5
   d6ff4:	4620      	mov	r0, r4
}
   d6ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6ffa:	f7fe bc99 	b.w	d5930 <HAL_GPIO_Write>
}
   d6ffe:	bd38      	pop	{r3, r4, r5, pc}

000d7000 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7000:	280d      	cmp	r0, #13
{
   d7002:	b510      	push	{r4, lr}
   d7004:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7006:	bf9c      	itt	ls
   d7008:	340e      	addls	r4, #14
   d700a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d700c:	4620      	mov	r0, r4
   d700e:	f7ff ff8f 	bl	d6f30 <pinAvailable>
   d7012:	b150      	cbz	r0, d702a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7014:	2103      	movs	r1, #3
   d7016:	4620      	mov	r0, r4
   d7018:	f7fe fc72 	bl	d5900 <HAL_Validate_Pin_Function>
   d701c:	2803      	cmp	r0, #3
   d701e:	d104      	bne.n	d702a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7020:	4620      	mov	r0, r4
}
   d7022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7026:	f7fe bc8b 	b.w	d5940 <hal_adc_read>
}
   d702a:	2000      	movs	r0, #0
   d702c:	bd10      	pop	{r4, pc}
	...

000d7030 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7030:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7032:	2300      	movs	r3, #0
   d7034:	2520      	movs	r5, #32
   d7036:	8043      	strh	r3, [r0, #2]
   d7038:	2314      	movs	r3, #20
{
   d703a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d703c:	8003      	strh	r3, [r0, #0]
   d703e:	6085      	str	r5, [r0, #8]
   d7040:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7042:	4906      	ldr	r1, [pc, #24]	; (d705c <_Z17acquireWireBufferv+0x2c>)
   d7044:	4628      	mov	r0, r5
   d7046:	f000 f9a8 	bl	d739a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d704a:	4904      	ldr	r1, [pc, #16]	; (d705c <_Z17acquireWireBufferv+0x2c>)
	};
   d704c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d704e:	4628      	mov	r0, r5
   d7050:	f000 f9a3 	bl	d739a <_ZnajRKSt9nothrow_t>
	};
   d7054:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7056:	4620      	mov	r0, r4
   d7058:	bd38      	pop	{r3, r4, r5, pc}
   d705a:	bf00      	nop
   d705c:	000d9620 	.word	0x000d9620

000d7060 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7060:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7062:	4d0f      	ldr	r5, [pc, #60]	; (d70a0 <_Z19__fetch_global_Wirev+0x40>)
   d7064:	7829      	ldrb	r1, [r5, #0]
   d7066:	f3bf 8f5b 	dmb	ish
   d706a:	f011 0401 	ands.w	r4, r1, #1
{
   d706e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7070:	d113      	bne.n	d709a <_Z19__fetch_global_Wirev+0x3a>
   d7072:	4628      	mov	r0, r5
   d7074:	f7fd f815 	bl	d40a2 <__cxa_guard_acquire>
   d7078:	b178      	cbz	r0, d709a <_Z19__fetch_global_Wirev+0x3a>
   d707a:	a801      	add	r0, sp, #4
   d707c:	f7ff ffd8 	bl	d7030 <_Z17acquireWireBufferv>
   d7080:	aa01      	add	r2, sp, #4
   d7082:	4621      	mov	r1, r4
   d7084:	4807      	ldr	r0, [pc, #28]	; (d70a4 <_Z19__fetch_global_Wirev+0x44>)
   d7086:	f7ff f9a5 	bl	d63d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d708a:	4628      	mov	r0, r5
   d708c:	f7fd f80e 	bl	d40ac <__cxa_guard_release>
   d7090:	4a05      	ldr	r2, [pc, #20]	; (d70a8 <_Z19__fetch_global_Wirev+0x48>)
   d7092:	4906      	ldr	r1, [pc, #24]	; (d70ac <_Z19__fetch_global_Wirev+0x4c>)
   d7094:	4803      	ldr	r0, [pc, #12]	; (d70a4 <_Z19__fetch_global_Wirev+0x44>)
   d7096:	f000 f979 	bl	d738c <__aeabi_atexit>
	return wire;
}
   d709a:	4802      	ldr	r0, [pc, #8]	; (d70a4 <_Z19__fetch_global_Wirev+0x44>)
   d709c:	b007      	add	sp, #28
   d709e:	bd30      	pop	{r4, r5, pc}
   d70a0:	2003e79c 	.word	0x2003e79c
   d70a4:	2003e7a0 	.word	0x2003e7a0
   d70a8:	2003e444 	.word	0x2003e444
   d70ac:	000d637d 	.word	0x000d637d

000d70b0 <irq_handler>:
}

static void irq_handler(NRF_TIMER_Type        * p_reg,
                        timer_control_block_t * p_cb,
                        uint8_t                 channel_count)
{
   d70b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d70b4:	2400      	movs	r4, #0
   d70b6:	4606      	mov	r6, r0
   d70b8:	460f      	mov	r7, r1
   d70ba:	4690      	mov	r8, r2
   d70bc:	f500 75a0 	add.w	r5, r0, #320	; 0x140
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
}

__STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
   d70c0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d70c4:	46a2      	mov	sl, r4
    return (nrf_timer_event_t)
   d70c6:	00a0      	lsls	r0, r4, #2
   d70c8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
   d70cc:	b298      	uxth	r0, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   d70ce:	682b      	ldr	r3, [r5, #0]
    for (i = 0; i < channel_count; ++i)
    {
        nrf_timer_event_t event = nrf_timer_compare_event_get(i);
        nrf_timer_int_mask_t int_mask = nrf_timer_compare_int_get(i);

        if (nrf_timer_event_check(p_reg, event) &&
   d70d0:	b16b      	cbz	r3, d70ee <irq_handler+0x3e>
    return (bool)(p_reg->INTENSET & timer_int);
   d70d2:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    return (nrf_timer_int_mask_t)
   d70d6:	fa09 f204 	lsl.w	r2, r9, r4
   d70da:	421a      	tst	r2, r3
   d70dc:	d007      	beq.n	d70ee <irq_handler+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d70de:	f8c5 a000 	str.w	sl, [r5]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d70e2:	682b      	ldr	r3, [r5, #0]
   d70e4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d70e6:	9b01      	ldr	r3, [sp, #4]
            nrf_timer_int_enable_check(p_reg, int_mask))
        {
            nrf_timer_event_clear(p_reg, event);
            NRFX_LOG_DEBUG("Compare event, channel: %d.", i);
            p_cb->handler(event, p_cb->context);
   d70e8:	e9d7 3100 	ldrd	r3, r1, [r7]
   d70ec:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
   d70ee:	3401      	adds	r4, #1
   d70f0:	45a0      	cmp	r8, r4
   d70f2:	f105 0504 	add.w	r5, r5, #4
   d70f6:	d1e6      	bne.n	d70c6 <irq_handler+0x16>
        }
    }
}
   d70f8:	b002      	add	sp, #8
   d70fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d7100 <nrfx_timer_init>:
{
   d7100:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7104:	4b57      	ldr	r3, [pc, #348]	; (d7264 <nrfx_timer_init+0x164>)
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   d7106:	7907      	ldrb	r7, [r0, #4]
{
   d7108:	4616      	mov	r6, r2
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d710a:	6802      	ldr	r2, [r0, #0]
   d710c:	429a      	cmp	r2, r3
{
   d710e:	4604      	mov	r4, r0
   d7110:	460d      	mov	r5, r1
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7112:	d104      	bne.n	d711e <nrfx_timer_init+0x1e>
   d7114:	4a54      	ldr	r2, [pc, #336]	; (d7268 <nrfx_timer_init+0x168>)
   d7116:	2100      	movs	r1, #0
   d7118:	200a      	movs	r0, #10
   d711a:	f7fe fd1b 	bl	d5b54 <panic_>
    NRFX_ASSERT(p_config);
   d711e:	b925      	cbnz	r5, d712a <nrfx_timer_init+0x2a>
   d7120:	4a51      	ldr	r2, [pc, #324]	; (d7268 <nrfx_timer_init+0x168>)
   d7122:	4629      	mov	r1, r5
   d7124:	200a      	movs	r0, #10
   d7126:	f7fe fd15 	bl	d5b54 <panic_>
    NRFX_ASSERT(timer_event_handler);
   d712a:	b926      	cbnz	r6, d7136 <nrfx_timer_init+0x36>
   d712c:	4a4e      	ldr	r2, [pc, #312]	; (d7268 <nrfx_timer_init+0x168>)
   d712e:	4631      	mov	r1, r6
   d7130:	200a      	movs	r0, #10
   d7132:	f7fe fd0f 	bl	d5b54 <panic_>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   d7136:	4a4d      	ldr	r2, [pc, #308]	; (d726c <nrfx_timer_init+0x16c>)
   d7138:	230c      	movs	r3, #12
   d713a:	fb03 2307 	mla	r3, r3, r7, r2
   d713e:	4690      	mov	r8, r2
   d7140:	7a1b      	ldrb	r3, [r3, #8]
   d7142:	2b00      	cmp	r3, #0
   d7144:	f040 808c 	bne.w	d7260 <nrfx_timer_init+0x160>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   d7148:	6823      	ldr	r3, [r4, #0]
   d714a:	4a46      	ldr	r2, [pc, #280]	; (d7264 <nrfx_timer_init+0x164>)
   d714c:	4293      	cmp	r3, r2
   d714e:	d00f      	beq.n	d7170 <nrfx_timer_init+0x70>
   d7150:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7154:	4293      	cmp	r3, r2
   d7156:	d00b      	beq.n	d7170 <nrfx_timer_init+0x70>
   d7158:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d715c:	4293      	cmp	r3, r2
   d715e:	d007      	beq.n	d7170 <nrfx_timer_init+0x70>
   d7160:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   d7164:	4293      	cmp	r3, r2
   d7166:	d003      	beq.n	d7170 <nrfx_timer_init+0x70>
   d7168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d716c:	4293      	cmp	r3, r2
   d716e:	d102      	bne.n	d7176 <nrfx_timer_init+0x76>
   d7170:	78ab      	ldrb	r3, [r5, #2]
   d7172:	2b03      	cmp	r3, #3
   d7174:	d904      	bls.n	d7180 <nrfx_timer_init+0x80>
   d7176:	4a3c      	ldr	r2, [pc, #240]	; (d7268 <nrfx_timer_init+0x168>)
   d7178:	2100      	movs	r1, #0
   d717a:	200a      	movs	r0, #10
   d717c:	f7fe fcea 	bl	d5b54 <panic_>
    p_cb->handler = timer_event_handler;
   d7180:	230c      	movs	r3, #12
   d7182:	437b      	muls	r3, r7
   d7184:	eb08 0203 	add.w	r2, r8, r3
   d7188:	f848 6003 	str.w	r6, [r8, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d718c:	2100      	movs	r1, #0
    p_cb->context = p_config->p_context;
   d718e:	686b      	ldr	r3, [r5, #4]
   d7190:	6053      	str	r3, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7192:	460e      	mov	r6, r1
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7194:	7960      	ldrb	r0, [r4, #5]
   d7196:	6822      	ldr	r2, [r4, #0]
   d7198:	b2cb      	uxtb	r3, r1
   d719a:	4298      	cmp	r0, r3
   d719c:	d857      	bhi.n	d724e <nrfx_timer_init+0x14e>
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
   d719e:	78ee      	ldrb	r6, [r5, #3]
#define NRFX_IRQ_PRIORITY_SET(irq_number, priority) \
    _NRFX_IRQ_PRIORITY_SET(irq_number, priority)
static inline void _NRFX_IRQ_PRIORITY_SET(IRQn_Type irq_number,
                                          uint8_t   priority)
{
    NRFX_ASSERT(INTERRUPT_PRIORITY_IS_VALID(priority));
   d71a0:	1eb3      	subs	r3, r6, #2
   d71a2:	2b01      	cmp	r3, #1
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   d71a4:	ea4f 3912 	mov.w	r9, r2, lsr #12
   d71a8:	f342 3a07 	sbfx	sl, r2, #12, #8
   d71ac:	d907      	bls.n	d71be <nrfx_timer_init+0xbe>
   d71ae:	1f73      	subs	r3, r6, #5
   d71b0:	2b02      	cmp	r3, #2
   d71b2:	d904      	bls.n	d71be <nrfx_timer_init+0xbe>
   d71b4:	4a2c      	ldr	r2, [pc, #176]	; (d7268 <nrfx_timer_init+0x168>)
   d71b6:	2100      	movs	r1, #0
   d71b8:	200a      	movs	r0, #10
   d71ba:	f7fe fccb 	bl	d5b54 <panic_>
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   d71be:	f1ba 0f00 	cmp.w	sl, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d71c2:	bfac      	ite	ge
   d71c4:	f10a 4360 	addge.w	r3, sl, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d71c8:	4b29      	ldrlt	r3, [pc, #164]	; (d7270 <nrfx_timer_init+0x170>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d71ca:	482a      	ldr	r0, [pc, #168]	; (d7274 <nrfx_timer_init+0x174>)
   d71cc:	ea4f 1646 	mov.w	r6, r6, lsl #5
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d71d0:	bfb8      	it	lt
   d71d2:	f009 090f 	andlt.w	r9, r9, #15
   d71d6:	b2f6      	uxtb	r6, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d71d8:	bfaa      	itet	ge
   d71da:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d71de:	f803 6009 	strblt.w	r6, [r3, r9]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d71e2:	f883 6300 	strbge.w	r6, [r3, #768]	; 0x300
   d71e6:	6823      	ldr	r3, [r4, #0]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d71e8:	f343 3107 	sbfx	r1, r3, #12, #8
   d71ec:	0949      	lsrs	r1, r1, #5
   d71ee:	2201      	movs	r2, #1
   d71f0:	f3c3 3304 	ubfx	r3, r3, #12, #5
   d71f4:	fa02 f303 	lsl.w	r3, r2, r3
   d71f8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   d71fc:	6820      	ldr	r0, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d71fe:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7200:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d7204:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7208:	f021 0103 	bic.w	r1, r1, #3
   d720c:	430b      	orrs	r3, r1
   d720e:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   d7212:	6820      	ldr	r0, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d7214:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d7216:	f8d0 1508 	ldr.w	r1, [r0, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d721a:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d721e:	f021 0103 	bic.w	r1, r1, #3
   d7222:	430b      	orrs	r3, r1
   d7224:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
   d7228:	6820      	ldr	r0, [r4, #0]
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d722a:	782b      	ldrb	r3, [r5, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d722c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d7230:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d7234:	f021 010f 	bic.w	r1, r1, #15
   d7238:	430b      	orrs	r3, r1
   d723a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d723e:	230c      	movs	r3, #12
   d7240:	fb03 8707 	mla	r7, r3, r7, r8
    return err_code;
   d7244:	2000      	movs	r0, #0
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d7246:	723a      	strb	r2, [r7, #8]
}
   d7248:	b002      	add	sp, #8
   d724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (nrf_timer_event_t)
   d724e:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7250:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   d7254:	3101      	adds	r1, #1
   d7256:	50d6      	str	r6, [r2, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7258:	58d3      	ldr	r3, [r2, r3]
   d725a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d725c:	9b01      	ldr	r3, [sp, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d725e:	e799      	b.n	d7194 <nrfx_timer_init+0x94>
        return err_code;
   d7260:	2008      	movs	r0, #8
   d7262:	e7f1      	b.n	d7248 <nrfx_timer_init+0x148>
   d7264:	40008000 	.word	0x40008000
   d7268:	000d58d1 	.word	0x000d58d1
   d726c:	2003e7b4 	.word	0x2003e7b4
   d7270:	e000ed14 	.word	0xe000ed14
   d7274:	e000e100 	.word	0xe000e100

000d7278 <nrfx_timer_enable>:
{
   d7278:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d727a:	4d0c      	ldr	r5, [pc, #48]	; (d72ac <nrfx_timer_enable+0x34>)
   d727c:	7902      	ldrb	r2, [r0, #4]
   d727e:	210c      	movs	r1, #12
   d7280:	fb01 5202 	mla	r2, r1, r2, r5
{
   d7284:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d7286:	7a12      	ldrb	r2, [r2, #8]
   d7288:	2a01      	cmp	r2, #1
   d728a:	d004      	beq.n	d7296 <nrfx_timer_enable+0x1e>
   d728c:	4a08      	ldr	r2, [pc, #32]	; (d72b0 <nrfx_timer_enable+0x38>)
   d728e:	2100      	movs	r1, #0
   d7290:	200a      	movs	r0, #10
   d7292:	f7fe fc5f 	bl	d5b54 <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   d7296:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   d7298:	2201      	movs	r2, #1
   d729a:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   d729c:	7923      	ldrb	r3, [r4, #4]
   d729e:	220c      	movs	r2, #12
   d72a0:	fb02 5303 	mla	r3, r2, r3, r5
   d72a4:	2202      	movs	r2, #2
   d72a6:	721a      	strb	r2, [r3, #8]
}
   d72a8:	bd38      	pop	{r3, r4, r5, pc}
   d72aa:	bf00      	nop
   d72ac:	2003e7b4 	.word	0x2003e7b4
   d72b0:	000d58d1 	.word	0x000d58d1

000d72b4 <nrfx_timer_disable>:
{
   d72b4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d72b6:	4d0a      	ldr	r5, [pc, #40]	; (d72e0 <nrfx_timer_disable+0x2c>)
   d72b8:	7902      	ldrb	r2, [r0, #4]
   d72ba:	210c      	movs	r1, #12
   d72bc:	fb01 5202 	mla	r2, r1, r2, r5
{
   d72c0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d72c2:	7a11      	ldrb	r1, [r2, #8]
   d72c4:	b919      	cbnz	r1, d72ce <nrfx_timer_disable+0x1a>
   d72c6:	4a07      	ldr	r2, [pc, #28]	; (d72e4 <nrfx_timer_disable+0x30>)
   d72c8:	200a      	movs	r0, #10
   d72ca:	f7fe fc43 	bl	d5b54 <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   d72ce:	6823      	ldr	r3, [r4, #0]
   d72d0:	2201      	movs	r2, #1
   d72d2:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   d72d4:	7923      	ldrb	r3, [r4, #4]
   d72d6:	210c      	movs	r1, #12
   d72d8:	fb01 5303 	mla	r3, r1, r3, r5
   d72dc:	721a      	strb	r2, [r3, #8]
}
   d72de:	bd38      	pop	{r3, r4, r5, pc}
   d72e0:	2003e7b4 	.word	0x2003e7b4
   d72e4:	000d58d1 	.word	0x000d58d1

000d72e8 <nrfx_timer_clear>:
{
   d72e8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d72ea:	4a08      	ldr	r2, [pc, #32]	; (d730c <nrfx_timer_clear+0x24>)
   d72ec:	7903      	ldrb	r3, [r0, #4]
   d72ee:	210c      	movs	r1, #12
   d72f0:	fb01 2303 	mla	r3, r1, r3, r2
{
   d72f4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d72f6:	7a19      	ldrb	r1, [r3, #8]
   d72f8:	b919      	cbnz	r1, d7302 <nrfx_timer_clear+0x1a>
   d72fa:	4a05      	ldr	r2, [pc, #20]	; (d7310 <nrfx_timer_clear+0x28>)
   d72fc:	200a      	movs	r0, #10
   d72fe:	f7fe fc29 	bl	d5b54 <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   d7302:	6823      	ldr	r3, [r4, #0]
   d7304:	2201      	movs	r2, #1
   d7306:	60da      	str	r2, [r3, #12]
}
   d7308:	bd10      	pop	{r4, pc}
   d730a:	bf00      	nop
   d730c:	2003e7b4 	.word	0x2003e7b4
   d7310:	000d58d1 	.word	0x000d58d1

000d7314 <nrfx_timer_compare>:
{
   d7314:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
   d7316:	f44f 3480 	mov.w	r4, #65536	; 0x10000
   d731a:	6805      	ldr	r5, [r0, #0]
   d731c:	408c      	lsls	r4, r1
    if (enable_int)
   d731e:	b18b      	cbz	r3, d7344 <nrfx_timer_compare+0x30>
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
   d7320:	f101 0350 	add.w	r3, r1, #80	; 0x50
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7324:	009b      	lsls	r3, r3, #2
   d7326:	2600      	movs	r6, #0
   d7328:	50ee      	str	r6, [r5, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d732a:	58eb      	ldr	r3, [r5, r3]
   d732c:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d732e:	9b01      	ldr	r3, [sp, #4]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
   d7330:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = timer_int_mask;
   d7332:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_write(p_instance->p_reg, cc_channel, cc_value);
   d7336:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
   d7338:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   d733c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   d7340:	b002      	add	sp, #8
   d7342:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = timer_int_mask;
   d7344:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
   d7348:	e7f5      	b.n	d7336 <nrfx_timer_compare+0x22>

000d734a <nrfx_timer_extended_compare>:
{
   d734a:	b4f0      	push	{r4, r5, r6, r7}
    nrf_timer_shorts_disable(p_instance->p_reg,
   d734c:	6807      	ldr	r7, [r0, #0]
        (TIMER_SHORTS_COMPARE0_CLEAR_Msk << cc_channel));
   d734e:	f240 1601 	movw	r6, #257	; 0x101
    p_reg->SHORTS &= ~(timer_shorts_mask);
   d7352:	f8d7 5200 	ldr.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7356:	408e      	lsls	r6, r1
   d7358:	ea25 0506 	bic.w	r5, r5, r6
   d735c:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_enable(p_instance->p_reg, timer_short_mask);
   d7360:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS |= timer_shorts_mask;
   d7362:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   d7366:	432b      	orrs	r3, r5
   d7368:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    nrfx_timer_compare(p_instance,
   d736c:	f89d 3010 	ldrb.w	r3, [sp, #16]
}
   d7370:	bcf0      	pop	{r4, r5, r6, r7}
    nrfx_timer_compare(p_instance,
   d7372:	f7ff bfcf 	b.w	d7314 <nrfx_timer_compare>
	...

000d7378 <TIMER4_IRQHandler>:
#endif

#if NRFX_CHECK(NRFX_TIMER4_ENABLED)
void nrfx_timer_4_irq_handler(void)
{
    irq_handler(NRF_TIMER4, &m_cb[NRFX_TIMER4_INST_IDX],
   d7378:	4902      	ldr	r1, [pc, #8]	; (d7384 <TIMER4_IRQHandler+0xc>)
   d737a:	4803      	ldr	r0, [pc, #12]	; (d7388 <TIMER4_IRQHandler+0x10>)
   d737c:	2206      	movs	r2, #6
   d737e:	f7ff be97 	b.w	d70b0 <irq_handler>
   d7382:	bf00      	nop
   d7384:	2003e7e4 	.word	0x2003e7e4
   d7388:	4001b000 	.word	0x4001b000

000d738c <__aeabi_atexit>:
   d738c:	460b      	mov	r3, r1
   d738e:	4601      	mov	r1, r0
   d7390:	4618      	mov	r0, r3
   d7392:	f001 be63 	b.w	d905c <__cxa_atexit>

000d7396 <_ZdlPvj>:
   d7396:	f7fc be82 	b.w	d409e <_ZdlPv>

000d739a <_ZnajRKSt9nothrow_t>:
   d739a:	f7fc be7e 	b.w	d409a <_Znaj>

000d739e <_ZSt25__throw_bad_function_callv>:
   d739e:	b508      	push	{r3, lr}
   d73a0:	f7fe fc9c 	bl	d5cdc <abort>
   d73a4:	0000      	movs	r0, r0
	...

000d73a8 <pow>:
   d73a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73ac:	ed2d 8b02 	vpush	{d8}
   d73b0:	b08d      	sub	sp, #52	; 0x34
   d73b2:	ec57 6b10 	vmov	r6, r7, d0
   d73b6:	ec55 4b11 	vmov	r4, r5, d1
   d73ba:	f000 f9ad 	bl	d7718 <__ieee754_pow>
   d73be:	4bae      	ldr	r3, [pc, #696]	; (d7678 <pow+0x2d0>)
   d73c0:	eeb0 8a40 	vmov.f32	s16, s0
   d73c4:	eef0 8a60 	vmov.f32	s17, s1
   d73c8:	f993 9000 	ldrsb.w	r9, [r3]
   d73cc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d73d0:	d037      	beq.n	d7442 <pow+0x9a>
   d73d2:	4622      	mov	r2, r4
   d73d4:	462b      	mov	r3, r5
   d73d6:	4620      	mov	r0, r4
   d73d8:	4629      	mov	r1, r5
   d73da:	f001 fdd9 	bl	d8f90 <__aeabi_dcmpun>
   d73de:	4683      	mov	fp, r0
   d73e0:	bb78      	cbnz	r0, d7442 <pow+0x9a>
   d73e2:	4632      	mov	r2, r6
   d73e4:	463b      	mov	r3, r7
   d73e6:	4630      	mov	r0, r6
   d73e8:	4639      	mov	r1, r7
   d73ea:	f001 fdd1 	bl	d8f90 <__aeabi_dcmpun>
   d73ee:	4680      	mov	r8, r0
   d73f0:	2800      	cmp	r0, #0
   d73f2:	f040 8093 	bne.w	d751c <pow+0x174>
   d73f6:	f04f 0a00 	mov.w	sl, #0
   d73fa:	f04f 0b00 	mov.w	fp, #0
   d73fe:	4630      	mov	r0, r6
   d7400:	4639      	mov	r1, r7
   d7402:	4652      	mov	r2, sl
   d7404:	465b      	mov	r3, fp
   d7406:	f001 fd91 	bl	d8f2c <__aeabi_dcmpeq>
   d740a:	b318      	cbz	r0, d7454 <pow+0xac>
   d740c:	4652      	mov	r2, sl
   d740e:	465b      	mov	r3, fp
   d7410:	4620      	mov	r0, r4
   d7412:	4629      	mov	r1, r5
   d7414:	f001 fd8a 	bl	d8f2c <__aeabi_dcmpeq>
   d7418:	9000      	str	r0, [sp, #0]
   d741a:	2800      	cmp	r0, #0
   d741c:	d057      	beq.n	d74ce <pow+0x126>
   d741e:	4b97      	ldr	r3, [pc, #604]	; (d767c <pow+0x2d4>)
   d7420:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7424:	2201      	movs	r2, #1
   d7426:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d742a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d742e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7432:	9202      	str	r2, [sp, #8]
   d7434:	9303      	str	r3, [sp, #12]
   d7436:	f1b9 0f00 	cmp.w	r9, #0
   d743a:	f000 8089 	beq.w	d7550 <pow+0x1a8>
   d743e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d7668 <pow+0x2c0>
   d7442:	eeb0 0a48 	vmov.f32	s0, s16
   d7446:	eef0 0a68 	vmov.f32	s1, s17
   d744a:	b00d      	add	sp, #52	; 0x34
   d744c:	ecbd 8b02 	vpop	{d8}
   d7450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7454:	eeb0 0a48 	vmov.f32	s0, s16
   d7458:	eef0 0a68 	vmov.f32	s1, s17
   d745c:	f001 f804 	bl	d8468 <finite>
   d7460:	4680      	mov	r8, r0
   d7462:	2800      	cmp	r0, #0
   d7464:	f000 8082 	beq.w	d756c <pow+0x1c4>
   d7468:	f04f 0800 	mov.w	r8, #0
   d746c:	f04f 0900 	mov.w	r9, #0
   d7470:	ec51 0b18 	vmov	r0, r1, d8
   d7474:	4642      	mov	r2, r8
   d7476:	464b      	mov	r3, r9
   d7478:	f001 fd58 	bl	d8f2c <__aeabi_dcmpeq>
   d747c:	2800      	cmp	r0, #0
   d747e:	d0e0      	beq.n	d7442 <pow+0x9a>
   d7480:	ec47 6b10 	vmov	d0, r6, r7
   d7484:	f000 fff0 	bl	d8468 <finite>
   d7488:	2800      	cmp	r0, #0
   d748a:	d0da      	beq.n	d7442 <pow+0x9a>
   d748c:	ec45 4b10 	vmov	d0, r4, r5
   d7490:	f000 ffea 	bl	d8468 <finite>
   d7494:	2800      	cmp	r0, #0
   d7496:	d0d4      	beq.n	d7442 <pow+0x9a>
   d7498:	4b77      	ldr	r3, [pc, #476]	; (d7678 <pow+0x2d0>)
   d749a:	4a78      	ldr	r2, [pc, #480]	; (d767c <pow+0x2d4>)
   d749c:	f993 3000 	ldrsb.w	r3, [r3]
   d74a0:	9203      	str	r2, [sp, #12]
   d74a2:	2104      	movs	r1, #4
   d74a4:	2200      	movs	r2, #0
   d74a6:	2b02      	cmp	r3, #2
   d74a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d74ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d74b0:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d74b4:	9102      	str	r1, [sp, #8]
   d74b6:	920a      	str	r2, [sp, #40]	; 0x28
   d74b8:	d004      	beq.n	d74c4 <pow+0x11c>
   d74ba:	a802      	add	r0, sp, #8
   d74bc:	f000 ffe0 	bl	d8480 <matherr>
   d74c0:	2800      	cmp	r0, #0
   d74c2:	d14a      	bne.n	d755a <pow+0x1b2>
   d74c4:	f7fe fc1a 	bl	d5cfc <__errno>
   d74c8:	2322      	movs	r3, #34	; 0x22
   d74ca:	6003      	str	r3, [r0, #0]
   d74cc:	e045      	b.n	d755a <pow+0x1b2>
   d74ce:	ec45 4b10 	vmov	d0, r4, r5
   d74d2:	f000 ffc9 	bl	d8468 <finite>
   d74d6:	2800      	cmp	r0, #0
   d74d8:	d0b3      	beq.n	d7442 <pow+0x9a>
   d74da:	4652      	mov	r2, sl
   d74dc:	465b      	mov	r3, fp
   d74de:	4620      	mov	r0, r4
   d74e0:	4629      	mov	r1, r5
   d74e2:	f001 fd2d 	bl	d8f40 <__aeabi_dcmplt>
   d74e6:	2800      	cmp	r0, #0
   d74e8:	d0ab      	beq.n	d7442 <pow+0x9a>
   d74ea:	4b63      	ldr	r3, [pc, #396]	; (d7678 <pow+0x2d0>)
   d74ec:	9900      	ldr	r1, [sp, #0]
   d74ee:	4a63      	ldr	r2, [pc, #396]	; (d767c <pow+0x2d4>)
   d74f0:	f993 3000 	ldrsb.w	r3, [r3]
   d74f4:	910a      	str	r1, [sp, #40]	; 0x28
   d74f6:	2101      	movs	r1, #1
   d74f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d74fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7500:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7504:	2b00      	cmp	r3, #0
   d7506:	d16f      	bne.n	d75e8 <pow+0x240>
   d7508:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d750c:	a802      	add	r0, sp, #8
   d750e:	f000 ffb7 	bl	d8480 <matherr>
   d7512:	2800      	cmp	r0, #0
   d7514:	d06e      	beq.n	d75f4 <pow+0x24c>
   d7516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7518:	b32b      	cbz	r3, d7566 <pow+0x1be>
   d751a:	e020      	b.n	d755e <pow+0x1b6>
   d751c:	2200      	movs	r2, #0
   d751e:	2300      	movs	r3, #0
   d7520:	4620      	mov	r0, r4
   d7522:	4629      	mov	r1, r5
   d7524:	f001 fd02 	bl	d8f2c <__aeabi_dcmpeq>
   d7528:	2800      	cmp	r0, #0
   d752a:	d08a      	beq.n	d7442 <pow+0x9a>
   d752c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d7668 <pow+0x2c0>
   d7530:	4b52      	ldr	r3, [pc, #328]	; (d767c <pow+0x2d4>)
   d7532:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7536:	2201      	movs	r2, #1
   d7538:	f1b9 0f02 	cmp.w	r9, #2
   d753c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7540:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7544:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7548:	9202      	str	r2, [sp, #8]
   d754a:	9303      	str	r3, [sp, #12]
   d754c:	f43f af79 	beq.w	d7442 <pow+0x9a>
   d7550:	a802      	add	r0, sp, #8
   d7552:	f000 ff95 	bl	d8480 <matherr>
   d7556:	2800      	cmp	r0, #0
   d7558:	d051      	beq.n	d75fe <pow+0x256>
   d755a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d755c:	b11b      	cbz	r3, d7566 <pow+0x1be>
   d755e:	f7fe fbcd 	bl	d5cfc <__errno>
   d7562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7564:	6003      	str	r3, [r0, #0]
   d7566:	ed9d 8b08 	vldr	d8, [sp, #32]
   d756a:	e76a      	b.n	d7442 <pow+0x9a>
   d756c:	ec47 6b10 	vmov	d0, r6, r7
   d7570:	f000 ff7a 	bl	d8468 <finite>
   d7574:	2800      	cmp	r0, #0
   d7576:	f43f af77 	beq.w	d7468 <pow+0xc0>
   d757a:	ec45 4b10 	vmov	d0, r4, r5
   d757e:	f000 ff73 	bl	d8468 <finite>
   d7582:	2800      	cmp	r0, #0
   d7584:	f43f af70 	beq.w	d7468 <pow+0xc0>
   d7588:	ec53 2b18 	vmov	r2, r3, d8
   d758c:	ee18 0a10 	vmov	r0, s16
   d7590:	4619      	mov	r1, r3
   d7592:	f001 fcfd 	bl	d8f90 <__aeabi_dcmpun>
   d7596:	4b38      	ldr	r3, [pc, #224]	; (d7678 <pow+0x2d0>)
   d7598:	2800      	cmp	r0, #0
   d759a:	f040 8096 	bne.w	d76ca <pow+0x322>
   d759e:	f993 8000 	ldrsb.w	r8, [r3]
   d75a2:	900a      	str	r0, [sp, #40]	; 0x28
   d75a4:	2303      	movs	r3, #3
   d75a6:	9302      	str	r3, [sp, #8]
   d75a8:	4b34      	ldr	r3, [pc, #208]	; (d767c <pow+0x2d4>)
   d75aa:	9303      	str	r3, [sp, #12]
   d75ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d75b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d75b4:	f1b8 0f00 	cmp.w	r8, #0
   d75b8:	d126      	bne.n	d7608 <pow+0x260>
   d75ba:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d768c <pow+0x2e4>
   d75be:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d75c2:	4652      	mov	r2, sl
   d75c4:	465b      	mov	r3, fp
   d75c6:	4630      	mov	r0, r6
   d75c8:	4639      	mov	r1, r7
   d75ca:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d75ce:	f001 fcb7 	bl	d8f40 <__aeabi_dcmplt>
   d75d2:	bb48      	cbnz	r0, d7628 <pow+0x280>
   d75d4:	a802      	add	r0, sp, #8
   d75d6:	f000 ff53 	bl	d8480 <matherr>
   d75da:	2800      	cmp	r0, #0
   d75dc:	d19b      	bne.n	d7516 <pow+0x16e>
   d75de:	f7fe fb8d 	bl	d5cfc <__errno>
   d75e2:	2322      	movs	r3, #34	; 0x22
   d75e4:	6003      	str	r3, [r0, #0]
   d75e6:	e796      	b.n	d7516 <pow+0x16e>
   d75e8:	4925      	ldr	r1, [pc, #148]	; (d7680 <pow+0x2d8>)
   d75ea:	2000      	movs	r0, #0
   d75ec:	2b02      	cmp	r3, #2
   d75ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d75f2:	d18b      	bne.n	d750c <pow+0x164>
   d75f4:	f7fe fb82 	bl	d5cfc <__errno>
   d75f8:	2321      	movs	r3, #33	; 0x21
   d75fa:	6003      	str	r3, [r0, #0]
   d75fc:	e78b      	b.n	d7516 <pow+0x16e>
   d75fe:	f7fe fb7d 	bl	d5cfc <__errno>
   d7602:	2321      	movs	r3, #33	; 0x21
   d7604:	6003      	str	r3, [r0, #0]
   d7606:	e7a8      	b.n	d755a <pow+0x1b2>
   d7608:	ed9f 7b19 	vldr	d7, [pc, #100]	; d7670 <pow+0x2c8>
   d760c:	4652      	mov	r2, sl
   d760e:	465b      	mov	r3, fp
   d7610:	4630      	mov	r0, r6
   d7612:	4639      	mov	r1, r7
   d7614:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7618:	f001 fc92 	bl	d8f40 <__aeabi_dcmplt>
   d761c:	2800      	cmp	r0, #0
   d761e:	d137      	bne.n	d7690 <pow+0x2e8>
   d7620:	f1b8 0f02 	cmp.w	r8, #2
   d7624:	d0db      	beq.n	d75de <pow+0x236>
   d7626:	e7d5      	b.n	d75d4 <pow+0x22c>
   d7628:	4b16      	ldr	r3, [pc, #88]	; (d7684 <pow+0x2dc>)
   d762a:	2200      	movs	r2, #0
   d762c:	4620      	mov	r0, r4
   d762e:	4629      	mov	r1, r5
   d7630:	f001 fa14 	bl	d8a5c <__aeabi_dmul>
   d7634:	4602      	mov	r2, r0
   d7636:	460b      	mov	r3, r1
   d7638:	ec43 2b10 	vmov	d0, r2, r3
   d763c:	e9cd 2300 	strd	r2, r3, [sp]
   d7640:	f000 ff2a 	bl	d8498 <rint>
   d7644:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7648:	ec51 0b10 	vmov	r0, r1, d0
   d764c:	f001 fc6e 	bl	d8f2c <__aeabi_dcmpeq>
   d7650:	2800      	cmp	r0, #0
   d7652:	d136      	bne.n	d76c2 <pow+0x31a>
   d7654:	4b0c      	ldr	r3, [pc, #48]	; (d7688 <pow+0x2e0>)
   d7656:	4908      	ldr	r1, [pc, #32]	; (d7678 <pow+0x2d0>)
   d7658:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d765c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7660:	f991 8000 	ldrsb.w	r8, [r1]
   d7664:	e7dc      	b.n	d7620 <pow+0x278>
   d7666:	bf00      	nop
   d7668:	00000000 	.word	0x00000000
   d766c:	3ff00000 	.word	0x3ff00000
   d7670:	00000000 	.word	0x00000000
   d7674:	7ff00000 	.word	0x7ff00000
   d7678:	2003e3dc 	.word	0x2003e3dc
   d767c:	000d9624 	.word	0x000d9624
   d7680:	fff00000 	.word	0xfff00000
   d7684:	3fe00000 	.word	0x3fe00000
   d7688:	c7efffff 	.word	0xc7efffff
   d768c:	47efffff 	.word	0x47efffff
   d7690:	4b1c      	ldr	r3, [pc, #112]	; (d7704 <pow+0x35c>)
   d7692:	2200      	movs	r2, #0
   d7694:	4620      	mov	r0, r4
   d7696:	4629      	mov	r1, r5
   d7698:	f001 f9e0 	bl	d8a5c <__aeabi_dmul>
   d769c:	4602      	mov	r2, r0
   d769e:	460b      	mov	r3, r1
   d76a0:	ec43 2b10 	vmov	d0, r2, r3
   d76a4:	e9cd 2300 	strd	r2, r3, [sp]
   d76a8:	f000 fef6 	bl	d8498 <rint>
   d76ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   d76b0:	ec51 0b10 	vmov	r0, r1, d0
   d76b4:	f001 fc3a 	bl	d8f2c <__aeabi_dcmpeq>
   d76b8:	b918      	cbnz	r0, d76c2 <pow+0x31a>
   d76ba:	4b13      	ldr	r3, [pc, #76]	; (d7708 <pow+0x360>)
   d76bc:	2200      	movs	r2, #0
   d76be:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d76c2:	4b12      	ldr	r3, [pc, #72]	; (d770c <pow+0x364>)
   d76c4:	f993 8000 	ldrsb.w	r8, [r3]
   d76c8:	e7aa      	b.n	d7620 <pow+0x278>
   d76ca:	f993 9000 	ldrsb.w	r9, [r3]
   d76ce:	4b10      	ldr	r3, [pc, #64]	; (d7710 <pow+0x368>)
   d76d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d76d4:	2201      	movs	r2, #1
   d76d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d76da:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d76de:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d76e2:	f1b9 0f00 	cmp.w	r9, #0
   d76e6:	f43f af0f 	beq.w	d7508 <pow+0x160>
   d76ea:	4652      	mov	r2, sl
   d76ec:	465b      	mov	r3, fp
   d76ee:	4650      	mov	r0, sl
   d76f0:	4659      	mov	r1, fp
   d76f2:	f001 fadd 	bl	d8cb0 <__aeabi_ddiv>
   d76f6:	f1b9 0f02 	cmp.w	r9, #2
   d76fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d76fe:	f43f af79 	beq.w	d75f4 <pow+0x24c>
   d7702:	e703      	b.n	d750c <pow+0x164>
   d7704:	3fe00000 	.word	0x3fe00000
   d7708:	fff00000 	.word	0xfff00000
   d770c:	2003e3dc 	.word	0x2003e3dc
   d7710:	000d9624 	.word	0x000d9624
   d7714:	00000000 	.word	0x00000000

000d7718 <__ieee754_pow>:
   d7718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d771c:	ec57 6b11 	vmov	r6, r7, d1
   d7720:	ed2d 8b0a 	vpush	{d8-d12}
   d7724:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d7728:	ea5a 0206 	orrs.w	r2, sl, r6
   d772c:	b089      	sub	sp, #36	; 0x24
   d772e:	d03d      	beq.n	d77ac <__ieee754_pow+0x94>
   d7730:	ec55 4b10 	vmov	r4, r5, d0
   d7734:	4976      	ldr	r1, [pc, #472]	; (d7910 <__ieee754_pow+0x1f8>)
   d7736:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d773a:	4588      	cmp	r8, r1
   d773c:	ee10 2a10 	vmov	r2, s0
   d7740:	46a9      	mov	r9, r5
   d7742:	dc2c      	bgt.n	d779e <__ieee754_pow+0x86>
   d7744:	ee11 3a10 	vmov	r3, s2
   d7748:	46bb      	mov	fp, r7
   d774a:	d03a      	beq.n	d77c2 <__ieee754_pow+0xaa>
   d774c:	458a      	cmp	sl, r1
   d774e:	dc26      	bgt.n	d779e <__ieee754_pow+0x86>
   d7750:	496f      	ldr	r1, [pc, #444]	; (d7910 <__ieee754_pow+0x1f8>)
   d7752:	458a      	cmp	sl, r1
   d7754:	d021      	beq.n	d779a <__ieee754_pow+0x82>
   d7756:	f1b9 0f00 	cmp.w	r9, #0
   d775a:	db3d      	blt.n	d77d8 <__ieee754_pow+0xc0>
   d775c:	2100      	movs	r1, #0
   d775e:	9103      	str	r1, [sp, #12]
   d7760:	2b00      	cmp	r3, #0
   d7762:	d155      	bne.n	d7810 <__ieee754_pow+0xf8>
   d7764:	4b6a      	ldr	r3, [pc, #424]	; (d7910 <__ieee754_pow+0x1f8>)
   d7766:	459a      	cmp	sl, r3
   d7768:	f000 80a8 	beq.w	d78bc <__ieee754_pow+0x1a4>
   d776c:	4b69      	ldr	r3, [pc, #420]	; (d7914 <__ieee754_pow+0x1fc>)
   d776e:	459a      	cmp	sl, r3
   d7770:	f000 80b6 	beq.w	d78e0 <__ieee754_pow+0x1c8>
   d7774:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d7778:	f000 8501 	beq.w	d817e <__ieee754_pow+0xa66>
   d777c:	4b66      	ldr	r3, [pc, #408]	; (d7918 <__ieee754_pow+0x200>)
   d777e:	459b      	cmp	fp, r3
   d7780:	d146      	bne.n	d7810 <__ieee754_pow+0xf8>
   d7782:	f1b9 0f00 	cmp.w	r9, #0
   d7786:	db43      	blt.n	d7810 <__ieee754_pow+0xf8>
   d7788:	ec45 4b10 	vmov	d0, r4, r5
   d778c:	b009      	add	sp, #36	; 0x24
   d778e:	ecbd 8b0a 	vpop	{d8-d12}
   d7792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7796:	f000 bd99 	b.w	d82cc <__ieee754_sqrt>
   d779a:	2b00      	cmp	r3, #0
   d779c:	d0db      	beq.n	d7756 <__ieee754_pow+0x3e>
   d779e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d77a2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d77a6:	ea58 0302 	orrs.w	r3, r8, r2
   d77aa:	d10d      	bne.n	d77c8 <__ieee754_pow+0xb0>
   d77ac:	ed9f 7b54 	vldr	d7, [pc, #336]	; d7900 <__ieee754_pow+0x1e8>
   d77b0:	ed8d 7b00 	vstr	d7, [sp]
   d77b4:	ed9d 0b00 	vldr	d0, [sp]
   d77b8:	b009      	add	sp, #36	; 0x24
   d77ba:	ecbd 8b0a 	vpop	{d8-d12}
   d77be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d77c2:	b90c      	cbnz	r4, d77c8 <__ieee754_pow+0xb0>
   d77c4:	45c2      	cmp	sl, r8
   d77c6:	ddc3      	ble.n	d7750 <__ieee754_pow+0x38>
   d77c8:	4854      	ldr	r0, [pc, #336]	; (d791c <__ieee754_pow+0x204>)
   d77ca:	b009      	add	sp, #36	; 0x24
   d77cc:	ecbd 8b0a 	vpop	{d8-d12}
   d77d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d77d4:	f000 be58 	b.w	d8488 <nan>
   d77d8:	4951      	ldr	r1, [pc, #324]	; (d7920 <__ieee754_pow+0x208>)
   d77da:	458a      	cmp	sl, r1
   d77dc:	f300 8087 	bgt.w	d78ee <__ieee754_pow+0x1d6>
   d77e0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d77e4:	458a      	cmp	sl, r1
   d77e6:	dd0f      	ble.n	d7808 <__ieee754_pow+0xf0>
   d77e8:	ea4f 512a 	mov.w	r1, sl, asr #20
   d77ec:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d77f0:	2914      	cmp	r1, #20
   d77f2:	f340 84ce 	ble.w	d8192 <__ieee754_pow+0xa7a>
   d77f6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d77fa:	fa23 f001 	lsr.w	r0, r3, r1
   d77fe:	fa00 f101 	lsl.w	r1, r0, r1
   d7802:	4299      	cmp	r1, r3
   d7804:	f000 8520 	beq.w	d8248 <__ieee754_pow+0xb30>
   d7808:	2100      	movs	r1, #0
   d780a:	9103      	str	r1, [sp, #12]
   d780c:	2b00      	cmp	r3, #0
   d780e:	d0ad      	beq.n	d776c <__ieee754_pow+0x54>
   d7810:	ec45 4b10 	vmov	d0, r4, r5
   d7814:	9206      	str	r2, [sp, #24]
   d7816:	f000 fe1d 	bl	d8454 <fabs>
   d781a:	9a06      	ldr	r2, [sp, #24]
   d781c:	ed8d 0b00 	vstr	d0, [sp]
   d7820:	bb5a      	cbnz	r2, d787a <__ieee754_pow+0x162>
   d7822:	f1b8 0f00 	cmp.w	r8, #0
   d7826:	d004      	beq.n	d7832 <__ieee754_pow+0x11a>
   d7828:	4b3a      	ldr	r3, [pc, #232]	; (d7914 <__ieee754_pow+0x1fc>)
   d782a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d782e:	429a      	cmp	r2, r3
   d7830:	d123      	bne.n	d787a <__ieee754_pow+0x162>
   d7832:	f1bb 0f00 	cmp.w	fp, #0
   d7836:	da07      	bge.n	d7848 <__ieee754_pow+0x130>
   d7838:	e9dd 2300 	ldrd	r2, r3, [sp]
   d783c:	4935      	ldr	r1, [pc, #212]	; (d7914 <__ieee754_pow+0x1fc>)
   d783e:	2000      	movs	r0, #0
   d7840:	f001 fa36 	bl	d8cb0 <__aeabi_ddiv>
   d7844:	e9cd 0100 	strd	r0, r1, [sp]
   d7848:	f1b9 0f00 	cmp.w	r9, #0
   d784c:	dab2      	bge.n	d77b4 <__ieee754_pow+0x9c>
   d784e:	9b03      	ldr	r3, [sp, #12]
   d7850:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d7854:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7858:	ea58 0303 	orrs.w	r3, r8, r3
   d785c:	f040 84be 	bne.w	d81dc <__ieee754_pow+0xac4>
   d7860:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7864:	4610      	mov	r0, r2
   d7866:	4619      	mov	r1, r3
   d7868:	f000 ff40 	bl	d86ec <__aeabi_dsub>
   d786c:	4602      	mov	r2, r0
   d786e:	460b      	mov	r3, r1
   d7870:	f001 fa1e 	bl	d8cb0 <__aeabi_ddiv>
   d7874:	e9cd 0100 	strd	r0, r1, [sp]
   d7878:	e79c      	b.n	d77b4 <__ieee754_pow+0x9c>
   d787a:	9a03      	ldr	r2, [sp, #12]
   d787c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d7880:	3b01      	subs	r3, #1
   d7882:	9306      	str	r3, [sp, #24]
   d7884:	4313      	orrs	r3, r2
   d7886:	d035      	beq.n	d78f4 <__ieee754_pow+0x1dc>
   d7888:	4b26      	ldr	r3, [pc, #152]	; (d7924 <__ieee754_pow+0x20c>)
   d788a:	459a      	cmp	sl, r3
   d788c:	dd4e      	ble.n	d792c <__ieee754_pow+0x214>
   d788e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d7892:	459a      	cmp	sl, r3
   d7894:	4b24      	ldr	r3, [pc, #144]	; (d7928 <__ieee754_pow+0x210>)
   d7896:	f340 83ed 	ble.w	d8074 <__ieee754_pow+0x95c>
   d789a:	4598      	cmp	r8, r3
   d789c:	f340 836b 	ble.w	d7f76 <__ieee754_pow+0x85e>
   d78a0:	f1bb 0f00 	cmp.w	fp, #0
   d78a4:	f340 836b 	ble.w	d7f7e <__ieee754_pow+0x866>
   d78a8:	a317      	add	r3, pc, #92	; (adr r3, d7908 <__ieee754_pow+0x1f0>)
   d78aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d78ae:	4610      	mov	r0, r2
   d78b0:	4619      	mov	r1, r3
   d78b2:	f001 f8d3 	bl	d8a5c <__aeabi_dmul>
   d78b6:	e9cd 0100 	strd	r0, r1, [sp]
   d78ba:	e77b      	b.n	d77b4 <__ieee754_pow+0x9c>
   d78bc:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d78c0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d78c4:	4313      	orrs	r3, r2
   d78c6:	f43f af71 	beq.w	d77ac <__ieee754_pow+0x94>
   d78ca:	4b17      	ldr	r3, [pc, #92]	; (d7928 <__ieee754_pow+0x210>)
   d78cc:	4598      	cmp	r8, r3
   d78ce:	f340 8388 	ble.w	d7fe2 <__ieee754_pow+0x8ca>
   d78d2:	f1bb 0f00 	cmp.w	fp, #0
   d78d6:	f2c0 8352 	blt.w	d7f7e <__ieee754_pow+0x866>
   d78da:	e9cd 6700 	strd	r6, r7, [sp]
   d78de:	e769      	b.n	d77b4 <__ieee754_pow+0x9c>
   d78e0:	f1bb 0f00 	cmp.w	fp, #0
   d78e4:	f2c0 8441 	blt.w	d816a <__ieee754_pow+0xa52>
   d78e8:	e9cd 4500 	strd	r4, r5, [sp]
   d78ec:	e762      	b.n	d77b4 <__ieee754_pow+0x9c>
   d78ee:	2102      	movs	r1, #2
   d78f0:	9103      	str	r1, [sp, #12]
   d78f2:	e735      	b.n	d7760 <__ieee754_pow+0x48>
   d78f4:	4622      	mov	r2, r4
   d78f6:	462b      	mov	r3, r5
   d78f8:	e7b4      	b.n	d7864 <__ieee754_pow+0x14c>
   d78fa:	bf00      	nop
   d78fc:	f3af 8000 	nop.w
   d7900:	00000000 	.word	0x00000000
   d7904:	3ff00000 	.word	0x3ff00000
   d7908:	8800759c 	.word	0x8800759c
   d790c:	7e37e43c 	.word	0x7e37e43c
   d7910:	7ff00000 	.word	0x7ff00000
   d7914:	3ff00000 	.word	0x3ff00000
   d7918:	3fe00000 	.word	0x3fe00000
   d791c:	000d9628 	.word	0x000d9628
   d7920:	433fffff 	.word	0x433fffff
   d7924:	41e00000 	.word	0x41e00000
   d7928:	3fefffff 	.word	0x3fefffff
   d792c:	4be4      	ldr	r3, [pc, #912]	; (d7cc0 <__ieee754_pow+0x5a8>)
   d792e:	ea09 0303 	and.w	r3, r9, r3
   d7932:	2b00      	cmp	r3, #0
   d7934:	f040 8416 	bne.w	d8164 <__ieee754_pow+0xa4c>
   d7938:	e9dd 0100 	ldrd	r0, r1, [sp]
   d793c:	4be1      	ldr	r3, [pc, #900]	; (d7cc4 <__ieee754_pow+0x5ac>)
   d793e:	2200      	movs	r2, #0
   d7940:	f001 f88c 	bl	d8a5c <__aeabi_dmul>
   d7944:	e9cd 0100 	strd	r0, r1, [sp]
   d7948:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d794c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d7950:	ea4f 5328 	mov.w	r3, r8, asr #20
   d7954:	49dc      	ldr	r1, [pc, #880]	; (d7cc8 <__ieee754_pow+0x5b0>)
   d7956:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d795a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d795e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d7962:	1818      	adds	r0, r3, r0
   d7964:	428a      	cmp	r2, r1
   d7966:	9007      	str	r0, [sp, #28]
   d7968:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d796c:	f340 83e9 	ble.w	d8142 <__ieee754_pow+0xa2a>
   d7970:	4bd6      	ldr	r3, [pc, #856]	; (d7ccc <__ieee754_pow+0x5b4>)
   d7972:	429a      	cmp	r2, r3
   d7974:	f340 843e 	ble.w	d81f4 <__ieee754_pow+0xadc>
   d7978:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d7c68 <__ieee754_pow+0x550>
   d797c:	eeb0 ba47 	vmov.f32	s22, s14
   d7980:	eef0 ba67 	vmov.f32	s23, s15
   d7984:	eeb0 ca47 	vmov.f32	s24, s14
   d7988:	eef0 ca67 	vmov.f32	s25, s15
   d798c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d7c70 <__ieee754_pow+0x558>
   d7990:	3001      	adds	r0, #1
   d7992:	ec54 3b17 	vmov	r3, r4, d7
   d7996:	9007      	str	r0, [sp, #28]
   d7998:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d799c:	f04f 0900 	mov.w	r9, #0
   d79a0:	e9dd ab00 	ldrd	sl, fp, [sp]
   d79a4:	ec44 3b18 	vmov	d8, r3, r4
   d79a8:	461a      	mov	r2, r3
   d79aa:	4650      	mov	r0, sl
   d79ac:	4623      	mov	r3, r4
   d79ae:	4641      	mov	r1, r8
   d79b0:	f000 fe9c 	bl	d86ec <__aeabi_dsub>
   d79b4:	ec53 2b18 	vmov	r2, r3, d8
   d79b8:	4604      	mov	r4, r0
   d79ba:	460d      	mov	r5, r1
   d79bc:	4650      	mov	r0, sl
   d79be:	4641      	mov	r1, r8
   d79c0:	f000 fe96 	bl	d86f0 <__adddf3>
   d79c4:	4602      	mov	r2, r0
   d79c6:	460b      	mov	r3, r1
   d79c8:	2000      	movs	r0, #0
   d79ca:	49c1      	ldr	r1, [pc, #772]	; (d7cd0 <__ieee754_pow+0x5b8>)
   d79cc:	f001 f970 	bl	d8cb0 <__aeabi_ddiv>
   d79d0:	ec45 4b1a 	vmov	d10, r4, r5
   d79d4:	ec41 0b19 	vmov	d9, r0, r1
   d79d8:	ec51 0b1a 	vmov	r0, r1, d10
   d79dc:	ec53 2b19 	vmov	r2, r3, d9
   d79e0:	f001 f83c 	bl	d8a5c <__aeabi_dmul>
   d79e4:	46c3      	mov	fp, r8
   d79e6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d79ea:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d79ee:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d79f2:	eb03 0509 	add.w	r5, r3, r9
   d79f6:	460a      	mov	r2, r1
   d79f8:	2300      	movs	r3, #0
   d79fa:	4601      	mov	r1, r0
   d79fc:	e9cd 1200 	strd	r1, r2, [sp]
   d7a00:	9300      	str	r3, [sp, #0]
   d7a02:	e9dd 8900 	ldrd	r8, r9, [sp]
   d7a06:	2400      	movs	r4, #0
   d7a08:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d7a0c:	462b      	mov	r3, r5
   d7a0e:	4622      	mov	r2, r4
   d7a10:	4640      	mov	r0, r8
   d7a12:	4649      	mov	r1, r9
   d7a14:	f001 f822 	bl	d8a5c <__aeabi_dmul>
   d7a18:	4602      	mov	r2, r0
   d7a1a:	460b      	mov	r3, r1
   d7a1c:	ec51 0b1a 	vmov	r0, r1, d10
   d7a20:	f000 fe64 	bl	d86ec <__aeabi_dsub>
   d7a24:	ec41 0b17 	vmov	d7, r0, r1
   d7a28:	ec53 2b18 	vmov	r2, r3, d8
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	4629      	mov	r1, r5
   d7a30:	ec55 4b17 	vmov	r4, r5, d7
   d7a34:	f000 fe5a 	bl	d86ec <__aeabi_dsub>
   d7a38:	4602      	mov	r2, r0
   d7a3a:	460b      	mov	r3, r1
   d7a3c:	4650      	mov	r0, sl
   d7a3e:	4659      	mov	r1, fp
   d7a40:	f000 fe54 	bl	d86ec <__aeabi_dsub>
   d7a44:	4642      	mov	r2, r8
   d7a46:	464b      	mov	r3, r9
   d7a48:	f001 f808 	bl	d8a5c <__aeabi_dmul>
   d7a4c:	4602      	mov	r2, r0
   d7a4e:	460b      	mov	r3, r1
   d7a50:	4620      	mov	r0, r4
   d7a52:	4629      	mov	r1, r5
   d7a54:	f000 fe4a 	bl	d86ec <__aeabi_dsub>
   d7a58:	ec53 2b19 	vmov	r2, r3, d9
   d7a5c:	f000 fffe 	bl	d8a5c <__aeabi_dmul>
   d7a60:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d7a64:	4604      	mov	r4, r0
   d7a66:	460d      	mov	r5, r1
   d7a68:	4652      	mov	r2, sl
   d7a6a:	465b      	mov	r3, fp
   d7a6c:	4650      	mov	r0, sl
   d7a6e:	4659      	mov	r1, fp
   d7a70:	f000 fff4 	bl	d8a5c <__aeabi_dmul>
   d7a74:	a380      	add	r3, pc, #512	; (adr r3, d7c78 <__ieee754_pow+0x560>)
   d7a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a7a:	ec45 4b1a 	vmov	d10, r4, r5
   d7a7e:	4604      	mov	r4, r0
   d7a80:	460d      	mov	r5, r1
   d7a82:	f000 ffeb 	bl	d8a5c <__aeabi_dmul>
   d7a86:	a37e      	add	r3, pc, #504	; (adr r3, d7c80 <__ieee754_pow+0x568>)
   d7a88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a8c:	f000 fe30 	bl	d86f0 <__adddf3>
   d7a90:	4622      	mov	r2, r4
   d7a92:	462b      	mov	r3, r5
   d7a94:	f000 ffe2 	bl	d8a5c <__aeabi_dmul>
   d7a98:	a37b      	add	r3, pc, #492	; (adr r3, d7c88 <__ieee754_pow+0x570>)
   d7a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a9e:	f000 fe27 	bl	d86f0 <__adddf3>
   d7aa2:	4622      	mov	r2, r4
   d7aa4:	462b      	mov	r3, r5
   d7aa6:	f000 ffd9 	bl	d8a5c <__aeabi_dmul>
   d7aaa:	a379      	add	r3, pc, #484	; (adr r3, d7c90 <__ieee754_pow+0x578>)
   d7aac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ab0:	f000 fe1e 	bl	d86f0 <__adddf3>
   d7ab4:	4622      	mov	r2, r4
   d7ab6:	462b      	mov	r3, r5
   d7ab8:	f000 ffd0 	bl	d8a5c <__aeabi_dmul>
   d7abc:	a376      	add	r3, pc, #472	; (adr r3, d7c98 <__ieee754_pow+0x580>)
   d7abe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ac2:	f000 fe15 	bl	d86f0 <__adddf3>
   d7ac6:	4622      	mov	r2, r4
   d7ac8:	462b      	mov	r3, r5
   d7aca:	f000 ffc7 	bl	d8a5c <__aeabi_dmul>
   d7ace:	a374      	add	r3, pc, #464	; (adr r3, d7ca0 <__ieee754_pow+0x588>)
   d7ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ad4:	f000 fe0c 	bl	d86f0 <__adddf3>
   d7ad8:	4622      	mov	r2, r4
   d7ada:	462b      	mov	r3, r5
   d7adc:	4604      	mov	r4, r0
   d7ade:	460d      	mov	r5, r1
   d7ae0:	4610      	mov	r0, r2
   d7ae2:	4619      	mov	r1, r3
   d7ae4:	f000 ffba 	bl	d8a5c <__aeabi_dmul>
   d7ae8:	4602      	mov	r2, r0
   d7aea:	460b      	mov	r3, r1
   d7aec:	4620      	mov	r0, r4
   d7aee:	4629      	mov	r1, r5
   d7af0:	f000 ffb4 	bl	d8a5c <__aeabi_dmul>
   d7af4:	4642      	mov	r2, r8
   d7af6:	4604      	mov	r4, r0
   d7af8:	460d      	mov	r5, r1
   d7afa:	464b      	mov	r3, r9
   d7afc:	4650      	mov	r0, sl
   d7afe:	4659      	mov	r1, fp
   d7b00:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d7b04:	f000 fdf4 	bl	d86f0 <__adddf3>
   d7b08:	ec53 2b1a 	vmov	r2, r3, d10
   d7b0c:	f000 ffa6 	bl	d8a5c <__aeabi_dmul>
   d7b10:	4622      	mov	r2, r4
   d7b12:	462b      	mov	r3, r5
   d7b14:	f000 fdec 	bl	d86f0 <__adddf3>
   d7b18:	4642      	mov	r2, r8
   d7b1a:	4604      	mov	r4, r0
   d7b1c:	460d      	mov	r5, r1
   d7b1e:	464b      	mov	r3, r9
   d7b20:	4640      	mov	r0, r8
   d7b22:	4649      	mov	r1, r9
   d7b24:	f000 ff9a 	bl	d8a5c <__aeabi_dmul>
   d7b28:	ec45 4b19 	vmov	d9, r4, r5
   d7b2c:	4b69      	ldr	r3, [pc, #420]	; (d7cd4 <__ieee754_pow+0x5bc>)
   d7b2e:	2200      	movs	r2, #0
   d7b30:	4682      	mov	sl, r0
   d7b32:	468b      	mov	fp, r1
   d7b34:	f000 fddc 	bl	d86f0 <__adddf3>
   d7b38:	ec53 2b19 	vmov	r2, r3, d9
   d7b3c:	f000 fdd8 	bl	d86f0 <__adddf3>
   d7b40:	9c00      	ldr	r4, [sp, #0]
   d7b42:	460d      	mov	r5, r1
   d7b44:	4622      	mov	r2, r4
   d7b46:	462b      	mov	r3, r5
   d7b48:	4640      	mov	r0, r8
   d7b4a:	4649      	mov	r1, r9
   d7b4c:	f000 ff86 	bl	d8a5c <__aeabi_dmul>
   d7b50:	4b60      	ldr	r3, [pc, #384]	; (d7cd4 <__ieee754_pow+0x5bc>)
   d7b52:	4680      	mov	r8, r0
   d7b54:	4689      	mov	r9, r1
   d7b56:	2200      	movs	r2, #0
   d7b58:	4620      	mov	r0, r4
   d7b5a:	4629      	mov	r1, r5
   d7b5c:	f000 fdc6 	bl	d86ec <__aeabi_dsub>
   d7b60:	4652      	mov	r2, sl
   d7b62:	465b      	mov	r3, fp
   d7b64:	f000 fdc2 	bl	d86ec <__aeabi_dsub>
   d7b68:	4602      	mov	r2, r0
   d7b6a:	460b      	mov	r3, r1
   d7b6c:	ec51 0b19 	vmov	r0, r1, d9
   d7b70:	f000 fdbc 	bl	d86ec <__aeabi_dsub>
   d7b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7b78:	f000 ff70 	bl	d8a5c <__aeabi_dmul>
   d7b7c:	ec49 8b18 	vmov	d8, r8, r9
   d7b80:	4622      	mov	r2, r4
   d7b82:	4680      	mov	r8, r0
   d7b84:	4689      	mov	r9, r1
   d7b86:	462b      	mov	r3, r5
   d7b88:	ec51 0b1a 	vmov	r0, r1, d10
   d7b8c:	f000 ff66 	bl	d8a5c <__aeabi_dmul>
   d7b90:	4602      	mov	r2, r0
   d7b92:	460b      	mov	r3, r1
   d7b94:	4640      	mov	r0, r8
   d7b96:	4649      	mov	r1, r9
   d7b98:	f000 fdaa 	bl	d86f0 <__adddf3>
   d7b9c:	4682      	mov	sl, r0
   d7b9e:	468b      	mov	fp, r1
   d7ba0:	4652      	mov	r2, sl
   d7ba2:	465b      	mov	r3, fp
   d7ba4:	ec51 0b18 	vmov	r0, r1, d8
   d7ba8:	f000 fda2 	bl	d86f0 <__adddf3>
   d7bac:	9c00      	ldr	r4, [sp, #0]
   d7bae:	a33e      	add	r3, pc, #248	; (adr r3, d7ca8 <__ieee754_pow+0x590>)
   d7bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bb4:	4620      	mov	r0, r4
   d7bb6:	460d      	mov	r5, r1
   d7bb8:	f000 ff50 	bl	d8a5c <__aeabi_dmul>
   d7bbc:	ec53 2b18 	vmov	r2, r3, d8
   d7bc0:	4680      	mov	r8, r0
   d7bc2:	4689      	mov	r9, r1
   d7bc4:	4620      	mov	r0, r4
   d7bc6:	4629      	mov	r1, r5
   d7bc8:	f000 fd90 	bl	d86ec <__aeabi_dsub>
   d7bcc:	4602      	mov	r2, r0
   d7bce:	460b      	mov	r3, r1
   d7bd0:	4650      	mov	r0, sl
   d7bd2:	4659      	mov	r1, fp
   d7bd4:	f000 fd8a 	bl	d86ec <__aeabi_dsub>
   d7bd8:	a335      	add	r3, pc, #212	; (adr r3, d7cb0 <__ieee754_pow+0x598>)
   d7bda:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bde:	f000 ff3d 	bl	d8a5c <__aeabi_dmul>
   d7be2:	ec49 8b19 	vmov	d9, r8, r9
   d7be6:	a334      	add	r3, pc, #208	; (adr r3, d7cb8 <__ieee754_pow+0x5a0>)
   d7be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7bec:	4680      	mov	r8, r0
   d7bee:	4689      	mov	r9, r1
   d7bf0:	4620      	mov	r0, r4
   d7bf2:	4629      	mov	r1, r5
   d7bf4:	f000 ff32 	bl	d8a5c <__aeabi_dmul>
   d7bf8:	4602      	mov	r2, r0
   d7bfa:	460b      	mov	r3, r1
   d7bfc:	4640      	mov	r0, r8
   d7bfe:	4649      	mov	r1, r9
   d7c00:	f000 fd76 	bl	d86f0 <__adddf3>
   d7c04:	ec53 2b1c 	vmov	r2, r3, d12
   d7c08:	f000 fd72 	bl	d86f0 <__adddf3>
   d7c0c:	4682      	mov	sl, r0
   d7c0e:	9807      	ldr	r0, [sp, #28]
   d7c10:	468b      	mov	fp, r1
   d7c12:	f000 feb9 	bl	d8988 <__aeabi_i2d>
   d7c16:	4652      	mov	r2, sl
   d7c18:	4680      	mov	r8, r0
   d7c1a:	4689      	mov	r9, r1
   d7c1c:	465b      	mov	r3, fp
   d7c1e:	ec51 0b19 	vmov	r0, r1, d9
   d7c22:	f000 fd65 	bl	d86f0 <__adddf3>
   d7c26:	ec53 2b1b 	vmov	r2, r3, d11
   d7c2a:	f000 fd61 	bl	d86f0 <__adddf3>
   d7c2e:	4642      	mov	r2, r8
   d7c30:	464b      	mov	r3, r9
   d7c32:	f000 fd5d 	bl	d86f0 <__adddf3>
   d7c36:	9c00      	ldr	r4, [sp, #0]
   d7c38:	4642      	mov	r2, r8
   d7c3a:	464b      	mov	r3, r9
   d7c3c:	4620      	mov	r0, r4
   d7c3e:	460d      	mov	r5, r1
   d7c40:	f000 fd54 	bl	d86ec <__aeabi_dsub>
   d7c44:	ec53 2b1b 	vmov	r2, r3, d11
   d7c48:	f000 fd50 	bl	d86ec <__aeabi_dsub>
   d7c4c:	ec53 2b19 	vmov	r2, r3, d9
   d7c50:	f000 fd4c 	bl	d86ec <__aeabi_dsub>
   d7c54:	4602      	mov	r2, r0
   d7c56:	460b      	mov	r3, r1
   d7c58:	4650      	mov	r0, sl
   d7c5a:	4659      	mov	r1, fp
   d7c5c:	f000 fd46 	bl	d86ec <__aeabi_dsub>
   d7c60:	4682      	mov	sl, r0
   d7c62:	468b      	mov	fp, r1
   d7c64:	e038      	b.n	d7cd8 <__ieee754_pow+0x5c0>
   d7c66:	bf00      	nop
	...
   d7c74:	3ff00000 	.word	0x3ff00000
   d7c78:	4a454eef 	.word	0x4a454eef
   d7c7c:	3fca7e28 	.word	0x3fca7e28
   d7c80:	93c9db65 	.word	0x93c9db65
   d7c84:	3fcd864a 	.word	0x3fcd864a
   d7c88:	a91d4101 	.word	0xa91d4101
   d7c8c:	3fd17460 	.word	0x3fd17460
   d7c90:	518f264d 	.word	0x518f264d
   d7c94:	3fd55555 	.word	0x3fd55555
   d7c98:	db6fabff 	.word	0xdb6fabff
   d7c9c:	3fdb6db6 	.word	0x3fdb6db6
   d7ca0:	33333303 	.word	0x33333303
   d7ca4:	3fe33333 	.word	0x3fe33333
   d7ca8:	e0000000 	.word	0xe0000000
   d7cac:	3feec709 	.word	0x3feec709
   d7cb0:	dc3a03fd 	.word	0xdc3a03fd
   d7cb4:	3feec709 	.word	0x3feec709
   d7cb8:	145b01f5 	.word	0x145b01f5
   d7cbc:	be3e2fe0 	.word	0xbe3e2fe0
   d7cc0:	7ff00000 	.word	0x7ff00000
   d7cc4:	43400000 	.word	0x43400000
   d7cc8:	0003988e 	.word	0x0003988e
   d7ccc:	000bb679 	.word	0x000bb679
   d7cd0:	3ff00000 	.word	0x3ff00000
   d7cd4:	40080000 	.word	0x40080000
   d7cd8:	9b03      	ldr	r3, [sp, #12]
   d7cda:	9a06      	ldr	r2, [sp, #24]
   d7cdc:	3b01      	subs	r3, #1
   d7cde:	4313      	orrs	r3, r2
   d7ce0:	f040 8178 	bne.w	d7fd4 <__ieee754_pow+0x8bc>
   d7ce4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d7ff8 <__ieee754_pow+0x8e0>
   d7ce8:	eeb0 9a47 	vmov.f32	s18, s14
   d7cec:	eef0 9a67 	vmov.f32	s19, s15
   d7cf0:	2300      	movs	r3, #0
   d7cf2:	e9cd 6700 	strd	r6, r7, [sp]
   d7cf6:	9300      	str	r3, [sp, #0]
   d7cf8:	e9dd 8900 	ldrd	r8, r9, [sp]
   d7cfc:	4630      	mov	r0, r6
   d7cfe:	4642      	mov	r2, r8
   d7d00:	4639      	mov	r1, r7
   d7d02:	464b      	mov	r3, r9
   d7d04:	f000 fcf2 	bl	d86ec <__aeabi_dsub>
   d7d08:	4622      	mov	r2, r4
   d7d0a:	462b      	mov	r3, r5
   d7d0c:	f000 fea6 	bl	d8a5c <__aeabi_dmul>
   d7d10:	4632      	mov	r2, r6
   d7d12:	463b      	mov	r3, r7
   d7d14:	4606      	mov	r6, r0
   d7d16:	460f      	mov	r7, r1
   d7d18:	4650      	mov	r0, sl
   d7d1a:	4659      	mov	r1, fp
   d7d1c:	f000 fe9e 	bl	d8a5c <__aeabi_dmul>
   d7d20:	4602      	mov	r2, r0
   d7d22:	460b      	mov	r3, r1
   d7d24:	4630      	mov	r0, r6
   d7d26:	4639      	mov	r1, r7
   d7d28:	f000 fce2 	bl	d86f0 <__adddf3>
   d7d2c:	4642      	mov	r2, r8
   d7d2e:	4682      	mov	sl, r0
   d7d30:	468b      	mov	fp, r1
   d7d32:	464b      	mov	r3, r9
   d7d34:	4620      	mov	r0, r4
   d7d36:	4629      	mov	r1, r5
   d7d38:	f000 fe90 	bl	d8a5c <__aeabi_dmul>
   d7d3c:	4606      	mov	r6, r0
   d7d3e:	460f      	mov	r7, r1
   d7d40:	463b      	mov	r3, r7
   d7d42:	4650      	mov	r0, sl
   d7d44:	4659      	mov	r1, fp
   d7d46:	4632      	mov	r2, r6
   d7d48:	f000 fcd2 	bl	d86f0 <__adddf3>
   d7d4c:	4bc4      	ldr	r3, [pc, #784]	; (d8060 <__ieee754_pow+0x948>)
   d7d4e:	4299      	cmp	r1, r3
   d7d50:	4604      	mov	r4, r0
   d7d52:	460d      	mov	r5, r1
   d7d54:	4688      	mov	r8, r1
   d7d56:	f340 8117 	ble.w	d7f88 <__ieee754_pow+0x870>
   d7d5a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d7d5e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d7d62:	4303      	orrs	r3, r0
   d7d64:	f040 822a 	bne.w	d81bc <__ieee754_pow+0xaa4>
   d7d68:	a3a5      	add	r3, pc, #660	; (adr r3, d8000 <__ieee754_pow+0x8e8>)
   d7d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7d6e:	4650      	mov	r0, sl
   d7d70:	4659      	mov	r1, fp
   d7d72:	f000 fcbd 	bl	d86f0 <__adddf3>
   d7d76:	4632      	mov	r2, r6
   d7d78:	ec41 0b18 	vmov	d8, r0, r1
   d7d7c:	463b      	mov	r3, r7
   d7d7e:	4620      	mov	r0, r4
   d7d80:	4629      	mov	r1, r5
   d7d82:	f000 fcb3 	bl	d86ec <__aeabi_dsub>
   d7d86:	4602      	mov	r2, r0
   d7d88:	460b      	mov	r3, r1
   d7d8a:	ec51 0b18 	vmov	r0, r1, d8
   d7d8e:	f001 f8f5 	bl	d8f7c <__aeabi_dcmpgt>
   d7d92:	2800      	cmp	r0, #0
   d7d94:	f040 8212 	bne.w	d81bc <__ieee754_pow+0xaa4>
   d7d98:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d7d9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d7da0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d7da4:	fa42 f303 	asr.w	r3, r2, r3
   d7da8:	4443      	add	r3, r8
   d7daa:	49ae      	ldr	r1, [pc, #696]	; (d8064 <__ieee754_pow+0x94c>)
   d7dac:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d7db0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d7db4:	fa41 fc02 	asr.w	ip, r1, r2
   d7db8:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d7dbc:	ea23 010c 	bic.w	r1, r3, ip
   d7dc0:	f1c2 0414 	rsb	r4, r2, #20
   d7dc4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d7dc8:	f1b8 0f00 	cmp.w	r8, #0
   d7dcc:	460b      	mov	r3, r1
   d7dce:	fa45 f104 	asr.w	r1, r5, r4
   d7dd2:	9103      	str	r1, [sp, #12]
   d7dd4:	f04f 0000 	mov.w	r0, #0
   d7dd8:	bfb8      	it	lt
   d7dda:	4249      	neglt	r1, r1
   d7ddc:	4602      	mov	r2, r0
   d7dde:	bfb8      	it	lt
   d7de0:	9103      	strlt	r1, [sp, #12]
   d7de2:	4630      	mov	r0, r6
   d7de4:	4639      	mov	r1, r7
   d7de6:	f000 fc81 	bl	d86ec <__aeabi_dsub>
   d7dea:	4606      	mov	r6, r0
   d7dec:	460f      	mov	r7, r1
   d7dee:	463b      	mov	r3, r7
   d7df0:	4650      	mov	r0, sl
   d7df2:	4659      	mov	r1, fp
   d7df4:	4632      	mov	r2, r6
   d7df6:	f000 fc7b 	bl	d86f0 <__adddf3>
   d7dfa:	9b03      	ldr	r3, [sp, #12]
   d7dfc:	051b      	lsls	r3, r3, #20
   d7dfe:	9300      	str	r3, [sp, #0]
   d7e00:	460d      	mov	r5, r1
   d7e02:	2400      	movs	r4, #0
   d7e04:	a380      	add	r3, pc, #512	; (adr r3, d8008 <__ieee754_pow+0x8f0>)
   d7e06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	4629      	mov	r1, r5
   d7e0e:	f000 fe25 	bl	d8a5c <__aeabi_dmul>
   d7e12:	4632      	mov	r2, r6
   d7e14:	4680      	mov	r8, r0
   d7e16:	4689      	mov	r9, r1
   d7e18:	463b      	mov	r3, r7
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	4629      	mov	r1, r5
   d7e1e:	f000 fc65 	bl	d86ec <__aeabi_dsub>
   d7e22:	4602      	mov	r2, r0
   d7e24:	460b      	mov	r3, r1
   d7e26:	4650      	mov	r0, sl
   d7e28:	4659      	mov	r1, fp
   d7e2a:	f000 fc5f 	bl	d86ec <__aeabi_dsub>
   d7e2e:	a378      	add	r3, pc, #480	; (adr r3, d8010 <__ieee754_pow+0x8f8>)
   d7e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e34:	f000 fe12 	bl	d8a5c <__aeabi_dmul>
   d7e38:	a377      	add	r3, pc, #476	; (adr r3, d8018 <__ieee754_pow+0x900>)
   d7e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e3e:	4606      	mov	r6, r0
   d7e40:	460f      	mov	r7, r1
   d7e42:	4620      	mov	r0, r4
   d7e44:	4629      	mov	r1, r5
   d7e46:	f000 fe09 	bl	d8a5c <__aeabi_dmul>
   d7e4a:	4602      	mov	r2, r0
   d7e4c:	460b      	mov	r3, r1
   d7e4e:	4630      	mov	r0, r6
   d7e50:	4639      	mov	r1, r7
   d7e52:	f000 fc4d 	bl	d86f0 <__adddf3>
   d7e56:	4606      	mov	r6, r0
   d7e58:	460f      	mov	r7, r1
   d7e5a:	4632      	mov	r2, r6
   d7e5c:	463b      	mov	r3, r7
   d7e5e:	4640      	mov	r0, r8
   d7e60:	4649      	mov	r1, r9
   d7e62:	f000 fc45 	bl	d86f0 <__adddf3>
   d7e66:	4642      	mov	r2, r8
   d7e68:	464b      	mov	r3, r9
   d7e6a:	4604      	mov	r4, r0
   d7e6c:	460d      	mov	r5, r1
   d7e6e:	f000 fc3d 	bl	d86ec <__aeabi_dsub>
   d7e72:	4602      	mov	r2, r0
   d7e74:	460b      	mov	r3, r1
   d7e76:	4630      	mov	r0, r6
   d7e78:	4639      	mov	r1, r7
   d7e7a:	f000 fc37 	bl	d86ec <__aeabi_dsub>
   d7e7e:	4622      	mov	r2, r4
   d7e80:	4682      	mov	sl, r0
   d7e82:	468b      	mov	fp, r1
   d7e84:	462b      	mov	r3, r5
   d7e86:	4620      	mov	r0, r4
   d7e88:	4629      	mov	r1, r5
   d7e8a:	f000 fde7 	bl	d8a5c <__aeabi_dmul>
   d7e8e:	a364      	add	r3, pc, #400	; (adr r3, d8020 <__ieee754_pow+0x908>)
   d7e90:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7e94:	4606      	mov	r6, r0
   d7e96:	460f      	mov	r7, r1
   d7e98:	f000 fde0 	bl	d8a5c <__aeabi_dmul>
   d7e9c:	a362      	add	r3, pc, #392	; (adr r3, d8028 <__ieee754_pow+0x910>)
   d7e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ea2:	f000 fc23 	bl	d86ec <__aeabi_dsub>
   d7ea6:	4632      	mov	r2, r6
   d7ea8:	463b      	mov	r3, r7
   d7eaa:	f000 fdd7 	bl	d8a5c <__aeabi_dmul>
   d7eae:	a360      	add	r3, pc, #384	; (adr r3, d8030 <__ieee754_pow+0x918>)
   d7eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7eb4:	f000 fc1c 	bl	d86f0 <__adddf3>
   d7eb8:	4632      	mov	r2, r6
   d7eba:	463b      	mov	r3, r7
   d7ebc:	f000 fdce 	bl	d8a5c <__aeabi_dmul>
   d7ec0:	a35d      	add	r3, pc, #372	; (adr r3, d8038 <__ieee754_pow+0x920>)
   d7ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ec6:	f000 fc11 	bl	d86ec <__aeabi_dsub>
   d7eca:	4632      	mov	r2, r6
   d7ecc:	463b      	mov	r3, r7
   d7ece:	f000 fdc5 	bl	d8a5c <__aeabi_dmul>
   d7ed2:	a35b      	add	r3, pc, #364	; (adr r3, d8040 <__ieee754_pow+0x928>)
   d7ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7ed8:	f000 fc0a 	bl	d86f0 <__adddf3>
   d7edc:	4632      	mov	r2, r6
   d7ede:	463b      	mov	r3, r7
   d7ee0:	f000 fdbc 	bl	d8a5c <__aeabi_dmul>
   d7ee4:	4602      	mov	r2, r0
   d7ee6:	460b      	mov	r3, r1
   d7ee8:	4620      	mov	r0, r4
   d7eea:	4629      	mov	r1, r5
   d7eec:	f000 fbfe 	bl	d86ec <__aeabi_dsub>
   d7ef0:	4606      	mov	r6, r0
   d7ef2:	460f      	mov	r7, r1
   d7ef4:	4632      	mov	r2, r6
   d7ef6:	463b      	mov	r3, r7
   d7ef8:	4620      	mov	r0, r4
   d7efa:	4629      	mov	r1, r5
   d7efc:	f000 fdae 	bl	d8a5c <__aeabi_dmul>
   d7f00:	2200      	movs	r2, #0
   d7f02:	4680      	mov	r8, r0
   d7f04:	4689      	mov	r9, r1
   d7f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7f0a:	4630      	mov	r0, r6
   d7f0c:	4639      	mov	r1, r7
   d7f0e:	f000 fbed 	bl	d86ec <__aeabi_dsub>
   d7f12:	4602      	mov	r2, r0
   d7f14:	460b      	mov	r3, r1
   d7f16:	4640      	mov	r0, r8
   d7f18:	4649      	mov	r1, r9
   d7f1a:	f000 fec9 	bl	d8cb0 <__aeabi_ddiv>
   d7f1e:	4652      	mov	r2, sl
   d7f20:	4606      	mov	r6, r0
   d7f22:	460f      	mov	r7, r1
   d7f24:	465b      	mov	r3, fp
   d7f26:	4620      	mov	r0, r4
   d7f28:	4629      	mov	r1, r5
   d7f2a:	f000 fd97 	bl	d8a5c <__aeabi_dmul>
   d7f2e:	4652      	mov	r2, sl
   d7f30:	465b      	mov	r3, fp
   d7f32:	f000 fbdd 	bl	d86f0 <__adddf3>
   d7f36:	4602      	mov	r2, r0
   d7f38:	460b      	mov	r3, r1
   d7f3a:	4630      	mov	r0, r6
   d7f3c:	4639      	mov	r1, r7
   d7f3e:	f000 fbd5 	bl	d86ec <__aeabi_dsub>
   d7f42:	4622      	mov	r2, r4
   d7f44:	462b      	mov	r3, r5
   d7f46:	f000 fbd1 	bl	d86ec <__aeabi_dsub>
   d7f4a:	4602      	mov	r2, r0
   d7f4c:	460b      	mov	r3, r1
   d7f4e:	2000      	movs	r0, #0
   d7f50:	4945      	ldr	r1, [pc, #276]	; (d8068 <__ieee754_pow+0x950>)
   d7f52:	f000 fbcb 	bl	d86ec <__aeabi_dsub>
   d7f56:	460b      	mov	r3, r1
   d7f58:	9900      	ldr	r1, [sp, #0]
   d7f5a:	4419      	add	r1, r3
   d7f5c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7f60:	4602      	mov	r2, r0
   d7f62:	f2c0 8169 	blt.w	d8238 <__ieee754_pow+0xb20>
   d7f66:	4610      	mov	r0, r2
   d7f68:	ec53 2b19 	vmov	r2, r3, d9
   d7f6c:	f000 fd76 	bl	d8a5c <__aeabi_dmul>
   d7f70:	e9cd 0100 	strd	r0, r1, [sp]
   d7f74:	e41e      	b.n	d77b4 <__ieee754_pow+0x9c>
   d7f76:	f1bb 0f00 	cmp.w	fp, #0
   d7f7a:	f6ff ac95 	blt.w	d78a8 <__ieee754_pow+0x190>
   d7f7e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d8048 <__ieee754_pow+0x930>
   d7f82:	ed8d 7b00 	vstr	d7, [sp]
   d7f86:	e415      	b.n	d77b4 <__ieee754_pow+0x9c>
   d7f88:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d8070 <__ieee754_pow+0x958>
   d7f8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d7f90:	4563      	cmp	r3, ip
   d7f92:	f340 810b 	ble.w	d81ac <__ieee754_pow+0xa94>
   d7f96:	4b35      	ldr	r3, [pc, #212]	; (d806c <__ieee754_pow+0x954>)
   d7f98:	440b      	add	r3, r1
   d7f9a:	4303      	orrs	r3, r0
   d7f9c:	d10a      	bne.n	d7fb4 <__ieee754_pow+0x89c>
   d7f9e:	4632      	mov	r2, r6
   d7fa0:	463b      	mov	r3, r7
   d7fa2:	f000 fba3 	bl	d86ec <__aeabi_dsub>
   d7fa6:	4652      	mov	r2, sl
   d7fa8:	465b      	mov	r3, fp
   d7faa:	f000 ffdd 	bl	d8f68 <__aeabi_dcmpge>
   d7fae:	2800      	cmp	r0, #0
   d7fb0:	f43f aef2 	beq.w	d7d98 <__ieee754_pow+0x680>
   d7fb4:	a326      	add	r3, pc, #152	; (adr r3, d8050 <__ieee754_pow+0x938>)
   d7fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fba:	ec51 0b19 	vmov	r0, r1, d9
   d7fbe:	f000 fd4d 	bl	d8a5c <__aeabi_dmul>
   d7fc2:	a323      	add	r3, pc, #140	; (adr r3, d8050 <__ieee754_pow+0x938>)
   d7fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7fc8:	f000 fd48 	bl	d8a5c <__aeabi_dmul>
   d7fcc:	e9cd 0100 	strd	r0, r1, [sp]
   d7fd0:	f7ff bbf0 	b.w	d77b4 <__ieee754_pow+0x9c>
   d7fd4:	ed9f 7b20 	vldr	d7, [pc, #128]	; d8058 <__ieee754_pow+0x940>
   d7fd8:	eeb0 9a47 	vmov.f32	s18, s14
   d7fdc:	eef0 9a67 	vmov.f32	s19, s15
   d7fe0:	e686      	b.n	d7cf0 <__ieee754_pow+0x5d8>
   d7fe2:	f1bb 0f00 	cmp.w	fp, #0
   d7fe6:	daca      	bge.n	d7f7e <__ieee754_pow+0x866>
   d7fe8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d7fec:	9600      	str	r6, [sp, #0]
   d7fee:	9301      	str	r3, [sp, #4]
   d7ff0:	f7ff bbe0 	b.w	d77b4 <__ieee754_pow+0x9c>
   d7ff4:	f3af 8000 	nop.w
   d7ff8:	00000000 	.word	0x00000000
   d7ffc:	bff00000 	.word	0xbff00000
   d8000:	652b82fe 	.word	0x652b82fe
   d8004:	3c971547 	.word	0x3c971547
   d8008:	00000000 	.word	0x00000000
   d800c:	3fe62e43 	.word	0x3fe62e43
   d8010:	fefa39ef 	.word	0xfefa39ef
   d8014:	3fe62e42 	.word	0x3fe62e42
   d8018:	0ca86c39 	.word	0x0ca86c39
   d801c:	be205c61 	.word	0xbe205c61
   d8020:	72bea4d0 	.word	0x72bea4d0
   d8024:	3e663769 	.word	0x3e663769
   d8028:	c5d26bf1 	.word	0xc5d26bf1
   d802c:	3ebbbd41 	.word	0x3ebbbd41
   d8030:	af25de2c 	.word	0xaf25de2c
   d8034:	3f11566a 	.word	0x3f11566a
   d8038:	16bebd93 	.word	0x16bebd93
   d803c:	3f66c16c 	.word	0x3f66c16c
   d8040:	5555553e 	.word	0x5555553e
   d8044:	3fc55555 	.word	0x3fc55555
	...
   d8050:	c2f8f359 	.word	0xc2f8f359
   d8054:	01a56e1f 	.word	0x01a56e1f
   d8058:	00000000 	.word	0x00000000
   d805c:	3ff00000 	.word	0x3ff00000
   d8060:	408fffff 	.word	0x408fffff
   d8064:	000fffff 	.word	0x000fffff
   d8068:	3ff00000 	.word	0x3ff00000
   d806c:	3f6f3400 	.word	0x3f6f3400
   d8070:	4090cbff 	.word	0x4090cbff
   d8074:	4598      	cmp	r8, r3
   d8076:	f6ff af7e 	blt.w	d7f76 <__ieee754_pow+0x85e>
   d807a:	4b91      	ldr	r3, [pc, #580]	; (d82c0 <__ieee754_pow+0xba8>)
   d807c:	4598      	cmp	r8, r3
   d807e:	f73f ac0f 	bgt.w	d78a0 <__ieee754_pow+0x188>
   d8082:	4b8f      	ldr	r3, [pc, #572]	; (d82c0 <__ieee754_pow+0xba8>)
   d8084:	2200      	movs	r2, #0
   d8086:	e9dd 0100 	ldrd	r0, r1, [sp]
   d808a:	f000 fb2f 	bl	d86ec <__aeabi_dsub>
   d808e:	a378      	add	r3, pc, #480	; (adr r3, d8270 <__ieee754_pow+0xb58>)
   d8090:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8094:	4604      	mov	r4, r0
   d8096:	460d      	mov	r5, r1
   d8098:	f000 fce0 	bl	d8a5c <__aeabi_dmul>
   d809c:	a376      	add	r3, pc, #472	; (adr r3, d8278 <__ieee754_pow+0xb60>)
   d809e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d80a2:	4682      	mov	sl, r0
   d80a4:	468b      	mov	fp, r1
   d80a6:	4620      	mov	r0, r4
   d80a8:	4629      	mov	r1, r5
   d80aa:	f000 fcd7 	bl	d8a5c <__aeabi_dmul>
   d80ae:	4b85      	ldr	r3, [pc, #532]	; (d82c4 <__ieee754_pow+0xbac>)
   d80b0:	4680      	mov	r8, r0
   d80b2:	4689      	mov	r9, r1
   d80b4:	2200      	movs	r2, #0
   d80b6:	4620      	mov	r0, r4
   d80b8:	4629      	mov	r1, r5
   d80ba:	f000 fccf 	bl	d8a5c <__aeabi_dmul>
   d80be:	4602      	mov	r2, r0
   d80c0:	460b      	mov	r3, r1
   d80c2:	a16f      	add	r1, pc, #444	; (adr r1, d8280 <__ieee754_pow+0xb68>)
   d80c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d80c8:	f000 fb10 	bl	d86ec <__aeabi_dsub>
   d80cc:	4622      	mov	r2, r4
   d80ce:	462b      	mov	r3, r5
   d80d0:	f000 fcc4 	bl	d8a5c <__aeabi_dmul>
   d80d4:	4602      	mov	r2, r0
   d80d6:	460b      	mov	r3, r1
   d80d8:	2000      	movs	r0, #0
   d80da:	497b      	ldr	r1, [pc, #492]	; (d82c8 <__ieee754_pow+0xbb0>)
   d80dc:	f000 fb06 	bl	d86ec <__aeabi_dsub>
   d80e0:	4622      	mov	r2, r4
   d80e2:	462b      	mov	r3, r5
   d80e4:	4604      	mov	r4, r0
   d80e6:	460d      	mov	r5, r1
   d80e8:	4610      	mov	r0, r2
   d80ea:	4619      	mov	r1, r3
   d80ec:	f000 fcb6 	bl	d8a5c <__aeabi_dmul>
   d80f0:	4602      	mov	r2, r0
   d80f2:	460b      	mov	r3, r1
   d80f4:	4620      	mov	r0, r4
   d80f6:	4629      	mov	r1, r5
   d80f8:	f000 fcb0 	bl	d8a5c <__aeabi_dmul>
   d80fc:	a362      	add	r3, pc, #392	; (adr r3, d8288 <__ieee754_pow+0xb70>)
   d80fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8102:	f000 fcab 	bl	d8a5c <__aeabi_dmul>
   d8106:	4602      	mov	r2, r0
   d8108:	460b      	mov	r3, r1
   d810a:	4640      	mov	r0, r8
   d810c:	4649      	mov	r1, r9
   d810e:	f000 faed 	bl	d86ec <__aeabi_dsub>
   d8112:	4680      	mov	r8, r0
   d8114:	4689      	mov	r9, r1
   d8116:	4650      	mov	r0, sl
   d8118:	4659      	mov	r1, fp
   d811a:	4642      	mov	r2, r8
   d811c:	464b      	mov	r3, r9
   d811e:	f000 fae7 	bl	d86f0 <__adddf3>
   d8122:	2400      	movs	r4, #0
   d8124:	4652      	mov	r2, sl
   d8126:	465b      	mov	r3, fp
   d8128:	4620      	mov	r0, r4
   d812a:	460d      	mov	r5, r1
   d812c:	f000 fade 	bl	d86ec <__aeabi_dsub>
   d8130:	4602      	mov	r2, r0
   d8132:	460b      	mov	r3, r1
   d8134:	4640      	mov	r0, r8
   d8136:	4649      	mov	r1, r9
   d8138:	f000 fad8 	bl	d86ec <__aeabi_dsub>
   d813c:	4682      	mov	sl, r0
   d813e:	468b      	mov	fp, r1
   d8140:	e5ca      	b.n	d7cd8 <__ieee754_pow+0x5c0>
   d8142:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8290 <__ieee754_pow+0xb78>
   d8146:	eeb0 ba47 	vmov.f32	s22, s14
   d814a:	eef0 ba67 	vmov.f32	s23, s15
   d814e:	eeb0 ca47 	vmov.f32	s24, s14
   d8152:	eef0 ca67 	vmov.f32	s25, s15
   d8156:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8298 <__ieee754_pow+0xb80>
   d815a:	f04f 0900 	mov.w	r9, #0
   d815e:	ec54 3b17 	vmov	r3, r4, d7
   d8162:	e41d      	b.n	d79a0 <__ieee754_pow+0x288>
   d8164:	2000      	movs	r0, #0
   d8166:	f7ff bbf3 	b.w	d7950 <__ieee754_pow+0x238>
   d816a:	4955      	ldr	r1, [pc, #340]	; (d82c0 <__ieee754_pow+0xba8>)
   d816c:	4622      	mov	r2, r4
   d816e:	462b      	mov	r3, r5
   d8170:	2000      	movs	r0, #0
   d8172:	f000 fd9d 	bl	d8cb0 <__aeabi_ddiv>
   d8176:	e9cd 0100 	strd	r0, r1, [sp]
   d817a:	f7ff bb1b 	b.w	d77b4 <__ieee754_pow+0x9c>
   d817e:	4622      	mov	r2, r4
   d8180:	462b      	mov	r3, r5
   d8182:	4620      	mov	r0, r4
   d8184:	4629      	mov	r1, r5
   d8186:	f000 fc69 	bl	d8a5c <__aeabi_dmul>
   d818a:	e9cd 0100 	strd	r0, r1, [sp]
   d818e:	f7ff bb11 	b.w	d77b4 <__ieee754_pow+0x9c>
   d8192:	2b00      	cmp	r3, #0
   d8194:	d142      	bne.n	d821c <__ieee754_pow+0xb04>
   d8196:	f1c1 0114 	rsb	r1, r1, #20
   d819a:	fa4a f001 	asr.w	r0, sl, r1
   d819e:	fa00 f101 	lsl.w	r1, r0, r1
   d81a2:	4551      	cmp	r1, sl
   d81a4:	d05a      	beq.n	d825c <__ieee754_pow+0xb44>
   d81a6:	9303      	str	r3, [sp, #12]
   d81a8:	f7ff bae0 	b.w	d776c <__ieee754_pow+0x54>
   d81ac:	4a46      	ldr	r2, [pc, #280]	; (d82c8 <__ieee754_pow+0xbb0>)
   d81ae:	4293      	cmp	r3, r2
   d81b0:	dc5b      	bgt.n	d826a <__ieee754_pow+0xb52>
   d81b2:	e9dd 1200 	ldrd	r1, r2, [sp]
   d81b6:	9100      	str	r1, [sp, #0]
   d81b8:	9103      	str	r1, [sp, #12]
   d81ba:	e622      	b.n	d7e02 <__ieee754_pow+0x6ea>
   d81bc:	a338      	add	r3, pc, #224	; (adr r3, d82a0 <__ieee754_pow+0xb88>)
   d81be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81c2:	ec51 0b19 	vmov	r0, r1, d9
   d81c6:	f000 fc49 	bl	d8a5c <__aeabi_dmul>
   d81ca:	a335      	add	r3, pc, #212	; (adr r3, d82a0 <__ieee754_pow+0xb88>)
   d81cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81d0:	f000 fc44 	bl	d8a5c <__aeabi_dmul>
   d81d4:	e9cd 0100 	strd	r0, r1, [sp]
   d81d8:	f7ff baec 	b.w	d77b4 <__ieee754_pow+0x9c>
   d81dc:	9b03      	ldr	r3, [sp, #12]
   d81de:	2b01      	cmp	r3, #1
   d81e0:	f47f aae8 	bne.w	d77b4 <__ieee754_pow+0x9c>
   d81e4:	e9dd 2100 	ldrd	r2, r1, [sp]
   d81e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d81ec:	e9cd 2300 	strd	r2, r3, [sp]
   d81f0:	f7ff bae0 	b.w	d77b4 <__ieee754_pow+0x9c>
   d81f4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d82a8 <__ieee754_pow+0xb90>
   d81f8:	eeb0 ba47 	vmov.f32	s22, s14
   d81fc:	eef0 ba67 	vmov.f32	s23, s15
   d8200:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d82b0 <__ieee754_pow+0xb98>
   d8204:	eeb0 ca47 	vmov.f32	s24, s14
   d8208:	eef0 ca67 	vmov.f32	s25, s15
   d820c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d82b8 <__ieee754_pow+0xba0>
   d8210:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d8214:	ec54 3b17 	vmov	r3, r4, d7
   d8218:	f7ff bbc2 	b.w	d79a0 <__ieee754_pow+0x288>
   d821c:	ec45 4b10 	vmov	d0, r4, r5
   d8220:	9203      	str	r2, [sp, #12]
   d8222:	f000 f917 	bl	d8454 <fabs>
   d8226:	9a03      	ldr	r2, [sp, #12]
   d8228:	ed8d 0b00 	vstr	d0, [sp]
   d822c:	2a00      	cmp	r2, #0
   d822e:	f47f ab61 	bne.w	d78f4 <__ieee754_pow+0x1dc>
   d8232:	9203      	str	r2, [sp, #12]
   d8234:	f7ff baf5 	b.w	d7822 <__ieee754_pow+0x10a>
   d8238:	9803      	ldr	r0, [sp, #12]
   d823a:	ec43 2b10 	vmov	d0, r2, r3
   d823e:	f000 f9bf 	bl	d85c0 <scalbn>
   d8242:	ec51 0b10 	vmov	r0, r1, d0
   d8246:	e68f      	b.n	d7f68 <__ieee754_pow+0x850>
   d8248:	f000 0001 	and.w	r0, r0, #1
   d824c:	f1c0 0102 	rsb	r1, r0, #2
   d8250:	9103      	str	r1, [sp, #12]
   d8252:	2b00      	cmp	r3, #0
   d8254:	f43f aa8a 	beq.w	d776c <__ieee754_pow+0x54>
   d8258:	f7ff bada 	b.w	d7810 <__ieee754_pow+0xf8>
   d825c:	f000 0001 	and.w	r0, r0, #1
   d8260:	f1c0 0302 	rsb	r3, r0, #2
   d8264:	9303      	str	r3, [sp, #12]
   d8266:	f7ff ba81 	b.w	d776c <__ieee754_pow+0x54>
   d826a:	151b      	asrs	r3, r3, #20
   d826c:	e596      	b.n	d7d9c <__ieee754_pow+0x684>
   d826e:	bf00      	nop
   d8270:	60000000 	.word	0x60000000
   d8274:	3ff71547 	.word	0x3ff71547
   d8278:	f85ddf44 	.word	0xf85ddf44
   d827c:	3e54ae0b 	.word	0x3e54ae0b
   d8280:	55555555 	.word	0x55555555
   d8284:	3fd55555 	.word	0x3fd55555
   d8288:	652b82fe 	.word	0x652b82fe
   d828c:	3ff71547 	.word	0x3ff71547
	...
   d829c:	3ff00000 	.word	0x3ff00000
   d82a0:	8800759c 	.word	0x8800759c
   d82a4:	7e37e43c 	.word	0x7e37e43c
   d82a8:	40000000 	.word	0x40000000
   d82ac:	3fe2b803 	.word	0x3fe2b803
   d82b0:	43cfd006 	.word	0x43cfd006
   d82b4:	3e4cfdeb 	.word	0x3e4cfdeb
   d82b8:	00000000 	.word	0x00000000
   d82bc:	3ff80000 	.word	0x3ff80000
   d82c0:	3ff00000 	.word	0x3ff00000
   d82c4:	3fd00000 	.word	0x3fd00000
   d82c8:	3fe00000 	.word	0x3fe00000

000d82cc <__ieee754_sqrt>:
   d82cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d82d0:	4a5f      	ldr	r2, [pc, #380]	; (d8450 <__ieee754_sqrt+0x184>)
   d82d2:	ec57 6b10 	vmov	r6, r7, d0
   d82d6:	43ba      	bics	r2, r7
   d82d8:	f000 8098 	beq.w	d840c <__ieee754_sqrt+0x140>
   d82dc:	2f00      	cmp	r7, #0
   d82de:	ee10 4a10 	vmov	r4, s0
   d82e2:	463b      	mov	r3, r7
   d82e4:	dd4e      	ble.n	d8384 <__ieee754_sqrt+0xb8>
   d82e6:	1539      	asrs	r1, r7, #20
   d82e8:	d05b      	beq.n	d83a2 <__ieee754_sqrt+0xd6>
   d82ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d82ee:	07ca      	lsls	r2, r1, #31
   d82f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d82f4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d82f8:	d403      	bmi.n	d8302 <__ieee754_sqrt+0x36>
   d82fa:	005b      	lsls	r3, r3, #1
   d82fc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8300:	0064      	lsls	r4, r4, #1
   d8302:	0fe2      	lsrs	r2, r4, #31
   d8304:	f04f 0c00 	mov.w	ip, #0
   d8308:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d830c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8310:	0064      	lsls	r4, r4, #1
   d8312:	4666      	mov	r6, ip
   d8314:	2516      	movs	r5, #22
   d8316:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d831a:	18b1      	adds	r1, r6, r2
   d831c:	4299      	cmp	r1, r3
   d831e:	dc02      	bgt.n	d8326 <__ieee754_sqrt+0x5a>
   d8320:	1a5b      	subs	r3, r3, r1
   d8322:	188e      	adds	r6, r1, r2
   d8324:	4494      	add	ip, r2
   d8326:	005b      	lsls	r3, r3, #1
   d8328:	3d01      	subs	r5, #1
   d832a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d832e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8332:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8336:	d1f0      	bne.n	d831a <__ieee754_sqrt+0x4e>
   d8338:	462f      	mov	r7, r5
   d833a:	2020      	movs	r0, #32
   d833c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8340:	e009      	b.n	d8356 <__ieee754_sqrt+0x8a>
   d8342:	d03e      	beq.n	d83c2 <__ieee754_sqrt+0xf6>
   d8344:	0fe1      	lsrs	r1, r4, #31
   d8346:	3801      	subs	r0, #1
   d8348:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d834c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8350:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8354:	d03e      	beq.n	d83d4 <__ieee754_sqrt+0x108>
   d8356:	42b3      	cmp	r3, r6
   d8358:	eb02 0105 	add.w	r1, r2, r5
   d835c:	ddf1      	ble.n	d8342 <__ieee754_sqrt+0x76>
   d835e:	2900      	cmp	r1, #0
   d8360:	eb01 0502 	add.w	r5, r1, r2
   d8364:	db09      	blt.n	d837a <__ieee754_sqrt+0xae>
   d8366:	46b0      	mov	r8, r6
   d8368:	1b9b      	subs	r3, r3, r6
   d836a:	42a1      	cmp	r1, r4
   d836c:	bf88      	it	hi
   d836e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8372:	1a64      	subs	r4, r4, r1
   d8374:	4417      	add	r7, r2
   d8376:	4646      	mov	r6, r8
   d8378:	e7e4      	b.n	d8344 <__ieee754_sqrt+0x78>
   d837a:	2d00      	cmp	r5, #0
   d837c:	dbf3      	blt.n	d8366 <__ieee754_sqrt+0x9a>
   d837e:	f106 0801 	add.w	r8, r6, #1
   d8382:	e7f1      	b.n	d8368 <__ieee754_sqrt+0x9c>
   d8384:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8388:	4332      	orrs	r2, r6
   d838a:	d036      	beq.n	d83fa <__ieee754_sqrt+0x12e>
   d838c:	2f00      	cmp	r7, #0
   d838e:	d14d      	bne.n	d842c <__ieee754_sqrt+0x160>
   d8390:	4639      	mov	r1, r7
   d8392:	0ae2      	lsrs	r2, r4, #11
   d8394:	3915      	subs	r1, #21
   d8396:	0564      	lsls	r4, r4, #21
   d8398:	4613      	mov	r3, r2
   d839a:	2a00      	cmp	r2, #0
   d839c:	d0f9      	beq.n	d8392 <__ieee754_sqrt+0xc6>
   d839e:	02d7      	lsls	r7, r2, #11
   d83a0:	d451      	bmi.n	d8446 <__ieee754_sqrt+0x17a>
   d83a2:	2000      	movs	r0, #0
   d83a4:	005b      	lsls	r3, r3, #1
   d83a6:	02de      	lsls	r6, r3, #11
   d83a8:	4605      	mov	r5, r0
   d83aa:	f100 0001 	add.w	r0, r0, #1
   d83ae:	d5f9      	bpl.n	d83a4 <__ieee754_sqrt+0xd8>
   d83b0:	461a      	mov	r2, r3
   d83b2:	4623      	mov	r3, r4
   d83b4:	4084      	lsls	r4, r0
   d83b6:	f1c0 0020 	rsb	r0, r0, #32
   d83ba:	40c3      	lsrs	r3, r0
   d83bc:	4313      	orrs	r3, r2
   d83be:	1b49      	subs	r1, r1, r5
   d83c0:	e793      	b.n	d82ea <__ieee754_sqrt+0x1e>
   d83c2:	42a1      	cmp	r1, r4
   d83c4:	d8be      	bhi.n	d8344 <__ieee754_sqrt+0x78>
   d83c6:	2900      	cmp	r1, #0
   d83c8:	eb01 0502 	add.w	r5, r1, r2
   d83cc:	dbd5      	blt.n	d837a <__ieee754_sqrt+0xae>
   d83ce:	4698      	mov	r8, r3
   d83d0:	2300      	movs	r3, #0
   d83d2:	e7ce      	b.n	d8372 <__ieee754_sqrt+0xa6>
   d83d4:	4323      	orrs	r3, r4
   d83d6:	d112      	bne.n	d83fe <__ieee754_sqrt+0x132>
   d83d8:	0878      	lsrs	r0, r7, #1
   d83da:	ea4f 016c 	mov.w	r1, ip, asr #1
   d83de:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d83e2:	f01c 0f01 	tst.w	ip, #1
   d83e6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d83ea:	bf18      	it	ne
   d83ec:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d83f0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d83f4:	4602      	mov	r2, r0
   d83f6:	ec43 2b10 	vmov	d0, r2, r3
   d83fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d83fe:	1c7b      	adds	r3, r7, #1
   d8400:	bf16      	itet	ne
   d8402:	1c78      	addne	r0, r7, #1
   d8404:	f10c 0c01 	addeq.w	ip, ip, #1
   d8408:	0840      	lsrne	r0, r0, #1
   d840a:	e7e6      	b.n	d83da <__ieee754_sqrt+0x10e>
   d840c:	ee10 2a10 	vmov	r2, s0
   d8410:	ee10 0a10 	vmov	r0, s0
   d8414:	463b      	mov	r3, r7
   d8416:	4639      	mov	r1, r7
   d8418:	f000 fb20 	bl	d8a5c <__aeabi_dmul>
   d841c:	4632      	mov	r2, r6
   d841e:	463b      	mov	r3, r7
   d8420:	f000 f966 	bl	d86f0 <__adddf3>
   d8424:	ec41 0b10 	vmov	d0, r0, r1
   d8428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d842c:	ee10 2a10 	vmov	r2, s0
   d8430:	4630      	mov	r0, r6
   d8432:	4639      	mov	r1, r7
   d8434:	f000 f95a 	bl	d86ec <__aeabi_dsub>
   d8438:	4602      	mov	r2, r0
   d843a:	460b      	mov	r3, r1
   d843c:	f000 fc38 	bl	d8cb0 <__aeabi_ddiv>
   d8440:	ec41 0b10 	vmov	d0, r0, r1
   d8444:	e7d9      	b.n	d83fa <__ieee754_sqrt+0x12e>
   d8446:	4623      	mov	r3, r4
   d8448:	2020      	movs	r0, #32
   d844a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d844e:	e7b4      	b.n	d83ba <__ieee754_sqrt+0xee>
   d8450:	7ff00000 	.word	0x7ff00000

000d8454 <fabs>:
   d8454:	ec51 0b10 	vmov	r0, r1, d0
   d8458:	ee10 2a10 	vmov	r2, s0
   d845c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8460:	ec43 2b10 	vmov	d0, r2, r3
   d8464:	4770      	bx	lr
   d8466:	bf00      	nop

000d8468 <finite>:
   d8468:	b082      	sub	sp, #8
   d846a:	ed8d 0b00 	vstr	d0, [sp]
   d846e:	9801      	ldr	r0, [sp, #4]
   d8470:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8474:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8478:	0fc0      	lsrs	r0, r0, #31
   d847a:	b002      	add	sp, #8
   d847c:	4770      	bx	lr
   d847e:	bf00      	nop

000d8480 <matherr>:
   d8480:	2000      	movs	r0, #0
   d8482:	4770      	bx	lr
   d8484:	0000      	movs	r0, r0
	...

000d8488 <nan>:
   d8488:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8490 <nan+0x8>
   d848c:	4770      	bx	lr
   d848e:	bf00      	nop
   d8490:	00000000 	.word	0x00000000
   d8494:	7ff80000 	.word	0x7ff80000

000d8498 <rint>:
   d8498:	b5f0      	push	{r4, r5, r6, r7, lr}
   d849a:	ec53 2b10 	vmov	r2, r3, d0
   d849e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d84a2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d84a6:	2813      	cmp	r0, #19
   d84a8:	ee10 5a10 	vmov	r5, s0
   d84ac:	b083      	sub	sp, #12
   d84ae:	4619      	mov	r1, r3
   d84b0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d84b4:	dc31      	bgt.n	d851a <rint+0x82>
   d84b6:	2800      	cmp	r0, #0
   d84b8:	db4c      	blt.n	d8554 <rint+0xbc>
   d84ba:	4e3e      	ldr	r6, [pc, #248]	; (d85b4 <rint+0x11c>)
   d84bc:	4106      	asrs	r6, r0
   d84be:	ea03 0706 	and.w	r7, r3, r6
   d84c2:	4317      	orrs	r7, r2
   d84c4:	d02e      	beq.n	d8524 <rint+0x8c>
   d84c6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d84ca:	431d      	orrs	r5, r3
   d84cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d84d0:	d00c      	beq.n	d84ec <rint+0x54>
   d84d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d84d6:	2813      	cmp	r0, #19
   d84d8:	ea21 0606 	bic.w	r6, r1, r6
   d84dc:	fa43 f100 	asr.w	r1, r3, r0
   d84e0:	ea41 0106 	orr.w	r1, r1, r6
   d84e4:	bf0c      	ite	eq
   d84e6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d84ea:	2500      	movne	r5, #0
   d84ec:	4832      	ldr	r0, [pc, #200]	; (d85b8 <rint+0x120>)
   d84ee:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d84f2:	462a      	mov	r2, r5
   d84f4:	e9d4 4500 	ldrd	r4, r5, [r4]
   d84f8:	460b      	mov	r3, r1
   d84fa:	4620      	mov	r0, r4
   d84fc:	4629      	mov	r1, r5
   d84fe:	f000 f8f7 	bl	d86f0 <__adddf3>
   d8502:	e9cd 0100 	strd	r0, r1, [sp]
   d8506:	e9dd 0100 	ldrd	r0, r1, [sp]
   d850a:	4622      	mov	r2, r4
   d850c:	462b      	mov	r3, r5
   d850e:	f000 f8ed 	bl	d86ec <__aeabi_dsub>
   d8512:	ec41 0b10 	vmov	d0, r0, r1
   d8516:	b003      	add	sp, #12
   d8518:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d851a:	2833      	cmp	r0, #51	; 0x33
   d851c:	dd06      	ble.n	d852c <rint+0x94>
   d851e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8522:	d040      	beq.n	d85a6 <rint+0x10e>
   d8524:	ec43 2b10 	vmov	d0, r2, r3
   d8528:	b003      	add	sp, #12
   d852a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d852c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8534:	40f0      	lsrs	r0, r6
   d8536:	4202      	tst	r2, r0
   d8538:	d0f4      	beq.n	d8524 <rint+0x8c>
   d853a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d853e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8542:	d0d3      	beq.n	d84ec <rint+0x54>
   d8544:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d8548:	ea25 0503 	bic.w	r5, r5, r3
   d854c:	fa42 f606 	asr.w	r6, r2, r6
   d8550:	4335      	orrs	r5, r6
   d8552:	e7cb      	b.n	d84ec <rint+0x54>
   d8554:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8558:	4310      	orrs	r0, r2
   d855a:	d0e3      	beq.n	d8524 <rint+0x8c>
   d855c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8560:	4310      	orrs	r0, r2
   d8562:	4245      	negs	r5, r0
   d8564:	4305      	orrs	r5, r0
   d8566:	4814      	ldr	r0, [pc, #80]	; (d85b8 <rint+0x120>)
   d8568:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d856c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8570:	0c59      	lsrs	r1, r3, #17
   d8572:	0b2d      	lsrs	r5, r5, #12
   d8574:	0449      	lsls	r1, r1, #17
   d8576:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d857a:	ea45 0301 	orr.w	r3, r5, r1
   d857e:	4630      	mov	r0, r6
   d8580:	4639      	mov	r1, r7
   d8582:	f000 f8b5 	bl	d86f0 <__adddf3>
   d8586:	e9cd 0100 	strd	r0, r1, [sp]
   d858a:	463b      	mov	r3, r7
   d858c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8590:	4632      	mov	r2, r6
   d8592:	f000 f8ab 	bl	d86ec <__aeabi_dsub>
   d8596:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d859a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d859e:	ec41 0b10 	vmov	d0, r0, r1
   d85a2:	b003      	add	sp, #12
   d85a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d85a6:	ee10 0a10 	vmov	r0, s0
   d85aa:	f000 f8a1 	bl	d86f0 <__adddf3>
   d85ae:	ec41 0b10 	vmov	d0, r0, r1
   d85b2:	e7b9      	b.n	d8528 <rint+0x90>
   d85b4:	000fffff 	.word	0x000fffff
   d85b8:	000d9630 	.word	0x000d9630
   d85bc:	00000000 	.word	0x00000000

000d85c0 <scalbn>:
   d85c0:	b538      	push	{r3, r4, r5, lr}
   d85c2:	ec53 2b10 	vmov	r2, r3, d0
   d85c6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d85ca:	461c      	mov	r4, r3
   d85cc:	4605      	mov	r5, r0
   d85ce:	bb81      	cbnz	r1, d8632 <scalbn+0x72>
   d85d0:	ee10 1a10 	vmov	r1, s0
   d85d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d85d8:	4321      	orrs	r1, r4
   d85da:	d029      	beq.n	d8630 <scalbn+0x70>
   d85dc:	4619      	mov	r1, r3
   d85de:	2200      	movs	r2, #0
   d85e0:	4b3d      	ldr	r3, [pc, #244]	; (d86d8 <scalbn+0x118>)
   d85e2:	4c3e      	ldr	r4, [pc, #248]	; (d86dc <scalbn+0x11c>)
   d85e4:	ee10 0a10 	vmov	r0, s0
   d85e8:	f000 fa38 	bl	d8a5c <__aeabi_dmul>
   d85ec:	42a5      	cmp	r5, r4
   d85ee:	4602      	mov	r2, r0
   d85f0:	460b      	mov	r3, r1
   d85f2:	db16      	blt.n	d8622 <scalbn+0x62>
   d85f4:	460c      	mov	r4, r1
   d85f6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d85fa:	3936      	subs	r1, #54	; 0x36
   d85fc:	4429      	add	r1, r5
   d85fe:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d8602:	4281      	cmp	r1, r0
   d8604:	dc21      	bgt.n	d864a <scalbn+0x8a>
   d8606:	2900      	cmp	r1, #0
   d8608:	dc47      	bgt.n	d869a <scalbn+0xda>
   d860a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d860e:	da34      	bge.n	d867a <scalbn+0xba>
   d8610:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8614:	428d      	cmp	r5, r1
   d8616:	dc18      	bgt.n	d864a <scalbn+0x8a>
   d8618:	2b00      	cmp	r3, #0
   d861a:	a127      	add	r1, pc, #156	; (adr r1, d86b8 <scalbn+0xf8>)
   d861c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8620:	db44      	blt.n	d86ac <scalbn+0xec>
   d8622:	a325      	add	r3, pc, #148	; (adr r3, d86b8 <scalbn+0xf8>)
   d8624:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8628:	f000 fa18 	bl	d8a5c <__aeabi_dmul>
   d862c:	ec41 0b10 	vmov	d0, r0, r1
   d8630:	bd38      	pop	{r3, r4, r5, pc}
   d8632:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8636:	4281      	cmp	r1, r0
   d8638:	d1e0      	bne.n	d85fc <scalbn+0x3c>
   d863a:	ee10 0a10 	vmov	r0, s0
   d863e:	4619      	mov	r1, r3
   d8640:	f000 f856 	bl	d86f0 <__adddf3>
   d8644:	ec41 0b10 	vmov	d0, r0, r1
   d8648:	bd38      	pop	{r3, r4, r5, pc}
   d864a:	2b00      	cmp	r3, #0
   d864c:	a11c      	add	r1, pc, #112	; (adr r1, d86c0 <scalbn+0x100>)
   d864e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8652:	db07      	blt.n	d8664 <scalbn+0xa4>
   d8654:	a31a      	add	r3, pc, #104	; (adr r3, d86c0 <scalbn+0x100>)
   d8656:	e9d3 2300 	ldrd	r2, r3, [r3]
   d865a:	f000 f9ff 	bl	d8a5c <__aeabi_dmul>
   d865e:	ec41 0b10 	vmov	d0, r0, r1
   d8662:	bd38      	pop	{r3, r4, r5, pc}
   d8664:	a118      	add	r1, pc, #96	; (adr r1, d86c8 <scalbn+0x108>)
   d8666:	e9d1 0100 	ldrd	r0, r1, [r1]
   d866a:	a315      	add	r3, pc, #84	; (adr r3, d86c0 <scalbn+0x100>)
   d866c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8670:	f000 f9f4 	bl	d8a5c <__aeabi_dmul>
   d8674:	ec41 0b10 	vmov	d0, r0, r1
   d8678:	e7f3      	b.n	d8662 <scalbn+0xa2>
   d867a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d867e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8682:	3136      	adds	r1, #54	; 0x36
   d8684:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8688:	4610      	mov	r0, r2
   d868a:	4619      	mov	r1, r3
   d868c:	2200      	movs	r2, #0
   d868e:	4b14      	ldr	r3, [pc, #80]	; (d86e0 <scalbn+0x120>)
   d8690:	f000 f9e4 	bl	d8a5c <__aeabi_dmul>
   d8694:	ec41 0b10 	vmov	d0, r0, r1
   d8698:	bd38      	pop	{r3, r4, r5, pc}
   d869a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d869e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d86a2:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d86a6:	ec43 2b10 	vmov	d0, r2, r3
   d86aa:	bd38      	pop	{r3, r4, r5, pc}
   d86ac:	a108      	add	r1, pc, #32	; (adr r1, d86d0 <scalbn+0x110>)
   d86ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   d86b2:	e7b6      	b.n	d8622 <scalbn+0x62>
   d86b4:	f3af 8000 	nop.w
   d86b8:	c2f8f359 	.word	0xc2f8f359
   d86bc:	01a56e1f 	.word	0x01a56e1f
   d86c0:	8800759c 	.word	0x8800759c
   d86c4:	7e37e43c 	.word	0x7e37e43c
   d86c8:	8800759c 	.word	0x8800759c
   d86cc:	fe37e43c 	.word	0xfe37e43c
   d86d0:	c2f8f359 	.word	0xc2f8f359
   d86d4:	81a56e1f 	.word	0x81a56e1f
   d86d8:	43500000 	.word	0x43500000
   d86dc:	ffff3cb0 	.word	0xffff3cb0
   d86e0:	3c900000 	.word	0x3c900000

000d86e4 <__aeabi_drsub>:
   d86e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d86e8:	e002      	b.n	d86f0 <__adddf3>
   d86ea:	bf00      	nop

000d86ec <__aeabi_dsub>:
   d86ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d86f0 <__adddf3>:
   d86f0:	b530      	push	{r4, r5, lr}
   d86f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d86f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d86fa:	ea94 0f05 	teq	r4, r5
   d86fe:	bf08      	it	eq
   d8700:	ea90 0f02 	teqeq	r0, r2
   d8704:	bf1f      	itttt	ne
   d8706:	ea54 0c00 	orrsne.w	ip, r4, r0
   d870a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d870e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8716:	f000 80e2 	beq.w	d88de <__adddf3+0x1ee>
   d871a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d871e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8722:	bfb8      	it	lt
   d8724:	426d      	neglt	r5, r5
   d8726:	dd0c      	ble.n	d8742 <__adddf3+0x52>
   d8728:	442c      	add	r4, r5
   d872a:	ea80 0202 	eor.w	r2, r0, r2
   d872e:	ea81 0303 	eor.w	r3, r1, r3
   d8732:	ea82 0000 	eor.w	r0, r2, r0
   d8736:	ea83 0101 	eor.w	r1, r3, r1
   d873a:	ea80 0202 	eor.w	r2, r0, r2
   d873e:	ea81 0303 	eor.w	r3, r1, r3
   d8742:	2d36      	cmp	r5, #54	; 0x36
   d8744:	bf88      	it	hi
   d8746:	bd30      	pophi	{r4, r5, pc}
   d8748:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d874c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8750:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8758:	d002      	beq.n	d8760 <__adddf3+0x70>
   d875a:	4240      	negs	r0, r0
   d875c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8760:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d876c:	d002      	beq.n	d8774 <__adddf3+0x84>
   d876e:	4252      	negs	r2, r2
   d8770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8774:	ea94 0f05 	teq	r4, r5
   d8778:	f000 80a7 	beq.w	d88ca <__adddf3+0x1da>
   d877c:	f1a4 0401 	sub.w	r4, r4, #1
   d8780:	f1d5 0e20 	rsbs	lr, r5, #32
   d8784:	db0d      	blt.n	d87a2 <__adddf3+0xb2>
   d8786:	fa02 fc0e 	lsl.w	ip, r2, lr
   d878a:	fa22 f205 	lsr.w	r2, r2, r5
   d878e:	1880      	adds	r0, r0, r2
   d8790:	f141 0100 	adc.w	r1, r1, #0
   d8794:	fa03 f20e 	lsl.w	r2, r3, lr
   d8798:	1880      	adds	r0, r0, r2
   d879a:	fa43 f305 	asr.w	r3, r3, r5
   d879e:	4159      	adcs	r1, r3
   d87a0:	e00e      	b.n	d87c0 <__adddf3+0xd0>
   d87a2:	f1a5 0520 	sub.w	r5, r5, #32
   d87a6:	f10e 0e20 	add.w	lr, lr, #32
   d87aa:	2a01      	cmp	r2, #1
   d87ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d87b0:	bf28      	it	cs
   d87b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d87b6:	fa43 f305 	asr.w	r3, r3, r5
   d87ba:	18c0      	adds	r0, r0, r3
   d87bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d87c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d87c4:	d507      	bpl.n	d87d6 <__adddf3+0xe6>
   d87c6:	f04f 0e00 	mov.w	lr, #0
   d87ca:	f1dc 0c00 	rsbs	ip, ip, #0
   d87ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d87d2:	eb6e 0101 	sbc.w	r1, lr, r1
   d87d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d87da:	d31b      	bcc.n	d8814 <__adddf3+0x124>
   d87dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d87e0:	d30c      	bcc.n	d87fc <__adddf3+0x10c>
   d87e2:	0849      	lsrs	r1, r1, #1
   d87e4:	ea5f 0030 	movs.w	r0, r0, rrx
   d87e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d87ec:	f104 0401 	add.w	r4, r4, #1
   d87f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d87f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d87f8:	f080 809a 	bcs.w	d8930 <__adddf3+0x240>
   d87fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8800:	bf08      	it	eq
   d8802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8806:	f150 0000 	adcs.w	r0, r0, #0
   d880a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d880e:	ea41 0105 	orr.w	r1, r1, r5
   d8812:	bd30      	pop	{r4, r5, pc}
   d8814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8818:	4140      	adcs	r0, r0
   d881a:	eb41 0101 	adc.w	r1, r1, r1
   d881e:	3c01      	subs	r4, #1
   d8820:	bf28      	it	cs
   d8822:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8826:	d2e9      	bcs.n	d87fc <__adddf3+0x10c>
   d8828:	f091 0f00 	teq	r1, #0
   d882c:	bf04      	itt	eq
   d882e:	4601      	moveq	r1, r0
   d8830:	2000      	moveq	r0, #0
   d8832:	fab1 f381 	clz	r3, r1
   d8836:	bf08      	it	eq
   d8838:	3320      	addeq	r3, #32
   d883a:	f1a3 030b 	sub.w	r3, r3, #11
   d883e:	f1b3 0220 	subs.w	r2, r3, #32
   d8842:	da0c      	bge.n	d885e <__adddf3+0x16e>
   d8844:	320c      	adds	r2, #12
   d8846:	dd08      	ble.n	d885a <__adddf3+0x16a>
   d8848:	f102 0c14 	add.w	ip, r2, #20
   d884c:	f1c2 020c 	rsb	r2, r2, #12
   d8850:	fa01 f00c 	lsl.w	r0, r1, ip
   d8854:	fa21 f102 	lsr.w	r1, r1, r2
   d8858:	e00c      	b.n	d8874 <__adddf3+0x184>
   d885a:	f102 0214 	add.w	r2, r2, #20
   d885e:	bfd8      	it	le
   d8860:	f1c2 0c20 	rsble	ip, r2, #32
   d8864:	fa01 f102 	lsl.w	r1, r1, r2
   d8868:	fa20 fc0c 	lsr.w	ip, r0, ip
   d886c:	bfdc      	itt	le
   d886e:	ea41 010c 	orrle.w	r1, r1, ip
   d8872:	4090      	lslle	r0, r2
   d8874:	1ae4      	subs	r4, r4, r3
   d8876:	bfa2      	ittt	ge
   d8878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d887c:	4329      	orrge	r1, r5
   d887e:	bd30      	popge	{r4, r5, pc}
   d8880:	ea6f 0404 	mvn.w	r4, r4
   d8884:	3c1f      	subs	r4, #31
   d8886:	da1c      	bge.n	d88c2 <__adddf3+0x1d2>
   d8888:	340c      	adds	r4, #12
   d888a:	dc0e      	bgt.n	d88aa <__adddf3+0x1ba>
   d888c:	f104 0414 	add.w	r4, r4, #20
   d8890:	f1c4 0220 	rsb	r2, r4, #32
   d8894:	fa20 f004 	lsr.w	r0, r0, r4
   d8898:	fa01 f302 	lsl.w	r3, r1, r2
   d889c:	ea40 0003 	orr.w	r0, r0, r3
   d88a0:	fa21 f304 	lsr.w	r3, r1, r4
   d88a4:	ea45 0103 	orr.w	r1, r5, r3
   d88a8:	bd30      	pop	{r4, r5, pc}
   d88aa:	f1c4 040c 	rsb	r4, r4, #12
   d88ae:	f1c4 0220 	rsb	r2, r4, #32
   d88b2:	fa20 f002 	lsr.w	r0, r0, r2
   d88b6:	fa01 f304 	lsl.w	r3, r1, r4
   d88ba:	ea40 0003 	orr.w	r0, r0, r3
   d88be:	4629      	mov	r1, r5
   d88c0:	bd30      	pop	{r4, r5, pc}
   d88c2:	fa21 f004 	lsr.w	r0, r1, r4
   d88c6:	4629      	mov	r1, r5
   d88c8:	bd30      	pop	{r4, r5, pc}
   d88ca:	f094 0f00 	teq	r4, #0
   d88ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d88d2:	bf06      	itte	eq
   d88d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d88d8:	3401      	addeq	r4, #1
   d88da:	3d01      	subne	r5, #1
   d88dc:	e74e      	b.n	d877c <__adddf3+0x8c>
   d88de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88e2:	bf18      	it	ne
   d88e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d88e8:	d029      	beq.n	d893e <__adddf3+0x24e>
   d88ea:	ea94 0f05 	teq	r4, r5
   d88ee:	bf08      	it	eq
   d88f0:	ea90 0f02 	teqeq	r0, r2
   d88f4:	d005      	beq.n	d8902 <__adddf3+0x212>
   d88f6:	ea54 0c00 	orrs.w	ip, r4, r0
   d88fa:	bf04      	itt	eq
   d88fc:	4619      	moveq	r1, r3
   d88fe:	4610      	moveq	r0, r2
   d8900:	bd30      	pop	{r4, r5, pc}
   d8902:	ea91 0f03 	teq	r1, r3
   d8906:	bf1e      	ittt	ne
   d8908:	2100      	movne	r1, #0
   d890a:	2000      	movne	r0, #0
   d890c:	bd30      	popne	{r4, r5, pc}
   d890e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8912:	d105      	bne.n	d8920 <__adddf3+0x230>
   d8914:	0040      	lsls	r0, r0, #1
   d8916:	4149      	adcs	r1, r1
   d8918:	bf28      	it	cs
   d891a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d891e:	bd30      	pop	{r4, r5, pc}
   d8920:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8924:	bf3c      	itt	cc
   d8926:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d892a:	bd30      	popcc	{r4, r5, pc}
   d892c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8930:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8938:	f04f 0000 	mov.w	r0, #0
   d893c:	bd30      	pop	{r4, r5, pc}
   d893e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8942:	bf1a      	itte	ne
   d8944:	4619      	movne	r1, r3
   d8946:	4610      	movne	r0, r2
   d8948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d894c:	bf1c      	itt	ne
   d894e:	460b      	movne	r3, r1
   d8950:	4602      	movne	r2, r0
   d8952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8956:	bf06      	itte	eq
   d8958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d895c:	ea91 0f03 	teqeq	r1, r3
   d8960:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8964:	bd30      	pop	{r4, r5, pc}
   d8966:	bf00      	nop

000d8968 <__aeabi_ui2d>:
   d8968:	f090 0f00 	teq	r0, #0
   d896c:	bf04      	itt	eq
   d896e:	2100      	moveq	r1, #0
   d8970:	4770      	bxeq	lr
   d8972:	b530      	push	{r4, r5, lr}
   d8974:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8978:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d897c:	f04f 0500 	mov.w	r5, #0
   d8980:	f04f 0100 	mov.w	r1, #0
   d8984:	e750      	b.n	d8828 <__adddf3+0x138>
   d8986:	bf00      	nop

000d8988 <__aeabi_i2d>:
   d8988:	f090 0f00 	teq	r0, #0
   d898c:	bf04      	itt	eq
   d898e:	2100      	moveq	r1, #0
   d8990:	4770      	bxeq	lr
   d8992:	b530      	push	{r4, r5, lr}
   d8994:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8998:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d899c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d89a0:	bf48      	it	mi
   d89a2:	4240      	negmi	r0, r0
   d89a4:	f04f 0100 	mov.w	r1, #0
   d89a8:	e73e      	b.n	d8828 <__adddf3+0x138>
   d89aa:	bf00      	nop

000d89ac <__aeabi_f2d>:
   d89ac:	0042      	lsls	r2, r0, #1
   d89ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d89b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d89b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d89ba:	bf1f      	itttt	ne
   d89bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d89c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d89c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d89c8:	4770      	bxne	lr
   d89ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d89ce:	bf08      	it	eq
   d89d0:	4770      	bxeq	lr
   d89d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d89d6:	bf04      	itt	eq
   d89d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d89dc:	4770      	bxeq	lr
   d89de:	b530      	push	{r4, r5, lr}
   d89e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d89e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89ec:	e71c      	b.n	d8828 <__adddf3+0x138>
   d89ee:	bf00      	nop

000d89f0 <__aeabi_ul2d>:
   d89f0:	ea50 0201 	orrs.w	r2, r0, r1
   d89f4:	bf08      	it	eq
   d89f6:	4770      	bxeq	lr
   d89f8:	b530      	push	{r4, r5, lr}
   d89fa:	f04f 0500 	mov.w	r5, #0
   d89fe:	e00a      	b.n	d8a16 <__aeabi_l2d+0x16>

000d8a00 <__aeabi_l2d>:
   d8a00:	ea50 0201 	orrs.w	r2, r0, r1
   d8a04:	bf08      	it	eq
   d8a06:	4770      	bxeq	lr
   d8a08:	b530      	push	{r4, r5, lr}
   d8a0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8a0e:	d502      	bpl.n	d8a16 <__aeabi_l2d+0x16>
   d8a10:	4240      	negs	r0, r0
   d8a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8a22:	f43f aed8 	beq.w	d87d6 <__adddf3+0xe6>
   d8a26:	f04f 0203 	mov.w	r2, #3
   d8a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a2e:	bf18      	it	ne
   d8a30:	3203      	addne	r2, #3
   d8a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a36:	bf18      	it	ne
   d8a38:	3203      	addne	r2, #3
   d8a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a3e:	f1c2 0320 	rsb	r3, r2, #32
   d8a42:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a46:	fa20 f002 	lsr.w	r0, r0, r2
   d8a4a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a4e:	ea40 000e 	orr.w	r0, r0, lr
   d8a52:	fa21 f102 	lsr.w	r1, r1, r2
   d8a56:	4414      	add	r4, r2
   d8a58:	e6bd      	b.n	d87d6 <__adddf3+0xe6>
   d8a5a:	bf00      	nop

000d8a5c <__aeabi_dmul>:
   d8a5c:	b570      	push	{r4, r5, r6, lr}
   d8a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a6a:	bf1d      	ittte	ne
   d8a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a70:	ea94 0f0c 	teqne	r4, ip
   d8a74:	ea95 0f0c 	teqne	r5, ip
   d8a78:	f000 f8de 	bleq	d8c38 <__aeabi_dmul+0x1dc>
   d8a7c:	442c      	add	r4, r5
   d8a7e:	ea81 0603 	eor.w	r6, r1, r3
   d8a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a8e:	bf18      	it	ne
   d8a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a9c:	d038      	beq.n	d8b10 <__aeabi_dmul+0xb4>
   d8a9e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8aa2:	f04f 0500 	mov.w	r5, #0
   d8aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8aaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8aae:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8ab2:	f04f 0600 	mov.w	r6, #0
   d8ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8aba:	f09c 0f00 	teq	ip, #0
   d8abe:	bf18      	it	ne
   d8ac0:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8acc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8ad0:	d204      	bcs.n	d8adc <__aeabi_dmul+0x80>
   d8ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8ad6:	416d      	adcs	r5, r5
   d8ad8:	eb46 0606 	adc.w	r6, r6, r6
   d8adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8af0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8af4:	bf88      	it	hi
   d8af6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8afa:	d81e      	bhi.n	d8b3a <__aeabi_dmul+0xde>
   d8afc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8b00:	bf08      	it	eq
   d8b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8b06:	f150 0000 	adcs.w	r0, r0, #0
   d8b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b0e:	bd70      	pop	{r4, r5, r6, pc}
   d8b10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8b14:	ea46 0101 	orr.w	r1, r6, r1
   d8b18:	ea40 0002 	orr.w	r0, r0, r2
   d8b1c:	ea81 0103 	eor.w	r1, r1, r3
   d8b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8b24:	bfc2      	ittt	gt
   d8b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b2e:	bd70      	popgt	{r4, r5, r6, pc}
   d8b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b34:	f04f 0e00 	mov.w	lr, #0
   d8b38:	3c01      	subs	r4, #1
   d8b3a:	f300 80ab 	bgt.w	d8c94 <__aeabi_dmul+0x238>
   d8b3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b42:	bfde      	ittt	le
   d8b44:	2000      	movle	r0, #0
   d8b46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b4a:	bd70      	pople	{r4, r5, r6, pc}
   d8b4c:	f1c4 0400 	rsb	r4, r4, #0
   d8b50:	3c20      	subs	r4, #32
   d8b52:	da35      	bge.n	d8bc0 <__aeabi_dmul+0x164>
   d8b54:	340c      	adds	r4, #12
   d8b56:	dc1b      	bgt.n	d8b90 <__aeabi_dmul+0x134>
   d8b58:	f104 0414 	add.w	r4, r4, #20
   d8b5c:	f1c4 0520 	rsb	r5, r4, #32
   d8b60:	fa00 f305 	lsl.w	r3, r0, r5
   d8b64:	fa20 f004 	lsr.w	r0, r0, r4
   d8b68:	fa01 f205 	lsl.w	r2, r1, r5
   d8b6c:	ea40 0002 	orr.w	r0, r0, r2
   d8b70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b7c:	fa21 f604 	lsr.w	r6, r1, r4
   d8b80:	eb42 0106 	adc.w	r1, r2, r6
   d8b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b88:	bf08      	it	eq
   d8b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b8e:	bd70      	pop	{r4, r5, r6, pc}
   d8b90:	f1c4 040c 	rsb	r4, r4, #12
   d8b94:	f1c4 0520 	rsb	r5, r4, #32
   d8b98:	fa00 f304 	lsl.w	r3, r0, r4
   d8b9c:	fa20 f005 	lsr.w	r0, r0, r5
   d8ba0:	fa01 f204 	lsl.w	r2, r1, r4
   d8ba4:	ea40 0002 	orr.w	r0, r0, r2
   d8ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8bb0:	f141 0100 	adc.w	r1, r1, #0
   d8bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bb8:	bf08      	it	eq
   d8bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bbe:	bd70      	pop	{r4, r5, r6, pc}
   d8bc0:	f1c4 0520 	rsb	r5, r4, #32
   d8bc4:	fa00 f205 	lsl.w	r2, r0, r5
   d8bc8:	ea4e 0e02 	orr.w	lr, lr, r2
   d8bcc:	fa20 f304 	lsr.w	r3, r0, r4
   d8bd0:	fa01 f205 	lsl.w	r2, r1, r5
   d8bd4:	ea43 0302 	orr.w	r3, r3, r2
   d8bd8:	fa21 f004 	lsr.w	r0, r1, r4
   d8bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8be0:	fa21 f204 	lsr.w	r2, r1, r4
   d8be4:	ea20 0002 	bic.w	r0, r0, r2
   d8be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bf0:	bf08      	it	eq
   d8bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bf6:	bd70      	pop	{r4, r5, r6, pc}
   d8bf8:	f094 0f00 	teq	r4, #0
   d8bfc:	d10f      	bne.n	d8c1e <__aeabi_dmul+0x1c2>
   d8bfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8c02:	0040      	lsls	r0, r0, #1
   d8c04:	eb41 0101 	adc.w	r1, r1, r1
   d8c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c0c:	bf08      	it	eq
   d8c0e:	3c01      	subeq	r4, #1
   d8c10:	d0f7      	beq.n	d8c02 <__aeabi_dmul+0x1a6>
   d8c12:	ea41 0106 	orr.w	r1, r1, r6
   d8c16:	f095 0f00 	teq	r5, #0
   d8c1a:	bf18      	it	ne
   d8c1c:	4770      	bxne	lr
   d8c1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8c22:	0052      	lsls	r2, r2, #1
   d8c24:	eb43 0303 	adc.w	r3, r3, r3
   d8c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8c2c:	bf08      	it	eq
   d8c2e:	3d01      	subeq	r5, #1
   d8c30:	d0f7      	beq.n	d8c22 <__aeabi_dmul+0x1c6>
   d8c32:	ea43 0306 	orr.w	r3, r3, r6
   d8c36:	4770      	bx	lr
   d8c38:	ea94 0f0c 	teq	r4, ip
   d8c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c40:	bf18      	it	ne
   d8c42:	ea95 0f0c 	teqne	r5, ip
   d8c46:	d00c      	beq.n	d8c62 <__aeabi_dmul+0x206>
   d8c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c4c:	bf18      	it	ne
   d8c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c52:	d1d1      	bne.n	d8bf8 <__aeabi_dmul+0x19c>
   d8c54:	ea81 0103 	eor.w	r1, r1, r3
   d8c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c5c:	f04f 0000 	mov.w	r0, #0
   d8c60:	bd70      	pop	{r4, r5, r6, pc}
   d8c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c66:	bf06      	itte	eq
   d8c68:	4610      	moveq	r0, r2
   d8c6a:	4619      	moveq	r1, r3
   d8c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c70:	d019      	beq.n	d8ca6 <__aeabi_dmul+0x24a>
   d8c72:	ea94 0f0c 	teq	r4, ip
   d8c76:	d102      	bne.n	d8c7e <__aeabi_dmul+0x222>
   d8c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c7c:	d113      	bne.n	d8ca6 <__aeabi_dmul+0x24a>
   d8c7e:	ea95 0f0c 	teq	r5, ip
   d8c82:	d105      	bne.n	d8c90 <__aeabi_dmul+0x234>
   d8c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c88:	bf1c      	itt	ne
   d8c8a:	4610      	movne	r0, r2
   d8c8c:	4619      	movne	r1, r3
   d8c8e:	d10a      	bne.n	d8ca6 <__aeabi_dmul+0x24a>
   d8c90:	ea81 0103 	eor.w	r1, r1, r3
   d8c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ca0:	f04f 0000 	mov.w	r0, #0
   d8ca4:	bd70      	pop	{r4, r5, r6, pc}
   d8ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8caa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8cae:	bd70      	pop	{r4, r5, r6, pc}

000d8cb0 <__aeabi_ddiv>:
   d8cb0:	b570      	push	{r4, r5, r6, lr}
   d8cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8cbe:	bf1d      	ittte	ne
   d8cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8cc4:	ea94 0f0c 	teqne	r4, ip
   d8cc8:	ea95 0f0c 	teqne	r5, ip
   d8ccc:	f000 f8a7 	bleq	d8e1e <__aeabi_ddiv+0x16e>
   d8cd0:	eba4 0405 	sub.w	r4, r4, r5
   d8cd4:	ea81 0e03 	eor.w	lr, r1, r3
   d8cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ce0:	f000 8088 	beq.w	d8df4 <__aeabi_ddiv+0x144>
   d8ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8ce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8d04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8d08:	429d      	cmp	r5, r3
   d8d0a:	bf08      	it	eq
   d8d0c:	4296      	cmpeq	r6, r2
   d8d0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8d12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8d16:	d202      	bcs.n	d8d1e <__aeabi_ddiv+0x6e>
   d8d18:	085b      	lsrs	r3, r3, #1
   d8d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d1e:	1ab6      	subs	r6, r6, r2
   d8d20:	eb65 0503 	sbc.w	r5, r5, r3
   d8d24:	085b      	lsrs	r3, r3, #1
   d8d26:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8d2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d32:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d3a:	bf22      	ittt	cs
   d8d3c:	1ab6      	subcs	r6, r6, r2
   d8d3e:	4675      	movcs	r5, lr
   d8d40:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d44:	085b      	lsrs	r3, r3, #1
   d8d46:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d52:	bf22      	ittt	cs
   d8d54:	1ab6      	subcs	r6, r6, r2
   d8d56:	4675      	movcs	r5, lr
   d8d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8d5c:	085b      	lsrs	r3, r3, #1
   d8d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d62:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d6a:	bf22      	ittt	cs
   d8d6c:	1ab6      	subcs	r6, r6, r2
   d8d6e:	4675      	movcs	r5, lr
   d8d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d74:	085b      	lsrs	r3, r3, #1
   d8d76:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d82:	bf22      	ittt	cs
   d8d84:	1ab6      	subcs	r6, r6, r2
   d8d86:	4675      	movcs	r5, lr
   d8d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d8c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8d90:	d018      	beq.n	d8dc4 <__aeabi_ddiv+0x114>
   d8d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8dae:	d1c0      	bne.n	d8d32 <__aeabi_ddiv+0x82>
   d8db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8db4:	d10b      	bne.n	d8dce <__aeabi_ddiv+0x11e>
   d8db6:	ea41 0100 	orr.w	r1, r1, r0
   d8dba:	f04f 0000 	mov.w	r0, #0
   d8dbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8dc2:	e7b6      	b.n	d8d32 <__aeabi_ddiv+0x82>
   d8dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8dc8:	bf04      	itt	eq
   d8dca:	4301      	orreq	r1, r0
   d8dcc:	2000      	moveq	r0, #0
   d8dce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8dd2:	bf88      	it	hi
   d8dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8dd8:	f63f aeaf 	bhi.w	d8b3a <__aeabi_dmul+0xde>
   d8ddc:	ebb5 0c03 	subs.w	ip, r5, r3
   d8de0:	bf04      	itt	eq
   d8de2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dea:	f150 0000 	adcs.w	r0, r0, #0
   d8dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8df2:	bd70      	pop	{r4, r5, r6, pc}
   d8df4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8e00:	bfc2      	ittt	gt
   d8e02:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e0a:	bd70      	popgt	{r4, r5, r6, pc}
   d8e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e10:	f04f 0e00 	mov.w	lr, #0
   d8e14:	3c01      	subs	r4, #1
   d8e16:	e690      	b.n	d8b3a <__aeabi_dmul+0xde>
   d8e18:	ea45 0e06 	orr.w	lr, r5, r6
   d8e1c:	e68d      	b.n	d8b3a <__aeabi_dmul+0xde>
   d8e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e22:	ea94 0f0c 	teq	r4, ip
   d8e26:	bf08      	it	eq
   d8e28:	ea95 0f0c 	teqeq	r5, ip
   d8e2c:	f43f af3b 	beq.w	d8ca6 <__aeabi_dmul+0x24a>
   d8e30:	ea94 0f0c 	teq	r4, ip
   d8e34:	d10a      	bne.n	d8e4c <__aeabi_ddiv+0x19c>
   d8e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e3a:	f47f af34 	bne.w	d8ca6 <__aeabi_dmul+0x24a>
   d8e3e:	ea95 0f0c 	teq	r5, ip
   d8e42:	f47f af25 	bne.w	d8c90 <__aeabi_dmul+0x234>
   d8e46:	4610      	mov	r0, r2
   d8e48:	4619      	mov	r1, r3
   d8e4a:	e72c      	b.n	d8ca6 <__aeabi_dmul+0x24a>
   d8e4c:	ea95 0f0c 	teq	r5, ip
   d8e50:	d106      	bne.n	d8e60 <__aeabi_ddiv+0x1b0>
   d8e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e56:	f43f aefd 	beq.w	d8c54 <__aeabi_dmul+0x1f8>
   d8e5a:	4610      	mov	r0, r2
   d8e5c:	4619      	mov	r1, r3
   d8e5e:	e722      	b.n	d8ca6 <__aeabi_dmul+0x24a>
   d8e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e64:	bf18      	it	ne
   d8e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e6a:	f47f aec5 	bne.w	d8bf8 <__aeabi_dmul+0x19c>
   d8e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8e72:	f47f af0d 	bne.w	d8c90 <__aeabi_dmul+0x234>
   d8e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e7a:	f47f aeeb 	bne.w	d8c54 <__aeabi_dmul+0x1f8>
   d8e7e:	e712      	b.n	d8ca6 <__aeabi_dmul+0x24a>

000d8e80 <__gedf2>:
   d8e80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8e84:	e006      	b.n	d8e94 <__cmpdf2+0x4>
   d8e86:	bf00      	nop

000d8e88 <__ledf2>:
   d8e88:	f04f 0c01 	mov.w	ip, #1
   d8e8c:	e002      	b.n	d8e94 <__cmpdf2+0x4>
   d8e8e:	bf00      	nop

000d8e90 <__cmpdf2>:
   d8e90:	f04f 0c01 	mov.w	ip, #1
   d8e94:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ea4:	bf18      	it	ne
   d8ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8eaa:	d01b      	beq.n	d8ee4 <__cmpdf2+0x54>
   d8eac:	b001      	add	sp, #4
   d8eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8eb2:	bf0c      	ite	eq
   d8eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8eb8:	ea91 0f03 	teqne	r1, r3
   d8ebc:	bf02      	ittt	eq
   d8ebe:	ea90 0f02 	teqeq	r0, r2
   d8ec2:	2000      	moveq	r0, #0
   d8ec4:	4770      	bxeq	lr
   d8ec6:	f110 0f00 	cmn.w	r0, #0
   d8eca:	ea91 0f03 	teq	r1, r3
   d8ece:	bf58      	it	pl
   d8ed0:	4299      	cmppl	r1, r3
   d8ed2:	bf08      	it	eq
   d8ed4:	4290      	cmpeq	r0, r2
   d8ed6:	bf2c      	ite	cs
   d8ed8:	17d8      	asrcs	r0, r3, #31
   d8eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8ede:	f040 0001 	orr.w	r0, r0, #1
   d8ee2:	4770      	bx	lr
   d8ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8eec:	d102      	bne.n	d8ef4 <__cmpdf2+0x64>
   d8eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8ef2:	d107      	bne.n	d8f04 <__cmpdf2+0x74>
   d8ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8efc:	d1d6      	bne.n	d8eac <__cmpdf2+0x1c>
   d8efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f02:	d0d3      	beq.n	d8eac <__cmpdf2+0x1c>
   d8f04:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8f08:	4770      	bx	lr
   d8f0a:	bf00      	nop

000d8f0c <__aeabi_cdrcmple>:
   d8f0c:	4684      	mov	ip, r0
   d8f0e:	4610      	mov	r0, r2
   d8f10:	4662      	mov	r2, ip
   d8f12:	468c      	mov	ip, r1
   d8f14:	4619      	mov	r1, r3
   d8f16:	4663      	mov	r3, ip
   d8f18:	e000      	b.n	d8f1c <__aeabi_cdcmpeq>
   d8f1a:	bf00      	nop

000d8f1c <__aeabi_cdcmpeq>:
   d8f1c:	b501      	push	{r0, lr}
   d8f1e:	f7ff ffb7 	bl	d8e90 <__cmpdf2>
   d8f22:	2800      	cmp	r0, #0
   d8f24:	bf48      	it	mi
   d8f26:	f110 0f00 	cmnmi.w	r0, #0
   d8f2a:	bd01      	pop	{r0, pc}

000d8f2c <__aeabi_dcmpeq>:
   d8f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f30:	f7ff fff4 	bl	d8f1c <__aeabi_cdcmpeq>
   d8f34:	bf0c      	ite	eq
   d8f36:	2001      	moveq	r0, #1
   d8f38:	2000      	movne	r0, #0
   d8f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f3e:	bf00      	nop

000d8f40 <__aeabi_dcmplt>:
   d8f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f44:	f7ff ffea 	bl	d8f1c <__aeabi_cdcmpeq>
   d8f48:	bf34      	ite	cc
   d8f4a:	2001      	movcc	r0, #1
   d8f4c:	2000      	movcs	r0, #0
   d8f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f52:	bf00      	nop

000d8f54 <__aeabi_dcmple>:
   d8f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f58:	f7ff ffe0 	bl	d8f1c <__aeabi_cdcmpeq>
   d8f5c:	bf94      	ite	ls
   d8f5e:	2001      	movls	r0, #1
   d8f60:	2000      	movhi	r0, #0
   d8f62:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f66:	bf00      	nop

000d8f68 <__aeabi_dcmpge>:
   d8f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f6c:	f7ff ffce 	bl	d8f0c <__aeabi_cdrcmple>
   d8f70:	bf94      	ite	ls
   d8f72:	2001      	movls	r0, #1
   d8f74:	2000      	movhi	r0, #0
   d8f76:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f7a:	bf00      	nop

000d8f7c <__aeabi_dcmpgt>:
   d8f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f80:	f7ff ffc4 	bl	d8f0c <__aeabi_cdrcmple>
   d8f84:	bf34      	ite	cc
   d8f86:	2001      	movcc	r0, #1
   d8f88:	2000      	movcs	r0, #0
   d8f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f8e:	bf00      	nop

000d8f90 <__aeabi_dcmpun>:
   d8f90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f98:	d102      	bne.n	d8fa0 <__aeabi_dcmpun+0x10>
   d8f9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f9e:	d10a      	bne.n	d8fb6 <__aeabi_dcmpun+0x26>
   d8fa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8fa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8fa8:	d102      	bne.n	d8fb0 <__aeabi_dcmpun+0x20>
   d8faa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8fae:	d102      	bne.n	d8fb6 <__aeabi_dcmpun+0x26>
   d8fb0:	f04f 0000 	mov.w	r0, #0
   d8fb4:	4770      	bx	lr
   d8fb6:	f04f 0001 	mov.w	r0, #1
   d8fba:	4770      	bx	lr

000d8fbc <__aeabi_d2f>:
   d8fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8fc4:	bf24      	itt	cs
   d8fc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8fca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8fce:	d90d      	bls.n	d8fec <__aeabi_d2f+0x30>
   d8fd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8fd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8fd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8fdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8fe0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8fe4:	bf08      	it	eq
   d8fe6:	f020 0001 	biceq.w	r0, r0, #1
   d8fea:	4770      	bx	lr
   d8fec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8ff0:	d121      	bne.n	d9036 <__aeabi_d2f+0x7a>
   d8ff2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8ff6:	bfbc      	itt	lt
   d8ff8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8ffc:	4770      	bxlt	lr
   d8ffe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9002:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9006:	f1c2 0218 	rsb	r2, r2, #24
   d900a:	f1c2 0c20 	rsb	ip, r2, #32
   d900e:	fa10 f30c 	lsls.w	r3, r0, ip
   d9012:	fa20 f002 	lsr.w	r0, r0, r2
   d9016:	bf18      	it	ne
   d9018:	f040 0001 	orrne.w	r0, r0, #1
   d901c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9020:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9024:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9028:	ea40 000c 	orr.w	r0, r0, ip
   d902c:	fa23 f302 	lsr.w	r3, r3, r2
   d9030:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9034:	e7cc      	b.n	d8fd0 <__aeabi_d2f+0x14>
   d9036:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d903a:	d107      	bne.n	d904c <__aeabi_d2f+0x90>
   d903c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9040:	bf1e      	ittt	ne
   d9042:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9046:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d904a:	4770      	bxne	lr
   d904c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9050:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9054:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9058:	4770      	bx	lr
   d905a:	bf00      	nop

000d905c <__cxa_atexit>:
   d905c:	b510      	push	{r4, lr}
   d905e:	4c05      	ldr	r4, [pc, #20]	; (d9074 <__cxa_atexit+0x18>)
   d9060:	4613      	mov	r3, r2
   d9062:	b12c      	cbz	r4, d9070 <__cxa_atexit+0x14>
   d9064:	460a      	mov	r2, r1
   d9066:	4601      	mov	r1, r0
   d9068:	2002      	movs	r0, #2
   d906a:	f3af 8000 	nop.w
   d906e:	bd10      	pop	{r4, pc}
   d9070:	4620      	mov	r0, r4
   d9072:	e7fc      	b.n	d906e <__cxa_atexit+0x12>
   d9074:	00000000 	.word	0x00000000

000d9078 <memcpy>:
   d9078:	440a      	add	r2, r1
   d907a:	4291      	cmp	r1, r2
   d907c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9080:	d100      	bne.n	d9084 <memcpy+0xc>
   d9082:	4770      	bx	lr
   d9084:	b510      	push	{r4, lr}
   d9086:	f811 4b01 	ldrb.w	r4, [r1], #1
   d908a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d908e:	4291      	cmp	r1, r2
   d9090:	d1f9      	bne.n	d9086 <memcpy+0xe>
   d9092:	bd10      	pop	{r4, pc}

000d9094 <memset>:
   d9094:	4402      	add	r2, r0
   d9096:	4603      	mov	r3, r0
   d9098:	4293      	cmp	r3, r2
   d909a:	d100      	bne.n	d909e <memset+0xa>
   d909c:	4770      	bx	lr
   d909e:	f803 1b01 	strb.w	r1, [r3], #1
   d90a2:	e7f9      	b.n	d9098 <memset+0x4>

000d90a4 <srand>:
   d90a4:	b538      	push	{r3, r4, r5, lr}
   d90a6:	4b0d      	ldr	r3, [pc, #52]	; (d90dc <srand+0x38>)
   d90a8:	681d      	ldr	r5, [r3, #0]
   d90aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d90ac:	4604      	mov	r4, r0
   d90ae:	b97b      	cbnz	r3, d90d0 <srand+0x2c>
   d90b0:	2018      	movs	r0, #24
   d90b2:	f7fc fdf3 	bl	d5c9c <malloc>
   d90b6:	4a0a      	ldr	r2, [pc, #40]	; (d90e0 <srand+0x3c>)
   d90b8:	4b0a      	ldr	r3, [pc, #40]	; (d90e4 <srand+0x40>)
   d90ba:	63a8      	str	r0, [r5, #56]	; 0x38
   d90bc:	e9c0 2300 	strd	r2, r3, [r0]
   d90c0:	4b09      	ldr	r3, [pc, #36]	; (d90e8 <srand+0x44>)
   d90c2:	6083      	str	r3, [r0, #8]
   d90c4:	230b      	movs	r3, #11
   d90c6:	8183      	strh	r3, [r0, #12]
   d90c8:	2201      	movs	r2, #1
   d90ca:	2300      	movs	r3, #0
   d90cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d90d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d90d2:	2200      	movs	r2, #0
   d90d4:	611c      	str	r4, [r3, #16]
   d90d6:	615a      	str	r2, [r3, #20]
   d90d8:	bd38      	pop	{r3, r4, r5, pc}
   d90da:	bf00      	nop
   d90dc:	2003e3e0 	.word	0x2003e3e0
   d90e0:	abcd330e 	.word	0xabcd330e
   d90e4:	e66d1234 	.word	0xe66d1234
   d90e8:	0005deec 	.word	0x0005deec

000d90ec <rand>:
   d90ec:	4b13      	ldr	r3, [pc, #76]	; (d913c <rand+0x50>)
   d90ee:	b510      	push	{r4, lr}
   d90f0:	681c      	ldr	r4, [r3, #0]
   d90f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d90f4:	b97b      	cbnz	r3, d9116 <rand+0x2a>
   d90f6:	2018      	movs	r0, #24
   d90f8:	f7fc fdd0 	bl	d5c9c <malloc>
   d90fc:	4a10      	ldr	r2, [pc, #64]	; (d9140 <rand+0x54>)
   d90fe:	4b11      	ldr	r3, [pc, #68]	; (d9144 <rand+0x58>)
   d9100:	63a0      	str	r0, [r4, #56]	; 0x38
   d9102:	e9c0 2300 	strd	r2, r3, [r0]
   d9106:	4b10      	ldr	r3, [pc, #64]	; (d9148 <rand+0x5c>)
   d9108:	6083      	str	r3, [r0, #8]
   d910a:	230b      	movs	r3, #11
   d910c:	8183      	strh	r3, [r0, #12]
   d910e:	2201      	movs	r2, #1
   d9110:	2300      	movs	r3, #0
   d9112:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9116:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9118:	480c      	ldr	r0, [pc, #48]	; (d914c <rand+0x60>)
   d911a:	690a      	ldr	r2, [r1, #16]
   d911c:	694b      	ldr	r3, [r1, #20]
   d911e:	4c0c      	ldr	r4, [pc, #48]	; (d9150 <rand+0x64>)
   d9120:	4350      	muls	r0, r2
   d9122:	fb04 0003 	mla	r0, r4, r3, r0
   d9126:	fba2 3404 	umull	r3, r4, r2, r4
   d912a:	1c5a      	adds	r2, r3, #1
   d912c:	4404      	add	r4, r0
   d912e:	f144 0000 	adc.w	r0, r4, #0
   d9132:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d9136:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d913a:	bd10      	pop	{r4, pc}
   d913c:	2003e3e0 	.word	0x2003e3e0
   d9140:	abcd330e 	.word	0xabcd330e
   d9144:	e66d1234 	.word	0xe66d1234
   d9148:	0005deec 	.word	0x0005deec
   d914c:	5851f42d 	.word	0x5851f42d
   d9150:	4c957f2d 	.word	0x4c957f2d

000d9154 <strcpy>:
   d9154:	4603      	mov	r3, r0
   d9156:	f811 2b01 	ldrb.w	r2, [r1], #1
   d915a:	f803 2b01 	strb.w	r2, [r3], #1
   d915e:	2a00      	cmp	r2, #0
   d9160:	d1f9      	bne.n	d9156 <strcpy+0x2>
   d9162:	4770      	bx	lr

000d9164 <strdup>:
   d9164:	4b02      	ldr	r3, [pc, #8]	; (d9170 <strdup+0xc>)
   d9166:	4601      	mov	r1, r0
   d9168:	6818      	ldr	r0, [r3, #0]
   d916a:	f000 b803 	b.w	d9174 <_strdup_r>
   d916e:	bf00      	nop
   d9170:	2003e3e0 	.word	0x2003e3e0

000d9174 <_strdup_r>:
   d9174:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9176:	4604      	mov	r4, r0
   d9178:	4608      	mov	r0, r1
   d917a:	460d      	mov	r5, r1
   d917c:	f000 f80f 	bl	d919e <strlen>
   d9180:	1c42      	adds	r2, r0, #1
   d9182:	4611      	mov	r1, r2
   d9184:	4620      	mov	r0, r4
   d9186:	9201      	str	r2, [sp, #4]
   d9188:	f7fc fdb0 	bl	d5cec <_malloc_r>
   d918c:	4604      	mov	r4, r0
   d918e:	b118      	cbz	r0, d9198 <_strdup_r+0x24>
   d9190:	9a01      	ldr	r2, [sp, #4]
   d9192:	4629      	mov	r1, r5
   d9194:	f7ff ff70 	bl	d9078 <memcpy>
   d9198:	4620      	mov	r0, r4
   d919a:	b003      	add	sp, #12
   d919c:	bd30      	pop	{r4, r5, pc}

000d919e <strlen>:
   d919e:	4603      	mov	r3, r0
   d91a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d91a4:	2a00      	cmp	r2, #0
   d91a6:	d1fb      	bne.n	d91a0 <strlen+0x2>
   d91a8:	1a18      	subs	r0, r3, r0
   d91aa:	3801      	subs	r0, #1
   d91ac:	4770      	bx	lr

000d91ae <link_code_end>:
	...

000d91b0 <dynalib_user>:
   d91b0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d91c0:	0000 0000 207b 4122 4354 2231 203a 6425     ....{ "ATC1": %d
   d91d0:	202c 4122 5054 2231 203a 6425 202c 4122     , "ATP1": %d, "A
   d91e0:	4354 2232 203a 6425 202c 4122 5054 2232     TC2": %d, "ATP2"
   d91f0:	203a 6425 202c 4122 5346 2252 203a 6425     : %d, "AFSR": %d
   d9200:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9210:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9220:	2020 2c20 2220 4141 6363 2258 203a 6425        , "AAccX": %d
   d9230:	202c 4122 6341 5963 3a22 2520 2c64 2220     , "AAccY": %d, "
   d9240:	4141 6363 225a 203a 6425 202c 4122 7947     AAccZ": %d, "AGy
   d9250:	5872 3a22 2520 2c64 2220 4741 7279 2259     rX": %d, "AGyrY"
   d9260:	203a 6425 2020 2020 2020 2020 2020 2020     : %d            
   d9270:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9280:	2020 2020 2020 2c20 2220 4741 7279 225a            , "AGyrZ"
   d9290:	203a 6425 202c 4122 5442 3a22 2520 2c64     : %d, "ABT": %d,
   d92a0:	2220 544d 3150 3a22 2520 2064 2020 2020      "MTP1": %d     
   d92b0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d92c0:	2020 2020 2020 2020 2020 2020 2020 202c                   , 
   d92d0:	4d22 5054 2232 203a 6425 202c 4d22 6341     "MTP2": %d, "MAc
   d92e0:	5863 3a22 2520 2c64 2220 414d 6363 2259     cX": %d, "MAccY"
   d92f0:	203a 6425 202c 4d22 6341 5a63 3a22 2520     : %d, "MAccZ": %
   d9300:	2c64 2220 474d 7279 2258 203a 6425 2020     d, "MGyrX": %d  
   d9310:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9320:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9330:	2c20 2220 474d 7279 2259 203a 6425 202c      , "MGyrY": %d, 
   d9340:	4d22 7947 5a72 3a22 2520 2c64 2220 5248     "MGyrZ": %d, "HR
   d9350:	3a22 2520 2c64 2220 5248 2256 203a 6625     ": %d, "HRV": %f
   d9360:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9370:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9380:	2020 2c20 2220 6142 7474 3a22 2520 2c66        , "Batt": %f,
   d9390:	2220 464d 5253 3a22 2520 7d64 2200 007d      "MFSR": %d}."}.
   d93a0:	4445 3141 7b00 2220 4445 3141 3a22 2220     EDA1.{ "EDA1": "
   d93b0:	5300 6d75 616d 7972 6552 6f70 7472 4900     .SummaryReport.I
   d93c0:	696e 6974 6c61 7a69 7461 6f69 206e 666f     nitialization of
   d93d0:	7420 6568 7320 6e65 6f73 2072 6572 7574      the sensor retu
   d93e0:	6e72 6465 203a 5400 7972 6e69 2067 6761     rned: .Trying ag
   d93f0:	6961 2e6e 2e2e 5500 6b6e 6f6e 6e77 5320     ain....Unknown S
   d9400:	6174 7574 0073 6c41 206c 7369 7720 6c65     tatus.All is wel
   d9410:	2e6c 4700 6e65 7265 6c61 4520 7272 726f     l..General Error
   d9420:	4e00 746f 4920 706d 656c 656d 746e 6465     .Not Implemented
   d9430:	5000 7261 6d61 7465 7265 4520 7272 726f     .Parameter Error
   d9440:	5700 6f72 676e 4920 0044 6e49 6176 696c     .Wrong ID.Invali
   d9450:	2064 6553 736e 726f 4400 7461 2061 6e55     d Sensor.Data Un
   d9460:	6564 6672 6f6c 0077 6553 736e 726f 4e20     derflow.Sensor N
   d9470:	746f 5320 7075 6f70 7472 6465 0000 0000     ot Supported....

000d9480 <CSWTCH.31>:
   d9480:	9406 000d 9413 000d 9421 000d 9431 000d     ........!...1...
   d9490:	9441 000d 944a 000d 9459 000d 9468 000d     A...J...Y...h...

000d94a0 <_ZTV13ICM_20948_I2C>:
	...
   d94a8:	5845 000d                                   EX..

000d94ac <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d94b4:	5d91 000d 5d97 000d 5de7 000d 5da5 000d     .]...]...]...]..
   d94c4:	5d93 000d                                   .]..

000d94c8 <_ZTVN5spark13EthernetClassE>:
	...
   d94d0:	635f 000d 6355 000d 634b 000d 6341 000d     _c..Uc..Kc..Ac..
   d94e0:	6335 000d 6329 000d 631d 000d 6315 000d     5c..)c...c...c..
   d94f0:	630b 000d 6301 000d 65f1 000d               .c...c...e..

000d94fc <_ZTV7TwoWire>:
	...
   d9504:	637d 000d 63c7 000d 639f 000d 637f 000d     }c...c...c...c..
   d9514:	63a7 000d 63af 000d 63b7 000d 63bf 000d     .c...c...c...c..

000d9524 <_ZTV9IPAddress>:
	...
   d952c:	64a5 000d 6495 000d 6497 000d 7061 0070     .d...d...d..app.

000d953c <_ZTVN5spark12NetworkClassE>:
	...
   d9544:	6589 000d 6593 000d 659d 000d 65a7 000d     .e...e...e...e..
   d9554:	65b1 000d 65bd 000d 65c9 000d 65d5 000d     .e...e...e...e..
   d9564:	65dd 000d 65e7 000d 65f1 000d 5925 252d     .e...e...e..%Y-%
   d9574:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d9584:	7361 7463 6d69 0065                         asctime.

000d958c <_ZTV11USARTSerial>:
	...
   d9594:	6ae9 000d 6b55 000d 6b2d 000d 66d9 000d     .j..Uk..-k...f..
   d95a4:	6afd 000d 6b19 000d 6b0b 000d 6b27 000d     .j...k...k..'k..
   d95b4:	6aeb 000d 6aef 000d                         .j...j..

000d95bc <_ZTV9USBSerial>:
	...
   d95c4:	6be9 000d 6c51 000d 6c27 000d 66d9 000d     .k..Ql..'l...f..
   d95d4:	6c19 000d 6beb 000d 6bfb 000d 6c4b 000d     .l...k...k..Kl..
   d95e4:	6c0b 000d 6be5 000d                         .l...k..

000d95ec <_ZTVN5spark9WiFiClassE>:
	...
   d95f4:	6d4b 000d 6d41 000d 6d37 000d 6ced 000d     Km..Am..7m...l..
   d9604:	6d2b 000d 6d1f 000d 6d13 000d 6d0b 000d     +m...m...m...m..
   d9614:	6d01 000d 6cf7 000d 65f1 000d               .m...l...e..

000d9620 <_ZSt7nothrow>:
   d9620:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000d9630 <TWO52>:
   d9630:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9640 <link_const_variable_data_end>:
   d9640:	000d4f49 	.word	0x000d4f49
   d9644:	000d54e5 	.word	0x000d54e5
   d9648:	000d5d69 	.word	0x000d5d69
   d964c:	000d6369 	.word	0x000d6369
   d9650:	000d6579 	.word	0x000d6579
   d9654:	000d66c5 	.word	0x000d66c5
   d9658:	000d67d5 	.word	0x000d67d5
   d965c:	000d6a99 	.word	0x000d6a99
   d9660:	000d6ad5 	.word	0x000d6ad5
   d9664:	000d6d55 	.word	0x000d6d55

000d9668 <link_constructors_end>:
	...
