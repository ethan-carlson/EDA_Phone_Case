
/Users/ethan/Desktop/EDA_Phone_Case_Code_Repo/EDA_Phone_Case_Rev3/target/2.0.1/argon/EDA_Phone_Case_Rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d83e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e3e8  000d83e4  0001e3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000394  2003e45c  2003e45c  0002e45c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8458  000d8458  00028458  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8480  000d8480  00028480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001810fc  00000000  00000000  00028484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001993e  00000000  00000000  001a9580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002fe81  00000000  00000000  001c2ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c68  00000000  00000000  001f2d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007bf0  00000000  00000000  001f59a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d6e2  00000000  00000000  001fd597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040ecc  00000000  00000000  0023ac79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00110768  00000000  00000000  0027bb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000079d4  00000000  00000000  0038c2b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fedf 	bl	d7df4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fee7 	bl	d7e10 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e3e8 	.word	0x2003e3e8
   d404c:	000d83e4 	.word	0x000d83e4
   d4050:	2003e45c 	.word	0x2003e45c
   d4054:	2003e45c 	.word	0x2003e45c
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 f82f 	bl	d70c4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d83ac 	.word	0x000d83ac
   d4080:	000d83d4 	.word	0x000d83d4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bfd4 	b.w	d5030 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd97 	bl	d4bbc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 bfd9 	b.w	d7048 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 befd 	b.w	d5e94 <malloc>

000d409a <_Znaj>:
   d409a:	f001 befb 	b.w	d5e94 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bf01 	b.w	d5ea4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <ICM_20948_execute_w>:
	pdev->_serif = s;
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40b2:	b410      	push	{r4}
   d40b4:	4604      	mov	r4, r0
   d40b6:	4608      	mov	r0, r1
   d40b8:	4611      	mov	r1, r2
   d40ba:	461a      	mov	r2, r3
	if (pdev->_serif->write == NULL)
   d40bc:	6823      	ldr	r3, [r4, #0]
   d40be:	681c      	ldr	r4, [r3, #0]
   d40c0:	b124      	cbz	r4, d40cc <ICM_20948_execute_w+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40c2:	46a4      	mov	ip, r4
   d40c4:	689b      	ldr	r3, [r3, #8]
}
   d40c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40ca:	4760      	bx	ip
}
   d40cc:	2002      	movs	r0, #2
   d40ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40d2:	4770      	bx	lr

000d40d4 <ICM_20948_execute_r>:

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40d4:	b410      	push	{r4}
   d40d6:	4604      	mov	r4, r0
   d40d8:	4608      	mov	r0, r1
   d40da:	4611      	mov	r1, r2
   d40dc:	461a      	mov	r2, r3
	if (pdev->_serif->read == NULL)
   d40de:	6823      	ldr	r3, [r4, #0]
   d40e0:	685c      	ldr	r4, [r3, #4]
   d40e2:	b124      	cbz	r4, d40ee <ICM_20948_execute_r+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40e4:	46a4      	mov	ip, r4
   d40e6:	689b      	ldr	r3, [r3, #8]
}
   d40e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40ec:	4760      	bx	ip
}
   d40ee:	2002      	movs	r0, #2
   d40f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40f4:	4770      	bx	lr

000d40f6 <ICM_20948_set_bank>:
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
}

ICM_20948_Status_e ICM_20948_set_bank(ICM_20948_Device_t *pdev, uint8_t bank)
{
	if (bank > 3)
   d40f6:	2903      	cmp	r1, #3
{
   d40f8:	b507      	push	{r0, r1, r2, lr}
	if (bank > 3)
   d40fa:	d80b      	bhi.n	d4114 <ICM_20948_set_bank+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
   d40fc:	0109      	lsls	r1, r1, #4
   d40fe:	f88d 1007 	strb.w	r1, [sp, #7]
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
   d4102:	2301      	movs	r3, #1
   d4104:	f10d 0207 	add.w	r2, sp, #7
   d4108:	217f      	movs	r1, #127	; 0x7f
   d410a:	f7ff ffd2 	bl	d40b2 <ICM_20948_execute_w>
}
   d410e:	b003      	add	sp, #12
   d4110:	f85d fb04 	ldr.w	pc, [sp], #4
		return ICM_20948_Stat_ParamErr;
   d4114:	2003      	movs	r0, #3
   d4116:	e7fa      	b.n	d410e <ICM_20948_set_bank+0x18>

000d4118 <ICM_20948_i2c_master_slv4_txn>:
{
   d4118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d411c:	b085      	sub	sp, #20
   d411e:	461d      	mov	r5, r3
   d4120:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   d4124:	f88d 2006 	strb.w	r2, [sp, #6]
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4128:	2e00      	cmp	r6, #0
   d412a:	bf14      	ite	ne
   d412c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   d4130:	2300      	moveq	r3, #0
   d4132:	4319      	orrs	r1, r3
{
   d4134:	4604      	mov	r4, r0
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4136:	f88d 1007 	strb.w	r1, [sp, #7]
	retval = ICM_20948_set_bank(pdev, 3);
   d413a:	2103      	movs	r1, #3
   d413c:	f7ff ffdb 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
   d4140:	2301      	movs	r3, #1
   d4142:	f10d 0207 	add.w	r2, sp, #7
   d4146:	2113      	movs	r1, #19
   d4148:	4620      	mov	r0, r4
   d414a:	f7ff ffb2 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d414e:	2800      	cmp	r0, #0
   d4150:	d168      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	retval = ICM_20948_set_bank(pdev, 3);
   d4152:	2103      	movs	r1, #3
   d4154:	4620      	mov	r0, r4
   d4156:	f7ff ffce 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
   d415a:	2301      	movs	r3, #1
   d415c:	f10d 0206 	add.w	r2, sp, #6
   d4160:	2114      	movs	r1, #20
   d4162:	4620      	mov	r0, r4
   d4164:	f7ff ffa5 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d4168:	2800      	cmp	r0, #0
   d416a:	d15b      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	ctrl.REG_DIS = !send_reg_addr;
   d416c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	while (nByte < len)
   d4170:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	ctrl.REG_DIS = !send_reg_addr;
   d4174:	f082 0201 	eor.w	r2, r2, #1
	ctrl.DLY = 0;
   d4178:	0152      	lsls	r2, r2, #5
   d417a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d417e:	f88d 2008 	strb.w	r2, [sp, #8]
	while (nByte < len)
   d4182:	4607      	mov	r7, r0
   d4184:	fa1f f989 	uxth.w	r9, r9
   d4188:	b2bb      	uxth	r3, r7
   d418a:	4599      	cmp	r9, r3
   d418c:	d94a      	bls.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		if (!Rw)
   d418e:	2e00      	cmp	r6, #0
   d4190:	d03c      	beq.n	d420c <ICM_20948_i2c_master_slv4_txn+0xf4>
		retval = ICM_20948_set_bank(pdev, 3);
   d4192:	2103      	movs	r1, #3
   d4194:	4620      	mov	r0, r4
   d4196:	f7ff ffae 	bl	d40f6 <ICM_20948_set_bank>
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
   d419a:	2301      	movs	r3, #1
   d419c:	aa02      	add	r2, sp, #8
   d419e:	2115      	movs	r1, #21
   d41a0:	4620      	mov	r0, r4
   d41a2:	f7ff ff86 	bl	d40b2 <ICM_20948_execute_w>
		if (retval != ICM_20948_Stat_Ok)
   d41a6:	2800      	cmp	r0, #0
   d41a8:	d13c      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		uint32_t count = 0;
   d41aa:	4680      	mov	r8, r0
			retval = ICM_20948_set_bank(pdev, 0);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4620      	mov	r0, r4
   d41b0:	f7ff ffa1 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
   d41b4:	2301      	movs	r3, #1
   d41b6:	aa03      	add	r2, sp, #12
   d41b8:	2117      	movs	r1, #23
   d41ba:	4620      	mov	r0, r4
   d41bc:	f7ff ff8a 	bl	d40d4 <ICM_20948_execute_r>
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
			slave4Done |= (count >= max_cycles);
   d41c4:	f240 31e7 	movw	r1, #999	; 0x3e7
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c8:	461a      	mov	r2, r3
   d41ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d41ce:	4588      	cmp	r8, r1
   d41d0:	bf88      	it	hi
   d41d2:	f043 0301 	orrhi.w	r3, r3, #1
		while (!slave4Done)
   d41d6:	07db      	lsls	r3, r3, #31
			count++;
   d41d8:	f108 0801 	add.w	r8, r8, #1
		while (!slave4Done)
   d41dc:	d5e6      	bpl.n	d41ac <ICM_20948_i2c_master_slv4_txn+0x94>
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
   d41de:	f3c2 1300 	ubfx	r3, r2, #4, #1
		if (txn_failed)
   d41e2:	4588      	cmp	r8, r1
   d41e4:	bf94      	ite	ls
   d41e6:	4698      	movls	r8, r3
   d41e8:	f043 0801 	orrhi.w	r8, r3, #1
   d41ec:	f018 0f01 	tst.w	r8, #1
   d41f0:	d11b      	bne.n	d422a <ICM_20948_i2c_master_slv4_txn+0x112>
		if (Rw)
   d41f2:	b14e      	cbz	r6, d4208 <ICM_20948_i2c_master_slv4_txn+0xf0>
			retval = ICM_20948_set_bank(pdev, 3);
   d41f4:	2103      	movs	r1, #3
   d41f6:	4620      	mov	r0, r4
   d41f8:	f7ff ff7d 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_SLV4_DI, &data[nByte], 1);
   d41fc:	2301      	movs	r3, #1
   d41fe:	19ea      	adds	r2, r5, r7
   d4200:	2117      	movs	r1, #23
   d4202:	4620      	mov	r0, r4
   d4204:	f7ff ff66 	bl	d40d4 <ICM_20948_execute_r>
		nByte++;
   d4208:	3701      	adds	r7, #1
   d420a:	e7bd      	b.n	d4188 <ICM_20948_i2c_master_slv4_txn+0x70>
			retval = ICM_20948_set_bank(pdev, 3);
   d420c:	2103      	movs	r1, #3
   d420e:	4620      	mov	r0, r4
   d4210:	f7ff ff71 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
   d4214:	2301      	movs	r3, #1
   d4216:	19ea      	adds	r2, r5, r7
   d4218:	2116      	movs	r1, #22
   d421a:	4620      	mov	r0, r4
   d421c:	f7ff ff49 	bl	d40b2 <ICM_20948_execute_w>
			if (retval != ICM_20948_Stat_Ok)
   d4220:	2800      	cmp	r0, #0
   d4222:	d0b6      	beq.n	d4192 <ICM_20948_i2c_master_slv4_txn+0x7a>
}
   d4224:	b005      	add	sp, #20
   d4226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ICM_20948_Stat_Err;
   d422a:	2001      	movs	r0, #1
   d422c:	e7fa      	b.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>

000d422e <ICM_20948_i2c_master_single_w>:
{
   d422e:	b530      	push	{r4, r5, lr}
   d4230:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
   d4232:	2401      	movs	r4, #1
   d4234:	2500      	movs	r5, #0
   d4236:	e9cd 5401 	strd	r5, r4, [sp, #4]
   d423a:	9400      	str	r4, [sp, #0]
   d423c:	f7ff ff6c 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4240:	b005      	add	sp, #20
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <ICM_20948_i2c_master_single_r>:
{
   d4244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
   d4246:	2401      	movs	r4, #1
   d4248:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d424c:	9400      	str	r4, [sp, #0]
   d424e:	f7ff ff63 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4252:	b004      	add	sp, #16
   d4254:	bd10      	pop	{r4, pc}

000d4256 <ICM_20948_sw_reset>:

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
   d4256:	b513      	push	{r0, r1, r4, lr}
   d4258:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d425a:	2100      	movs	r1, #0
   d425c:	f7ff ff4b 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4260:	2301      	movs	r3, #1
   d4262:	aa01      	add	r2, sp, #4
   d4264:	2106      	movs	r1, #6
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff34 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d426c:	b958      	cbnz	r0, d4286 <ICM_20948_sw_reset+0x30>
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
   d426e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4276:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d427a:	aa01      	add	r2, sp, #4
   d427c:	2301      	movs	r3, #1
   d427e:	2106      	movs	r1, #6
   d4280:	4620      	mov	r0, r4
   d4282:	f7ff ff16 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d4286:	b002      	add	sp, #8
   d4288:	bd10      	pop	{r4, pc}

000d428a <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
   d428a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d428c:	4604      	mov	r4, r0
   d428e:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4290:	2100      	movs	r1, #0
   d4292:	f7ff ff30 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4296:	2301      	movs	r3, #1
   d4298:	aa01      	add	r2, sp, #4
   d429a:	2106      	movs	r1, #6
   d429c:	4620      	mov	r0, r4
   d429e:	f7ff ff19 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42a2:	b958      	cbnz	r0, d42bc <ICM_20948_sleep+0x32>
	{
		return retval;
	}

	if (on)
   d42a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42a8:	f365 1386 	bfi	r3, r5, #6, #1
   d42ac:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.SLEEP = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42b0:	aa01      	add	r2, sp, #4
   d42b2:	2301      	movs	r3, #1
   d42b4:	2106      	movs	r1, #6
   d42b6:	4620      	mov	r0, r4
   d42b8:	f7ff fefb 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42bc:	b003      	add	sp, #12
   d42be:	bd30      	pop	{r4, r5, pc}

000d42c0 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
   d42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42c2:	4604      	mov	r4, r0
   d42c4:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42c6:	2100      	movs	r1, #0
   d42c8:	f7ff ff15 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42cc:	2301      	movs	r3, #1
   d42ce:	aa01      	add	r2, sp, #4
   d42d0:	2106      	movs	r1, #6
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fefe 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42d8:	b958      	cbnz	r0, d42f2 <ICM_20948_low_power+0x32>
	{
		return retval;
	}

	if (on)
   d42da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42de:	f365 1345 	bfi	r3, r5, #5, #1
   d42e2:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.LP_EN = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42e6:	aa01      	add	r2, sp, #4
   d42e8:	2301      	movs	r3, #1
   d42ea:	2106      	movs	r1, #6
   d42ec:	4620      	mov	r0, r4
   d42ee:	f7ff fee0 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}

000d42f6 <ICM_20948_get_who_am_i>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
   d42f6:	b570      	push	{r4, r5, r6, lr}
   d42f8:	4605      	mov	r5, r0
	if (whoami == NULL)
   d42fa:	460c      	mov	r4, r1
   d42fc:	b151      	cbz	r1, d4314 <ICM_20948_get_who_am_i+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42fe:	2100      	movs	r1, #0
   d4300:	f7ff fef9 	bl	d40f6 <ICM_20948_set_bank>
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d4304:	4622      	mov	r2, r4
   d4306:	4628      	mov	r0, r5
   d4308:	2301      	movs	r3, #1
}
   d430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d430e:	2100      	movs	r1, #0
   d4310:	f7ff bee0 	b.w	d40d4 <ICM_20948_execute_r>
}
   d4314:	2003      	movs	r0, #3
   d4316:	bd70      	pop	{r4, r5, r6, pc}

000d4318 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
   d4318:	b507      	push	{r0, r1, r2, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
   d431a:	2300      	movs	r3, #0
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d431c:	f10d 0107 	add.w	r1, sp, #7
	uint8_t whoami = 0x00;
   d4320:	f88d 3007 	strb.w	r3, [sp, #7]
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d4324:	f7ff ffe7 	bl	d42f6 <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
   d4328:	b920      	cbnz	r0, d4334 <ICM_20948_check_id+0x1c>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
   d432a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d432e:	2bea      	cmp	r3, #234	; 0xea
	{
		return ICM_20948_Stat_WrongID;
   d4330:	bf18      	it	ne
   d4332:	2004      	movne	r0, #4
	}
	return retval;
}
   d4334:	b003      	add	sp, #12
   d4336:	f85d fb04 	ldr.w	pc, [sp], #4

000d433a <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d433a:	f011 0f13 	tst.w	r1, #19
{
   d433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4340:	4606      	mov	r6, r0
   d4342:	460c      	mov	r4, r1
   d4344:	4615      	mov	r5, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d4346:	d02a      	beq.n	d439e <ICM_20948_set_sample_mode+0x64>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4348:	2100      	movs	r1, #0
   d434a:	f7ff fed4 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d434e:	bb20      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d4350:	2301      	movs	r3, #1
   d4352:	aa01      	add	r2, sp, #4
   d4354:	2105      	movs	r1, #5
   d4356:	4630      	mov	r0, r6
   d4358:	f7ff febc 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d435c:	b9e8      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d435e:	07e1      	lsls	r1, r4, #31
	{
		reg.ACCEL_CYCLE = mode;
   d4360:	bf42      	ittt	mi
   d4362:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4366:	f365 1345 	bfimi	r3, r5, #5, #1
   d436a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
   d436e:	07a2      	lsls	r2, r4, #30
	{
		reg.GYRO_CYCLE = mode;
   d4370:	bf42      	ittt	mi
   d4372:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4376:	f365 1304 	bfimi	r3, r5, #4, #1
   d437a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
   d437e:	06e3      	lsls	r3, r4, #27
	{
		reg.I2C_MST_CYCLE = mode;
   d4380:	bf42      	ittt	mi
   d4382:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4386:	f365 1386 	bfimi	r3, r5, #6, #1
   d438a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d438e:	aa01      	add	r2, sp, #4
   d4390:	2301      	movs	r3, #1
   d4392:	2105      	movs	r1, #5
   d4394:	4630      	mov	r0, r6
   d4396:	f7ff fe8c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d439a:	b002      	add	sp, #8
   d439c:	bd70      	pop	{r4, r5, r6, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d439e:	2007      	movs	r0, #7
   d43a0:	e7fb      	b.n	d439a <ICM_20948_set_sample_mode+0x60>

000d43a2 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43a2:	f011 0f03 	tst.w	r1, #3
{
   d43a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43aa:	4606      	mov	r6, r0
   d43ac:	4688      	mov	r8, r1
   d43ae:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43b0:	d041      	beq.n	d4436 <ICM_20948_set_full_scale+0x94>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d43b2:	f011 0401 	ands.w	r4, r1, #1
   d43b6:	d019      	beq.n	d43ec <ICM_20948_set_full_scale+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43b8:	2102      	movs	r1, #2
   d43ba:	f7ff fe9c 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43be:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43c0:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43c2:	aa01      	add	r2, sp, #4
   d43c4:	2114      	movs	r1, #20
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe84 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_FS_SEL = fss.a;
   d43cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d0:	4328      	orrs	r0, r5
		reg.ACCEL_FS_SEL = fss.a;
   d43d2:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d6:	b2c4      	uxtb	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
   d43d8:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43dc:	aa01      	add	r2, sp, #4
   d43de:	2301      	movs	r3, #1
   d43e0:	2114      	movs	r1, #20
   d43e2:	4630      	mov	r0, r6
   d43e4:	f7ff fe65 	bl	d40b2 <ICM_20948_execute_w>
   d43e8:	4304      	orrs	r4, r0
   d43ea:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d43ec:	f018 0f02 	tst.w	r8, #2
   d43f0:	d01d      	beq.n	d442e <ICM_20948_set_full_scale+0x8c>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43f2:	2102      	movs	r1, #2
   d43f4:	4630      	mov	r0, r6
   d43f6:	f7ff fe7e 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d43fa:	2301      	movs	r3, #1
   d43fc:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43fe:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4400:	aa01      	add	r2, sp, #4
   d4402:	4630      	mov	r0, r6
   d4404:	f7ff fe66 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_FS_SEL = fss.g;
   d4408:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d440c:	f3c7 0781 	ubfx	r7, r7, #2, #2
   d4410:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4414:	4328      	orrs	r0, r5
		reg.GYRO_FS_SEL = fss.g;
   d4416:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441a:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441c:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441e:	aa01      	add	r2, sp, #4
   d4420:	4619      	mov	r1, r3
   d4422:	4630      	mov	r0, r6
   d4424:	f7ff fe45 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4428:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d442a:	4304      	orrs	r4, r0
   d442c:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d442e:	4620      	mov	r0, r4
   d4430:	b002      	add	sp, #8
   d4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4436:	2407      	movs	r4, #7
   d4438:	e7f9      	b.n	d442e <ICM_20948_set_full_scale+0x8c>

000d443a <ICM_20948_set_dlpf_cfg>:

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
   d443a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d443c:	b085      	sub	sp, #20
   d443e:	4606      	mov	r6, r0
   d4440:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4444:	078a      	lsls	r2, r1, #30
{
   d4446:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4448:	d042      	beq.n	d44d0 <ICM_20948_set_dlpf_cfg+0x96>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d444a:	f011 0401 	ands.w	r4, r1, #1
   d444e:	d01c      	beq.n	d448a <ICM_20948_set_dlpf_cfg+0x50>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4450:	2102      	movs	r1, #2
   d4452:	f7ff fe50 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4456:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4458:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d445a:	aa03      	add	r2, sp, #12
   d445c:	2114      	movs	r1, #20
   d445e:	4630      	mov	r0, r6
   d4460:	f7ff fe38 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_DLPFCFG = cfg.a;
   d4464:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4468:	f89d 2004 	ldrb.w	r2, [sp, #4]
   d446c:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4470:	4305      	orrs	r5, r0
		reg.ACCEL_DLPFCFG = cfg.a;
   d4472:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4476:	aa03      	add	r2, sp, #12
   d4478:	2301      	movs	r3, #1
   d447a:	2114      	movs	r1, #20
   d447c:	4630      	mov	r0, r6
   d447e:	f7ff fe18 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4482:	b2ed      	uxtb	r5, r5
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4484:	ea45 0400 	orr.w	r4, r5, r0
   d4488:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d448a:	07bb      	lsls	r3, r7, #30
   d448c:	d51d      	bpl.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d448e:	2102      	movs	r1, #2
   d4490:	4630      	mov	r0, r6
   d4492:	f7ff fe30 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4496:	2301      	movs	r3, #1
   d4498:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d449a:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d449c:	aa03      	add	r2, sp, #12
   d449e:	4630      	mov	r0, r6
   d44a0:	f7ff fe18 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_DLPFCFG = cfg.g;
   d44a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d44a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d44ac:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b0:	4328      	orrs	r0, r5
		reg.GYRO_DLPFCFG = cfg.g;
   d44b2:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b6:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b8:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44ba:	aa03      	add	r2, sp, #12
   d44bc:	4619      	mov	r1, r3
   d44be:	4630      	mov	r0, r6
   d44c0:	f7ff fdf7 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c4:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c6:	4304      	orrs	r4, r0
   d44c8:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d44ca:	4620      	mov	r0, r4
   d44cc:	b005      	add	sp, #20
   d44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d44d0:	2407      	movs	r4, #7
   d44d2:	e7fa      	b.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>

000d44d4 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44d4:	f011 0f03 	tst.w	r1, #3
{
   d44d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44dc:	4606      	mov	r6, r0
   d44de:	4688      	mov	r8, r1
   d44e0:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44e2:	d03f      	beq.n	d4564 <ICM_20948_enable_dlpf+0x90>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d44e4:	f011 0401 	ands.w	r4, r1, #1
   d44e8:	d019      	beq.n	d451e <ICM_20948_enable_dlpf+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44ea:	2102      	movs	r1, #2
   d44ec:	f7ff fe03 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f0:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44f2:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f4:	aa01      	add	r2, sp, #4
   d44f6:	2114      	movs	r1, #20
   d44f8:	4630      	mov	r0, r6
   d44fa:	f7ff fdeb 	bl	d40d4 <ICM_20948_execute_r>
   d44fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4502:	4328      	orrs	r0, r5
   d4504:	f367 0300 	bfi	r3, r7, #0, #1
   d4508:	b2c4      	uxtb	r4, r0
		if (enable)
   d450a:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d450e:	aa01      	add	r2, sp, #4
   d4510:	2301      	movs	r3, #1
   d4512:	2114      	movs	r1, #20
   d4514:	4630      	mov	r0, r6
   d4516:	f7ff fdcc 	bl	d40b2 <ICM_20948_execute_w>
   d451a:	4304      	orrs	r4, r0
   d451c:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d451e:	f018 0f02 	tst.w	r8, #2
   d4522:	d01b      	beq.n	d455c <ICM_20948_enable_dlpf+0x88>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4524:	2102      	movs	r1, #2
   d4526:	4630      	mov	r0, r6
   d4528:	f7ff fde5 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d452c:	2301      	movs	r3, #1
   d452e:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4530:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4532:	aa01      	add	r2, sp, #4
   d4534:	4630      	mov	r0, r6
   d4536:	f7ff fdcd 	bl	d40d4 <ICM_20948_execute_r>
   d453a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d453e:	f367 0300 	bfi	r3, r7, #0, #1
   d4542:	4328      	orrs	r0, r5
   d4544:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4548:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454a:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454c:	aa01      	add	r2, sp, #4
   d454e:	4619      	mov	r1, r3
   d4550:	4630      	mov	r0, r6
   d4552:	f7ff fdae 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4556:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4558:	4304      	orrs	r4, r0
   d455a:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d455c:	4620      	mov	r0, r4
   d455e:	b002      	add	sp, #8
   d4560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4564:	2407      	movs	r4, #7
   d4566:	e7f9      	b.n	d455c <ICM_20948_enable_dlpf+0x88>

000d4568 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
   d4568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d456a:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d456c:	2100      	movs	r1, #0
{
   d456e:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d4570:	f7ff fdc1 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4574:	b990      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4576:	2301      	movs	r3, #1
   d4578:	aa01      	add	r2, sp, #4
   d457a:	210f      	movs	r1, #15
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff fda9 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4582:	b958      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
   d4584:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4588:	f365 0341 	bfi	r3, r5, #1, #1
   d458c:	f88d 3004 	strb.w	r3, [sp, #4]
	retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4590:	aa01      	add	r2, sp, #4
   d4592:	2301      	movs	r3, #1
   d4594:	210f      	movs	r1, #15
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff fd8b 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d459c:	b003      	add	sp, #12
   d459e:	bd30      	pop	{r4, r5, pc}

000d45a0 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
   d45a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45a2:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a4:	2100      	movs	r1, #0
{
   d45a6:	4604      	mov	r4, r0
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a8:	f7ff ffde 	bl	d4568 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
   d45ac:	bb90      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
   d45ae:	2103      	movs	r1, #3
   d45b0:	4620      	mov	r0, r4
   d45b2:	f7ff fda0 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45b6:	bb68      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45b8:	2301      	movs	r3, #1
   d45ba:	466a      	mov	r2, sp
   d45bc:	4619      	mov	r1, r3
   d45be:	4620      	mov	r0, r4
   d45c0:	f7ff fd88 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45c4:	bb30      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
   d45c6:	f89d 3000 	ldrb.w	r3, [sp]
   d45ca:	f023 031f 	bic.w	r3, r3, #31
   d45ce:	f043 0317 	orr.w	r3, r3, #23
   d45d2:	f88d 3000 	strb.w	r3, [sp]
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45d6:	2301      	movs	r3, #1
   d45d8:	466a      	mov	r2, sp
   d45da:	4619      	mov	r1, r3
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff fd68 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d45e2:	b9b8      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d45e4:	4601      	mov	r1, r0
   d45e6:	4620      	mov	r0, r4
   d45e8:	f7ff fd85 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45ec:	b990      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d45ee:	2301      	movs	r3, #1
   d45f0:	aa01      	add	r2, sp, #4
   d45f2:	2103      	movs	r1, #3
   d45f4:	4620      	mov	r0, r4
   d45f6:	f7ff fd6d 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45fa:	b958      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	if (enable)
   d45fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4600:	f365 1345 	bfi	r3, r5, #5, #1
   d4604:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	else
	{
		reg.I2C_MST_EN = 0;
	}
	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d4608:	aa01      	add	r2, sp, #4
   d460a:	2301      	movs	r3, #1
   d460c:	2103      	movs	r1, #3
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff fd4f 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d4614:	b003      	add	sp, #12
   d4616:	bd30      	pop	{r4, r5, pc}

000d4618 <ICM_20948_i2c_master_reset>:

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
   d4618:	b513      	push	{r0, r1, r4, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
   d461a:	2100      	movs	r1, #0
{
   d461c:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d461e:	f7ff fd6a 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4622:	b990      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d4624:	2301      	movs	r3, #1
   d4626:	aa01      	add	r2, sp, #4
   d4628:	2103      	movs	r1, #3
   d462a:	4620      	mov	r0, r4
   d462c:	f7ff fd52 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4630:	b958      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
   d4632:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4636:	f043 0302 	orr.w	r3, r3, #2
   d463a:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d463e:	aa01      	add	r2, sp, #4
   d4640:	2301      	movs	r3, #1
   d4642:	2103      	movs	r1, #3
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff fd34 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d464a:	b002      	add	sp, #8
   d464c:	bd10      	pop	{r4, pc}

000d464e <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
   d464e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4652:	2903      	cmp	r1, #3
   d4654:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   d4658:	4605      	mov	r5, r0
   d465a:	460c      	mov	r4, r1
   d465c:	4617      	mov	r7, r2
   d465e:	461e      	mov	r6, r3
   d4660:	d847      	bhi.n	d46f2 <ICM_20948_i2c_master_configure_slave+0xa4>
		break;
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
   d4662:	2103      	movs	r1, #3
   d4664:	f7ff fd47 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4668:	2800      	cmp	r0, #0
   d466a:	d13f      	bne.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
   d466c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4670:	f367 0306 	bfi	r3, r7, #0, #7
   d4674:	f88d 3004 	strb.w	r3, [sp, #4]
	if (Rw)
   d4678:	f1b8 0f00 	cmp.w	r8, #0
   d467c:	d004      	beq.n	d4688 <ICM_20948_i2c_master_configure_slave+0x3a>
	{
		address.RNW = 1;
   d467e:	b2db      	uxtb	r3, r3
   d4680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4684:	f88d 3004 	strb.w	r3, [sp, #4]
   d4688:	00a4      	lsls	r4, r4, #2
   d468a:	b2e4      	uxtb	r4, r4
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
   d468c:	1ce1      	adds	r1, r4, #3
   d468e:	2301      	movs	r3, #1
   d4690:	aa01      	add	r2, sp, #4
   d4692:	b2c9      	uxtb	r1, r1
   d4694:	4628      	mov	r0, r5
   d4696:	f7ff fd0c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d469a:	bb38      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d469c:	1d21      	adds	r1, r4, #4
   d469e:	2301      	movs	r3, #1
   d46a0:	aa02      	add	r2, sp, #8
   d46a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d46a6:	4628      	mov	r0, r5
	subaddress.REG = reg;
   d46a8:	f88d 6008 	strb.w	r6, [sp, #8]
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d46ac:	f7ff fd01 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d46b0:	b9e0      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
   d46b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d46b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d46ba:	f003 030f 	and.w	r3, r3, #15
   d46be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d46c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   d46c6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d46ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d46d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46d6:	1d61      	adds	r1, r4, #5
	ctrl.LENG = len;
   d46d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   d46dc:	f88d 300c 	strb.w	r3, [sp, #12]
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46e0:	aa03      	add	r2, sp, #12
   d46e2:	2301      	movs	r3, #1
   d46e4:	b2c9      	uxtb	r1, r1
   d46e6:	4628      	mov	r0, r5
   d46e8:	f7ff fce3 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d46ec:	b004      	add	sp, #16
   d46ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d46f2:	2003      	movs	r0, #3
   d46f4:	e7fa      	b.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>

000d46f6 <ICM_20948_get_agmt>:

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
   d46f6:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
   d46fa:	4680      	mov	r8, r0
   d46fc:	b08b      	sub	sp, #44	; 0x2c
	if (pagmt == NULL)
   d46fe:	460f      	mov	r7, r1
   d4700:	2900      	cmp	r1, #0
   d4702:	f000 808f 	beq.w	d4824 <ICM_20948_get_agmt+0x12e>
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
   d4706:	2100      	movs	r1, #0
   d4708:	f7ff fcf5 	bl	d40f6 <ICM_20948_set_bank>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d470c:	2317      	movs	r3, #23
	retval |= ICM_20948_set_bank(pdev, 0);
   d470e:	4606      	mov	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d4710:	aa04      	add	r2, sp, #16
   d4712:	212d      	movs	r1, #45	; 0x2d
   d4714:	4640      	mov	r0, r8
   d4716:	f7ff fcdd 	bl	d40d4 <ICM_20948_execute_r>

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
   d471a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   d471e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4726:	803b      	strh	r3, [r7, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
   d4728:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d472c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   d4730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4734:	807b      	strh	r3, [r7, #2]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
   d4736:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d473a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d473e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4742:	80bb      	strh	r3, [r7, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
   d4744:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d4748:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d474c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4750:	80fb      	strh	r3, [r7, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
   d4752:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d4756:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d475a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d475e:	813b      	strh	r3, [r7, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
   d4760:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4764:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d476c:	817b      	strh	r3, [r7, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
   d476e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4772:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d4776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d477a:	827b      	strh	r3, [r7, #18]

	pagmt->magStat1 = buff[14];
   d477c:	f89d 301e 	ldrb.w	r3, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4780:	f89d 2020 	ldrb.w	r2, [sp, #32]
	pagmt->magStat1 = buff[14];
   d4784:	757b      	strb	r3, [r7, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4786:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d478a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d478e:	81bb      	strh	r3, [r7, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
   d4790:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   d4794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d479c:	81fb      	strh	r3, [r7, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d479e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   d47a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d47a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47aa:	4330      	orrs	r0, r6
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d47ac:	823b      	strh	r3, [r7, #16]
	pagmt->magStat2 = buff[22];
   d47ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   d47b2:	75bb      	strb	r3, [r7, #22]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47b4:	b2c4      	uxtb	r4, r0

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
   d47b6:	2102      	movs	r1, #2
   d47b8:	4640      	mov	r0, r8
   d47ba:	f7ff fc9c 	bl	d40f6 <ICM_20948_set_bank>
   d47be:	4320      	orrs	r0, r4
   d47c0:	b2c6      	uxtb	r6, r0
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47c2:	2301      	movs	r3, #1
   d47c4:	aa01      	add	r2, sp, #4
   d47c6:	2114      	movs	r1, #20
   d47c8:	4640      	mov	r0, r8
   d47ca:	f7ff fc83 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d47d2:	7d3a      	ldrb	r2, [r7, #20]
   d47d4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d47d8:	f363 0201 	bfi	r2, r3, #0, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47dc:	4330      	orrs	r0, r6
   d47de:	b2c6      	uxtb	r6, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47e0:	753a      	strb	r2, [r7, #20]
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
   d47e2:	2102      	movs	r1, #2
   d47e4:	4640      	mov	r0, r8
   d47e6:	f7ff fc86 	bl	d40f6 <ICM_20948_set_bank>
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47ea:	2301      	movs	r3, #1
   d47ec:	4619      	mov	r1, r3
	retval |= ICM_20948_set_bank(pdev, 2);
   d47ee:	4306      	orrs	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47f0:	aa02      	add	r2, sp, #8
   d47f2:	4640      	mov	r0, r8
   d47f4:	f7ff fc6e 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d47f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d47fc:	7d3a      	ldrb	r2, [r7, #20]
   d47fe:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d4802:	f363 0283 	bfi	r2, r3, #2, #2
	retval |= ICM_20948_set_bank(pdev, 2);
   d4806:	b2f4      	uxtb	r4, r6
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4808:	4304      	orrs	r4, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d480a:	753a      	strb	r2, [r7, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d480c:	2301      	movs	r3, #1
   d480e:	aa03      	add	r2, sp, #12
   d4810:	2115      	movs	r1, #21
   d4812:	4640      	mov	r0, r8
   d4814:	f7ff fc5e 	bl	d40d4 <ICM_20948_execute_r>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4818:	b2e4      	uxtb	r4, r4
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d481a:	4320      	orrs	r0, r4
   d481c:	b2c0      	uxtb	r0, r0

	return retval;
}
   d481e:	b00b      	add	sp, #44	; 0x2c
   d4820:	e8bd 81d0 	ldmia.w	sp!, {r4, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d4824:	2003      	movs	r0, #3
   d4826:	e7fa      	b.n	d481e <ICM_20948_get_agmt+0x128>

000d4828 <_Z21PulseSensorAmped_dataii>:
   Serial.println((millis() - loopTimer));
}


void PulseSensorAmped_data(int BPM, int IBI){  //This is clunky.  Could clean up later
  pulse = BPM;
   d4828:	4b01      	ldr	r3, [pc, #4]	; (d4830 <_Z21PulseSensorAmped_dataii+0x8>)
   d482a:	6018      	str	r0, [r3, #0]
}
   d482c:	4770      	bx	lr
   d482e:	bf00      	nop
   d4830:	2003e560 	.word	0x2003e560

000d4834 <_Z21PulseSensorAmped_lostv>:
}


void PulseSensorAmped_lost(void) {
  //Serial.println("Pulse Lost");
}
   d4834:	4770      	bx	lr
	...

000d4838 <_Z20computeSummaryReportv>:


void computeSummaryReport(){
   d4838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  avg_tc1 = avg_tc1 / baseReadCounter;
   d483c:	4974      	ldr	r1, [pc, #464]	; (d4a10 <_Z20computeSummaryReportv+0x1d8>)
  avg_tc2 = avg_tc2 / baseReadCounter;
   d483e:	f8df 9240 	ldr.w	r9, [pc, #576]	; d4a80 <_Z20computeSummaryReportv+0x248>
  avg_accx = avg_accx / baseReadCounter;
   d4842:	4f74      	ldr	r7, [pc, #464]	; (d4a14 <_Z20computeSummaryReportv+0x1dc>)
  avg_accy = avg_accy / baseReadCounter;
   d4844:	f8df 823c 	ldr.w	r8, [pc, #572]	; d4a84 <_Z20computeSummaryReportv+0x24c>
  avg_accz = avg_accz / baseReadCounter;
   d4848:	4873      	ldr	r0, [pc, #460]	; (d4a18 <_Z20computeSummaryReportv+0x1e0>)
  avg_gyrx = avg_gyrx / baseReadCounter;
   d484a:	4c74      	ldr	r4, [pc, #464]	; (d4a1c <_Z20computeSummaryReportv+0x1e4>)
  avg_tc1 = avg_tc1 / baseReadCounter;
   d484c:	4b74      	ldr	r3, [pc, #464]	; (d4a20 <_Z20computeSummaryReportv+0x1e8>)
   d484e:	680a      	ldr	r2, [r1, #0]
   d4850:	681b      	ldr	r3, [r3, #0]
  avg_gyry = avg_gyry / baseReadCounter;
  avg_gyrz = avg_gyrz / baseReadCounter;
   d4852:	4d74      	ldr	r5, [pc, #464]	; (d4a24 <_Z20computeSummaryReportv+0x1ec>)
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d4854:	4e74      	ldr	r6, [pc, #464]	; (d4a28 <_Z20computeSummaryReportv+0x1f0>)
  avg_tc1 = avg_tc1 / baseReadCounter;
   d4856:	fb92 f2f3 	sdiv	r2, r2, r3
   d485a:	600a      	str	r2, [r1, #0]
  avg_tc2 = avg_tc2 / baseReadCounter;
   d485c:	f8d9 2000 	ldr.w	r2, [r9]
   d4860:	fb92 f2f3 	sdiv	r2, r2, r3
   d4864:	f8c9 2000 	str.w	r2, [r9]
  avg_accx = avg_accx / baseReadCounter;
   d4868:	683a      	ldr	r2, [r7, #0]
   d486a:	fb92 f2f3 	sdiv	r2, r2, r3
   d486e:	603a      	str	r2, [r7, #0]
  avg_accy = avg_accy / baseReadCounter;
   d4870:	f8d8 2000 	ldr.w	r2, [r8]
   d4874:	fb92 f2f3 	sdiv	r2, r2, r3
   d4878:	f8c8 2000 	str.w	r2, [r8]
  avg_accz = avg_accz / baseReadCounter;
   d487c:	6802      	ldr	r2, [r0, #0]
   d487e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4882:	6002      	str	r2, [r0, #0]
  avg_gyrx = avg_gyrx / baseReadCounter;
   d4884:	6822      	ldr	r2, [r4, #0]
   d4886:	fb92 f2f3 	sdiv	r2, r2, r3
   d488a:	6022      	str	r2, [r4, #0]
  avg_gyry = avg_gyry / baseReadCounter;
   d488c:	4c67      	ldr	r4, [pc, #412]	; (d4a2c <_Z20computeSummaryReportv+0x1f4>)
  avg_tp1 = avg_tp1 / tp1ReadCounter;
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d488e:	4868      	ldr	r0, [pc, #416]	; (d4a30 <_Z20computeSummaryReportv+0x1f8>)
  avg_gyry = avg_gyry / baseReadCounter;
   d4890:	6822      	ldr	r2, [r4, #0]
   d4892:	fb92 f2f3 	sdiv	r2, r2, r3
   d4896:	6022      	str	r2, [r4, #0]
  avg_gyrz = avg_gyrz / baseReadCounter;
   d4898:	682a      	ldr	r2, [r5, #0]
   d489a:	fb92 f2f3 	sdiv	r2, r2, r3
   d489e:	602a      	str	r2, [r5, #0]
  avg_brdtemp = avg_brdtemp / baseReadCounter;
   d48a0:	6832      	ldr	r2, [r6, #0]
   d48a2:	fb92 f3f3 	sdiv	r3, r2, r3
   d48a6:	6033      	str	r3, [r6, #0]
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d48a8:	4b62      	ldr	r3, [pc, #392]	; (d4a34 <_Z20computeSummaryReportv+0x1fc>)
   d48aa:	4a63      	ldr	r2, [pc, #396]	; (d4a38 <_Z20computeSummaryReportv+0x200>)
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d48ac:	f8df a1d8 	ldr.w	sl, [pc, #472]	; d4a88 <_Z20computeSummaryReportv+0x250>
  avg_fsr = avg_fsr / fsrReadCounter;
   d48b0:	f8df b1d8 	ldr.w	fp, [pc, #472]	; d4a8c <_Z20computeSummaryReportv+0x254>
  avg_tp1 = avg_tp1 / tp1ReadCounter;
   d48b4:	6812      	ldr	r2, [r2, #0]
   d48b6:	4619      	mov	r1, r3
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	fb93 f3f2 	sdiv	r3, r3, r2
   d48be:	600b      	str	r3, [r1, #0]
  avg_fsr = avg_fsr / fsrReadCounter;
   d48c0:	495e      	ldr	r1, [pc, #376]	; (d4a3c <_Z20computeSummaryReportv+0x204>)
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d48c2:	6802      	ldr	r2, [r0, #0]
   d48c4:	f8da 3000 	ldr.w	r3, [sl]
   d48c8:	fb93 f3f2 	sdiv	r3, r3, r2
void computeSummaryReport(){
   d48cc:	b09f      	sub	sp, #124	; 0x7c

  float voltage = analogRead(BATT) * 0.0011224;
   d48ce:	2021      	movs	r0, #33	; 0x21
  avg_fsr = avg_fsr / fsrReadCounter;
   d48d0:	680a      	ldr	r2, [r1, #0]
  avg_tp2 = avg_tp2 / tp2ReadCounter;
   d48d2:	f8ca 3000 	str.w	r3, [sl]
  avg_fsr = avg_fsr / fsrReadCounter;
   d48d6:	f8db 3000 	ldr.w	r3, [fp]
   d48da:	fb93 f3f2 	sdiv	r3, r3, r2
   d48de:	f8cb 3000 	str.w	r3, [fp]
  float voltage = analogRead(BATT) * 0.0011224;
   d48e2:	f002 fc89 	bl	d71f8 <analogRead>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;

  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d48e6:	4b56      	ldr	r3, [pc, #344]	; (d4a40 <_Z20computeSummaryReportv+0x208>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	9318      	str	r3, [sp, #96]	; 0x60
  float voltage = analogRead(BATT) * 0.0011224;
   d48ec:	f002 ffa8 	bl	d7840 <__aeabi_i2d>
   d48f0:	a345      	add	r3, pc, #276	; (adr r3, d4a08 <_Z20computeSummaryReportv+0x1d0>)
   d48f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d48f6:	f003 f80d 	bl	d7914 <__aeabi_dmul>
   d48fa:	f003 fa1d 	bl	d7d38 <__aeabi_d2f>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;
   d48fe:	f002 ffb1 	bl	d7864 <__aeabi_f2d>
   d4902:	4b50      	ldr	r3, [pc, #320]	; (d4a44 <_Z20computeSummaryReportv+0x20c>)
   d4904:	2200      	movs	r2, #0
   d4906:	f002 fe4d 	bl	d75a4 <__aeabi_dsub>
   d490a:	4b4f      	ldr	r3, [pc, #316]	; (d4a48 <_Z20computeSummaryReportv+0x210>)
   d490c:	2200      	movs	r2, #0
   d490e:	f003 f92b 	bl	d7b68 <__aeabi_ddiv>
   d4912:	2200      	movs	r2, #0
   d4914:	4b4d      	ldr	r3, [pc, #308]	; (d4a4c <_Z20computeSummaryReportv+0x214>)
   d4916:	f002 fffd 	bl	d7914 <__aeabi_dmul>
   d491a:	f003 fa0d 	bl	d7d38 <__aeabi_d2f>
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d491e:	f002 ffa1 	bl	d7864 <__aeabi_f2d>
   d4922:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   d4926:	4b4a      	ldr	r3, [pc, #296]	; (d4a50 <_Z20computeSummaryReportv+0x218>)
   d4928:	6818      	ldr	r0, [r3, #0]
   d492a:	f002 ff9b 	bl	d7864 <__aeabi_f2d>
   d492e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d4932:	4b48      	ldr	r3, [pc, #288]	; (d4a54 <_Z20computeSummaryReportv+0x21c>)
   d4934:	4848      	ldr	r0, [pc, #288]	; (d4a58 <_Z20computeSummaryReportv+0x220>)
   d4936:	681b      	ldr	r3, [r3, #0]
   d4938:	9312      	str	r3, [sp, #72]	; 0x48
   d493a:	4b48      	ldr	r3, [pc, #288]	; (d4a5c <_Z20computeSummaryReportv+0x224>)
   d493c:	4a48      	ldr	r2, [pc, #288]	; (d4a60 <_Z20computeSummaryReportv+0x228>)
   d493e:	681b      	ldr	r3, [r3, #0]
   d4940:	9311      	str	r3, [sp, #68]	; 0x44
   d4942:	4b48      	ldr	r3, [pc, #288]	; (d4a64 <_Z20computeSummaryReportv+0x22c>)
   d4944:	4948      	ldr	r1, [pc, #288]	; (d4a68 <_Z20computeSummaryReportv+0x230>)
   d4946:	681b      	ldr	r3, [r3, #0]
   d4948:	9310      	str	r3, [sp, #64]	; 0x40
   d494a:	4b48      	ldr	r3, [pc, #288]	; (d4a6c <_Z20computeSummaryReportv+0x234>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	930f      	str	r3, [sp, #60]	; 0x3c
   d4950:	6803      	ldr	r3, [r0, #0]
   d4952:	930e      	str	r3, [sp, #56]	; 0x38
   d4954:	4b46      	ldr	r3, [pc, #280]	; (d4a70 <_Z20computeSummaryReportv+0x238>)
   d4956:	4847      	ldr	r0, [pc, #284]	; (d4a74 <_Z20computeSummaryReportv+0x23c>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	930d      	str	r3, [sp, #52]	; 0x34
   d495c:	6813      	ldr	r3, [r2, #0]
   d495e:	930c      	str	r3, [sp, #48]	; 0x30
   d4960:	680b      	ldr	r3, [r1, #0]
   d4962:	930b      	str	r3, [sp, #44]	; 0x2c
   d4964:	6803      	ldr	r3, [r0, #0]
   d4966:	930a      	str	r3, [sp, #40]	; 0x28
   d4968:	6833      	ldr	r3, [r6, #0]
   d496a:	9309      	str	r3, [sp, #36]	; 0x24
   d496c:	682b      	ldr	r3, [r5, #0]
   d496e:	9308      	str	r3, [sp, #32]
   d4970:	6823      	ldr	r3, [r4, #0]
   d4972:	4c2a      	ldr	r4, [pc, #168]	; (d4a1c <_Z20computeSummaryReportv+0x1e4>)
   d4974:	9307      	str	r3, [sp, #28]
   d4976:	6823      	ldr	r3, [r4, #0]
   d4978:	4827      	ldr	r0, [pc, #156]	; (d4a18 <_Z20computeSummaryReportv+0x1e0>)
   d497a:	9306      	str	r3, [sp, #24]
   d497c:	6803      	ldr	r3, [r0, #0]
   d497e:	9305      	str	r3, [sp, #20]
   d4980:	f8d8 3000 	ldr.w	r3, [r8]
   d4984:	9304      	str	r3, [sp, #16]
   d4986:	683b      	ldr	r3, [r7, #0]
   d4988:	9303      	str	r3, [sp, #12]
   d498a:	f8db 3000 	ldr.w	r3, [fp]
   d498e:	9302      	str	r3, [sp, #8]
   d4990:	f8da 3000 	ldr.w	r3, [sl]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	4a27      	ldr	r2, [pc, #156]	; (d4a34 <_Z20computeSummaryReportv+0x1fc>)
   d4998:	f8d9 3000 	ldr.w	r3, [r9]
   d499c:	491c      	ldr	r1, [pc, #112]	; (d4a10 <_Z20computeSummaryReportv+0x1d8>)
   d499e:	9300      	str	r3, [sp, #0]
   d49a0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d49a4:	6813      	ldr	r3, [r2, #0]
   d49a6:	680a      	ldr	r2, [r1, #0]
   d49a8:	4933      	ldr	r1, [pc, #204]	; (d4a78 <_Z20computeSummaryReportv+0x240>)
                                  , avg_tc1, avg_tp1, avg_tc2, avg_tp2, avg_fsr, avg_accx, avg_accy, avg_accz, \
                                  avg_gyrx, avg_gyry, avg_gyrz, avg_brdtemp, max_tp1, max_tp2, \
                                  max_accx, max_accy, max_accz, max_gyrx, max_gyry, max_gyrz, pulse, \
                                  hrv, batt_perc, max_fsr);

  max_tp1 = 0;
   d49aa:	4c32      	ldr	r4, [pc, #200]	; (d4a74 <_Z20computeSummaryReportv+0x23c>)
  max_tp2 = 0;
   d49ac:	4f2e      	ldr	r7, [pc, #184]	; (d4a68 <_Z20computeSummaryReportv+0x230>)
  max_accx = 0;
   d49ae:	4e2c      	ldr	r6, [pc, #176]	; (d4a60 <_Z20computeSummaryReportv+0x228>)
  max_accy = 0;
   d49b0:	4d2f      	ldr	r5, [pc, #188]	; (d4a70 <_Z20computeSummaryReportv+0x238>)
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d49b2:	4660      	mov	r0, ip
   d49b4:	f002 f930 	bl	d6c18 <_ZN6String6formatEPKcz>
                                  hrv, batt_perc, max_fsr);
   d49b8:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d49bc:	4661      	mov	r1, ip
   d49be:	482f      	ldr	r0, [pc, #188]	; (d4a7c <_Z20computeSummaryReportv+0x244>)
   d49c0:	f002 f8ae 	bl	d6b20 <_ZN6StringaSEOS_>
   d49c4:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d49c8:	4660      	mov	r0, ip
   d49ca:	f002 f813 	bl	d69f4 <_ZN6StringD1Ev>
  max_tp1 = 0;
   d49ce:	2300      	movs	r3, #0
   d49d0:	6023      	str	r3, [r4, #0]
  max_gyrx = 0;
  max_gyry = 0;
  max_gyrz = 0;
  max_fsr = 0;

  baseReadCounter = 0;
   d49d2:	4a13      	ldr	r2, [pc, #76]	; (d4a20 <_Z20computeSummaryReportv+0x1e8>)
  max_accz = 0;
   d49d4:	4c20      	ldr	r4, [pc, #128]	; (d4a58 <_Z20computeSummaryReportv+0x220>)
  max_tp2 = 0;
   d49d6:	603b      	str	r3, [r7, #0]
  max_accx = 0;
   d49d8:	6033      	str	r3, [r6, #0]
  max_accy = 0;
   d49da:	602b      	str	r3, [r5, #0]
  max_accz = 0;
   d49dc:	6023      	str	r3, [r4, #0]
  baseReadCounter = 0;
   d49de:	6013      	str	r3, [r2, #0]
  max_gyrx = 0;
   d49e0:	4f22      	ldr	r7, [pc, #136]	; (d4a6c <_Z20computeSummaryReportv+0x234>)
  max_gyry = 0;
   d49e2:	4e20      	ldr	r6, [pc, #128]	; (d4a64 <_Z20computeSummaryReportv+0x22c>)
  max_gyrz = 0;
   d49e4:	4d1d      	ldr	r5, [pc, #116]	; (d4a5c <_Z20computeSummaryReportv+0x224>)
  max_fsr = 0;
   d49e6:	4c16      	ldr	r4, [pc, #88]	; (d4a40 <_Z20computeSummaryReportv+0x208>)
  tp1ReadCounter = 0;
   d49e8:	4a13      	ldr	r2, [pc, #76]	; (d4a38 <_Z20computeSummaryReportv+0x200>)
  tp2ReadCounter = 0;
   d49ea:	4811      	ldr	r0, [pc, #68]	; (d4a30 <_Z20computeSummaryReportv+0x1f8>)
  fsrReadCounter = 0;
   d49ec:	4913      	ldr	r1, [pc, #76]	; (d4a3c <_Z20computeSummaryReportv+0x204>)
  max_gyrx = 0;
   d49ee:	603b      	str	r3, [r7, #0]
  max_gyry = 0;
   d49f0:	6033      	str	r3, [r6, #0]
  max_gyrz = 0;
   d49f2:	602b      	str	r3, [r5, #0]
  max_fsr = 0;
   d49f4:	6023      	str	r3, [r4, #0]
  tp1ReadCounter = 0;
   d49f6:	6013      	str	r3, [r2, #0]
  tp2ReadCounter = 0;
   d49f8:	6003      	str	r3, [r0, #0]
  fsrReadCounter = 0;
   d49fa:	600b      	str	r3, [r1, #0]
}
   d49fc:	b01f      	add	sp, #124	; 0x7c
   d49fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a02:	bf00      	nop
   d4a04:	f3af 8000 	nop.w
   d4a08:	d2c10294 	.word	0xd2c10294
   d4a0c:	3f5263af 	.word	0x3f5263af
   d4a10:	2003e4d4 	.word	0x2003e4d4
   d4a14:	2003e4b4 	.word	0x2003e4b4
   d4a18:	2003e4bc 	.word	0x2003e4bc
   d4a1c:	2003e4c8 	.word	0x2003e4c8
   d4a20:	2003e4e4 	.word	0x2003e4e4
   d4a24:	2003e4d0 	.word	0x2003e4d0
   d4a28:	2003e4c0 	.word	0x2003e4c0
   d4a2c:	2003e4cc 	.word	0x2003e4cc
   d4a30:	2003e58c 	.word	0x2003e58c
   d4a34:	2003e4dc 	.word	0x2003e4dc
   d4a38:	2003e584 	.word	0x2003e584
   d4a3c:	2003e518 	.word	0x2003e518
   d4a40:	2003e53c 	.word	0x2003e53c
   d4a44:	40080000 	.word	0x40080000
   d4a48:	3ff20000 	.word	0x3ff20000
   d4a4c:	40590000 	.word	0x40590000
   d4a50:	2003e528 	.word	0x2003e528
   d4a54:	2003e560 	.word	0x2003e560
   d4a58:	2003e534 	.word	0x2003e534
   d4a5c:	2003e548 	.word	0x2003e548
   d4a60:	2003e52c 	.word	0x2003e52c
   d4a64:	2003e544 	.word	0x2003e544
   d4a68:	2003e558 	.word	0x2003e558
   d4a6c:	2003e540 	.word	0x2003e540
   d4a70:	2003e530 	.word	0x2003e530
   d4a74:	2003e554 	.word	0x2003e554
   d4a78:	000d7f40 	.word	0x000d7f40
   d4a7c:	2003e568 	.word	0x2003e568
   d4a80:	2003e4d8 	.word	0x2003e4d8
   d4a84:	2003e4b8 	.word	0x2003e4b8
   d4a88:	2003e4e0 	.word	0x2003e4e0
   d4a8c:	2003e4c4 	.word	0x2003e4c4

000d4a90 <_Z17updateSummaryValsPi>:


void updateSummaryVals(int summaryArray[9]){
  avg_tc1 = avg_tc1 + summaryArray[0];
   d4a90:	4a2d      	ldr	r2, [pc, #180]	; (d4b48 <_Z17updateSummaryValsPi+0xb8>)
   d4a92:	6803      	ldr	r3, [r0, #0]
   d4a94:	6811      	ldr	r1, [r2, #0]
   d4a96:	440b      	add	r3, r1
   d4a98:	6013      	str	r3, [r2, #0]
  if(summaryArray[0] > max_tc1){
   d4a9a:	4b2c      	ldr	r3, [pc, #176]	; (d4b4c <_Z17updateSummaryValsPi+0xbc>)
   d4a9c:	6802      	ldr	r2, [r0, #0]
   d4a9e:	6819      	ldr	r1, [r3, #0]
   d4aa0:	428a      	cmp	r2, r1
    max_tc1 = summaryArray[0];
  }
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4aa2:	492b      	ldr	r1, [pc, #172]	; (d4b50 <_Z17updateSummaryValsPi+0xc0>)
    max_tc1 = summaryArray[0];
   d4aa4:	bfc8      	it	gt
   d4aa6:	601a      	strgt	r2, [r3, #0]
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4aa8:	680a      	ldr	r2, [r1, #0]
   d4aaa:	6843      	ldr	r3, [r0, #4]
   d4aac:	441a      	add	r2, r3
   d4aae:	600a      	str	r2, [r1, #0]
  if(summaryArray[1] > max_tc2){
   d4ab0:	4a28      	ldr	r2, [pc, #160]	; (d4b54 <_Z17updateSummaryValsPi+0xc4>)
   d4ab2:	6811      	ldr	r1, [r2, #0]
   d4ab4:	428b      	cmp	r3, r1
    max_tc2 = summaryArray[1];
  }
  avg_accx = avg_accx + summaryArray[2];
   d4ab6:	4928      	ldr	r1, [pc, #160]	; (d4b58 <_Z17updateSummaryValsPi+0xc8>)
    max_tc2 = summaryArray[1];
   d4ab8:	bfc8      	it	gt
   d4aba:	6013      	strgt	r3, [r2, #0]
  avg_accx = avg_accx + summaryArray[2];
   d4abc:	680a      	ldr	r2, [r1, #0]
   d4abe:	6883      	ldr	r3, [r0, #8]
   d4ac0:	441a      	add	r2, r3
   d4ac2:	600a      	str	r2, [r1, #0]
  if(summaryArray[2] > max_accx){
   d4ac4:	4a25      	ldr	r2, [pc, #148]	; (d4b5c <_Z17updateSummaryValsPi+0xcc>)
   d4ac6:	6811      	ldr	r1, [r2, #0]
   d4ac8:	428b      	cmp	r3, r1
    max_accx = summaryArray[2];
  }
  avg_accy = avg_accy + summaryArray[3];
   d4aca:	4925      	ldr	r1, [pc, #148]	; (d4b60 <_Z17updateSummaryValsPi+0xd0>)
    max_accx = summaryArray[2];
   d4acc:	bfc8      	it	gt
   d4ace:	6013      	strgt	r3, [r2, #0]
  avg_accy = avg_accy + summaryArray[3];
   d4ad0:	680a      	ldr	r2, [r1, #0]
   d4ad2:	68c3      	ldr	r3, [r0, #12]
   d4ad4:	441a      	add	r2, r3
   d4ad6:	600a      	str	r2, [r1, #0]
  if(summaryArray[3] > max_accy){
   d4ad8:	4a22      	ldr	r2, [pc, #136]	; (d4b64 <_Z17updateSummaryValsPi+0xd4>)
   d4ada:	6811      	ldr	r1, [r2, #0]
   d4adc:	428b      	cmp	r3, r1
    max_accy = summaryArray[3];
  }
  avg_accz = avg_accz + summaryArray[4];
   d4ade:	4922      	ldr	r1, [pc, #136]	; (d4b68 <_Z17updateSummaryValsPi+0xd8>)
    max_accy = summaryArray[3];
   d4ae0:	bfc8      	it	gt
   d4ae2:	6013      	strgt	r3, [r2, #0]
  avg_accz = avg_accz + summaryArray[4];
   d4ae4:	6903      	ldr	r3, [r0, #16]
   d4ae6:	680a      	ldr	r2, [r1, #0]
   d4ae8:	441a      	add	r2, r3
   d4aea:	600a      	str	r2, [r1, #0]
  if(summaryArray[4] > max_accz){
   d4aec:	4a1f      	ldr	r2, [pc, #124]	; (d4b6c <_Z17updateSummaryValsPi+0xdc>)
   d4aee:	6811      	ldr	r1, [r2, #0]
   d4af0:	428b      	cmp	r3, r1
    max_accz = summaryArray[4];
  }
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4af2:	491f      	ldr	r1, [pc, #124]	; (d4b70 <_Z17updateSummaryValsPi+0xe0>)
    max_accz = summaryArray[4];
   d4af4:	bfc8      	it	gt
   d4af6:	6013      	strgt	r3, [r2, #0]
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4af8:	6943      	ldr	r3, [r0, #20]
   d4afa:	680a      	ldr	r2, [r1, #0]
   d4afc:	441a      	add	r2, r3
   d4afe:	600a      	str	r2, [r1, #0]
  if(summaryArray[5] > max_gyrx){
   d4b00:	4a1c      	ldr	r2, [pc, #112]	; (d4b74 <_Z17updateSummaryValsPi+0xe4>)
   d4b02:	6811      	ldr	r1, [r2, #0]
   d4b04:	428b      	cmp	r3, r1
    max_gyrx = summaryArray[5];
  }
  avg_gyry = avg_gyry + summaryArray[6];
   d4b06:	491c      	ldr	r1, [pc, #112]	; (d4b78 <_Z17updateSummaryValsPi+0xe8>)
    max_gyrx = summaryArray[5];
   d4b08:	bfc8      	it	gt
   d4b0a:	6013      	strgt	r3, [r2, #0]
  avg_gyry = avg_gyry + summaryArray[6];
   d4b0c:	6983      	ldr	r3, [r0, #24]
   d4b0e:	680a      	ldr	r2, [r1, #0]
   d4b10:	441a      	add	r2, r3
   d4b12:	600a      	str	r2, [r1, #0]
  if(summaryArray[6] > max_gyry){
   d4b14:	4a19      	ldr	r2, [pc, #100]	; (d4b7c <_Z17updateSummaryValsPi+0xec>)
   d4b16:	6811      	ldr	r1, [r2, #0]
   d4b18:	428b      	cmp	r3, r1
    max_gyry = summaryArray[6];
  }
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4b1a:	4919      	ldr	r1, [pc, #100]	; (d4b80 <_Z17updateSummaryValsPi+0xf0>)
    max_gyry = summaryArray[6];
   d4b1c:	bfc8      	it	gt
   d4b1e:	6013      	strgt	r3, [r2, #0]
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4b20:	69c3      	ldr	r3, [r0, #28]
   d4b22:	680a      	ldr	r2, [r1, #0]
   d4b24:	441a      	add	r2, r3
   d4b26:	600a      	str	r2, [r1, #0]
  if(summaryArray[7] > max_gyrz){
   d4b28:	4a16      	ldr	r2, [pc, #88]	; (d4b84 <_Z17updateSummaryValsPi+0xf4>)
   d4b2a:	6811      	ldr	r1, [r2, #0]
   d4b2c:	428b      	cmp	r3, r1
    max_gyrz = summaryArray[7];
  }
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4b2e:	4916      	ldr	r1, [pc, #88]	; (d4b88 <_Z17updateSummaryValsPi+0xf8>)
    max_gyrz = summaryArray[7];
   d4b30:	bfc8      	it	gt
   d4b32:	6013      	strgt	r3, [r2, #0]
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4b34:	6a03      	ldr	r3, [r0, #32]
   d4b36:	680a      	ldr	r2, [r1, #0]
   d4b38:	441a      	add	r2, r3
   d4b3a:	600a      	str	r2, [r1, #0]
  if(summaryArray[8] > max_brdtemp){
   d4b3c:	4a13      	ldr	r2, [pc, #76]	; (d4b8c <_Z17updateSummaryValsPi+0xfc>)
   d4b3e:	6811      	ldr	r1, [r2, #0]
   d4b40:	428b      	cmp	r3, r1
    max_brdtemp = summaryArray[8];
   d4b42:	bfc8      	it	gt
   d4b44:	6013      	strgt	r3, [r2, #0]
  }
}
   d4b46:	4770      	bx	lr
   d4b48:	2003e4d4 	.word	0x2003e4d4
   d4b4c:	2003e54c 	.word	0x2003e54c
   d4b50:	2003e4d8 	.word	0x2003e4d8
   d4b54:	2003e550 	.word	0x2003e550
   d4b58:	2003e4b4 	.word	0x2003e4b4
   d4b5c:	2003e52c 	.word	0x2003e52c
   d4b60:	2003e4b8 	.word	0x2003e4b8
   d4b64:	2003e530 	.word	0x2003e530
   d4b68:	2003e4bc 	.word	0x2003e4bc
   d4b6c:	2003e534 	.word	0x2003e534
   d4b70:	2003e4c8 	.word	0x2003e4c8
   d4b74:	2003e540 	.word	0x2003e540
   d4b78:	2003e4cc 	.word	0x2003e4cc
   d4b7c:	2003e544 	.word	0x2003e544
   d4b80:	2003e4d0 	.word	0x2003e4d0
   d4b84:	2003e548 	.word	0x2003e548
   d4b88:	2003e4c0 	.word	0x2003e4c0
   d4b8c:	2003e538 	.word	0x2003e538

000d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b90:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4b92:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4b94:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4b96:	b17c      	cbz	r4, d4bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4b98:	6863      	ldr	r3, [r4, #4]
   d4b9a:	3b01      	subs	r3, #1
   d4b9c:	6063      	str	r3, [r4, #4]
   d4b9e:	b95b      	cbnz	r3, d4bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4ba0:	6823      	ldr	r3, [r4, #0]
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	689b      	ldr	r3, [r3, #8]
   d4ba6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ba8:	68a3      	ldr	r3, [r4, #8]
   d4baa:	3b01      	subs	r3, #1
   d4bac:	60a3      	str	r3, [r4, #8]
   d4bae:	b91b      	cbnz	r3, d4bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4bb0:	6823      	ldr	r3, [r4, #0]
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	68db      	ldr	r3, [r3, #12]
   d4bb6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4bb8:	4628      	mov	r0, r5
   d4bba:	bd38      	pop	{r3, r4, r5, pc}

000d4bbc <loop>:
void loop() {
   d4bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4bc0:	ed2d 8b02 	vpush	{d8}
  if((edaTurnCounter == 1) && ((millis()-edaReadTimer) >= 20)){
   d4bc4:	4cb4      	ldr	r4, [pc, #720]	; (d4e98 <loop+0x2dc>)
void loop() {
   d4bc6:	b091      	sub	sp, #68	; 0x44

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4bc8:	f000 ff86 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
  if((edaTurnCounter == 1) && ((millis()-edaReadTimer) >= 20)){
   d4bcc:	7826      	ldrb	r6, [r4, #0]
   d4bce:	2e01      	cmp	r6, #1
   d4bd0:	4605      	mov	r5, r0
   d4bd2:	d129      	bne.n	d4c28 <loop+0x6c>
   d4bd4:	4fb1      	ldr	r7, [pc, #708]	; (d4e9c <loop+0x2e0>)
   d4bd6:	f000 ff7f 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
   d4bda:	683b      	ldr	r3, [r7, #0]
   d4bdc:	1ac0      	subs	r0, r0, r3
   d4bde:	2813      	cmp	r0, #19
   d4be0:	d922      	bls.n	d4c28 <loop+0x6c>
   d4be2:	f000 ff79 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
    edaReadTimer = millis();
   d4be6:	6038      	str	r0, [r7, #0]
    eda1 = ads_eda.readADC_Differential_0_1();
   d4be8:	48ad      	ldr	r0, [pc, #692]	; (d4ea0 <loop+0x2e4>)
   d4bea:	4fae      	ldr	r7, [pc, #696]	; (d4ea4 <loop+0x2e8>)
   d4bec:	f000 fb0c 	bl	d5208 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4bf0:	49ad      	ldr	r1, [pc, #692]	; (d4ea8 <loop+0x2ec>)
   d4bf2:	6038      	str	r0, [r7, #0]
   d4bf4:	a807      	add	r0, sp, #28
   d4bf6:	f001 ff88 	bl	d6b0a <_ZN6StringC1ERKS_>
    eda1Report = eda1Report + String(eda1) + ' '; //EDA1
   d4bfa:	220a      	movs	r2, #10
   d4bfc:	6839      	ldr	r1, [r7, #0]
   d4bfe:	a803      	add	r0, sp, #12
   d4c00:	f001 ffa8 	bl	d6b54 <_ZN6StringC1Eih>
   d4c04:	a903      	add	r1, sp, #12
   d4c06:	a807      	add	r0, sp, #28
   d4c08:	f001 ffdb 	bl	d6bc2 <_ZplRK15StringSumHelperRK6String>
   d4c0c:	2120      	movs	r1, #32
   d4c0e:	f001 fff9 	bl	d6c04 <_ZplRK15StringSumHelperc>
   d4c12:	4601      	mov	r1, r0
   d4c14:	48a4      	ldr	r0, [pc, #656]	; (d4ea8 <loop+0x2ec>)
   d4c16:	f001 ff69 	bl	d6aec <_ZN6StringaSERKS_>
   d4c1a:	a803      	add	r0, sp, #12
   d4c1c:	f001 feea 	bl	d69f4 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4c20:	a807      	add	r0, sp, #28
   d4c22:	f001 fee7 	bl	d69f4 <_ZN6StringD1Ev>
    edaTurnCounter = 1;
   d4c26:	7026      	strb	r6, [r4, #0]
  tc1 = analogRead(TC1);
   d4c28:	2012      	movs	r0, #18
   d4c2a:	f002 fae5 	bl	d71f8 <analogRead>
   d4c2e:	4a9f      	ldr	r2, [pc, #636]	; (d4eac <loop+0x2f0>)
  tc2 = analogRead(TC2);
   d4c30:	f8df b300 	ldr.w	fp, [pc, #768]	; d4f34 <loop+0x378>
  tc1 = analogRead(TC1);
   d4c34:	6010      	str	r0, [r2, #0]
  tc2 = analogRead(TC2);
   d4c36:	2011      	movs	r0, #17
   d4c38:	f002 fade 	bl	d71f8 <analogRead>
  ICM.getAGMT();  // Update IMU Values
   d4c3c:	499c      	ldr	r1, [pc, #624]	; (d4eb0 <loop+0x2f4>)
  tc2 = analogRead(TC2);
   d4c3e:	f8cb 0000 	str.w	r0, [fp]
  ICM.getAGMT();  // Update IMU Values
   d4c42:	a807      	add	r0, sp, #28
   d4c44:	f000 fcc6 	bl	d55d4 <_ZN9ICM_209487getAGMTEv>
  accx = ICM.accX()*100;
   d4c48:	4899      	ldr	r0, [pc, #612]	; (d4eb0 <loop+0x2f4>)
   d4c4a:	ed9f 8a9a 	vldr	s16, [pc, #616]	; d4eb4 <loop+0x2f8>
   d4c4e:	f8df a2e8 	ldr.w	sl, [pc, #744]	; d4f38 <loop+0x37c>
  accy = ICM.accY()*100;
   d4c52:	f8df 92e8 	ldr.w	r9, [pc, #744]	; d4f3c <loop+0x380>
  accz = ICM.accZ()*100;
   d4c56:	f8df 82e8 	ldr.w	r8, [pc, #744]	; d4f40 <loop+0x384>
  gyrx = ICM.gyrX()*100;
   d4c5a:	4f97      	ldr	r7, [pc, #604]	; (d4eb8 <loop+0x2fc>)
  gyry = ICM.gyrY()*100;
   d4c5c:	4e97      	ldr	r6, [pc, #604]	; (d4ebc <loop+0x300>)
  gyrz = ICM.gyrZ()*100;
   d4c5e:	4c98      	ldr	r4, [pc, #608]	; (d4ec0 <loop+0x304>)
  accx = ICM.accX()*100;
   d4c60:	f000 fd24 	bl	d56ac <_ZN9ICM_209484accXEv>
   d4c64:	ee20 0a08 	vmul.f32	s0, s0, s16
  accy = ICM.accY()*100;
   d4c68:	4891      	ldr	r0, [pc, #580]	; (d4eb0 <loop+0x2f4>)
  accx = ICM.accX()*100;
   d4c6a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4c6e:	ed8a 0a00 	vstr	s0, [sl]
  accy = ICM.accY()*100;
   d4c72:	f000 fd1f 	bl	d56b4 <_ZN9ICM_209484accYEv>
   d4c76:	ee20 0a08 	vmul.f32	s0, s0, s16
  accz = ICM.accZ()*100;
   d4c7a:	488d      	ldr	r0, [pc, #564]	; (d4eb0 <loop+0x2f4>)
  accy = ICM.accY()*100;
   d4c7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4c80:	ed89 0a00 	vstr	s0, [r9]
  accz = ICM.accZ()*100;
   d4c84:	f000 fd1a 	bl	d56bc <_ZN9ICM_209484accZEv>
   d4c88:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyrx = ICM.gyrX()*100;
   d4c8c:	4888      	ldr	r0, [pc, #544]	; (d4eb0 <loop+0x2f4>)
  accz = ICM.accZ()*100;
   d4c8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4c92:	ed88 0a00 	vstr	s0, [r8]
  gyrx = ICM.gyrX()*100;
   d4c96:	f000 fd5d 	bl	d5754 <_ZN9ICM_209484gyrXEv>
   d4c9a:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyry = ICM.gyrY()*100;
   d4c9e:	4884      	ldr	r0, [pc, #528]	; (d4eb0 <loop+0x2f4>)
  gyrx = ICM.gyrX()*100;
   d4ca0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4ca4:	ed87 0a00 	vstr	s0, [r7]
  gyry = ICM.gyrY()*100;
   d4ca8:	f000 fd58 	bl	d575c <_ZN9ICM_209484gyrYEv>
   d4cac:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyrz = ICM.gyrZ()*100;
   d4cb0:	487f      	ldr	r0, [pc, #508]	; (d4eb0 <loop+0x2f4>)
  gyry = ICM.gyrY()*100;
   d4cb2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4cb6:	ed86 0a00 	vstr	s0, [r6]
  gyrz = ICM.gyrZ()*100;
   d4cba:	f000 fd53 	bl	d5764 <_ZN9ICM_209484gyrZEv>
   d4cbe:	ee20 0a08 	vmul.f32	s0, s0, s16
  brdtemp = ICM.temp()*100;
   d4cc2:	487b      	ldr	r0, [pc, #492]	; (d4eb0 <loop+0x2f4>)
  gyrz = ICM.gyrZ()*100;
   d4cc4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d4cc8:	ed84 0a00 	vstr	s0, [r4]
  brdtemp = ICM.temp()*100;
   d4ccc:	f000 fd50 	bl	d5770 <_ZN9ICM_209484tempEv>
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4cd0:	4a76      	ldr	r2, [pc, #472]	; (d4eac <loop+0x2f0>)
  brdtemp = ICM.temp()*100;
   d4cd2:	497c      	ldr	r1, [pc, #496]	; (d4ec4 <loop+0x308>)
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4cd4:	6812      	ldr	r2, [r2, #0]
   d4cd6:	9207      	str	r2, [sp, #28]
   d4cd8:	f8db 2000 	ldr.w	r2, [fp]
   d4cdc:	9208      	str	r2, [sp, #32]
   d4cde:	f8da 2000 	ldr.w	r2, [sl]
   d4ce2:	9209      	str	r2, [sp, #36]	; 0x24
  brdtemp = ICM.temp()*100;
   d4ce4:	ee20 0a08 	vmul.f32	s0, s0, s16
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4ce8:	f8d9 2000 	ldr.w	r2, [r9]
   d4cec:	920a      	str	r2, [sp, #40]	; 0x28
   d4cee:	f8d8 2000 	ldr.w	r2, [r8]
   d4cf2:	920b      	str	r2, [sp, #44]	; 0x2c
  brdtemp = ICM.temp()*100;
   d4cf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4cf8:	683a      	ldr	r2, [r7, #0]
   d4cfa:	920c      	str	r2, [sp, #48]	; 0x30
   d4cfc:	6832      	ldr	r2, [r6, #0]
   d4cfe:	920d      	str	r2, [sp, #52]	; 0x34
  brdtemp = ICM.temp()*100;
   d4d00:	ee17 3a90 	vmov	r3, s15
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d04:	6822      	ldr	r2, [r4, #0]
  brdtemp = ICM.temp()*100;
   d4d06:	edc1 7a00 	vstr	s15, [r1]
  int summaryArray[9] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp};
   d4d0a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  baseReadCounter++;
   d4d0e:	4a6e      	ldr	r2, [pc, #440]	; (d4ec8 <loop+0x30c>)
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d4d10:	4c6e      	ldr	r4, [pc, #440]	; (d4ecc <loop+0x310>)
  baseReadCounter++;
   d4d12:	6813      	ldr	r3, [r2, #0]
  updateSummaryVals(summaryArray);
   d4d14:	a807      	add	r0, sp, #28
  baseReadCounter++;
   d4d16:	3301      	adds	r3, #1
   d4d18:	6013      	str	r3, [r2, #0]
  updateSummaryVals(summaryArray);
   d4d1a:	f7ff feb9 	bl	d4a90 <_Z17updateSummaryValsPi>
  PulseSensorAmped.process();
   d4d1e:	486c      	ldr	r0, [pc, #432]	; (d4ed0 <loop+0x314>)
   d4d20:	f000 fbe8 	bl	d54f4 <_ZN21PulseSensorAmpedClass7processEv>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4d24:	f000 fed0 	bl	d5ac8 <HAL_Timer_Get_Micro_Seconds>
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d4d28:	6823      	ldr	r3, [r4, #0]
   d4d2a:	1ac0      	subs	r0, r0, r3
   d4d2c:	f240 53dc 	movw	r3, #1500	; 0x5dc
   d4d30:	4298      	cmp	r0, r3
   d4d32:	d91f      	bls.n	d4d74 <loop+0x1b8>
   d4d34:	f000 fec8 	bl	d5ac8 <HAL_Timer_Get_Micro_Seconds>
    otherReadTimer = micros();
   d4d38:	6020      	str	r0, [r4, #0]
    switch (readTurnCounter){ //Take turns reading from each line
   d4d3a:	4c66      	ldr	r4, [pc, #408]	; (d4ed4 <loop+0x318>)
   d4d3c:	7823      	ldrb	r3, [r4, #0]
   d4d3e:	2b02      	cmp	r3, #2
   d4d40:	d040      	beq.n	d4dc4 <loop+0x208>
   d4d42:	2b03      	cmp	r3, #3
   d4d44:	d053      	beq.n	d4dee <loop+0x232>
   d4d46:	2b01      	cmp	r3, #1
   d4d48:	d114      	bne.n	d4d74 <loop+0x1b8>
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d4d4a:	4863      	ldr	r0, [pc, #396]	; (d4ed8 <loop+0x31c>)
   d4d4c:	2100      	movs	r1, #0
   d4d4e:	f000 fa32 	bl	d51b6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp1 = avg_tp1 + tp1;
   d4d52:	4a62      	ldr	r2, [pc, #392]	; (d4edc <loop+0x320>)
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d4d54:	4b62      	ldr	r3, [pc, #392]	; (d4ee0 <loop+0x324>)
   d4d56:	6018      	str	r0, [r3, #0]
        avg_tp1 = avg_tp1 + tp1;
   d4d58:	6813      	ldr	r3, [r2, #0]
   d4d5a:	4403      	add	r3, r0
   d4d5c:	6013      	str	r3, [r2, #0]
        if(tp1 > max_tp1){
   d4d5e:	4b61      	ldr	r3, [pc, #388]	; (d4ee4 <loop+0x328>)
   d4d60:	681a      	ldr	r2, [r3, #0]
   d4d62:	4290      	cmp	r0, r2
        tp1ReadCounter++;
   d4d64:	4a60      	ldr	r2, [pc, #384]	; (d4ee8 <loop+0x32c>)
          max_tp1 = tp1;
   d4d66:	bfc8      	it	gt
   d4d68:	6018      	strgt	r0, [r3, #0]
        tp1ReadCounter++;
   d4d6a:	6813      	ldr	r3, [r2, #0]
   d4d6c:	3301      	adds	r3, #1
   d4d6e:	6013      	str	r3, [r2, #0]
        readTurnCounter = 2;
   d4d70:	2302      	movs	r3, #2
        readTurnCounter = 1;
   d4d72:	7023      	strb	r3, [r4, #0]
  if((millis() - reportTimer) >= 1001){
   d4d74:	4c5d      	ldr	r4, [pc, #372]	; (d4eec <loop+0x330>)
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4d76:	f000 feaf 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
   d4d7a:	6823      	ldr	r3, [r4, #0]
   d4d7c:	1ac0      	subs	r0, r0, r3
   d4d7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4d82:	d908      	bls.n	d4d96 <loop+0x1da>
   d4d84:	f000 fea8 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
    reportTimer = millis();
   d4d88:	6020      	str	r0, [r4, #0]
    switch (reportTurnCounter){
   d4d8a:	4c59      	ldr	r4, [pc, #356]	; (d4ef0 <loop+0x334>)
   d4d8c:	7823      	ldrb	r3, [r4, #0]
   d4d8e:	2b01      	cmp	r3, #1
   d4d90:	d042      	beq.n	d4e18 <loop+0x25c>
   d4d92:	2b03      	cmp	r3, #3
   d4d94:	d067      	beq.n	d4e66 <loop+0x2aa>
   Serial.print("Loop Time: ");
   d4d96:	f002 f87b 	bl	d6e90 <_Z16_fetch_usbserialv>
   d4d9a:	4956      	ldr	r1, [pc, #344]	; (d4ef4 <loop+0x338>)
   d4d9c:	f001 fdb8 	bl	d6910 <_ZN5Print5printEPKc>
   Serial.println((millis() - loopTimer));
   d4da0:	f002 f876 	bl	d6e90 <_Z16_fetch_usbserialv>
   d4da4:	4604      	mov	r4, r0
   d4da6:	f000 fe97 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4daa:	220a      	movs	r2, #10
   d4dac:	1b41      	subs	r1, r0, r5
   d4dae:	4620      	mov	r0, r4
   d4db0:	f001 fdcf 	bl	d6952 <_ZN5Print11printNumberEmh>
        n += println();
   d4db4:	4620      	mov	r0, r4
   d4db6:	f001 fdb6 	bl	d6926 <_ZN5Print7printlnEv>
}
   d4dba:	b011      	add	sp, #68	; 0x44
   d4dbc:	ecbd 8b02 	vpop	{d8}
   d4dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d4dc4:	4844      	ldr	r0, [pc, #272]	; (d4ed8 <loop+0x31c>)
   d4dc6:	2101      	movs	r1, #1
   d4dc8:	f000 f9f5 	bl	d51b6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp2 = avg_tp2 + tp2;
   d4dcc:	4a4a      	ldr	r2, [pc, #296]	; (d4ef8 <loop+0x33c>)
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d4dce:	4b4b      	ldr	r3, [pc, #300]	; (d4efc <loop+0x340>)
   d4dd0:	6018      	str	r0, [r3, #0]
        avg_tp2 = avg_tp2 + tp2;
   d4dd2:	6813      	ldr	r3, [r2, #0]
   d4dd4:	4403      	add	r3, r0
   d4dd6:	6013      	str	r3, [r2, #0]
        if(tp2 > max_tp2){
   d4dd8:	4b49      	ldr	r3, [pc, #292]	; (d4f00 <loop+0x344>)
   d4dda:	681a      	ldr	r2, [r3, #0]
   d4ddc:	4290      	cmp	r0, r2
        tp2ReadCounter++;
   d4dde:	4a49      	ldr	r2, [pc, #292]	; (d4f04 <loop+0x348>)
          max_tp2 = tp2;
   d4de0:	bfc8      	it	gt
   d4de2:	6018      	strgt	r0, [r3, #0]
        tp2ReadCounter++;
   d4de4:	6813      	ldr	r3, [r2, #0]
   d4de6:	3301      	adds	r3, #1
   d4de8:	6013      	str	r3, [r2, #0]
        readTurnCounter = 3;
   d4dea:	2303      	movs	r3, #3
   d4dec:	e7c1      	b.n	d4d72 <loop+0x1b6>
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d4dee:	483a      	ldr	r0, [pc, #232]	; (d4ed8 <loop+0x31c>)
   d4df0:	2102      	movs	r1, #2
   d4df2:	f000 f9e0 	bl	d51b6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_fsr = avg_fsr + fsr;
   d4df6:	4a44      	ldr	r2, [pc, #272]	; (d4f08 <loop+0x34c>)
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d4df8:	4b44      	ldr	r3, [pc, #272]	; (d4f0c <loop+0x350>)
   d4dfa:	6018      	str	r0, [r3, #0]
        avg_fsr = avg_fsr + fsr;
   d4dfc:	6813      	ldr	r3, [r2, #0]
   d4dfe:	4403      	add	r3, r0
   d4e00:	6013      	str	r3, [r2, #0]
        if(fsr > max_fsr){
   d4e02:	4b43      	ldr	r3, [pc, #268]	; (d4f10 <loop+0x354>)
   d4e04:	681a      	ldr	r2, [r3, #0]
   d4e06:	4290      	cmp	r0, r2
        fsrReadCounter++;
   d4e08:	4a42      	ldr	r2, [pc, #264]	; (d4f14 <loop+0x358>)
          max_fsr = fsr;
   d4e0a:	bfc8      	it	gt
   d4e0c:	6018      	strgt	r0, [r3, #0]
        fsrReadCounter++;
   d4e0e:	6813      	ldr	r3, [r2, #0]
   d4e10:	3301      	adds	r3, #1
   d4e12:	6013      	str	r3, [r2, #0]
        readTurnCounter = 1;
   d4e14:	2301      	movs	r3, #1
   d4e16:	e7ac      	b.n	d4d72 <loop+0x1b6>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e18:	f000 ffd4 	bl	d5dc4 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4e1c:	b1e0      	cbz	r0, d4e58 <loop+0x29c>
	StringSumHelper(const String &s) : String(s) {}
   d4e1e:	4e22      	ldr	r6, [pc, #136]	; (d4ea8 <loop+0x2ec>)
   d4e20:	a803      	add	r0, sp, #12
   d4e22:	4631      	mov	r1, r6
   d4e24:	f001 fe71 	bl	d6b0a <_ZN6StringC1ERKS_>
          eda1Report = eda1Report + "\"}";
   d4e28:	493b      	ldr	r1, [pc, #236]	; (d4f18 <loop+0x35c>)
   d4e2a:	a803      	add	r0, sp, #12
   d4e2c:	f001 fed5 	bl	d6bda <_ZplRK15StringSumHelperPKc>
   d4e30:	4601      	mov	r1, r0
   d4e32:	4630      	mov	r0, r6
   d4e34:	f001 fe5a 	bl	d6aec <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d4e38:	a803      	add	r0, sp, #12
   d4e3a:	f001 fddb 	bl	d69f4 <_ZN6StringD1Ev>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4e3e:	4b37      	ldr	r3, [pc, #220]	; (d4f1c <loop+0x360>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e40:	4937      	ldr	r1, [pc, #220]	; (d4f20 <loop+0x364>)
   d4e42:	781b      	ldrb	r3, [r3, #0]
   d4e44:	f88d 3000 	strb.w	r3, [sp]
   d4e48:	a803      	add	r0, sp, #12
   d4e4a:	6832      	ldr	r2, [r6, #0]
   d4e4c:	233c      	movs	r3, #60	; 0x3c
   d4e4e:	f001 f9d5 	bl	d61fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e52:	a804      	add	r0, sp, #16
   d4e54:	f7ff fe9c 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        eda1Report = "{ \"EDA1\": \"";
   d4e58:	4932      	ldr	r1, [pc, #200]	; (d4f24 <loop+0x368>)
   d4e5a:	4813      	ldr	r0, [pc, #76]	; (d4ea8 <loop+0x2ec>)
   d4e5c:	f001 fe68 	bl	d6b30 <_ZN6StringaSEPKc>
        reportTurnCounter = 3;
   d4e60:	2303      	movs	r3, #3
        reportTurnCounter = 1;
   d4e62:	7023      	strb	r3, [r4, #0]
        break;
   d4e64:	e797      	b.n	d4d96 <loop+0x1da>
        computeSummaryReport();
   d4e66:	f7ff fce7 	bl	d4838 <_Z20computeSummaryReportv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e6a:	f000 ffab 	bl	d5dc4 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d4e6e:	b168      	cbz	r0, d4e8c <loop+0x2d0>
   d4e70:	4b2a      	ldr	r3, [pc, #168]	; (d4f1c <loop+0x360>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4e72:	4a2d      	ldr	r2, [pc, #180]	; (d4f28 <loop+0x36c>)
   d4e74:	781b      	ldrb	r3, [r3, #0]
   d4e76:	f88d 3000 	strb.w	r3, [sp]
   d4e7a:	a803      	add	r0, sp, #12
   d4e7c:	6812      	ldr	r2, [r2, #0]
   d4e7e:	492b      	ldr	r1, [pc, #172]	; (d4f2c <loop+0x370>)
   d4e80:	233c      	movs	r3, #60	; 0x3c
   d4e82:	f001 f9bb 	bl	d61fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4e86:	a804      	add	r0, sp, #16
   d4e88:	f7ff fe82 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        summaryReport = "";
   d4e8c:	4928      	ldr	r1, [pc, #160]	; (d4f30 <loop+0x374>)
   d4e8e:	4826      	ldr	r0, [pc, #152]	; (d4f28 <loop+0x36c>)
   d4e90:	f001 fe4e 	bl	d6b30 <_ZN6StringaSEPKc>
        reportTurnCounter = 1;
   d4e94:	2301      	movs	r3, #1
   d4e96:	e7e4      	b.n	d4e62 <loop+0x2a6>
   d4e98:	2003e3e8 	.word	0x2003e3e8
   d4e9c:	2003e510 	.word	0x2003e510
   d4ea0:	2003e4a8 	.word	0x2003e4a8
   d4ea4:	2003e4ec 	.word	0x2003e4ec
   d4ea8:	2003e4f0 	.word	0x2003e4f0
   d4eac:	2003e578 	.word	0x2003e578
   d4eb0:	2003e464 	.word	0x2003e464
   d4eb4:	42c80000 	.word	0x42c80000
   d4eb8:	2003e51c 	.word	0x2003e51c
   d4ebc:	2003e520 	.word	0x2003e520
   d4ec0:	2003e524 	.word	0x2003e524
   d4ec4:	2003e4e8 	.word	0x2003e4e8
   d4ec8:	2003e4e4 	.word	0x2003e4e4
   d4ecc:	2003e55c 	.word	0x2003e55c
   d4ed0:	2003e590 	.word	0x2003e590
   d4ed4:	2003e3e9 	.word	0x2003e3e9
   d4ed8:	2003e4ae 	.word	0x2003e4ae
   d4edc:	2003e4dc 	.word	0x2003e4dc
   d4ee0:	2003e580 	.word	0x2003e580
   d4ee4:	2003e554 	.word	0x2003e554
   d4ee8:	2003e584 	.word	0x2003e584
   d4eec:	2003e564 	.word	0x2003e564
   d4ef0:	2003e3ea 	.word	0x2003e3ea
   d4ef4:	000d813b 	.word	0x000d813b
   d4ef8:	2003e4e0 	.word	0x2003e4e0
   d4efc:	2003e588 	.word	0x2003e588
   d4f00:	2003e558 	.word	0x2003e558
   d4f04:	2003e58c 	.word	0x2003e58c
   d4f08:	2003e4c4 	.word	0x2003e4c4
   d4f0c:	2003e514 	.word	0x2003e514
   d4f10:	2003e53c 	.word	0x2003e53c
   d4f14:	2003e518 	.word	0x2003e518
   d4f18:	000d8119 	.word	0x000d8119
   d4f1c:	2003e498 	.word	0x2003e498
   d4f20:	000d811c 	.word	0x000d811c
   d4f24:	000d8121 	.word	0x000d8121
   d4f28:	2003e568 	.word	0x2003e568
   d4f2c:	000d812d 	.word	0x000d812d
   d4f30:	000d816e 	.word	0x000d816e
   d4f34:	2003e57c 	.word	0x2003e57c
   d4f38:	2003e49c 	.word	0x2003e49c
   d4f3c:	2003e4a0 	.word	0x2003e4a0
   d4f40:	2003e4a4 	.word	0x2003e4a4

000d4f44 <_GLOBAL__sub_I_reportTurnCounter>:
      delay(500);
    }else{
      initialized = true;
    }
  }
   d4f44:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   d4f46:	4b18      	ldr	r3, [pc, #96]	; (d4fa8 <_GLOBAL__sub_I_reportTurnCounter+0x64>)
String eda1Report = "";
   d4f48:	4d18      	ldr	r5, [pc, #96]	; (d4fac <_GLOBAL__sub_I_reportTurnCounter+0x68>)
   d4f4a:	4e19      	ldr	r6, [pc, #100]	; (d4fb0 <_GLOBAL__sub_I_reportTurnCounter+0x6c>)
   d4f4c:	4c19      	ldr	r4, [pc, #100]	; (d4fb4 <_GLOBAL__sub_I_reportTurnCounter+0x70>)
   d4f4e:	2201      	movs	r2, #1
   d4f50:	701a      	strb	r2, [r3, #0]
   d4f52:	4629      	mov	r1, r5
   d4f54:	4630      	mov	r0, r6
   d4f56:	f001 fd98 	bl	d6a8a <_ZN6StringC1EPKc>
   d4f5a:	4630      	mov	r0, r6
String eda2Report = "";
   d4f5c:	4e16      	ldr	r6, [pc, #88]	; (d4fb8 <_GLOBAL__sub_I_reportTurnCounter+0x74>)
String eda1Report = "";
   d4f5e:	4a17      	ldr	r2, [pc, #92]	; (d4fbc <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4f60:	4621      	mov	r1, r4
   d4f62:	f002 fb0f 	bl	d7584 <__aeabi_atexit>
String eda2Report = "";
   d4f66:	4629      	mov	r1, r5
   d4f68:	4630      	mov	r0, r6
   d4f6a:	f001 fd8e 	bl	d6a8a <_ZN6StringC1EPKc>
   d4f6e:	4630      	mov	r0, r6
String summaryReport = "";
   d4f70:	4e13      	ldr	r6, [pc, #76]	; (d4fc0 <_GLOBAL__sub_I_reportTurnCounter+0x7c>)
String eda2Report = "";
   d4f72:	4a12      	ldr	r2, [pc, #72]	; (d4fbc <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4f74:	4621      	mov	r1, r4
   d4f76:	f002 fb05 	bl	d7584 <__aeabi_atexit>
String summaryReport = "";
   d4f7a:	4629      	mov	r1, r5
   d4f7c:	4630      	mov	r0, r6
   d4f7e:	f001 fd84 	bl	d6a8a <_ZN6StringC1EPKc>
   d4f82:	4621      	mov	r1, r4
   d4f84:	4a0d      	ldr	r2, [pc, #52]	; (d4fbc <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4f86:	4630      	mov	r0, r6
   d4f88:	f002 fafc 	bl	d7584 <__aeabi_atexit>
ICM_20948_I2C ICM;
   d4f8c:	480d      	ldr	r0, [pc, #52]	; (d4fc4 <_GLOBAL__sub_I_reportTurnCounter+0x80>)
   d4f8e:	f000 fca3 	bl	d58d8 <_ZN13ICM_20948_I2CC1Ev>
Adafruit_ADS1115 ads_other(0x48);
   d4f92:	2148      	movs	r1, #72	; 0x48
   d4f94:	480c      	ldr	r0, [pc, #48]	; (d4fc8 <_GLOBAL__sub_I_reportTurnCounter+0x84>)
   d4f96:	f000 f8fe 	bl	d5196 <_ZN16Adafruit_ADS1115C1Eh>
   d4f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_ADS1115 ads_eda(0x49);
   d4f9e:	480b      	ldr	r0, [pc, #44]	; (d4fcc <_GLOBAL__sub_I_reportTurnCounter+0x88>)
   d4fa0:	2149      	movs	r1, #73	; 0x49
   d4fa2:	f000 b8f8 	b.w	d5196 <_ZN16Adafruit_ADS1115C1Eh>
   d4fa6:	bf00      	nop
   d4fa8:	2003e498 	.word	0x2003e498
   d4fac:	000d816e 	.word	0x000d816e
   d4fb0:	2003e4f0 	.word	0x2003e4f0
   d4fb4:	000d69f5 	.word	0x000d69f5
   d4fb8:	2003e500 	.word	0x2003e500
   d4fbc:	2003e45c 	.word	0x2003e45c
   d4fc0:	2003e568 	.word	0x2003e568
   d4fc4:	2003e460 	.word	0x2003e460
   d4fc8:	2003e4ae 	.word	0x2003e4ae
   d4fcc:	2003e4a8 	.word	0x2003e4a8

000d4fd0 <_Z13initializeIMUv>:
void initializeIMU(){
   d4fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ICM.begin( Wire, AD0_VAL );
   d4fd2:	4d14      	ldr	r5, [pc, #80]	; (d5024 <_Z13initializeIMUv+0x54>)
    Serial.print( F("Initialization of the sensor returned: ") );
   d4fd4:	4e14      	ldr	r6, [pc, #80]	; (d5028 <_Z13initializeIMUv+0x58>)
    Serial.println( ICM.statusString() );
   d4fd6:	1d2f      	adds	r7, r5, #4
    ICM.begin( Wire, AD0_VAL );
   d4fd8:	f002 f93e 	bl	d7258 <_Z19__fetch_global_Wirev>
   d4fdc:	23ff      	movs	r3, #255	; 0xff
   d4fde:	2200      	movs	r2, #0
   d4fe0:	4601      	mov	r1, r0
   d4fe2:	4810      	ldr	r0, [pc, #64]	; (d5024 <_Z13initializeIMUv+0x54>)
   d4fe4:	f000 fd22 	bl	d5a2c <_ZN13ICM_20948_I2C5beginER7TwoWirebh>
    Serial.print( F("Initialization of the sensor returned: ") );
   d4fe8:	f001 ff52 	bl	d6e90 <_Z16_fetch_usbserialv>
   d4fec:	4631      	mov	r1, r6
   d4fee:	f001 fc96 	bl	d691e <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println( ICM.statusString() );
   d4ff2:	f001 ff4d 	bl	d6e90 <_Z16_fetch_usbserialv>
   d4ff6:	2108      	movs	r1, #8
   d4ff8:	4604      	mov	r4, r0
   d4ffa:	4638      	mov	r0, r7
   d4ffc:	f000 fbda 	bl	d57b4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>
   d5000:	4601      	mov	r1, r0
   d5002:	4620      	mov	r0, r4
   d5004:	f001 fc9b 	bl	d693e <_ZN5Print7printlnEPKc>
    if( ICM.status != ICM_20948_Stat_Ok ){
   d5008:	f895 3020 	ldrb.w	r3, [r5, #32]
   d500c:	b14b      	cbz	r3, d5022 <_Z13initializeIMUv+0x52>
      Serial.println( "Trying again..." );
   d500e:	f001 ff3f 	bl	d6e90 <_Z16_fetch_usbserialv>
   d5012:	4906      	ldr	r1, [pc, #24]	; (d502c <_Z13initializeIMUv+0x5c>)
   d5014:	f001 fc93 	bl	d693e <_ZN5Print7printlnEPKc>
      delay(500);
   d5018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d501c:	f000 ff72 	bl	d5f04 <delay>
   d5020:	e7da      	b.n	d4fd8 <_Z13initializeIMUv+0x8>
   d5022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5024:	2003e460 	.word	0x2003e460
   d5028:	000d8147 	.word	0x000d8147
   d502c:	000d816f 	.word	0x000d816f

000d5030 <setup>:
void setup() {
   d5030:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(115200);
   d5032:	f001 ff2d 	bl	d6e90 <_Z16_fetch_usbserialv>
   d5036:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d503a:	f001 ff1d 	bl	d6e78 <_ZN9USBSerial5beginEl>
  Wire.begin();
   d503e:	f002 f90b 	bl	d7258 <_Z19__fetch_global_Wirev>
   d5042:	f001 fad1 	bl	d65e8 <_ZN7TwoWire5beginEv>
  Wire.setClock(400000);  //The IMU is capped at the 400khz level
   d5046:	f002 f907 	bl	d7258 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d504a:	4927      	ldr	r1, [pc, #156]	; (d50e8 <setup+0xb8>)
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d504c:	4d27      	ldr	r5, [pc, #156]	; (d50ec <setup+0xbc>)
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d504e:	4c28      	ldr	r4, [pc, #160]	; (d50f0 <setup+0xc0>)
   d5050:	f001 fac6 	bl	d65e0 <_ZN7TwoWire8setSpeedEm>
  initializeIMU();  // ***This will become blocking when we add the Rev3 sleep code ***
   d5054:	f7ff ffbc 	bl	d4fd0 <_Z13initializeIMUv>
  pinMode(TC1,INPUT);  //Local temp compensation PTC resistors from the thermopile assemblies
   d5058:	2100      	movs	r1, #0
   d505a:	2012      	movs	r0, #18
   d505c:	f002 f8a2 	bl	d71a4 <pinMode>
  pinMode(TC2,INPUT);
   d5060:	2100      	movs	r1, #0
   d5062:	2011      	movs	r0, #17
   d5064:	f002 f89e 	bl	d71a4 <pinMode>
  pinMode(eda1_out,OUTPUT);  //To send voltage out into the hand
   d5068:	2101      	movs	r1, #1
   d506a:	2005      	movs	r0, #5
   d506c:	f002 f89a 	bl	d71a4 <pinMode>
  pinMode(eda2_out,OUTPUT);
   d5070:	2101      	movs	r1, #1
   d5072:	2004      	movs	r0, #4
   d5074:	f002 f896 	bl	d71a4 <pinMode>
  pinMode(led_on,OUTPUT);  //To turn the pulse LED on
   d5078:	2101      	movs	r1, #1
   d507a:	2007      	movs	r0, #7
   d507c:	f002 f892 	bl	d71a4 <pinMode>
  pinMode(slp,OUTPUT);  //To turn off much of the board functionality when not in use
   d5080:	2101      	movs	r1, #1
   d5082:	2008      	movs	r0, #8
   d5084:	f002 f88e 	bl	d71a4 <pinMode>
  digitalWrite(eda1_out,HIGH);  //On constant for now, later only have this on sometimes to prevent shorts
   d5088:	2101      	movs	r1, #1
   d508a:	2005      	movs	r0, #5
   d508c:	f002 f89b 	bl	d71c6 <digitalWrite>
  digitalWrite(eda2_out,HIGH);
   d5090:	2101      	movs	r1, #1
   d5092:	2004      	movs	r0, #4
   d5094:	f002 f897 	bl	d71c6 <digitalWrite>
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d5098:	2100      	movs	r1, #0
   d509a:	4628      	mov	r0, r5
   d509c:	f000 f889 	bl	d51b2 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d50a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   d50a4:	4620      	mov	r0, r4
   d50a6:	f000 f884 	bl	d51b2 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_other.begin();
   d50aa:	4628      	mov	r0, r5
   d50ac:	f000 f87a 	bl	d51a4 <_ZN16Adafruit_ADS10155beginEv>
  ads_eda.begin();
   d50b0:	4620      	mov	r0, r4
   d50b2:	f000 f877 	bl	d51a4 <_ZN16Adafruit_ADS10155beginEv>
  digitalWrite(led_on,HIGH);  //For now this is on all the time.  Doesn't seem to work well with the library if partiall off.
   d50b6:	2101      	movs	r1, #1
   d50b8:	2007      	movs	r0, #7
   d50ba:	f002 f884 	bl	d71c6 <digitalWrite>
  PulseSensorAmped.attach(PULSE_SIGNAL_PIN);
   d50be:	210f      	movs	r1, #15
   d50c0:	480c      	ldr	r0, [pc, #48]	; (d50f4 <setup+0xc4>)
   d50c2:	f000 f90b 	bl	d52dc <_ZN21PulseSensorAmpedClass6attachEi>
  PulseSensorAmped.start();  //Start reading heart beats
   d50c6:	480b      	ldr	r0, [pc, #44]	; (d50f4 <setup+0xc4>)
   d50c8:	f000 f910 	bl	d52ec <_ZN21PulseSensorAmpedClass5startEv>
   d50cc:	f000 fd04 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
  reportTimer = millis();  //Timer to avoid sending reports more than once per second (Particle cap)
   d50d0:	4b09      	ldr	r3, [pc, #36]	; (d50f8 <setup+0xc8>)
   d50d2:	6018      	str	r0, [r3, #0]
   d50d4:	f000 fd00 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
  edaReadTimer = millis();  //Timer to rate limit EDA readings to the Particle publishing size cap (622 bytes)
   d50d8:	4b08      	ldr	r3, [pc, #32]	; (d50fc <setup+0xcc>)
   d50da:	6018      	str	r0, [r3, #0]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d50dc:	f000 fcf4 	bl	d5ac8 <HAL_Timer_Get_Micro_Seconds>
  otherReadTimer = micros();  //Timer to rate limit the other ADS signals to the max rate of the ADS1115
   d50e0:	4b07      	ldr	r3, [pc, #28]	; (d5100 <setup+0xd0>)
   d50e2:	6018      	str	r0, [r3, #0]
}
   d50e4:	bd38      	pop	{r3, r4, r5, pc}
   d50e6:	bf00      	nop
   d50e8:	00061a80 	.word	0x00061a80
   d50ec:	2003e4ae 	.word	0x2003e4ae
   d50f0:	2003e4a8 	.word	0x2003e4a8
   d50f4:	2003e590 	.word	0x2003e590
   d50f8:	2003e564 	.word	0x2003e564
   d50fc:	2003e510 	.word	0x2003e510
   d5100:	2003e55c 	.word	0x2003e55c

000d5104 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
   d5104:	b507      	push	{r0, r1, r2, lr}
   d5106:	9001      	str	r0, [sp, #4]
  #if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d5108:	f002 f8a6 	bl	d7258 <_Z19__fetch_global_Wirev>
   d510c:	6803      	ldr	r3, [r0, #0]
   d510e:	9901      	ldr	r1, [sp, #4]
   d5110:	689b      	ldr	r3, [r3, #8]
  #else
  Wire.send(x);
  #endif
}
   d5112:	b003      	add	sp, #12
   d5114:	f85d eb04 	ldr.w	lr, [sp], #4
  Wire.write((uint8_t)x);
   d5118:	4718      	bx	r3

000d511a <_ZL7i2creadv>:
static uint8_t i2cread(void) {
   d511a:	b508      	push	{r3, lr}
  return Wire.read();
   d511c:	f002 f89c 	bl	d7258 <_Z19__fetch_global_Wirev>
   d5120:	6803      	ldr	r3, [r0, #0]
   d5122:	695b      	ldr	r3, [r3, #20]
   d5124:	4798      	blx	r3
}
   d5126:	b2c0      	uxtb	r0, r0
   d5128:	bd08      	pop	{r3, pc}

000d512a <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
   d512a:	b570      	push	{r4, r5, r6, lr}
   d512c:	4606      	mov	r6, r0
   d512e:	4614      	mov	r4, r2
   d5130:	460d      	mov	r5, r1
  Wire.beginTransmission(i2cAddress);
   d5132:	f002 f891 	bl	d7258 <_Z19__fetch_global_Wirev>
   d5136:	4631      	mov	r1, r6
   d5138:	f001 fa88 	bl	d664c <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
   d513c:	4628      	mov	r0, r5
   d513e:	f7ff ffe1 	bl	d5104 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
   d5142:	0a20      	lsrs	r0, r4, #8
   d5144:	f7ff ffde 	bl	d5104 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
   d5148:	b2e0      	uxtb	r0, r4
   d514a:	f7ff ffdb 	bl	d5104 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d514e:	f002 f883 	bl	d7258 <_Z19__fetch_global_Wirev>
}
   d5152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d5156:	f001 ba81 	b.w	d665c <_ZN7TwoWire15endTransmissionEv>

000d515a <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
   d515a:	b513      	push	{r0, r1, r4, lr}
   d515c:	9001      	str	r0, [sp, #4]
  Wire.beginTransmission(i2cAddress);
   d515e:	f002 f87b 	bl	d7258 <_Z19__fetch_global_Wirev>
   d5162:	9901      	ldr	r1, [sp, #4]
   d5164:	f001 fa72 	bl	d664c <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
   d5168:	2000      	movs	r0, #0
   d516a:	f7ff ffcb 	bl	d5104 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d516e:	f002 f873 	bl	d7258 <_Z19__fetch_global_Wirev>
   d5172:	f001 fa73 	bl	d665c <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
   d5176:	f002 f86f 	bl	d7258 <_Z19__fetch_global_Wirev>
   d517a:	9901      	ldr	r1, [sp, #4]
   d517c:	2202      	movs	r2, #2
   d517e:	f001 fa62 	bl	d6646 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
   d5182:	f7ff ffca 	bl	d511a <_ZL7i2creadv>
   d5186:	4604      	mov	r4, r0
   d5188:	f7ff ffc7 	bl	d511a <_ZL7i2creadv>
   d518c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
   d5190:	b280      	uxth	r0, r0
   d5192:	b002      	add	sp, #8
   d5194:	bd10      	pop	{r4, pc}

000d5196 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5196:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   d5198:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d519a:	2102      	movs	r1, #2
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d519c:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d519e:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
   d51a0:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d51a2:	4770      	bx	lr

000d51a4 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
   d51a4:	b508      	push	{r3, lr}
  Wire.begin();
   d51a6:	f002 f857 	bl	d7258 <_Z19__fetch_global_Wirev>
}
   d51aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
   d51ae:	f001 ba1b 	b.w	d65e8 <_ZN7TwoWire5beginEv>

000d51b2 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
   d51b2:	8081      	strh	r1, [r0, #4]
}
   d51b4:	4770      	bx	lr

000d51b6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
   d51b6:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
   d51b8:	b510      	push	{r4, lr}
   d51ba:	4604      	mov	r4, r0
  if (channel > 3)
   d51bc:	d822      	bhi.n	d5204 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
   d51be:	2902      	cmp	r1, #2
  config |= m_gain;
   d51c0:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
   d51c2:	d019      	beq.n	d51f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
   d51c4:	2903      	cmp	r1, #3
   d51c6:	d01a      	beq.n	d51fe <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
   d51c8:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
   d51ca:	bf14      	ite	ne
   d51cc:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d51d0:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d51d4:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d51d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   d51dc:	2101      	movs	r1, #1
   d51de:	7820      	ldrb	r0, [r4, #0]
   d51e0:	f7ff ffa3 	bl	d512a <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d51e4:	7860      	ldrb	r0, [r4, #1]
   d51e6:	f000 fe8d 	bl	d5f04 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
   d51ea:	7820      	ldrb	r0, [r4, #0]
   d51ec:	f7ff ffb5 	bl	d515a <_ZL12readRegisterhh.isra.0>
   d51f0:	78a3      	ldrb	r3, [r4, #2]
   d51f2:	4118      	asrs	r0, r3
   d51f4:	b280      	uxth	r0, r0
}
   d51f6:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d51f8:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
   d51fc:	e7ea      	b.n	d51d4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d51fe:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
   d5202:	e7e7      	b.n	d51d4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
   d5204:	2000      	movs	r0, #0
   d5206:	e7f6      	b.n	d51f6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

000d5208 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev>:
            difference between the P (AIN0) and N (AIN1) input.  Generates
            a signed value since the difference can be either
            positive or negative.
*/
/**************************************************************************/
int16_t Adafruit_ADS1015::readADC_Differential_0_1() {
   d5208:	b510      	push	{r4, lr}
                    
  // Set channels
  config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1;          // AIN0 = P, AIN1 = N

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
   d520a:	8882      	ldrh	r2, [r0, #4]
int16_t Adafruit_ADS1015::readADC_Differential_0_1() {
   d520c:	4604      	mov	r4, r0

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d520e:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
   d5212:	f042 0283 	orr.w	r2, r2, #131	; 0x83
   d5216:	2101      	movs	r1, #1
   d5218:	7800      	ldrb	r0, [r0, #0]
   d521a:	f7ff ff86 	bl	d512a <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d521e:	7860      	ldrb	r0, [r4, #1]
   d5220:	f000 fe70 	bl	d5f04 <delay>

  // Read the conversion results
  uint16_t res = readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d5224:	7820      	ldrb	r0, [r4, #0]
   d5226:	f7ff ff98 	bl	d515a <_ZL12readRegisterhh.isra.0>
   d522a:	78a3      	ldrb	r3, [r4, #2]
   d522c:	4118      	asrs	r0, r3
  if (m_bitShift == 0)
   d522e:	b90b      	cbnz	r3, d5234 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev+0x2c>
    if (res > 0x07FF)
    {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
    }
    return (int16_t)res;
   d5230:	b200      	sxth	r0, r0
  }
}
   d5232:	bd10      	pop	{r4, pc}
  uint16_t res = readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d5234:	b280      	uxth	r0, r0
    if (res > 0x07FF)
   d5236:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
      res |= 0xF000;
   d523a:	bf28      	it	cs
   d523c:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
   d5240:	e7f6      	b.n	d5230 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev+0x28>
	...

000d5244 <_Z5timerj>:
    // Timer Event 
    //if (NRF_TIMER4->EVENTS_COMPARE[0] != 0)
    PulseSensorAmped.update();
}

void timer(unsigned ms) {
   d5244:	b5f0      	push	{r4, r5, r6, r7, lr}

    // Set priority as high as possible.
    timer_config.interrupt_priority = 3;

    // Init the timer
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5246:	4c21      	ldr	r4, [pc, #132]	; (d52cc <_Z5timerj+0x88>)
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d5248:	4921      	ldr	r1, [pc, #132]	; (d52d0 <_Z5timerj+0x8c>)
void timer(unsigned ms) {
   d524a:	b085      	sub	sp, #20
   d524c:	4605      	mov	r5, r0
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d524e:	2201      	movs	r2, #1
   d5250:	201b      	movs	r0, #27
   d5252:	f001 fa06 	bl	d6662 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d5256:	2600      	movs	r6, #0
   d5258:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d525c:	4a1d      	ldr	r2, [pc, #116]	; (d52d4 <_Z5timerj+0x90>)
   d525e:	a902      	add	r1, sp, #8
   d5260:	4620      	mov	r0, r4
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d5262:	e9cd 3602 	strd	r3, r6, [sp, #8]
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5266:	f002 f847 	bl	d72f8 <nrfx_timer_init>
    // if( err_code != NRF_SUCCESS ) Log.error("nrfx_timer_error");

    // Disable and clear the timer.
    nrfx_timer_disable(&timer4);
   d526a:	4620      	mov	r0, r4
   d526c:	f002 f91e 	bl	d74ac <nrfx_timer_disable>
    nrfx_timer_clear(&timer4);
   d5270:	4620      	mov	r0, r4
   d5272:	f002 f935 	bl	d74e0 <nrfx_timer_clear>

    // Calculate the ticks for 50 uS
    uint32_t ticks = nrfx_timer_us_to_ticks(&timer4,ms*1000);
   d5276:	6823      	ldr	r3, [r4, #0]
                              TIMER_PRESCALER_PRESCALER_Msk);
}

__STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type * p_reg)
{
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
   d5278:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   d527c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                                               nrf_timer_frequency_t frequency)
{
    // The "frequency" parameter here is actually the prescaler value, and the
    // timer runs at the following frequency: f = 16 MHz / 2^prescaler.
    uint32_t prescaler = (uint32_t)frequency;
    uint64_t ticks = ((time_us * 16ULL) >> prescaler);
   d5280:	b2db      	uxtb	r3, r3
   d5282:	fb02 f005 	mul.w	r0, r2, r5
   d5286:	0f02      	lsrs	r2, r0, #28
   d5288:	f1c3 0720 	rsb	r7, r3, #32
   d528c:	0100      	lsls	r0, r0, #4
   d528e:	f1a3 0120 	sub.w	r1, r3, #32
   d5292:	fa20 f403 	lsr.w	r4, r0, r3
   d5296:	fa02 f707 	lsl.w	r7, r2, r7
   d529a:	433c      	orrs	r4, r7
   d529c:	fa22 f101 	lsr.w	r1, r2, r1
   d52a0:	fa22 f503 	lsr.w	r5, r2, r3
   d52a4:	430c      	orrs	r4, r1
    NRFX_ASSERT(ticks <= UINT32_MAX);
   d52a6:	2d01      	cmp	r5, #1
   d52a8:	bf08      	it	eq
   d52aa:	2c00      	cmpeq	r4, #0
   d52ac:	d304      	bcc.n	d52b8 <_Z5timerj+0x74>
   d52ae:	4a0a      	ldr	r2, [pc, #40]	; (d52d8 <_Z5timerj+0x94>)
   d52b0:	4631      	mov	r1, r6
   d52b2:	200a      	movs	r0, #10
   d52b4:	f000 fd4a 	bl	d5d4c <panic_>

    // Set the compare for the start and the end
    nrfx_timer_extended_compare(&timer4, NRF_TIMER_CC_CHANNEL0, ticks, NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK, true);
   d52b8:	2301      	movs	r3, #1
   d52ba:	4804      	ldr	r0, [pc, #16]	; (d52cc <_Z5timerj+0x88>)
   d52bc:	9300      	str	r3, [sp, #0]
   d52be:	4622      	mov	r2, r4
   d52c0:	2100      	movs	r1, #0
   d52c2:	f002 f93e 	bl	d7542 <nrfx_timer_extended_compare>
}
   d52c6:	b005      	add	sp, #20
   d52c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d52ca:	bf00      	nop
   d52cc:	2003e3ec 	.word	0x2003e3ec
   d52d0:	000d7571 	.word	0x000d7571
   d52d4:	000d54e9 	.word	0x000d54e9
   d52d8:	000d5ab9 	.word	0x000d5ab9

000d52dc <_ZN21PulseSensorAmpedClass6attachEi>:
}                     
                                                                                                                                                                                                                                                                              
// Configure the sensor
void PulseSensorAmpedClass::attach(int pin) {
  // Do not allow analog pin to change
  if(analogPin==-1) {
   d52dc:	6803      	ldr	r3, [r0, #0]
   d52de:	3301      	adds	r3, #1
    analogPin = pin;
   d52e0:	bf08      	it	eq
   d52e2:	6001      	streq	r1, [r0, #0]
  }
  timer(2); // Enable a 2ms timer.
   d52e4:	2002      	movs	r0, #2
   d52e6:	f7ff bfad 	b.w	d5244 <_Z5timerj>
	...

000d52ec <_ZN21PulseSensorAmpedClass5startEv>:
}

void PulseSensorAmpedClass::start(void) {
   d52ec:	b510      	push	{r4, lr}
  // Only allow the sensor to start/stop if the pin is configured
  // Start TIMER (If pin configured)
  if(analogPin != -1)
   d52ee:	6803      	ldr	r3, [r0, #0]
   d52f0:	3301      	adds	r3, #1
void PulseSensorAmpedClass::start(void) {
   d52f2:	4604      	mov	r4, r0
  if(analogPin != -1)
   d52f4:	d002      	beq.n	d52fc <_ZN21PulseSensorAmpedClass5startEv+0x10>
      nrfx_timer_enable(&timer4);
   d52f6:	480c      	ldr	r0, [pc, #48]	; (d5328 <_ZN21PulseSensorAmpedClass5startEv+0x3c>)
   d52f8:	f002 f8ba 	bl	d7470 <nrfx_timer_enable>

  // Re-initialize variables:
  sampleCounter = 0;
  lastBeatTime = 0; 
  peak = 512;
   d52fc:	f44f 7200 	mov.w	r2, #512	; 0x200
  trough = 512;
   d5300:	e9c4 2206 	strd	r2, r2, [r4, #24]
  thresh = 525;
  amplitude = 100;
   d5304:	f240 210d 	movw	r1, #525	; 0x20d
   d5308:	2264      	movs	r2, #100	; 0x64
   d530a:	e9c4 1208 	strd	r1, r2, [r4, #32]
  IBI = 600;
   d530e:	f44f 7216 	mov.w	r2, #600	; 0x258
  sampleCounter = 0;
   d5312:	2300      	movs	r3, #0
  IBI = 600;
   d5314:	60e2      	str	r2, [r4, #12]
  pulse = false;
   d5316:	f44f 7280 	mov.w	r2, #256	; 0x100
  lastBeatTime = 0; 
   d531a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  pulse = false;
   d531e:	8522      	strh	r2, [r4, #40]	; 0x28
  pulseLost = true;
  beatCount = 0;
   d5320:	62e3      	str	r3, [r4, #44]	; 0x2c
  postUpdate = false;
   d5322:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d5326:	bd10      	pop	{r4, pc}
   d5328:	2003e3ec 	.word	0x2003e3ec

000d532c <_ZN21PulseSensorAmpedClass6updateEv>:
  postUpdate = false;
}



void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned rate[10];                         // array to average IBI values for average rate
  static unsigned beatCount = 0;

  if(fakeData) {
   d532e:	7903      	ldrb	r3, [r0, #4]
void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d5330:	4604      	mov	r4, r0
  if(fakeData) {
   d5332:	b313      	cbz	r3, d537a <_ZN21PulseSensorAmpedClass6updateEv+0x4e>
    // Send an update once per second
    if(beatCount >= 500) {
   d5334:	4d68      	ldr	r5, [pc, #416]	; (d54d8 <_ZN21PulseSensorAmpedClass6updateEv+0x1ac>)
   d5336:	682b      	ldr	r3, [r5, #0]
   d5338:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d533c:	d30c      	bcc.n	d5358 <_ZN21PulseSensorAmpedClass6updateEv+0x2c>
       if(random(100)<2) {
   d533e:	2064      	movs	r0, #100	; 0x64
   d5340:	f001 fb25 	bl	d698e <_Z6randomi>
   d5344:	2801      	cmp	r0, #1
   d5346:	dc0b      	bgt.n	d5360 <_ZN21PulseSensorAmpedClass6updateEv+0x34>
         BPM = -1;
   d5348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
       } else {
        IBI = random(770,1100);
        BPM = 60000/IBI;        
   d534c:	60a3      	str	r3, [r4, #8]
       }
       postUpdate = true;
   d534e:	2301      	movs	r3, #1
   d5350:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
       beatCount = 0;
   d5354:	2300      	movs	r3, #0
   d5356:	602b      	str	r3, [r5, #0]
    }
    beatCount++;
   d5358:	682b      	ldr	r3, [r5, #0]
   d535a:	3301      	adds	r3, #1
   d535c:	602b      	str	r3, [r5, #0]
    trough = signal;                 // set T default
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
    pulseLost = true;
    beatCount = 0;
  }
}
   d535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        IBI = random(770,1100);
   d5360:	f240 414c 	movw	r1, #1100	; 0x44c
   d5364:	f240 3002 	movw	r0, #770	; 0x302
   d5368:	f001 fb1c 	bl	d69a4 <_Z6randomii>
   d536c:	60e0      	str	r0, [r4, #12]
        BPM = 60000/IBI;        
   d536e:	68e2      	ldr	r2, [r4, #12]
   d5370:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5374:	fbb3 f3f2 	udiv	r3, r3, r2
   d5378:	e7e8      	b.n	d534c <_ZN21PulseSensorAmpedClass6updateEv+0x20>
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d537a:	4e58      	ldr	r6, [pc, #352]	; (d54dc <_ZN21PulseSensorAmpedClass6updateEv+0x1b0>)
    hal_adc_set_sample_time(sample_time);
}

inline int32_t __attribute__((deprecated("Use hal_adc_read() instead"), always_inline))
HAL_ADC_Read(pin_t pin) {
    return hal_adc_read(pin);
   d537c:	8800      	ldrh	r0, [r0, #0]
   d537e:	f000 fbd3 	bl	d5b28 <hal_adc_read>
   d5382:	4957      	ldr	r1, [pc, #348]	; (d54e0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b4>)
   d5384:	6833      	ldr	r3, [r6, #0]
  filterIndex = (filterIndex+1)%5;
   d5386:	2505      	movs	r5, #5
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d5388:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  filterIndex = (filterIndex+1)%5;
   d538c:	3301      	adds	r3, #1
   d538e:	fbb3 f2f5 	udiv	r2, r3, r5
   d5392:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d5396:	1a9b      	subs	r3, r3, r2
   d5398:	6033      	str	r3, [r6, #0]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d539a:	e9d1 3200 	ldrd	r3, r2, [r1]
   d539e:	4413      	add	r3, r2
   d53a0:	688a      	ldr	r2, [r1, #8]
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d53a2:	6920      	ldr	r0, [r4, #16]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d53a4:	4413      	add	r3, r2
   d53a6:	68ca      	ldr	r2, [r1, #12]
   d53a8:	4413      	add	r3, r2
   d53aa:	690a      	ldr	r2, [r1, #16]
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d53ac:	6961      	ldr	r1, [r4, #20]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d53ae:	4413      	add	r3, r2
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d53b0:	68e2      	ldr	r2, [r4, #12]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d53b2:	fbb3 f3f5 	udiv	r3, r3, r5
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d53b6:	fbb2 f2f5 	udiv	r2, r2, r5
  if(signal < thresh) {         // Update trough based on threshold
   d53ba:	6a25      	ldr	r5, [r4, #32]
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d53bc:	3002      	adds	r0, #2
  if(signal < thresh) {         // Update trough based on threshold
   d53be:	42ab      	cmp	r3, r5
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d53c0:	6120      	str	r0, [r4, #16]
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d53c2:	eba0 0101 	sub.w	r1, r0, r1
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d53c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  if(signal < thresh) {         // Update trough based on threshold
   d53ca:	da22      	bge.n	d5412 <_ZN21PulseSensorAmpedClass6updateEv+0xe6>
    if(beyondDicrotic) {       // avoid dicrotic noise when finding trough
   d53cc:	4291      	cmp	r1, r2
   d53ce:	d904      	bls.n	d53da <_ZN21PulseSensorAmpedClass6updateEv+0xae>
      trough = min(signal, trough);
   d53d0:	69e2      	ldr	r2, [r4, #28]
   d53d2:	429a      	cmp	r2, r3
   d53d4:	bfd4      	ite	le
   d53d6:	61e2      	strle	r2, [r4, #28]
   d53d8:	61e3      	strgt	r3, [r4, #28]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d53da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   d53de:	b1fa      	cbz	r2, d5420 <_ZN21PulseSensorAmpedClass6updateEv+0xf4>
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d53e0:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
   d53e4:	1b52      	subs	r2, r2, r5
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d53e6:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
   d53ea:	eb05 0566 	add.w	r5, r5, r6, asr #1
    trough = thresh;                          // Trough won't update until beyond threshold
   d53ee:	e9c4 5506 	strd	r5, r5, [r4, #24]
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d53f2:	6225      	str	r5, [r4, #32]
    if(amplitude>300)
   d53f4:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
    pulse = false;                            // Update status
   d53f8:	f04f 0500 	mov.w	r5, #0
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d53fc:	6262      	str	r2, [r4, #36]	; 0x24
    pulse = false;                            // Update status
   d53fe:	8525      	strh	r5, [r4, #40]	; 0x28
    if(amplitude>300)
   d5400:	dd02      	ble.n	d5408 <_ZN21PulseSensorAmpedClass6updateEv+0xdc>
      postUpdate = true;
   d5402:	2201      	movs	r2, #1
   d5404:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d5408:	f640 12c4 	movw	r2, #2500	; 0x9c4
   d540c:	4291      	cmp	r1, r2
   d540e:	d80e      	bhi.n	d542e <_ZN21PulseSensorAmpedClass6updateEv+0x102>
   d5410:	e7a5      	b.n	d535e <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    peak = max(signal, peak);  
   d5412:	69a6      	ldr	r6, [r4, #24]
   d5414:	429e      	cmp	r6, r3
   d5416:	bfac      	ite	ge
   d5418:	61a6      	strge	r6, [r4, #24]
   d541a:	61a3      	strlt	r3, [r4, #24]
  if(elapsedTime > 250){                         // Assume at least 250ms between beats (i.e., BPM<240); Helps avoid noise
   d541c:	29fa      	cmp	r1, #250	; 0xfa
   d541e:	d81e      	bhi.n	d545e <_ZN21PulseSensorAmpedClass6updateEv+0x132>
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d5420:	f640 12c4 	movw	r2, #2500	; 0x9c4
   d5424:	4291      	cmp	r1, r2
   d5426:	d99a      	bls.n	d535e <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if(!pulseLost) {                       // If it was good, notify the loss
   d5428:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   d542c:	b92a      	cbnz	r2, d543a <_ZN21PulseSensorAmpedClass6updateEv+0x10e>
      BPM = -1;
   d542e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5432:	60a2      	str	r2, [r4, #8]
      postUpdate = true;
   d5434:	2201      	movs	r2, #1
   d5436:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    thresh = trough + (peak-trough)/3;  // set thresh default
   d543a:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
    trough = signal;                 // set T default
   d543e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    pulseLost = true;
   d5442:	2301      	movs	r3, #1
    thresh = trough + (peak-trough)/3;  // set thresh default
   d5444:	1a52      	subs	r2, r2, r1
   d5446:	2503      	movs	r5, #3
    pulseLost = true;
   d5448:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    thresh = trough + (peak-trough)/3;  // set thresh default
   d544c:	fb92 f2f5 	sdiv	r2, r2, r5
    beatCount = 0;
   d5450:	4b21      	ldr	r3, [pc, #132]	; (d54d8 <_ZN21PulseSensorAmpedClass6updateEv+0x1ac>)
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
   d5452:	6160      	str	r0, [r4, #20]
    thresh = trough + (peak-trough)/3;  // set thresh default
   d5454:	440a      	add	r2, r1
   d5456:	6222      	str	r2, [r4, #32]
    beatCount = 0;
   d5458:	2200      	movs	r2, #0
   d545a:	601a      	str	r2, [r3, #0]
   d545c:	e77f      	b.n	d535e <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if((signal > thresh) && (pulse == false) && beyondDicrotic) {        
   d545e:	42ab      	cmp	r3, r5
   d5460:	ddde      	ble.n	d5420 <_ZN21PulseSensorAmpedClass6updateEv+0xf4>
   d5462:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   d5466:	2d00      	cmp	r5, #0
   d5468:	d1da      	bne.n	d5420 <_ZN21PulseSensorAmpedClass6updateEv+0xf4>
   d546a:	4291      	cmp	r1, r2
   d546c:	d9d8      	bls.n	d5420 <_ZN21PulseSensorAmpedClass6updateEv+0xf4>
      rate[beatCount%10] = IBI;
   d546e:	4e1a      	ldr	r6, [pc, #104]	; (d54d8 <_ZN21PulseSensorAmpedClass6updateEv+0x1ac>)
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS (Starting from point the threshold is exceeded)
   d5470:	60e1      	str	r1, [r4, #12]
      pulse = true;
   d5472:	2201      	movs	r2, #1
   d5474:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
      rate[beatCount%10] = IBI;
   d5478:	6832      	ldr	r2, [r6, #0]
   d547a:	f8df c068 	ldr.w	ip, [pc, #104]	; d54e4 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>
   d547e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
      lastBeatTime = sampleCounter;               // keep track of the start time of this beat
   d5482:	6160      	str	r0, [r4, #20]
      rate[beatCount%10] = IBI;
   d5484:	270a      	movs	r7, #10
   d5486:	fbb2 f5f7 	udiv	r5, r2, r7
   d548a:	fb07 2515 	mls	r5, r7, r5, r2
      beatCount++;
   d548e:	3201      	adds	r2, #1
      if(beatCount<3) {
   d5490:	2a02      	cmp	r2, #2
      rate[beatCount%10] = IBI;
   d5492:	f84c e025 	str.w	lr, [ip, r5, lsl #2]
      beatCount++;
   d5496:	6032      	str	r2, [r6, #0]
      if(beatCount<3) {
   d5498:	f67f af61 	bls.w	d535e <_ZN21PulseSensorAmpedClass6updateEv+0x32>
      } else if(beatCount==3) {
   d549c:	2a03      	cmp	r2, #3
        rate[0]=(rate[1]+rate[2])/2;  
   d549e:	bf01      	itttt	eq
   d54a0:	e9dc 5601 	ldrdeq	r5, r6, [ip, #4]
   d54a4:	19ad      	addeq	r5, r5, r6
   d54a6:	086d      	lsreq	r5, r5, #1
   d54a8:	f8cc 5000 	streq.w	r5, [ip]
      int maxIndex = min(beatCount, 10);      
   d54ac:	4f0d      	ldr	r7, [pc, #52]	; (d54e4 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d54ae:	2a0a      	cmp	r2, #10
      word runningTotal = 0;
   d54b0:	f04f 0500 	mov.w	r5, #0
      int maxIndex = min(beatCount, 10);      
   d54b4:	bf28      	it	cs
   d54b6:	220a      	movcs	r2, #10
      for(int i=0; i<maxIndex; i++) {
   d54b8:	462e      	mov	r6, r5
        runningTotal += rate[i];              
   d54ba:	f857 cb04 	ldr.w	ip, [r7], #4
      for(int i=0; i<maxIndex; i++) {
   d54be:	3601      	adds	r6, #1
   d54c0:	42b2      	cmp	r2, r6
        runningTotal += rate[i];              
   d54c2:	4465      	add	r5, ip
      for(int i=0; i<maxIndex; i++) {
   d54c4:	dcf9      	bgt.n	d54ba <_ZN21PulseSensorAmpedClass6updateEv+0x18e>
      runningTotal /= maxIndex;               // average the last 10 IBI values 
   d54c6:	fbb5 f2f2 	udiv	r2, r5, r2
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
   d54ca:	f64e 2560 	movw	r5, #60000	; 0xea60
   d54ce:	fbb5 f2f2 	udiv	r2, r5, r2
   d54d2:	60a2      	str	r2, [r4, #8]
   d54d4:	e7a4      	b.n	d5420 <_ZN21PulseSensorAmpedClass6updateEv+0xf4>
   d54d6:	bf00      	nop
   d54d8:	2003e604 	.word	0x2003e604
   d54dc:	2003e5c4 	.word	0x2003e5c4
   d54e0:	2003e5c8 	.word	0x2003e5c8
   d54e4:	2003e5dc 	.word	0x2003e5dc

000d54e8 <_Z9timer_isr17nrf_timer_event_tPv>:
    PulseSensorAmped.update();
   d54e8:	4801      	ldr	r0, [pc, #4]	; (d54f0 <_Z9timer_isr17nrf_timer_event_tPv+0x8>)
   d54ea:	f7ff bf1f 	b.w	d532c <_ZN21PulseSensorAmpedClass6updateEv>
   d54ee:	bf00      	nop
   d54f0:	2003e590 	.word	0x2003e590

000d54f4 <_ZN21PulseSensorAmpedClass7processEv>:

void PulseSensorAmpedClass::process(void) {
   d54f4:	b510      	push	{r4, lr}
  // Put updates into foreground
  if(postUpdate) {
   d54f6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void PulseSensorAmpedClass::process(void) {
   d54fa:	4604      	mov	r4, r0
  if(postUpdate) {
   d54fc:	b14b      	cbz	r3, d5512 <_ZN21PulseSensorAmpedClass7processEv+0x1e>
    if(BPM>=0)
   d54fe:	6883      	ldr	r3, [r0, #8]
   d5500:	2b00      	cmp	r3, #0
   d5502:	db07      	blt.n	d5514 <_ZN21PulseSensorAmpedClass7processEv+0x20>
      PulseSensorAmped_data(BPM, IBI);
   d5504:	6880      	ldr	r0, [r0, #8]
   d5506:	68e1      	ldr	r1, [r4, #12]
   d5508:	f7ff f98e 	bl	d4828 <_Z21PulseSensorAmped_dataii>
    else 
      PulseSensorAmped_lost();	         
    postUpdate = false;
   d550c:	2300      	movs	r3, #0
   d550e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  } 
}
   d5512:	bd10      	pop	{r4, pc}
      PulseSensorAmped_lost();	         
   d5514:	f7ff f98e 	bl	d4834 <_Z21PulseSensorAmped_lostv>
   d5518:	e7f8      	b.n	d550c <_ZN21PulseSensorAmpedClass7processEv+0x18>
	...

000d551c <_GLOBAL__sub_I_PulseSensorAmped>:
  analogPin = -1;
   d551c:	4b03      	ldr	r3, [pc, #12]	; (d552c <_GLOBAL__sub_I_PulseSensorAmped+0x10>)
   d551e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5522:	601a      	str	r2, [r3, #0]
  fakeData = false;
   d5524:	2200      	movs	r2, #0
   d5526:	711a      	strb	r2, [r3, #4]
}
   d5528:	4770      	bx	lr
   d552a:	bf00      	nop
   d552c:	2003e590 	.word	0x2003e590

000d5530 <_Z19ICM_20948_write_I2ChPhmPv>:
    return ICM_20948_Stat_Ok;
}

// serif functions for the I2C and SPI classes
ICM_20948_Status_e ICM_20948_write_I2C(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
   d5530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5532:	4606      	mov	r6, r0
   d5534:	460d      	mov	r5, r1
   d5536:	9201      	str	r2, [sp, #4]
    if (user == NULL)
   d5538:	b1bb      	cbz	r3, d556a <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c; // Cast user field to ICM_20948_I2C type and extract the I2C interface pointer
   d553a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d553c:	b1ac      	cbz	r4, d556a <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d553e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   d5542:	4620      	mov	r0, r4
   d5544:	f001 f882 	bl	d664c <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d5548:	6823      	ldr	r3, [r4, #0]
   d554a:	4631      	mov	r1, r6
   d554c:	689b      	ldr	r3, [r3, #8]
   d554e:	4620      	mov	r0, r4
   d5550:	4798      	blx	r3
    _i2c->write(data, len);
   d5552:	6823      	ldr	r3, [r4, #0]
   d5554:	9a01      	ldr	r2, [sp, #4]
   d5556:	68db      	ldr	r3, [r3, #12]
   d5558:	4629      	mov	r1, r5
   d555a:	4620      	mov	r0, r4
   d555c:	4798      	blx	r3
    _i2c->endTransmission();
   d555e:	4620      	mov	r0, r4
   d5560:	f001 f87c 	bl	d665c <_ZN7TwoWire15endTransmissionEv>
    //     delay(10);
    // }

    // delay(10);

    return ICM_20948_Stat_Ok;
   d5564:	2000      	movs	r0, #0
}
   d5566:	b002      	add	sp, #8
   d5568:	bd70      	pop	{r4, r5, r6, pc}
        return ICM_20948_Stat_ParamErr;
   d556a:	2003      	movs	r0, #3
   d556c:	e7fb      	b.n	d5566 <_Z19ICM_20948_write_I2ChPhmPv+0x36>

000d556e <_Z18ICM_20948_read_I2ChPhmPv>:

ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
   d556e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5572:	4607      	mov	r7, r0
   d5574:	460e      	mov	r6, r1
   d5576:	4615      	mov	r5, r2
    if (user == NULL)
   d5578:	b32b      	cbz	r3, d55c6 <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c;
   d557a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d557c:	b31c      	cbz	r4, d55c6 <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
   d557e:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d5582:	4620      	mov	r0, r4
   d5584:	4641      	mov	r1, r8
   d5586:	f001 f861 	bl	d664c <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d558a:	6823      	ldr	r3, [r4, #0]
   d558c:	4639      	mov	r1, r7
   d558e:	689b      	ldr	r3, [r3, #8]
   d5590:	4620      	mov	r0, r4
   d5592:	4798      	blx	r3
    _i2c->endTransmission(false); // Send repeated start
   d5594:	2100      	movs	r1, #0
   d5596:	4620      	mov	r0, r4
   d5598:	f001 f85c 	bl	d6654 <_ZN7TwoWire15endTransmissionEh>

    uint32_t offset = 0;
    uint32_t num_received = _i2c->requestFrom(addr, len);
   d559c:	462a      	mov	r2, r5
   d559e:	4641      	mov	r1, r8
   d55a0:	4620      	mov	r0, r4
   d55a2:	f001 f850 	bl	d6646 <_ZN7TwoWire11requestFromEhj>
    //     }else{
    //         break;
    //     }
    // }

    if (num_received == len)
   d55a6:	4285      	cmp	r5, r0
   d55a8:	d110      	bne.n	d55cc <_Z18ICM_20948_read_I2ChPhmPv+0x5e>
   d55aa:	2700      	movs	r7, #0
    {
        for (uint8_t i = 0; i < len; i++)
   d55ac:	fa5f f887 	uxtb.w	r8, r7
   d55b0:	4545      	cmp	r5, r8
   d55b2:	f107 0701 	add.w	r7, r7, #1
   d55b6:	d90b      	bls.n	d55d0 <_Z18ICM_20948_read_I2ChPhmPv+0x62>
        {
            buff[i] = _i2c->read();
   d55b8:	6823      	ldr	r3, [r4, #0]
   d55ba:	4620      	mov	r0, r4
   d55bc:	695b      	ldr	r3, [r3, #20]
   d55be:	4798      	blx	r3
   d55c0:	f806 0008 	strb.w	r0, [r6, r8]
        for (uint8_t i = 0; i < len; i++)
   d55c4:	e7f2      	b.n	d55ac <_Z18ICM_20948_read_I2ChPhmPv+0x3e>
        return ICM_20948_Stat_ParamErr;
   d55c6:	2003      	movs	r0, #3
    if (len != 0)
    {
        return ICM_20948_Stat_NoData;
    }
    return ICM_20948_Stat_Ok;
}
   d55c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ICM_20948_Stat_NoData;
   d55cc:	2006      	movs	r0, #6
   d55ce:	e7fb      	b.n	d55c8 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>
        return ICM_20948_Stat_Ok;
   d55d0:	2000      	movs	r0, #0
   d55d2:	e7f9      	b.n	d55c8 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>

000d55d4 <_ZN9ICM_209487getAGMTEv>:
{
   d55d4:	b570      	push	{r4, r5, r6, lr}
   d55d6:	460c      	mov	r4, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
   d55d8:	1d0d      	adds	r5, r1, #4
{
   d55da:	4606      	mov	r6, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
   d55dc:	4629      	mov	r1, r5
   d55de:	4620      	mov	r0, r4
   d55e0:	f7ff f889 	bl	d46f6 <ICM_20948_get_agmt>
   d55e4:	f804 0f1c 	strb.w	r0, [r4, #28]!
    return agmt;
   d55e8:	462b      	mov	r3, r5
   d55ea:	4635      	mov	r5, r6
   d55ec:	461a      	mov	r2, r3
   d55ee:	ca03      	ldmia	r2!, {r0, r1}
   d55f0:	42a2      	cmp	r2, r4
   d55f2:	6028      	str	r0, [r5, #0]
   d55f4:	6069      	str	r1, [r5, #4]
   d55f6:	4613      	mov	r3, r2
   d55f8:	f105 0508 	add.w	r5, r5, #8
   d55fc:	d1f6      	bne.n	d55ec <_ZN9ICM_209487getAGMTEv+0x18>
}
   d55fe:	4630      	mov	r0, r6
   d5600:	bd70      	pop	{r4, r5, r6, pc}
   d5602:	0000      	movs	r0, r0
   d5604:	0000      	movs	r0, r0
	...

000d5608 <_ZN9ICM_209488getAccMGEs>:
{
   d5608:	b508      	push	{r3, lr}
    switch (agmt.fss.a)
   d560a:	7e03      	ldrb	r3, [r0, #24]
   d560c:	f003 0303 	and.w	r3, r3, #3
{
   d5610:	ee07 1a90 	vmov	s15, r1
   d5614:	2b03      	cmp	r3, #3
   d5616:	d831      	bhi.n	d567c <_ZN9ICM_209488getAccMGEs+0x74>
   d5618:	e8df f003 	tbb	[pc, r3]
   d561c:	261c1202 	.word	0x261c1202
        return (((float)axis_val) / 16.384);
   d5620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5624:	ee17 0a90 	vmov	r0, s15
   d5628:	f002 f91c 	bl	d7864 <__aeabi_f2d>
   d562c:	a317      	add	r3, pc, #92	; (adr r3, d568c <_ZN9ICM_209488getAccMGEs+0x84>)
   d562e:	e9d3 2300 	ldrd	r2, r3, [r3]
        return (((float)axis_val) / 2.048);
   d5632:	f002 fa99 	bl	d7b68 <__aeabi_ddiv>
   d5636:	f002 fb7f 	bl	d7d38 <__aeabi_d2f>
   d563a:	ee00 0a10 	vmov	s0, r0
}
   d563e:	bd08      	pop	{r3, pc}
        return (((float)axis_val) / 8.192);
   d5640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5644:	ee17 0a90 	vmov	r0, s15
   d5648:	f002 f90c 	bl	d7864 <__aeabi_f2d>
   d564c:	a311      	add	r3, pc, #68	; (adr r3, d5694 <_ZN9ICM_209488getAccMGEs+0x8c>)
   d564e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5652:	e7ee      	b.n	d5632 <_ZN9ICM_209488getAccMGEs+0x2a>
        return (((float)axis_val) / 4.096);
   d5654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5658:	ee17 0a90 	vmov	r0, s15
   d565c:	f002 f902 	bl	d7864 <__aeabi_f2d>
   d5660:	a30e      	add	r3, pc, #56	; (adr r3, d569c <_ZN9ICM_209488getAccMGEs+0x94>)
   d5662:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5666:	e7e4      	b.n	d5632 <_ZN9ICM_209488getAccMGEs+0x2a>
        return (((float)axis_val) / 2.048);
   d5668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d566c:	ee17 0a90 	vmov	r0, s15
   d5670:	f002 f8f8 	bl	d7864 <__aeabi_f2d>
   d5674:	a30b      	add	r3, pc, #44	; (adr r3, d56a4 <_ZN9ICM_209488getAccMGEs+0x9c>)
   d5676:	e9d3 2300 	ldrd	r2, r3, [r3]
   d567a:	e7da      	b.n	d5632 <_ZN9ICM_209488getAccMGEs+0x2a>
    switch (agmt.fss.a)
   d567c:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5688 <_ZN9ICM_209488getAccMGEs+0x80>
   d5680:	e7dd      	b.n	d563e <_ZN9ICM_209488getAccMGEs+0x36>
   d5682:	bf00      	nop
   d5684:	f3af 8000 	nop.w
   d5688:	00000000 	.word	0x00000000
   d568c:	d2f1a9fc 	.word	0xd2f1a9fc
   d5690:	4030624d 	.word	0x4030624d
   d5694:	d2f1a9fc 	.word	0xd2f1a9fc
   d5698:	4020624d 	.word	0x4020624d
   d569c:	d2f1a9fc 	.word	0xd2f1a9fc
   d56a0:	4010624d 	.word	0x4010624d
   d56a4:	d2f1a9fc 	.word	0xd2f1a9fc
   d56a8:	4000624d 	.word	0x4000624d

000d56ac <_ZN9ICM_209484accXEv>:
    return getAccMG(agmt.acc.axes.x);
   d56ac:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   d56b0:	f7ff bfaa 	b.w	d5608 <_ZN9ICM_209488getAccMGEs>

000d56b4 <_ZN9ICM_209484accYEv>:
    return getAccMG(agmt.acc.axes.y);
   d56b4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   d56b8:	f7ff bfa6 	b.w	d5608 <_ZN9ICM_209488getAccMGEs>

000d56bc <_ZN9ICM_209484accZEv>:
    return getAccMG(agmt.acc.axes.z);
   d56bc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d56c0:	f7ff bfa2 	b.w	d5608 <_ZN9ICM_209488getAccMGEs>
   d56c4:	0000      	movs	r0, r0
	...

000d56c8 <_ZN9ICM_209489getGyrDPSEs>:
{
   d56c8:	b508      	push	{r3, lr}
    switch (agmt.fss.g)
   d56ca:	7e03      	ldrb	r3, [r0, #24]
   d56cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
{
   d56d0:	ee07 1a90 	vmov	s15, r1
   d56d4:	2b03      	cmp	r3, #3
   d56d6:	d829      	bhi.n	d572c <_ZN9ICM_209489getGyrDPSEs+0x64>
   d56d8:	e8df f003 	tbb	[pc, r3]
   d56dc:	1e0e0902 	.word	0x1e0e0902
        return (((float)axis_val) / 131);
   d56e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d56e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; d5748 <_ZN9ICM_209489getGyrDPSEs+0x80>
        return (((float)axis_val) / 65.5);
   d56e8:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d56ec:	bd08      	pop	{r3, pc}
        return (((float)axis_val) / 65.5);
   d56ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d56f2:	ed9f 7a16 	vldr	s14, [pc, #88]	; d574c <_ZN9ICM_209489getGyrDPSEs+0x84>
   d56f6:	e7f7      	b.n	d56e8 <_ZN9ICM_209489getGyrDPSEs+0x20>
        return (((float)axis_val) / 32.8);
   d56f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d56fc:	ee17 0a90 	vmov	r0, s15
   d5700:	f002 f8b0 	bl	d7864 <__aeabi_f2d>
   d5704:	a30c      	add	r3, pc, #48	; (adr r3, d5738 <_ZN9ICM_209489getGyrDPSEs+0x70>)
   d5706:	e9d3 2300 	ldrd	r2, r3, [r3]
        return (((float)axis_val) / 16.4);
   d570a:	f002 fa2d 	bl	d7b68 <__aeabi_ddiv>
   d570e:	f002 fb13 	bl	d7d38 <__aeabi_d2f>
   d5712:	ee00 0a10 	vmov	s0, r0
   d5716:	e7e9      	b.n	d56ec <_ZN9ICM_209489getGyrDPSEs+0x24>
   d5718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d571c:	ee17 0a90 	vmov	r0, s15
   d5720:	f002 f8a0 	bl	d7864 <__aeabi_f2d>
   d5724:	a306      	add	r3, pc, #24	; (adr r3, d5740 <_ZN9ICM_209489getGyrDPSEs+0x78>)
   d5726:	e9d3 2300 	ldrd	r2, r3, [r3]
   d572a:	e7ee      	b.n	d570a <_ZN9ICM_209489getGyrDPSEs+0x42>
    switch (agmt.fss.g)
   d572c:	ed9f 0a08 	vldr	s0, [pc, #32]	; d5750 <_ZN9ICM_209489getGyrDPSEs+0x88>
   d5730:	e7dc      	b.n	d56ec <_ZN9ICM_209489getGyrDPSEs+0x24>
   d5732:	bf00      	nop
   d5734:	f3af 8000 	nop.w
   d5738:	66666666 	.word	0x66666666
   d573c:	40406666 	.word	0x40406666
   d5740:	66666666 	.word	0x66666666
   d5744:	40306666 	.word	0x40306666
   d5748:	43030000 	.word	0x43030000
   d574c:	42830000 	.word	0x42830000
   d5750:	00000000 	.word	0x00000000

000d5754 <_ZN9ICM_209484gyrXEv>:
    return getGyrDPS(agmt.gyr.axes.x);
   d5754:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d5758:	f7ff bfb6 	b.w	d56c8 <_ZN9ICM_209489getGyrDPSEs>

000d575c <_ZN9ICM_209484gyrYEv>:
    return getGyrDPS(agmt.gyr.axes.y);
   d575c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5760:	f7ff bfb2 	b.w	d56c8 <_ZN9ICM_209489getGyrDPSEs>

000d5764 <_ZN9ICM_209484gyrZEv>:
    return getGyrDPS(agmt.gyr.axes.z);
   d5764:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5768:	f7ff bfae 	b.w	d56c8 <_ZN9ICM_209489getGyrDPSEs>
   d576c:	0000      	movs	r0, r0
	...

000d5770 <_ZN9ICM_209484tempEv>:
{
   d5770:	b508      	push	{r3, lr}
    return (((float)val) / 333.87) + 21;
   d5772:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
   d5776:	ee07 0a90 	vmov	s15, r0
   d577a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d577e:	ee17 0a90 	vmov	r0, s15
   d5782:	f002 f86f 	bl	d7864 <__aeabi_f2d>
   d5786:	a309      	add	r3, pc, #36	; (adr r3, d57ac <_ZN9ICM_209484tempEv+0x3c>)
   d5788:	e9d3 2300 	ldrd	r2, r3, [r3]
   d578c:	f002 f9ec 	bl	d7b68 <__aeabi_ddiv>
   d5790:	4b05      	ldr	r3, [pc, #20]	; (d57a8 <_ZN9ICM_209484tempEv+0x38>)
   d5792:	2200      	movs	r2, #0
   d5794:	f001 ff08 	bl	d75a8 <__adddf3>
   d5798:	f002 face 	bl	d7d38 <__aeabi_d2f>
}
   d579c:	ee00 0a10 	vmov	s0, r0
   d57a0:	bd08      	pop	{r3, pc}
   d57a2:	bf00      	nop
   d57a4:	f3af 8000 	nop.w
   d57a8:	40350000 	.word	0x40350000
   d57ac:	851eb852 	.word	0x851eb852
   d57b0:	4074ddeb 	.word	0x4074ddeb

000d57b4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>:
    if (stat == ICM_20948_Stat_NUM)
   d57b4:	2908      	cmp	r1, #8
        val = status;
   d57b6:	bf08      	it	eq
   d57b8:	7f01      	ldrbeq	r1, [r0, #28]
    switch (val)
   d57ba:	2907      	cmp	r1, #7
   d57bc:	bf9a      	itte	ls
   d57be:	4b02      	ldrls	r3, [pc, #8]	; (d57c8 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x14>)
   d57c0:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
   d57c4:	4801      	ldrhi	r0, [pc, #4]	; (d57cc <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x18>)
}
   d57c6:	4770      	bx	lr
   d57c8:	000d8208 	.word	0x000d8208
   d57cc:	000d817f 	.word	0x000d817f

000d57d0 <_ZN9ICM_209487swResetEv>:
{
   d57d0:	b510      	push	{r4, lr}
   d57d2:	4604      	mov	r4, r0
    status = ICM_20948_sw_reset(&_device);
   d57d4:	f7fe fd3f 	bl	d4256 <ICM_20948_sw_reset>
   d57d8:	7720      	strb	r0, [r4, #28]
}
   d57da:	bd10      	pop	{r4, pc}

000d57dc <_ZN9ICM_209485sleepEb>:
{
   d57dc:	b510      	push	{r4, lr}
   d57de:	4604      	mov	r4, r0
    status = ICM_20948_sleep(&_device, on);
   d57e0:	f7fe fd53 	bl	d428a <ICM_20948_sleep>
   d57e4:	7720      	strb	r0, [r4, #28]
}
   d57e6:	bd10      	pop	{r4, pc}

000d57e8 <_ZN9ICM_209488lowPowerEb>:
{
   d57e8:	b510      	push	{r4, lr}
   d57ea:	4604      	mov	r4, r0
    status = ICM_20948_low_power(&_device, on);
   d57ec:	f7fe fd68 	bl	d42c0 <ICM_20948_low_power>
   d57f0:	7720      	strb	r0, [r4, #28]
}
   d57f2:	bd10      	pop	{r4, pc}

000d57f4 <_ZN9ICM_209487checkIDEv>:
{
   d57f4:	b510      	push	{r4, lr}
   d57f6:	4604      	mov	r4, r0
    status = ICM_20948_check_id(&_device);
   d57f8:	f7fe fd8e 	bl	d4318 <ICM_20948_check_id>
   d57fc:	7720      	strb	r0, [r4, #28]
}
   d57fe:	bd10      	pop	{r4, pc}

000d5800 <_ZN9ICM_2094813setSampleModeEhh>:
{
   d5800:	b510      	push	{r4, lr}
   d5802:	4604      	mov	r4, r0
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
   d5804:	f7fe fd99 	bl	d433a <ICM_20948_set_sample_mode>
   d5808:	7720      	strb	r0, [r4, #28]
}
   d580a:	bd10      	pop	{r4, pc}

000d580c <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>:
{
   d580c:	b510      	push	{r4, lr}
   d580e:	4604      	mov	r4, r0
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
   d5810:	f7fe fdc7 	bl	d43a2 <ICM_20948_set_full_scale>
   d5814:	7720      	strb	r0, [r4, #28]
}
   d5816:	bd10      	pop	{r4, pc}

000d5818 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>:
{
   d5818:	b513      	push	{r0, r1, r4, lr}
   d581a:	f8ad 2004 	strh.w	r2, [sp, #4]
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d581e:	9a01      	ldr	r2, [sp, #4]
{
   d5820:	4604      	mov	r4, r0
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5822:	f7fe fe0a 	bl	d443a <ICM_20948_set_dlpf_cfg>
   d5826:	7720      	strb	r0, [r4, #28]
}
   d5828:	b002      	add	sp, #8
   d582a:	bd10      	pop	{r4, pc}

000d582c <_ZN9ICM_2094810enableDLPFEhb>:
{
   d582c:	b510      	push	{r4, lr}
   d582e:	4604      	mov	r4, r0
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
   d5830:	f7fe fe50 	bl	d44d4 <ICM_20948_enable_dlpf>
   d5834:	7720      	strb	r0, [r4, #28]
}
   d5836:	bd10      	pop	{r4, pc}

000d5838 <_ZN9ICM_2094820i2cMasterPassthroughEb>:
{
   d5838:	b510      	push	{r4, lr}
   d583a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
   d583c:	f7fe fe94 	bl	d4568 <ICM_20948_i2c_master_passthrough>
   d5840:	7720      	strb	r0, [r4, #28]
}
   d5842:	bd10      	pop	{r4, pc}

000d5844 <_ZN9ICM_2094815i2cMasterEnableEb>:
{
   d5844:	b510      	push	{r4, lr}
   d5846:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_enable(&_device, enable);
   d5848:	f7fe feaa 	bl	d45a0 <ICM_20948_i2c_master_enable>
   d584c:	7720      	strb	r0, [r4, #28]
}
   d584e:	bd10      	pop	{r4, pc}

000d5850 <_ZN9ICM_2094814i2cMasterResetEv>:
{
   d5850:	b510      	push	{r4, lr}
   d5852:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_reset(&_device);
   d5854:	f7fe fee0 	bl	d4618 <ICM_20948_i2c_master_reset>
   d5858:	7720      	strb	r0, [r4, #28]
}
   d585a:	bd10      	pop	{r4, pc}

000d585c <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>:
{
   d585c:	b530      	push	{r4, r5, lr}
   d585e:	b087      	sub	sp, #28
   d5860:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
   d5862:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
   d5866:	9505      	str	r5, [sp, #20]
   d5868:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   d586c:	9504      	str	r5, [sp, #16]
   d586e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5872:	9503      	str	r5, [sp, #12]
   d5874:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d5878:	9502      	str	r5, [sp, #8]
   d587a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d587e:	9501      	str	r5, [sp, #4]
   d5880:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   d5884:	9500      	str	r5, [sp, #0]
   d5886:	f7fe fee2 	bl	d464e <ICM_20948_i2c_master_configure_slave>
   d588a:	7720      	strb	r0, [r4, #28]
}
   d588c:	b007      	add	sp, #28
   d588e:	bd30      	pop	{r4, r5, pc}

000d5890 <_ZN9ICM_2094816i2cMasterSingleWEhhh>:
{
   d5890:	b513      	push	{r0, r1, r4, lr}
   d5892:	f88d 3007 	strb.w	r3, [sp, #7]
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d5896:	f10d 0307 	add.w	r3, sp, #7
{
   d589a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d589c:	f7fe fcc7 	bl	d422e <ICM_20948_i2c_master_single_w>
   d58a0:	7720      	strb	r0, [r4, #28]
}
   d58a2:	b002      	add	sp, #8
   d58a4:	bd10      	pop	{r4, pc}

000d58a6 <_ZN9ICM_2094816i2cMasterSingleREhh>:
{
   d58a6:	b513      	push	{r0, r1, r4, lr}
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d58a8:	f10d 0307 	add.w	r3, sp, #7
{
   d58ac:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d58ae:	f7fe fcc9 	bl	d4244 <ICM_20948_i2c_master_single_r>
   d58b2:	7720      	strb	r0, [r4, #28]
}
   d58b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d58b8:	b002      	add	sp, #8
   d58ba:	bd10      	pop	{r4, pc}

000d58bc <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>:
{
   d58bc:	460a      	mov	r2, r1
    uint8_t data = i2cMasterSingleR(MAG_AK09916_I2C_ADDR, reg);
   d58be:	210c      	movs	r1, #12
   d58c0:	f7ff bff1 	b.w	d58a6 <_ZN9ICM_2094816i2cMasterSingleREhh>

000d58c4 <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>:
{
   d58c4:	b510      	push	{r4, lr}
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d58c6:	7813      	ldrb	r3, [r2, #0]
   d58c8:	460a      	mov	r2, r1
   d58ca:	210c      	movs	r1, #12
{
   d58cc:	4604      	mov	r4, r0
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d58ce:	f7ff ffdf 	bl	d5890 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
   d58d2:	7720      	strb	r0, [r4, #28]
}
   d58d4:	bd10      	pop	{r4, pc}
	...

000d58d8 <_ZN13ICM_20948_I2CC1Ev>:
ICM_20948_I2C::ICM_20948_I2C()
   d58d8:	4b01      	ldr	r3, [pc, #4]	; (d58e0 <_ZN13ICM_20948_I2CC1Ev+0x8>)
   d58da:	6003      	str	r3, [r0, #0]
}
   d58dc:	4770      	bx	lr
   d58de:	bf00      	nop
   d58e0:	000d8230 	.word	0x000d8230

000d58e4 <_ZN9ICM_209489magWhoIAmEv>:
{
   d58e4:	b538      	push	{r3, r4, r5, lr}
    whoiam1 = readMag(AK09916_REG_WIA1);
   d58e6:	2100      	movs	r1, #0
{
   d58e8:	4604      	mov	r4, r0
    whoiam1 = readMag(AK09916_REG_WIA1);
   d58ea:	f7ff ffe7 	bl	d58bc <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    whoiam2 = readMag(AK09916_REG_WIA2);
   d58ee:	2101      	movs	r1, #1
    whoiam1 = readMag(AK09916_REG_WIA1);
   d58f0:	4605      	mov	r5, r0
    whoiam2 = readMag(AK09916_REG_WIA2);
   d58f2:	4620      	mov	r0, r4
   d58f4:	f7ff ffe2 	bl	d58bc <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
   d58f8:	2d48      	cmp	r5, #72	; 0x48
   d58fa:	d104      	bne.n	d5906 <_ZN9ICM_209489magWhoIAmEv+0x22>
   d58fc:	2809      	cmp	r0, #9
   d58fe:	d102      	bne.n	d5906 <_ZN9ICM_209489magWhoIAmEv+0x22>
    status = retval;
   d5900:	2000      	movs	r0, #0
    status = retval;
   d5902:	7720      	strb	r0, [r4, #28]
}
   d5904:	bd38      	pop	{r3, r4, r5, pc}
    status = retval;
   d5906:	2004      	movs	r0, #4
   d5908:	e7fb      	b.n	d5902 <_ZN9ICM_209489magWhoIAmEv+0x1e>

000d590a <_ZN9ICM_2094819startupMagnetometerEv>:
{
   d590a:	b530      	push	{r4, r5, lr}
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d590c:	2100      	movs	r1, #0
{
   d590e:	b089      	sub	sp, #36	; 0x24
   d5910:	4604      	mov	r4, r0
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5912:	f7ff ff91 	bl	d5838 <_ZN9ICM_2094820i2cMasterPassthroughEb>
    i2cMasterEnable(true);
   d5916:	2101      	movs	r1, #1
   d5918:	4620      	mov	r0, r4
   d591a:	f7ff ff93 	bl	d5844 <_ZN9ICM_2094815i2cMasterEnableEb>
   d591e:	2505      	movs	r5, #5
        retval = magWhoIAm();
   d5920:	4620      	mov	r0, r4
   d5922:	f7ff ffdf 	bl	d58e4 <_ZN9ICM_209489magWhoIAmEv>
        if (retval == ICM_20948_Stat_Ok)
   d5926:	b158      	cbz	r0, d5940 <_ZN9ICM_2094819startupMagnetometerEv+0x36>
        i2cMasterReset(); //Otherwise, reset the master I2C and try again
   d5928:	4620      	mov	r0, r4
   d592a:	3d01      	subs	r5, #1
   d592c:	f7ff ff90 	bl	d5850 <_ZN9ICM_2094814i2cMasterResetEv>
    while (tries < maxTries)
   d5930:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5934:	d1f4      	bne.n	d5920 <_ZN9ICM_2094819startupMagnetometerEv+0x16>
        status = ICM_20948_Stat_WrongID;
   d5936:	2004      	movs	r0, #4
   d5938:	e01f      	b.n	d597a <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    return status;
   d593a:	7f20      	ldrb	r0, [r4, #28]
}
   d593c:	b009      	add	sp, #36	; 0x24
   d593e:	bd30      	pop	{r4, r5, pc}
    reg.MODE = AK09916_mode_cont_100hz;
   d5940:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d5944:	2208      	movs	r2, #8
   d5946:	f362 0304 	bfi	r3, r2, #0, #5
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d594a:	2131      	movs	r1, #49	; 0x31
   d594c:	aa07      	add	r2, sp, #28
   d594e:	4620      	mov	r0, r4
    reg.MODE = AK09916_mode_cont_100hz;
   d5950:	f88d 301c 	strb.w	r3, [sp, #28]
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5954:	f7ff ffb6 	bl	d58c4 <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>
    if (retval != ICM_20948_Stat_Ok)
   d5958:	b978      	cbnz	r0, d597a <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    retval = i2cMasterConfigureSlave(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false);
   d595a:	2301      	movs	r3, #1
   d595c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d5960:	2309      	movs	r3, #9
   d5962:	e9cd 0004 	strd	r0, r0, [sp, #16]
   d5966:	9003      	str	r0, [sp, #12]
   d5968:	9300      	str	r3, [sp, #0]
   d596a:	4601      	mov	r1, r0
   d596c:	2310      	movs	r3, #16
   d596e:	220c      	movs	r2, #12
   d5970:	4620      	mov	r0, r4
   d5972:	f7ff ff73 	bl	d585c <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>
    if (retval != ICM_20948_Stat_Ok)
   d5976:	2800      	cmp	r0, #0
   d5978:	d0df      	beq.n	d593a <_ZN9ICM_2094819startupMagnetometerEv+0x30>
        status = ICM_20948_Stat_WrongID;
   d597a:	7720      	strb	r0, [r4, #28]
        return status;
   d597c:	e7de      	b.n	d593c <_ZN9ICM_2094819startupMagnetometerEv+0x32>

000d597e <_ZN9ICM_2094814startupDefaultEv>:
{
   d597e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5980:	4605      	mov	r5, r0
    retval = checkID();
   d5982:	f7ff ff37 	bl	d57f4 <_ZN9ICM_209487checkIDEv>
    if (retval != ICM_20948_Stat_Ok)
   d5986:	4604      	mov	r4, r0
   d5988:	b118      	cbz	r0, d5992 <_ZN9ICM_2094814startupDefaultEv+0x14>
        status = retval;
   d598a:	772c      	strb	r4, [r5, #28]
}
   d598c:	4620      	mov	r0, r4
   d598e:	b003      	add	sp, #12
   d5990:	bd30      	pop	{r4, r5, pc}
    retval = swReset();
   d5992:	4628      	mov	r0, r5
   d5994:	f7ff ff1c 	bl	d57d0 <_ZN9ICM_209487swResetEv>
    if (retval != ICM_20948_Stat_Ok)
   d5998:	4604      	mov	r4, r0
   d599a:	2800      	cmp	r0, #0
   d599c:	d1f5      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    delay(50);
   d599e:	2032      	movs	r0, #50	; 0x32
   d59a0:	f000 fab0 	bl	d5f04 <delay>
    retval = sleep(false);
   d59a4:	4621      	mov	r1, r4
   d59a6:	4628      	mov	r0, r5
   d59a8:	f7ff ff18 	bl	d57dc <_ZN9ICM_209485sleepEb>
    if (retval != ICM_20948_Stat_Ok)
   d59ac:	4604      	mov	r4, r0
   d59ae:	2800      	cmp	r0, #0
   d59b0:	d1eb      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = lowPower(false);
   d59b2:	4601      	mov	r1, r0
   d59b4:	4628      	mov	r0, r5
   d59b6:	f7ff ff17 	bl	d57e8 <_ZN9ICM_209488lowPowerEb>
    if (retval != ICM_20948_Stat_Ok)
   d59ba:	4604      	mov	r4, r0
   d59bc:	2800      	cmp	r0, #0
   d59be:	d1e4      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
   d59c0:	4602      	mov	r2, r0
   d59c2:	2103      	movs	r1, #3
   d59c4:	4628      	mov	r0, r5
   d59c6:	f7ff ff1b 	bl	d5800 <_ZN9ICM_2094813setSampleModeEhh>
    if (retval != ICM_20948_Stat_Ok)
   d59ca:	4604      	mov	r4, r0
   d59cc:	2800      	cmp	r0, #0
   d59ce:	d1dc      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
   d59d0:	f04f 0200 	mov.w	r2, #0
   d59d4:	2103      	movs	r1, #3
   d59d6:	4628      	mov	r0, r5
   d59d8:	f7ff ff18 	bl	d580c <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
    if (retval != ICM_20948_Stat_Ok)
   d59dc:	4604      	mov	r4, r0
   d59de:	2800      	cmp	r0, #0
   d59e0:	d1d3      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    dlpcfg.a = acc_d473bw_n499bw;
   d59e2:	f240 7307 	movw	r3, #1799	; 0x707
   d59e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
   d59ea:	9a01      	ldr	r2, [sp, #4]
   d59ec:	2103      	movs	r1, #3
   d59ee:	4628      	mov	r0, r5
   d59f0:	f7ff ff12 	bl	d5818 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>
    if (retval != ICM_20948_Stat_Ok)
   d59f4:	4604      	mov	r4, r0
   d59f6:	2800      	cmp	r0, #0
   d59f8:	d1c7      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Acc, false);
   d59fa:	4602      	mov	r2, r0
   d59fc:	2101      	movs	r1, #1
   d59fe:	4628      	mov	r0, r5
   d5a00:	f7ff ff14 	bl	d582c <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5a04:	4604      	mov	r4, r0
   d5a06:	2800      	cmp	r0, #0
   d5a08:	d1bf      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
   d5a0a:	4602      	mov	r2, r0
   d5a0c:	2102      	movs	r1, #2
   d5a0e:	4628      	mov	r0, r5
   d5a10:	f7ff ff0c 	bl	d582c <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5a14:	4604      	mov	r4, r0
   d5a16:	2800      	cmp	r0, #0
   d5a18:	d1b7      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = startupMagnetometer();
   d5a1a:	4628      	mov	r0, r5
   d5a1c:	f7ff ff75 	bl	d590a <_ZN9ICM_2094819startupMagnetometerEv>
    if (retval != ICM_20948_Stat_Ok)
   d5a20:	4604      	mov	r4, r0
   d5a22:	2800      	cmp	r0, #0
   d5a24:	d1b1      	bne.n	d598a <_ZN9ICM_2094814startupDefaultEv+0xc>
    return status;
   d5a26:	7f2c      	ldrb	r4, [r5, #28]
   d5a28:	e7b0      	b.n	d598c <_ZN9ICM_2094814startupDefaultEv+0xe>
	...

000d5a2c <_ZN13ICM_20948_I2C5beginER7TwoWirebh>:
{
   d5a2c:	b510      	push	{r4, lr}
   d5a2e:	4604      	mov	r4, r0
   d5a30:	4618      	mov	r0, r3
    _ad0 = ad0pin;
   d5a32:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    _i2c = &wirePort;
   d5a36:	6261      	str	r1, [r4, #36]	; 0x24
    _ad0val = ad0val;
   d5a38:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if (_ad0val)
   d5a3c:	b9f2      	cbnz	r2, d5a7c <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x50>
    _addr = ICM_20948_I2C_ADDR_AD0;
   d5a3e:	2268      	movs	r2, #104	; 0x68
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5a40:	28ff      	cmp	r0, #255	; 0xff
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5a42:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5a46:	d002      	beq.n	d5a4e <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x22>
        pinMode(_ad0, OUTPUT);
   d5a48:	2101      	movs	r1, #1
   d5a4a:	f001 fbab 	bl	d71a4 <pinMode>
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5a4e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   d5a52:	28ff      	cmp	r0, #255	; 0xff
   d5a54:	d003      	beq.n	d5a5e <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x32>
        digitalWrite(_ad0, _ad0val);
   d5a56:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d5a5a:	f001 fbb4 	bl	d71c6 <digitalWrite>
    _serif.write = ICM_20948_write_I2C;
   d5a5e:	4b08      	ldr	r3, [pc, #32]	; (d5a80 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x54>)
   d5a60:	62e3      	str	r3, [r4, #44]	; 0x2c
    _serif.read = ICM_20948_read_I2C;
   d5a62:	4b08      	ldr	r3, [pc, #32]	; (d5a84 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x58>)
    _device._serif = &_serif;
   d5a64:	4620      	mov	r0, r4
    _serif.user = (void *)this; // refer to yourself in the user field
   d5a66:	e9c4 340c 	strd	r3, r4, [r4, #48]	; 0x30
    _device._serif = &_serif;
   d5a6a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   d5a6e:	f840 3f04 	str.w	r3, [r0, #4]!
    status = startupDefault();
   d5a72:	f7ff ff84 	bl	d597e <_ZN9ICM_2094814startupDefaultEv>
   d5a76:	f884 0020 	strb.w	r0, [r4, #32]
}
   d5a7a:	bd10      	pop	{r4, pc}
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5a7c:	2269      	movs	r2, #105	; 0x69
   d5a7e:	e7df      	b.n	d5a40 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x14>
   d5a80:	000d5531 	.word	0x000d5531
   d5a84:	000d556f 	.word	0x000d556f

000d5a88 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <os_mutex_recursive_create+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030248 	.word	0x00030248

000d5a98 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <os_mutex_recursive_destroy+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030248 	.word	0x00030248

000d5aa8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <HAL_RNG_GetRandomNumber+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	685b      	ldr	r3, [r3, #4]
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030218 	.word	0x00030218

000d5ab8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <HAL_Delay_Microseconds+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	68db      	ldr	r3, [r3, #12]
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030218 	.word	0x00030218

000d5ac8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	691b      	ldr	r3, [r3, #16]
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030218 	.word	0x00030218

000d5ad8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	695b      	ldr	r3, [r3, #20]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030218 	.word	0x00030218

000d5ae8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <HAL_Validate_Pin_Function+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	685b      	ldr	r3, [r3, #4]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	0003022c 	.word	0x0003022c

000d5af8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <HAL_Pin_Mode+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	689b      	ldr	r3, [r3, #8]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	0003022c 	.word	0x0003022c

000d5b08 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <HAL_Get_Pin_Mode+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	68db      	ldr	r3, [r3, #12]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	0003022c 	.word	0x0003022c

000d5b18 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <HAL_GPIO_Write+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	691b      	ldr	r3, [r3, #16]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	0003022c 	.word	0x0003022c

000d5b28 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <hal_adc_read+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	0003022c 	.word	0x0003022c

000d5b38 <HAL_Set_Direct_Interrupt_Handler>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
DYNALIB_FN(35, hal_gpio, HAL_Interrupts_Detach_Ext, int(uint16_t, uint8_t, void*))
DYNALIB_FN(36, hal_gpio, HAL_Set_Direct_Interrupt_Handler, int(IRQn_Type irqn, HAL_Direct_Interrupt_Handler handler, uint32_t flags, void* reserved))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b03      	ldr	r3, [pc, #12]	; (d5b48 <HAL_Set_Direct_Interrupt_Handler+0x10>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d5b42:	9301      	str	r3, [sp, #4]
   d5b44:	bd08      	pop	{r3, pc}
   d5b46:	0000      	.short	0x0000
   d5b48:	0003022c 	.word	0x0003022c

000d5b4c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5b4c:	b508      	push	{r3, lr}
   d5b4e:	4b02      	ldr	r3, [pc, #8]	; (d5b58 <hal_i2c_set_speed+0xc>)
   d5b50:	681b      	ldr	r3, [r3, #0]
   d5b52:	681b      	ldr	r3, [r3, #0]
   d5b54:	9301      	str	r3, [sp, #4]
   d5b56:	bd08      	pop	{r3, pc}
   d5b58:	00030228 	.word	0x00030228

000d5b5c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5b5c:	b508      	push	{r3, lr}
   d5b5e:	4b02      	ldr	r3, [pc, #8]	; (d5b68 <hal_i2c_begin+0xc>)
   d5b60:	681b      	ldr	r3, [r3, #0]
   d5b62:	68db      	ldr	r3, [r3, #12]
   d5b64:	9301      	str	r3, [sp, #4]
   d5b66:	bd08      	pop	{r3, pc}
   d5b68:	00030228 	.word	0x00030228

000d5b6c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5b6c:	b508      	push	{r3, lr}
   d5b6e:	4b02      	ldr	r3, [pc, #8]	; (d5b78 <hal_i2c_begin_transmission+0xc>)
   d5b70:	681b      	ldr	r3, [r3, #0]
   d5b72:	699b      	ldr	r3, [r3, #24]
   d5b74:	9301      	str	r3, [sp, #4]
   d5b76:	bd08      	pop	{r3, pc}
   d5b78:	00030228 	.word	0x00030228

000d5b7c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5b7c:	b508      	push	{r3, lr}
   d5b7e:	4b02      	ldr	r3, [pc, #8]	; (d5b88 <hal_i2c_end_transmission+0xc>)
   d5b80:	681b      	ldr	r3, [r3, #0]
   d5b82:	69db      	ldr	r3, [r3, #28]
   d5b84:	9301      	str	r3, [sp, #4]
   d5b86:	bd08      	pop	{r3, pc}
   d5b88:	00030228 	.word	0x00030228

000d5b8c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5b8c:	b508      	push	{r3, lr}
   d5b8e:	4b02      	ldr	r3, [pc, #8]	; (d5b98 <hal_i2c_write+0xc>)
   d5b90:	681b      	ldr	r3, [r3, #0]
   d5b92:	6a1b      	ldr	r3, [r3, #32]
   d5b94:	9301      	str	r3, [sp, #4]
   d5b96:	bd08      	pop	{r3, pc}
   d5b98:	00030228 	.word	0x00030228

000d5b9c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5b9c:	b508      	push	{r3, lr}
   d5b9e:	4b02      	ldr	r3, [pc, #8]	; (d5ba8 <hal_i2c_available+0xc>)
   d5ba0:	681b      	ldr	r3, [r3, #0]
   d5ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ba4:	9301      	str	r3, [sp, #4]
   d5ba6:	bd08      	pop	{r3, pc}
   d5ba8:	00030228 	.word	0x00030228

000d5bac <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5bac:	b508      	push	{r3, lr}
   d5bae:	4b02      	ldr	r3, [pc, #8]	; (d5bb8 <hal_i2c_read+0xc>)
   d5bb0:	681b      	ldr	r3, [r3, #0]
   d5bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bb4:	9301      	str	r3, [sp, #4]
   d5bb6:	bd08      	pop	{r3, pc}
   d5bb8:	00030228 	.word	0x00030228

000d5bbc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5bbc:	b508      	push	{r3, lr}
   d5bbe:	4b02      	ldr	r3, [pc, #8]	; (d5bc8 <hal_i2c_peek+0xc>)
   d5bc0:	681b      	ldr	r3, [r3, #0]
   d5bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bc4:	9301      	str	r3, [sp, #4]
   d5bc6:	bd08      	pop	{r3, pc}
   d5bc8:	00030228 	.word	0x00030228

000d5bcc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5bcc:	b508      	push	{r3, lr}
   d5bce:	4b02      	ldr	r3, [pc, #8]	; (d5bd8 <hal_i2c_flush+0xc>)
   d5bd0:	681b      	ldr	r3, [r3, #0]
   d5bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bd4:	9301      	str	r3, [sp, #4]
   d5bd6:	bd08      	pop	{r3, pc}
   d5bd8:	00030228 	.word	0x00030228

000d5bdc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5bdc:	b508      	push	{r3, lr}
   d5bde:	4b02      	ldr	r3, [pc, #8]	; (d5be8 <hal_i2c_is_enabled+0xc>)
   d5be0:	681b      	ldr	r3, [r3, #0]
   d5be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5be4:	9301      	str	r3, [sp, #4]
   d5be6:	bd08      	pop	{r3, pc}
   d5be8:	00030228 	.word	0x00030228

000d5bec <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5bec:	b508      	push	{r3, lr}
   d5bee:	4b02      	ldr	r3, [pc, #8]	; (d5bf8 <hal_i2c_init+0xc>)
   d5bf0:	681b      	ldr	r3, [r3, #0]
   d5bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5bf4:	9301      	str	r3, [sp, #4]
   d5bf6:	bd08      	pop	{r3, pc}
   d5bf8:	00030228 	.word	0x00030228

000d5bfc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5bfc:	b508      	push	{r3, lr}
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <hal_i2c_request_ex+0xc>)
   d5c00:	681b      	ldr	r3, [r3, #0]
   d5c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5c04:	9301      	str	r3, [sp, #4]
   d5c06:	bd08      	pop	{r3, pc}
   d5c08:	00030228 	.word	0x00030228

000d5c0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5c0c:	b508      	push	{r3, lr}
   d5c0e:	4b02      	ldr	r3, [pc, #8]	; (d5c18 <inet_inet_ntop+0xc>)
   d5c10:	681b      	ldr	r3, [r3, #0]
   d5c12:	695b      	ldr	r3, [r3, #20]
   d5c14:	9301      	str	r3, [sp, #4]
   d5c16:	bd08      	pop	{r3, pc}
   d5c18:	00030264 	.word	0x00030264

000d5c1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5c1c:	b508      	push	{r3, lr}
   d5c1e:	4b02      	ldr	r3, [pc, #8]	; (d5c28 <netdb_freeaddrinfo+0xc>)
   d5c20:	681b      	ldr	r3, [r3, #0]
   d5c22:	689b      	ldr	r3, [r3, #8]
   d5c24:	9301      	str	r3, [sp, #4]
   d5c26:	bd08      	pop	{r3, pc}
   d5c28:	00030268 	.word	0x00030268

000d5c2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5c2c:	b508      	push	{r3, lr}
   d5c2e:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <netdb_getaddrinfo+0xc>)
   d5c30:	681b      	ldr	r3, [r3, #0]
   d5c32:	68db      	ldr	r3, [r3, #12]
   d5c34:	9301      	str	r3, [sp, #4]
   d5c36:	bd08      	pop	{r3, pc}
   d5c38:	00030268 	.word	0x00030268

000d5c3c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5c3c:	b508      	push	{r3, lr}
   d5c3e:	4b02      	ldr	r3, [pc, #8]	; (d5c48 <hal_spi_init+0xc>)
   d5c40:	681b      	ldr	r3, [r3, #0]
   d5c42:	69db      	ldr	r3, [r3, #28]
   d5c44:	9301      	str	r3, [sp, #4]
   d5c46:	bd08      	pop	{r3, pc}
   d5c48:	00030230 	.word	0x00030230

000d5c4c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5c4c:	b508      	push	{r3, lr}
   d5c4e:	4b02      	ldr	r3, [pc, #8]	; (d5c58 <hal_spi_is_enabled+0xc>)
   d5c50:	681b      	ldr	r3, [r3, #0]
   d5c52:	6a1b      	ldr	r3, [r3, #32]
   d5c54:	9301      	str	r3, [sp, #4]
   d5c56:	bd08      	pop	{r3, pc}
   d5c58:	00030230 	.word	0x00030230

000d5c5c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5c5c:	b508      	push	{r3, lr}
   d5c5e:	4b02      	ldr	r3, [pc, #8]	; (d5c68 <hal_usart_init+0xc>)
   d5c60:	681b      	ldr	r3, [r3, #0]
   d5c62:	681b      	ldr	r3, [r3, #0]
   d5c64:	9301      	str	r3, [sp, #4]
   d5c66:	bd08      	pop	{r3, pc}
   d5c68:	0003023c 	.word	0x0003023c

000d5c6c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5c6c:	b508      	push	{r3, lr}
   d5c6e:	4b02      	ldr	r3, [pc, #8]	; (d5c78 <hal_usart_write+0xc>)
   d5c70:	681b      	ldr	r3, [r3, #0]
   d5c72:	68db      	ldr	r3, [r3, #12]
   d5c74:	9301      	str	r3, [sp, #4]
   d5c76:	bd08      	pop	{r3, pc}
   d5c78:	0003023c 	.word	0x0003023c

000d5c7c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5c7c:	b508      	push	{r3, lr}
   d5c7e:	4b02      	ldr	r3, [pc, #8]	; (d5c88 <hal_usart_available+0xc>)
   d5c80:	681b      	ldr	r3, [r3, #0]
   d5c82:	691b      	ldr	r3, [r3, #16]
   d5c84:	9301      	str	r3, [sp, #4]
   d5c86:	bd08      	pop	{r3, pc}
   d5c88:	0003023c 	.word	0x0003023c

000d5c8c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5c8c:	b508      	push	{r3, lr}
   d5c8e:	4b02      	ldr	r3, [pc, #8]	; (d5c98 <hal_usart_read+0xc>)
   d5c90:	681b      	ldr	r3, [r3, #0]
   d5c92:	695b      	ldr	r3, [r3, #20]
   d5c94:	9301      	str	r3, [sp, #4]
   d5c96:	bd08      	pop	{r3, pc}
   d5c98:	0003023c 	.word	0x0003023c

000d5c9c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5c9c:	b508      	push	{r3, lr}
   d5c9e:	4b02      	ldr	r3, [pc, #8]	; (d5ca8 <hal_usart_peek+0xc>)
   d5ca0:	681b      	ldr	r3, [r3, #0]
   d5ca2:	699b      	ldr	r3, [r3, #24]
   d5ca4:	9301      	str	r3, [sp, #4]
   d5ca6:	bd08      	pop	{r3, pc}
   d5ca8:	0003023c 	.word	0x0003023c

000d5cac <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <hal_usart_flush+0xc>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	69db      	ldr	r3, [r3, #28]
   d5cb4:	9301      	str	r3, [sp, #4]
   d5cb6:	bd08      	pop	{r3, pc}
   d5cb8:	0003023c 	.word	0x0003023c

000d5cbc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5cbc:	b508      	push	{r3, lr}
   d5cbe:	4b02      	ldr	r3, [pc, #8]	; (d5cc8 <hal_usart_is_enabled+0xc>)
   d5cc0:	681b      	ldr	r3, [r3, #0]
   d5cc2:	6a1b      	ldr	r3, [r3, #32]
   d5cc4:	9301      	str	r3, [sp, #4]
   d5cc6:	bd08      	pop	{r3, pc}
   d5cc8:	0003023c 	.word	0x0003023c

000d5ccc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5ccc:	b508      	push	{r3, lr}
   d5cce:	4b02      	ldr	r3, [pc, #8]	; (d5cd8 <hal_usart_available_data_for_write+0xc>)
   d5cd0:	681b      	ldr	r3, [r3, #0]
   d5cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5cd4:	9301      	str	r3, [sp, #4]
   d5cd6:	bd08      	pop	{r3, pc}
   d5cd8:	0003023c 	.word	0x0003023c

000d5cdc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5cdc:	b508      	push	{r3, lr}
   d5cde:	4b02      	ldr	r3, [pc, #8]	; (d5ce8 <HAL_USB_USART_Init+0xc>)
   d5ce0:	681b      	ldr	r3, [r3, #0]
   d5ce2:	681b      	ldr	r3, [r3, #0]
   d5ce4:	9301      	str	r3, [sp, #4]
   d5ce6:	bd08      	pop	{r3, pc}
   d5ce8:	0003024c 	.word	0x0003024c

000d5cec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5cec:	b508      	push	{r3, lr}
   d5cee:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <HAL_USB_USART_Begin+0xc>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	685b      	ldr	r3, [r3, #4]
   d5cf4:	9301      	str	r3, [sp, #4]
   d5cf6:	bd08      	pop	{r3, pc}
   d5cf8:	0003024c 	.word	0x0003024c

000d5cfc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5cfc:	b508      	push	{r3, lr}
   d5cfe:	4b02      	ldr	r3, [pc, #8]	; (d5d08 <HAL_USB_USART_Available_Data+0xc>)
   d5d00:	681b      	ldr	r3, [r3, #0]
   d5d02:	691b      	ldr	r3, [r3, #16]
   d5d04:	9301      	str	r3, [sp, #4]
   d5d06:	bd08      	pop	{r3, pc}
   d5d08:	0003024c 	.word	0x0003024c

000d5d0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d0c:	b508      	push	{r3, lr}
   d5d0e:	4b02      	ldr	r3, [pc, #8]	; (d5d18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d10:	681b      	ldr	r3, [r3, #0]
   d5d12:	695b      	ldr	r3, [r3, #20]
   d5d14:	9301      	str	r3, [sp, #4]
   d5d16:	bd08      	pop	{r3, pc}
   d5d18:	0003024c 	.word	0x0003024c

000d5d1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d1c:	b508      	push	{r3, lr}
   d5d1e:	4b02      	ldr	r3, [pc, #8]	; (d5d28 <HAL_USB_USART_Receive_Data+0xc>)
   d5d20:	681b      	ldr	r3, [r3, #0]
   d5d22:	699b      	ldr	r3, [r3, #24]
   d5d24:	9301      	str	r3, [sp, #4]
   d5d26:	bd08      	pop	{r3, pc}
   d5d28:	0003024c 	.word	0x0003024c

000d5d2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d2c:	b508      	push	{r3, lr}
   d5d2e:	4b02      	ldr	r3, [pc, #8]	; (d5d38 <HAL_USB_USART_Send_Data+0xc>)
   d5d30:	681b      	ldr	r3, [r3, #0]
   d5d32:	69db      	ldr	r3, [r3, #28]
   d5d34:	9301      	str	r3, [sp, #4]
   d5d36:	bd08      	pop	{r3, pc}
   d5d38:	0003024c 	.word	0x0003024c

000d5d3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d3c:	b508      	push	{r3, lr}
   d5d3e:	4b02      	ldr	r3, [pc, #8]	; (d5d48 <HAL_USB_USART_Flush_Data+0xc>)
   d5d40:	681b      	ldr	r3, [r3, #0]
   d5d42:	6a1b      	ldr	r3, [r3, #32]
   d5d44:	9301      	str	r3, [sp, #4]
   d5d46:	bd08      	pop	{r3, pc}
   d5d48:	0003024c 	.word	0x0003024c

000d5d4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d4c:	b508      	push	{r3, lr}
   d5d4e:	4b02      	ldr	r3, [pc, #8]	; (d5d58 <panic_+0xc>)
   d5d50:	681b      	ldr	r3, [r3, #0]
   d5d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d54:	9301      	str	r3, [sp, #4]
   d5d56:	bd08      	pop	{r3, pc}
   d5d58:	00030260 	.word	0x00030260

000d5d5c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b02      	ldr	r3, [pc, #8]	; (d5d68 <set_system_mode+0xc>)
   d5d60:	681b      	ldr	r3, [r3, #0]
   d5d62:	685b      	ldr	r3, [r3, #4]
   d5d64:	9301      	str	r3, [sp, #4]
   d5d66:	bd08      	pop	{r3, pc}
   d5d68:	00030220 	.word	0x00030220

000d5d6c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d6c:	b508      	push	{r3, lr}
   d5d6e:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <system_delay_ms+0xc>)
   d5d70:	681b      	ldr	r3, [r3, #0]
   d5d72:	695b      	ldr	r3, [r3, #20]
   d5d74:	9301      	str	r3, [sp, #4]
   d5d76:	bd08      	pop	{r3, pc}
   d5d78:	00030220 	.word	0x00030220

000d5d7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b02      	ldr	r3, [pc, #8]	; (d5d88 <application_thread_current+0xc>)
   d5d80:	681b      	ldr	r3, [r3, #0]
   d5d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5d84:	9301      	str	r3, [sp, #4]
   d5d86:	bd08      	pop	{r3, pc}
   d5d88:	00030220 	.word	0x00030220

000d5d8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5d8c:	b508      	push	{r3, lr}
   d5d8e:	4b02      	ldr	r3, [pc, #8]	; (d5d98 <application_thread_invoke+0xc>)
   d5d90:	681b      	ldr	r3, [r3, #0]
   d5d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5d94:	9301      	str	r3, [sp, #4]
   d5d96:	bd08      	pop	{r3, pc}
   d5d98:	00030220 	.word	0x00030220

000d5d9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5d9c:	b508      	push	{r3, lr}
   d5d9e:	4b03      	ldr	r3, [pc, #12]	; (d5dac <system_ctrl_set_app_request_handler+0x10>)
   d5da0:	681b      	ldr	r3, [r3, #0]
   d5da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5da6:	9301      	str	r3, [sp, #4]
   d5da8:	bd08      	pop	{r3, pc}
   d5daa:	0000      	.short	0x0000
   d5dac:	00030220 	.word	0x00030220

000d5db0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b03      	ldr	r3, [pc, #12]	; (d5dc0 <system_ctrl_set_result+0x10>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5dba:	9301      	str	r3, [sp, #4]
   d5dbc:	bd08      	pop	{r3, pc}
   d5dbe:	0000      	.short	0x0000
   d5dc0:	00030220 	.word	0x00030220

000d5dc4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5dc4:	b508      	push	{r3, lr}
   d5dc6:	4b02      	ldr	r3, [pc, #8]	; (d5dd0 <spark_cloud_flag_connected+0xc>)
   d5dc8:	681b      	ldr	r3, [r3, #0]
   d5dca:	695b      	ldr	r3, [r3, #20]
   d5dcc:	9301      	str	r3, [sp, #4]
   d5dce:	bd08      	pop	{r3, pc}
   d5dd0:	00030244 	.word	0x00030244

000d5dd4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5dd4:	b508      	push	{r3, lr}
   d5dd6:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <spark_send_event+0xc>)
   d5dd8:	681b      	ldr	r3, [r3, #0]
   d5dda:	6a1b      	ldr	r3, [r3, #32]
   d5ddc:	9301      	str	r3, [sp, #4]
   d5dde:	bd08      	pop	{r3, pc}
   d5de0:	00030244 	.word	0x00030244

000d5de4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5de4:	b508      	push	{r3, lr}
   d5de6:	4b02      	ldr	r3, [pc, #8]	; (d5df0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5de8:	681b      	ldr	r3, [r3, #0]
   d5dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5dec:	9301      	str	r3, [sp, #4]
   d5dee:	bd08      	pop	{r3, pc}
   d5df0:	00030244 	.word	0x00030244

000d5df4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5df4:	b508      	push	{r3, lr}
   d5df6:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <network_connect+0xc>)
   d5df8:	681b      	ldr	r3, [r3, #0]
   d5dfa:	685b      	ldr	r3, [r3, #4]
   d5dfc:	9301      	str	r3, [sp, #4]
   d5dfe:	bd08      	pop	{r3, pc}
   d5e00:	00030240 	.word	0x00030240

000d5e04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5e04:	b508      	push	{r3, lr}
   d5e06:	4b02      	ldr	r3, [pc, #8]	; (d5e10 <network_connecting+0xc>)
   d5e08:	681b      	ldr	r3, [r3, #0]
   d5e0a:	689b      	ldr	r3, [r3, #8]
   d5e0c:	9301      	str	r3, [sp, #4]
   d5e0e:	bd08      	pop	{r3, pc}
   d5e10:	00030240 	.word	0x00030240

000d5e14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5e14:	b508      	push	{r3, lr}
   d5e16:	4b02      	ldr	r3, [pc, #8]	; (d5e20 <network_disconnect+0xc>)
   d5e18:	681b      	ldr	r3, [r3, #0]
   d5e1a:	68db      	ldr	r3, [r3, #12]
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	bd08      	pop	{r3, pc}
   d5e20:	00030240 	.word	0x00030240

000d5e24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5e24:	b508      	push	{r3, lr}
   d5e26:	4b02      	ldr	r3, [pc, #8]	; (d5e30 <network_ready+0xc>)
   d5e28:	681b      	ldr	r3, [r3, #0]
   d5e2a:	691b      	ldr	r3, [r3, #16]
   d5e2c:	9301      	str	r3, [sp, #4]
   d5e2e:	bd08      	pop	{r3, pc}
   d5e30:	00030240 	.word	0x00030240

000d5e34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e34:	b508      	push	{r3, lr}
   d5e36:	4b02      	ldr	r3, [pc, #8]	; (d5e40 <network_on+0xc>)
   d5e38:	681b      	ldr	r3, [r3, #0]
   d5e3a:	695b      	ldr	r3, [r3, #20]
   d5e3c:	9301      	str	r3, [sp, #4]
   d5e3e:	bd08      	pop	{r3, pc}
   d5e40:	00030240 	.word	0x00030240

000d5e44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e44:	b508      	push	{r3, lr}
   d5e46:	4b02      	ldr	r3, [pc, #8]	; (d5e50 <network_off+0xc>)
   d5e48:	681b      	ldr	r3, [r3, #0]
   d5e4a:	699b      	ldr	r3, [r3, #24]
   d5e4c:	9301      	str	r3, [sp, #4]
   d5e4e:	bd08      	pop	{r3, pc}
   d5e50:	00030240 	.word	0x00030240

000d5e54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e54:	b508      	push	{r3, lr}
   d5e56:	4b02      	ldr	r3, [pc, #8]	; (d5e60 <network_listen+0xc>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	69db      	ldr	r3, [r3, #28]
   d5e5c:	9301      	str	r3, [sp, #4]
   d5e5e:	bd08      	pop	{r3, pc}
   d5e60:	00030240 	.word	0x00030240

000d5e64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e64:	b508      	push	{r3, lr}
   d5e66:	4b02      	ldr	r3, [pc, #8]	; (d5e70 <network_listening+0xc>)
   d5e68:	681b      	ldr	r3, [r3, #0]
   d5e6a:	6a1b      	ldr	r3, [r3, #32]
   d5e6c:	9301      	str	r3, [sp, #4]
   d5e6e:	bd08      	pop	{r3, pc}
   d5e70:	00030240 	.word	0x00030240

000d5e74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e74:	b508      	push	{r3, lr}
   d5e76:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <network_set_listen_timeout+0xc>)
   d5e78:	681b      	ldr	r3, [r3, #0]
   d5e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e7c:	9301      	str	r3, [sp, #4]
   d5e7e:	bd08      	pop	{r3, pc}
   d5e80:	00030240 	.word	0x00030240

000d5e84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e84:	b508      	push	{r3, lr}
   d5e86:	4b02      	ldr	r3, [pc, #8]	; (d5e90 <network_get_listen_timeout+0xc>)
   d5e88:	681b      	ldr	r3, [r3, #0]
   d5e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e8c:	9301      	str	r3, [sp, #4]
   d5e8e:	bd08      	pop	{r3, pc}
   d5e90:	00030240 	.word	0x00030240

000d5e94 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5e94:	b508      	push	{r3, lr}
   d5e96:	4b02      	ldr	r3, [pc, #8]	; (d5ea0 <malloc+0xc>)
   d5e98:	681b      	ldr	r3, [r3, #0]
   d5e9a:	681b      	ldr	r3, [r3, #0]
   d5e9c:	9301      	str	r3, [sp, #4]
   d5e9e:	bd08      	pop	{r3, pc}
   d5ea0:	0003021c 	.word	0x0003021c

000d5ea4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b02      	ldr	r3, [pc, #8]	; (d5eb0 <free+0xc>)
   d5ea8:	681b      	ldr	r3, [r3, #0]
   d5eaa:	685b      	ldr	r3, [r3, #4]
   d5eac:	9301      	str	r3, [sp, #4]
   d5eae:	bd08      	pop	{r3, pc}
   d5eb0:	0003021c 	.word	0x0003021c

000d5eb4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5eb4:	b508      	push	{r3, lr}
   d5eb6:	4b02      	ldr	r3, [pc, #8]	; (d5ec0 <realloc+0xc>)
   d5eb8:	681b      	ldr	r3, [r3, #0]
   d5eba:	689b      	ldr	r3, [r3, #8]
   d5ebc:	9301      	str	r3, [sp, #4]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	0003021c 	.word	0x0003021c

000d5ec4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5ec4:	b508      	push	{r3, lr}
   d5ec6:	4b02      	ldr	r3, [pc, #8]	; (d5ed0 <vsnprintf+0xc>)
   d5ec8:	681b      	ldr	r3, [r3, #0]
   d5eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ecc:	9301      	str	r3, [sp, #4]
   d5ece:	bd08      	pop	{r3, pc}
   d5ed0:	0003021c 	.word	0x0003021c

000d5ed4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5ed4:	b508      	push	{r3, lr}
   d5ed6:	4b02      	ldr	r3, [pc, #8]	; (d5ee0 <abort+0xc>)
   d5ed8:	681b      	ldr	r3, [r3, #0]
   d5eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5edc:	9301      	str	r3, [sp, #4]
   d5ede:	bd08      	pop	{r3, pc}
   d5ee0:	0003021c 	.word	0x0003021c

000d5ee4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5ee4:	b508      	push	{r3, lr}
   d5ee6:	4b02      	ldr	r3, [pc, #8]	; (d5ef0 <_malloc_r+0xc>)
   d5ee8:	681b      	ldr	r3, [r3, #0]
   d5eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eec:	9301      	str	r3, [sp, #4]
   d5eee:	bd08      	pop	{r3, pc}
   d5ef0:	0003021c 	.word	0x0003021c

000d5ef4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5ef4:	b508      	push	{r3, lr}
   d5ef6:	4b02      	ldr	r3, [pc, #8]	; (d5f00 <newlib_impure_ptr_callback+0xc>)
   d5ef8:	681b      	ldr	r3, [r3, #0]
   d5efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5efc:	9301      	str	r3, [sp, #4]
   d5efe:	bd08      	pop	{r3, pc}
   d5f00:	0003021c 	.word	0x0003021c

000d5f04 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5f04:	2100      	movs	r1, #0
   d5f06:	f7ff bf31 	b.w	d5d6c <system_delay_ms>

000d5f0a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5f0a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5f0c:	6883      	ldr	r3, [r0, #8]
   d5f0e:	4604      	mov	r4, r0
   d5f10:	b90b      	cbnz	r3, d5f16 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5f12:	f001 fb40 	bl	d7596 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f16:	68c3      	ldr	r3, [r0, #12]
   d5f18:	4798      	blx	r3
      if (_M_manager)
   d5f1a:	68a3      	ldr	r3, [r4, #8]
   d5f1c:	b11b      	cbz	r3, d5f26 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f1e:	2203      	movs	r2, #3
   d5f20:	4621      	mov	r1, r4
   d5f22:	4620      	mov	r0, r4
   d5f24:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5f26:	4620      	mov	r0, r4
   d5f28:	2110      	movs	r1, #16
}
   d5f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5f2e:	f001 bb2e 	b.w	d758e <_ZdlPvj>

000d5f32 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5f32:	b510      	push	{r4, lr}
   d5f34:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5f36:	6800      	ldr	r0, [r0, #0]
   d5f38:	b108      	cbz	r0, d5f3e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5f3a:	f7ff fdad 	bl	d5a98 <os_mutex_recursive_destroy>
    }
   d5f3e:	4620      	mov	r0, r4
   d5f40:	bd10      	pop	{r4, pc}

000d5f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5f42:	680b      	ldr	r3, [r1, #0]
   d5f44:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5f46:	b113      	cbz	r3, d5f4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5f48:	685a      	ldr	r2, [r3, #4]
   d5f4a:	3201      	adds	r2, #1
   d5f4c:	605a      	str	r2, [r3, #4]
      }
   d5f4e:	4770      	bx	lr

000d5f50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5f50:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5f52:	4c06      	ldr	r4, [pc, #24]	; (d5f6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5f54:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5f56:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5f58:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5f5a:	f7ff fd95 	bl	d5a88 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5f5e:	4620      	mov	r0, r4
   d5f60:	4a03      	ldr	r2, [pc, #12]	; (d5f70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5f62:	4904      	ldr	r1, [pc, #16]	; (d5f74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5f68:	f001 bb0c 	b.w	d7584 <__aeabi_atexit>
   d5f6c:	2003e608 	.word	0x2003e608
   d5f70:	2003e45c 	.word	0x2003e45c
   d5f74:	000d5f33 	.word	0x000d5f33

000d5f78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f78:	4770      	bx	lr

000d5f7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5f7a:	2000      	movs	r0, #0
   d5f7c:	4770      	bx	lr

000d5f7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f7e:	b510      	push	{r4, lr}
   d5f80:	2110      	movs	r1, #16
   d5f82:	4604      	mov	r4, r0
   d5f84:	f001 fb03 	bl	d758e <_ZdlPvj>
   d5f88:	4620      	mov	r0, r4
   d5f8a:	bd10      	pop	{r4, pc}

000d5f8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5f8c:	b508      	push	{r3, lr}
      { delete this; }
   d5f8e:	f7ff fff6 	bl	d5f7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5f92:	bd08      	pop	{r3, pc}

000d5f94 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5f94:	b510      	push	{r4, lr}
      if (_M_manager)
   d5f96:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5f98:	4604      	mov	r4, r0
      if (_M_manager)
   d5f9a:	b113      	cbz	r3, d5fa2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f9c:	2203      	movs	r2, #3
   d5f9e:	4601      	mov	r1, r0
   d5fa0:	4798      	blx	r3
    }
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	bd10      	pop	{r4, pc}

000d5fa6 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5fa6:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5fa8:	2200      	movs	r2, #0
   d5faa:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5fae:	6002      	str	r2, [r0, #0]
   d5fb0:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5fb2:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fb4:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5fb6:	680c      	ldr	r4, [r1, #0]
   d5fb8:	8085      	strh	r5, [r0, #4]
   d5fba:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5fbc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5fbe:	bd30      	pop	{r4, r5, pc}

000d5fc0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5fc0:	b510      	push	{r4, lr}
   d5fc2:	4604      	mov	r4, r0
    free((void*)msg_);
   d5fc4:	6800      	ldr	r0, [r0, #0]
   d5fc6:	f7ff ff6d 	bl	d5ea4 <free>
}
   d5fca:	4620      	mov	r0, r4
   d5fcc:	bd10      	pop	{r4, pc}

000d5fce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5fce:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5fd0:	68c4      	ldr	r4, [r0, #12]
   d5fd2:	b1f4      	cbz	r4, d6012 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5fd4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5fd6:	2b02      	cmp	r3, #2
   d5fd8:	d103      	bne.n	d5fe2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5fda:	f104 000c 	add.w	r0, r4, #12
   d5fde:	f7ff ffef 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5fe2:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5fe4:	b135      	cbz	r5, d5ff4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5fe6:	4628      	mov	r0, r5
   d5fe8:	f7ff ffd4 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
   d5fec:	2110      	movs	r1, #16
   d5fee:	4628      	mov	r0, r5
   d5ff0:	f001 facd 	bl	d758e <_ZdlPvj>
   d5ff4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5ff6:	b135      	cbz	r5, d6006 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5ff8:	4628      	mov	r0, r5
   d5ffa:	f7ff ffcb 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
   d5ffe:	2110      	movs	r1, #16
   d6000:	4628      	mov	r0, r5
   d6002:	f001 fac4 	bl	d758e <_ZdlPvj>
   d6006:	4620      	mov	r0, r4
   d6008:	2114      	movs	r1, #20
   d600a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d600e:	f001 babe 	b.w	d758e <_ZdlPvj>
   d6012:	bd38      	pop	{r3, r4, r5, pc}

000d6014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6014:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6016:	460e      	mov	r6, r1
   d6018:	4604      	mov	r4, r0
   d601a:	f856 3b04 	ldr.w	r3, [r6], #4
   d601e:	9300      	str	r3, [sp, #0]
   d6020:	460d      	mov	r5, r1
   d6022:	a801      	add	r0, sp, #4
   d6024:	4631      	mov	r1, r6
   d6026:	f7ff ff8c 	bl	d5f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d602a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d602c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d602e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6030:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6032:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6034:	2300      	movs	r3, #0
   d6036:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6038:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d603a:	f7fe fda9 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d603e:	4630      	mov	r0, r6
   d6040:	f7fe fda6 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6044:	4628      	mov	r0, r5
   d6046:	2108      	movs	r1, #8
   d6048:	f001 faa1 	bl	d758e <_ZdlPvj>
        return p;
    }
   d604c:	4620      	mov	r0, r4
   d604e:	b002      	add	sp, #8
   d6050:	bd70      	pop	{r4, r5, r6, pc}

000d6052 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6052:	b513      	push	{r0, r1, r4, lr}
   d6054:	460b      	mov	r3, r1
   d6056:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6058:	e9d0 0100 	ldrd	r0, r1, [r0]
   d605c:	466c      	mov	r4, sp
   d605e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6062:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6066:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d606a:	e894 0003 	ldmia.w	r4, {r0, r1}
   d606e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6072:	b002      	add	sp, #8
   d6074:	bd10      	pop	{r4, pc}

000d6076 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6076:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6078:	b510      	push	{r4, lr}
      if (_M_empty())
   d607a:	b90a      	cbnz	r2, d6080 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d607c:	f001 fa8b 	bl	d7596 <_ZSt25__throw_bad_function_callv>
    }
   d6080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6084:	68c3      	ldr	r3, [r0, #12]
   d6086:	4718      	bx	r3

000d6088 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6088:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d608a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d608c:	f100 0110 	add.w	r1, r0, #16
   d6090:	f7ff fff1 	bl	d6076 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6094:	bd08      	pop	{r3, pc}

000d6096 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6096:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6098:	b510      	push	{r4, lr}
      if (_M_empty())
   d609a:	b90a      	cbnz	r2, d60a0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d609c:	f001 fa7b 	bl	d7596 <_ZSt25__throw_bad_function_callv>
    }
   d60a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d60a4:	68c3      	ldr	r3, [r0, #12]
   d60a6:	4718      	bx	r3

000d60a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d60a8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d60aa:	6800      	ldr	r0, [r0, #0]
   d60ac:	f100 0110 	add.w	r1, r0, #16
   d60b0:	f7ff fff1 	bl	d6096 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d60b4:	bd08      	pop	{r3, pc}
	...

000d60b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d60b8:	b538      	push	{r3, r4, r5, lr}
   d60ba:	2300      	movs	r3, #0
   d60bc:	4604      	mov	r4, r0
   d60be:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60c0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d60c2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60c4:	f7fd ffe7 	bl	d4096 <_Znwj>
   d60c8:	b128      	cbz	r0, d60d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d60ca:	2301      	movs	r3, #1
   d60cc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d60d0:	4b02      	ldr	r3, [pc, #8]	; (d60dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d60d2:	6003      	str	r3, [r0, #0]
   d60d4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d60d6:	6020      	str	r0, [r4, #0]
	}
   d60d8:	4620      	mov	r0, r4
   d60da:	bd38      	pop	{r3, r4, r5, pc}
   d60dc:	000d823c 	.word	0x000d823c

000d60e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d60e0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d60e2:	2300      	movs	r3, #0
   d60e4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d60e6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d60e8:	4604      	mov	r4, r0
   d60ea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d60ec:	b12b      	cbz	r3, d60fa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d60ee:	2202      	movs	r2, #2
   d60f0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d60f2:	68eb      	ldr	r3, [r5, #12]
   d60f4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d60f6:	68ab      	ldr	r3, [r5, #8]
   d60f8:	60a3      	str	r3, [r4, #8]
    }
   d60fa:	4620      	mov	r0, r4
   d60fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6100:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6102:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6104:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6106:	4668      	mov	r0, sp
   d6108:	f7ff ff4d 	bl	d5fa6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d610c:	f04f 0302 	mov.w	r3, #2
   d6110:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6114:	2a00      	cmp	r2, #0
   d6116:	d103      	bne.n	d6120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6118:	e8c4 3f41 	strexb	r1, r3, [r4]
   d611c:	2900      	cmp	r1, #0
   d611e:	d1f7      	bne.n	d6110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6120:	d125      	bne.n	d616e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6122:	f104 050c 	add.w	r5, r4, #12
   d6126:	4669      	mov	r1, sp
   d6128:	4628      	mov	r0, r5
   d612a:	f7ff ff3c 	bl	d5fa6 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d612e:	f3bf 8f5b 	dmb	ish
   d6132:	2301      	movs	r3, #1
   d6134:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6136:	2000      	movs	r0, #0
   d6138:	f104 0308 	add.w	r3, r4, #8
   d613c:	f3bf 8f5b 	dmb	ish
   d6140:	e853 6f00 	ldrex	r6, [r3]
   d6144:	e843 0200 	strex	r2, r0, [r3]
   d6148:	2a00      	cmp	r2, #0
   d614a:	d1f9      	bne.n	d6140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d614c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6150:	b16e      	cbz	r6, d616e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6152:	f7ff fe13 	bl	d5d7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6156:	b178      	cbz	r0, d6178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6158:	4629      	mov	r1, r5
   d615a:	4630      	mov	r0, r6
   d615c:	f7ff ff8b 	bl	d6076 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6160:	4630      	mov	r0, r6
   d6162:	f7ff ff17 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6166:	2110      	movs	r1, #16
   d6168:	4630      	mov	r0, r6
   d616a:	f001 fa10 	bl	d758e <_ZdlPvj>
        p_->setError(std::move(error));
   d616e:	4668      	mov	r0, sp
   d6170:	f7ff ff26 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
    }
   d6174:	b009      	add	sp, #36	; 0x24
   d6176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6178:	4631      	mov	r1, r6
   d617a:	a802      	add	r0, sp, #8
   d617c:	f7ff ffb0 	bl	d60e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6180:	68e0      	ldr	r0, [r4, #12]
   d6182:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6186:	b108      	cbz	r0, d618c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6188:	f001 feaa 	bl	d7ee0 <strdup>
        type_(type) {
   d618c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d618e:	2010      	movs	r0, #16
   d6190:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6194:	f7fd ff7f 	bl	d4096 <_Znwj>
   d6198:	4605      	mov	r5, r0
   d619a:	b1e8      	cbz	r0, d61d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d619c:	2700      	movs	r7, #0
   d619e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61a0:	2018      	movs	r0, #24
   d61a2:	f7fd ff78 	bl	d4096 <_Znwj>
   d61a6:	4604      	mov	r4, r0
   d61a8:	b188      	cbz	r0, d61ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d61aa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d61ac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d61ae:	a802      	add	r0, sp, #8
   d61b0:	f7ff ff4f 	bl	d6052 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61b4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61b6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61b8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d61bc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61be:	a906      	add	r1, sp, #24
   d61c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61c2:	60e3      	str	r3, [r4, #12]
   d61c4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d61c8:	9205      	str	r2, [sp, #20]
   d61ca:	f7ff feec 	bl	d5fa6 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d61ce:	4b08      	ldr	r3, [pc, #32]	; (d61f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d61d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d61d2:	4b08      	ldr	r3, [pc, #32]	; (d61f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61d4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d61d6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d61d8:	a806      	add	r0, sp, #24
   d61da:	f7ff fef1 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d61de:	a802      	add	r0, sp, #8
   d61e0:	f7ff fed8 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d61e4:	2200      	movs	r2, #0
   d61e6:	4629      	mov	r1, r5
   d61e8:	4803      	ldr	r0, [pc, #12]	; (d61f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d61ea:	f7ff fdcf 	bl	d5d8c <application_thread_invoke>
   d61ee:	e7b7      	b.n	d6160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d61f0:	000d6089 	.word	0x000d6089
   d61f4:	000d6321 	.word	0x000d6321
   d61f8:	000d5f0b 	.word	0x000d5f0b

000d61fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d61fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6200:	b08a      	sub	sp, #40	; 0x28
   d6202:	4605      	mov	r5, r0
   d6204:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6208:	460c      	mov	r4, r1
   d620a:	4617      	mov	r7, r2
   d620c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d620e:	f7ff fdd9 	bl	d5dc4 <spark_cloud_flag_connected>
   d6212:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6214:	4682      	mov	sl, r0
   d6216:	bb38      	cbnz	r0, d6268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6218:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d621c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d621e:	a905      	add	r1, sp, #20
   d6220:	4630      	mov	r0, r6
   d6222:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6226:	f7ff febe 	bl	d5fa6 <_ZN8particle5ErrorC1EOS0_>
   d622a:	2014      	movs	r0, #20
   d622c:	f7fd ff33 	bl	d4096 <_Znwj>
   d6230:	4604      	mov	r4, r0
   d6232:	b148      	cbz	r0, d6248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6234:	2302      	movs	r3, #2
   d6236:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6238:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d623a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d623e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6240:	4631      	mov	r1, r6
   d6242:	300c      	adds	r0, #12
   d6244:	f7ff feaf 	bl	d5fa6 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6248:	4628      	mov	r0, r5
	: __shared_count(__p)
   d624a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d624c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6250:	f7ff ff32 	bl	d60b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6254:	4630      	mov	r0, r6
   d6256:	f7ff feb3 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d625a:	a805      	add	r0, sp, #20
   d625c:	f7ff feb0 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6260:	4628      	mov	r0, r5
   d6262:	b00a      	add	sp, #40	; 0x28
   d6264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6268:	230c      	movs	r3, #12
   d626a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d626e:	2014      	movs	r0, #20
   d6270:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6274:	9307      	str	r3, [sp, #28]
   d6276:	f7fd ff0e 	bl	d4096 <_Znwj>
   d627a:	4601      	mov	r1, r0
   d627c:	b128      	cbz	r0, d628a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d627e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6282:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6286:	f880 a001 	strb.w	sl, [r0, #1]
   d628a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d628c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d628e:	f7ff ff13 	bl	d60b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6292:	4b22      	ldr	r3, [pc, #136]	; (d631c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6294:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6296:	2008      	movs	r0, #8
   d6298:	f7fd fefd 	bl	d4096 <_Znwj>
   d629c:	4682      	mov	sl, r0
   d629e:	b128      	cbz	r0, d62ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62a0:	9b03      	ldr	r3, [sp, #12]
   d62a2:	f840 3b04 	str.w	r3, [r0], #4
   d62a6:	a904      	add	r1, sp, #16
   d62a8:	f7ff fe4b 	bl	d5f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62ac:	9600      	str	r6, [sp, #0]
   d62ae:	fa5f f389 	uxtb.w	r3, r9
   d62b2:	4642      	mov	r2, r8
   d62b4:	4639      	mov	r1, r7
   d62b6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d62b8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d62bc:	f7ff fd8a 	bl	d5dd4 <spark_send_event>
   d62c0:	b9b8      	cbnz	r0, d62f2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d62c2:	9b03      	ldr	r3, [sp, #12]
   d62c4:	785b      	ldrb	r3, [r3, #1]
   d62c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d62ca:	b993      	cbnz	r3, d62f2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d62cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d62d0:	a905      	add	r1, sp, #20
   d62d2:	a803      	add	r0, sp, #12
   d62d4:	9205      	str	r2, [sp, #20]
   d62d6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d62da:	f7ff ff11 	bl	d6100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d62de:	a805      	add	r0, sp, #20
   d62e0:	f7ff fe6e 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d62e4:	a805      	add	r0, sp, #20
   d62e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d62e8:	f7ff fe94 	bl	d6014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d62ec:	a806      	add	r0, sp, #24
   d62ee:	f7fe fc4f 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62f2:	9b03      	ldr	r3, [sp, #12]
   d62f4:	9305      	str	r3, [sp, #20]
   d62f6:	a904      	add	r1, sp, #16
   d62f8:	a806      	add	r0, sp, #24
   d62fa:	f7ff fe22 	bl	d5f42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d62fe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6300:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6302:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6304:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6306:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6308:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d630a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d630c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d630e:	f7fe fc3f 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6312:	a804      	add	r0, sp, #16
   d6314:	f7fe fc3c 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6318:	e7a2      	b.n	d6260 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d631a:	bf00      	nop
   d631c:	000d63e5 	.word	0x000d63e5

000d6320 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6320:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6324:	4605      	mov	r5, r0
	  switch (__op)
   d6326:	d007      	beq.n	d6338 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6328:	2a03      	cmp	r2, #3
   d632a:	d018      	beq.n	d635e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d632c:	2a01      	cmp	r2, #1
   d632e:	d101      	bne.n	d6334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6330:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6332:	6003      	str	r3, [r0, #0]
	}
   d6334:	2000      	movs	r0, #0
   d6336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6338:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d633a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d633c:	f7fd feab 	bl	d4096 <_Znwj>
   d6340:	4604      	mov	r4, r0
   d6342:	b150      	cbz	r0, d635a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6344:	4631      	mov	r1, r6
   d6346:	f7ff fecb 	bl	d60e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d634a:	6930      	ldr	r0, [r6, #16]
   d634c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6350:	b108      	cbz	r0, d6356 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6352:	f001 fdc5 	bl	d7ee0 <strdup>
        type_(type) {
   d6356:	6120      	str	r0, [r4, #16]
   d6358:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d635a:	602c      	str	r4, [r5, #0]
	}
   d635c:	e7ea      	b.n	d6334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d635e:	6804      	ldr	r4, [r0, #0]
   d6360:	2c00      	cmp	r4, #0
   d6362:	d0e7      	beq.n	d6334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6364:	f104 0010 	add.w	r0, r4, #16
   d6368:	f7ff fe2a 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d636c:	4620      	mov	r0, r4
   d636e:	f7ff fe11 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6372:	2118      	movs	r1, #24
   d6374:	4620      	mov	r0, r4
   d6376:	f001 f90a 	bl	d758e <_ZdlPvj>
   d637a:	e7db      	b.n	d6334 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d637c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d637c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d637e:	2300      	movs	r3, #0
   d6380:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6382:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6384:	4604      	mov	r4, r0
   d6386:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6388:	b12b      	cbz	r3, d6396 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d638a:	2202      	movs	r2, #2
   d638c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d638e:	68eb      	ldr	r3, [r5, #12]
   d6390:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6392:	68ab      	ldr	r3, [r5, #8]
   d6394:	60a3      	str	r3, [r4, #8]
    }
   d6396:	4620      	mov	r0, r4
   d6398:	bd38      	pop	{r3, r4, r5, pc}

000d639a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d639a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d639c:	b570      	push	{r4, r5, r6, lr}
   d639e:	4604      	mov	r4, r0
	  switch (__op)
   d63a0:	d007      	beq.n	d63b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d63a2:	2a03      	cmp	r2, #3
   d63a4:	d012      	beq.n	d63cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d63a6:	2a01      	cmp	r2, #1
   d63a8:	d101      	bne.n	d63ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d63aa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d63ac:	6003      	str	r3, [r0, #0]
	}
   d63ae:	2000      	movs	r0, #0
   d63b0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d63b2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d63b4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d63b6:	f7fd fe6e 	bl	d4096 <_Znwj>
   d63ba:	4605      	mov	r5, r0
   d63bc:	b120      	cbz	r0, d63c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d63be:	4631      	mov	r1, r6
   d63c0:	f7ff ffdc 	bl	d637c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d63c4:	7c33      	ldrb	r3, [r6, #16]
   d63c6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d63c8:	6025      	str	r5, [r4, #0]
	}
   d63ca:	e7f0      	b.n	d63ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d63cc:	6804      	ldr	r4, [r0, #0]
   d63ce:	2c00      	cmp	r4, #0
   d63d0:	d0ed      	beq.n	d63ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d63d2:	4620      	mov	r0, r4
   d63d4:	f7ff fdde 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d63d8:	2114      	movs	r1, #20
   d63da:	4620      	mov	r0, r4
   d63dc:	f001 f8d7 	bl	d758e <_ZdlPvj>
   d63e0:	e7e5      	b.n	d63ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d63e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d63e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63e6:	b089      	sub	sp, #36	; 0x24
   d63e8:	4604      	mov	r4, r0
   d63ea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d63ec:	a801      	add	r0, sp, #4
   d63ee:	4611      	mov	r1, r2
   d63f0:	f7ff fe10 	bl	d6014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d63f4:	b1a4      	cbz	r4, d6420 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d63f6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d63f8:	b11d      	cbz	r5, d6402 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d63fa:	4628      	mov	r0, r5
   d63fc:	f001 fd70 	bl	d7ee0 <strdup>
   d6400:	4605      	mov	r5, r0
   d6402:	a801      	add	r0, sp, #4
   d6404:	a903      	add	r1, sp, #12
        type_(type) {
   d6406:	9503      	str	r5, [sp, #12]
   d6408:	f8ad 4010 	strh.w	r4, [sp, #16]
   d640c:	f7ff fe78 	bl	d6100 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6410:	a803      	add	r0, sp, #12
   d6412:	f7ff fdd5 	bl	d5fc0 <_ZN8particle5ErrorD1Ev>
   d6416:	a802      	add	r0, sp, #8
   d6418:	f7fe fbba 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d641c:	b009      	add	sp, #36	; 0x24
   d641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6420:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6422:	2301      	movs	r3, #1
   d6424:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6428:	2a00      	cmp	r2, #0
   d642a:	d103      	bne.n	d6434 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d642c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6430:	2900      	cmp	r1, #0
   d6432:	d1f7      	bne.n	d6424 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6434:	d1ef      	bne.n	d6416 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6436:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6438:	f3bf 8f5b 	dmb	ish
   d643c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d643e:	1d2b      	adds	r3, r5, #4
   d6440:	f3bf 8f5b 	dmb	ish
   d6444:	e853 6f00 	ldrex	r6, [r3]
   d6448:	e843 4200 	strex	r2, r4, [r3]
   d644c:	2a00      	cmp	r2, #0
   d644e:	d1f9      	bne.n	d6444 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6450:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6454:	2e00      	cmp	r6, #0
   d6456:	d0de      	beq.n	d6416 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6458:	4620      	mov	r0, r4
   d645a:	f7ff fc8f 	bl	d5d7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d645e:	4607      	mov	r7, r0
   d6460:	b160      	cbz	r0, d647c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6462:	f105 010c 	add.w	r1, r5, #12
   d6466:	4630      	mov	r0, r6
   d6468:	f7ff fe15 	bl	d6096 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d646c:	4630      	mov	r0, r6
   d646e:	f7ff fd91 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6472:	2110      	movs	r1, #16
   d6474:	4630      	mov	r0, r6
   d6476:	f001 f88a 	bl	d758e <_ZdlPvj>
   d647a:	e7cc      	b.n	d6416 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d647c:	4631      	mov	r1, r6
   d647e:	a803      	add	r0, sp, #12
   d6480:	f7ff ff7c 	bl	d637c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6484:	7b2b      	ldrb	r3, [r5, #12]
   d6486:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d648a:	2010      	movs	r0, #16
   d648c:	f7fd fe03 	bl	d4096 <_Znwj>
   d6490:	4605      	mov	r5, r0
   d6492:	b1d0      	cbz	r0, d64ca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6494:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6496:	2014      	movs	r0, #20
   d6498:	f7fd fdfd 	bl	d4096 <_Znwj>
   d649c:	4604      	mov	r4, r0
   d649e:	b178      	cbz	r0, d64c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d64a0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d64a2:	4601      	mov	r1, r0
   d64a4:	a803      	add	r0, sp, #12
   d64a6:	f7ff fdd4 	bl	d6052 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64aa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d64ac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d64ae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64b0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d64b2:	9205      	str	r2, [sp, #20]
   d64b4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d64b6:	60e3      	str	r3, [r4, #12]
   d64b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d64bc:	9206      	str	r2, [sp, #24]
   d64be:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d64c0:	4b06      	ldr	r3, [pc, #24]	; (d64dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d64c2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d64c4:	4b06      	ldr	r3, [pc, #24]	; (d64e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d64c6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d64c8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d64ca:	a803      	add	r0, sp, #12
   d64cc:	f7ff fd62 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d64d0:	2200      	movs	r2, #0
   d64d2:	4629      	mov	r1, r5
   d64d4:	4803      	ldr	r0, [pc, #12]	; (d64e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d64d6:	f7ff fc59 	bl	d5d8c <application_thread_invoke>
   d64da:	e7c7      	b.n	d646c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d64dc:	000d60a9 	.word	0x000d60a9
   d64e0:	000d639b 	.word	0x000d639b
   d64e4:	000d5f0b 	.word	0x000d5f0b

000d64e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d64e8:	2200      	movs	r2, #0
   d64ea:	6840      	ldr	r0, [r0, #4]
   d64ec:	4611      	mov	r1, r2
   d64ee:	f7ff bcb9 	b.w	d5e64 <network_listening>

000d64f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d64f2:	2200      	movs	r2, #0
   d64f4:	6840      	ldr	r0, [r0, #4]
   d64f6:	4611      	mov	r1, r2
   d64f8:	f7ff bcc4 	b.w	d5e84 <network_get_listen_timeout>

000d64fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d64fc:	6840      	ldr	r0, [r0, #4]
   d64fe:	2200      	movs	r2, #0
   d6500:	f7ff bcb8 	b.w	d5e74 <network_set_listen_timeout>

000d6504 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6504:	6840      	ldr	r0, [r0, #4]
   d6506:	2200      	movs	r2, #0
   d6508:	f081 0101 	eor.w	r1, r1, #1
   d650c:	f7ff bca2 	b.w	d5e54 <network_listen>

000d6510 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6510:	2300      	movs	r3, #0
   d6512:	6840      	ldr	r0, [r0, #4]
   d6514:	461a      	mov	r2, r3
   d6516:	4619      	mov	r1, r3
   d6518:	f7ff bc94 	b.w	d5e44 <network_off>

000d651c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d651c:	2300      	movs	r3, #0
   d651e:	6840      	ldr	r0, [r0, #4]
   d6520:	461a      	mov	r2, r3
   d6522:	4619      	mov	r1, r3
   d6524:	f7ff bc86 	b.w	d5e34 <network_on>

000d6528 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6528:	2200      	movs	r2, #0
   d652a:	6840      	ldr	r0, [r0, #4]
   d652c:	4611      	mov	r1, r2
   d652e:	f7ff bc79 	b.w	d5e24 <network_ready>

000d6532 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6532:	2200      	movs	r2, #0
   d6534:	6840      	ldr	r0, [r0, #4]
   d6536:	4611      	mov	r1, r2
   d6538:	f7ff bc64 	b.w	d5e04 <network_connecting>

000d653c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d653c:	6840      	ldr	r0, [r0, #4]
   d653e:	2200      	movs	r2, #0
   d6540:	2102      	movs	r1, #2
   d6542:	f7ff bc67 	b.w	d5e14 <network_disconnect>

000d6546 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6546:	2300      	movs	r3, #0
   d6548:	6840      	ldr	r0, [r0, #4]
   d654a:	461a      	mov	r2, r3
   d654c:	f7ff bc52 	b.w	d5df4 <network_connect>

000d6550 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6550:	4b02      	ldr	r3, [pc, #8]	; (d655c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6552:	2203      	movs	r2, #3
   d6554:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6556:	4a02      	ldr	r2, [pc, #8]	; (d6560 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6558:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d655a:	4770      	bx	lr
   d655c:	2003e60c 	.word	0x2003e60c
   d6560:	000d8258 	.word	0x000d8258

000d6564 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6564:	4770      	bx	lr

000d6566 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6568:	4606      	mov	r6, r0
   d656a:	4615      	mov	r5, r2
   d656c:	460c      	mov	r4, r1
   d656e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6570:	42bc      	cmp	r4, r7
   d6572:	d006      	beq.n	d6582 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6574:	6833      	ldr	r3, [r6, #0]
   d6576:	f814 1b01 	ldrb.w	r1, [r4], #1
   d657a:	689b      	ldr	r3, [r3, #8]
   d657c:	4630      	mov	r0, r6
   d657e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6580:	e7f6      	b.n	d6570 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6582:	4628      	mov	r0, r5
   d6584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6586 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6586:	7c00      	ldrb	r0, [r0, #16]
   d6588:	2200      	movs	r2, #0
   d658a:	f7ff baff 	b.w	d5b8c <hal_i2c_write>

000d658e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d658e:	7c00      	ldrb	r0, [r0, #16]
   d6590:	2100      	movs	r1, #0
   d6592:	f7ff bb03 	b.w	d5b9c <hal_i2c_available>

000d6596 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6596:	7c00      	ldrb	r0, [r0, #16]
   d6598:	2100      	movs	r1, #0
   d659a:	f7ff bb07 	b.w	d5bac <hal_i2c_read>

000d659e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d659e:	7c00      	ldrb	r0, [r0, #16]
   d65a0:	2100      	movs	r1, #0
   d65a2:	f7ff bb0b 	b.w	d5bbc <hal_i2c_peek>

000d65a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d65a6:	7c00      	ldrb	r0, [r0, #16]
   d65a8:	2100      	movs	r1, #0
   d65aa:	f7ff bb0f 	b.w	d5bcc <hal_i2c_flush>

000d65ae <_ZN7TwoWireD0Ev>:
   d65ae:	b510      	push	{r4, lr}
   d65b0:	2114      	movs	r1, #20
   d65b2:	4604      	mov	r4, r0
   d65b4:	f000 ffeb 	bl	d758e <_ZdlPvj>
   d65b8:	4620      	mov	r0, r4
   d65ba:	bd10      	pop	{r4, pc}

000d65bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d65bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d65be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d65c2:	4604      	mov	r4, r0
   d65c4:	4608      	mov	r0, r1
   d65c6:	2100      	movs	r1, #0
   d65c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d65cc:	4b03      	ldr	r3, [pc, #12]	; (d65dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d65ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d65d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d65d2:	4611      	mov	r1, r2
   d65d4:	f7ff fb0a 	bl	d5bec <hal_i2c_init>
}
   d65d8:	4620      	mov	r0, r4
   d65da:	bd10      	pop	{r4, pc}
   d65dc:	000d828c 	.word	0x000d828c

000d65e0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	2200      	movs	r2, #0
   d65e4:	f7ff bab2 	b.w	d5b4c <hal_i2c_set_speed>

000d65e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d65e8:	2300      	movs	r3, #0
   d65ea:	7c00      	ldrb	r0, [r0, #16]
   d65ec:	461a      	mov	r2, r3
   d65ee:	4619      	mov	r1, r3
   d65f0:	f7ff bab4 	b.w	d5b5c <hal_i2c_begin>

000d65f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d65f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d65f6:	2200      	movs	r2, #0
   d65f8:	2314      	movs	r3, #20
   d65fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d65fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6602:	780b      	ldrb	r3, [r1, #0]
   d6604:	f88d 3008 	strb.w	r3, [sp, #8]
   d6608:	684b      	ldr	r3, [r1, #4]
   d660a:	9303      	str	r3, [sp, #12]
   d660c:	68cb      	ldr	r3, [r1, #12]
   d660e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6610:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6612:	7a0b      	ldrb	r3, [r1, #8]
   d6614:	9305      	str	r3, [sp, #20]
   d6616:	a901      	add	r1, sp, #4
   d6618:	f7ff faf0 	bl	d5bfc <hal_i2c_request_ex>
}
   d661c:	b007      	add	sp, #28
   d661e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6622 <_ZN7TwoWire11requestFromEhjh>:
{
   d6622:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6624:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6626:	f88d 1000 	strb.w	r1, [sp]
   d662a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d662e:	9103      	str	r1, [sp, #12]
   d6630:	bf18      	it	ne
   d6632:	2301      	movne	r3, #1
   d6634:	4669      	mov	r1, sp
    size_ = size;
   d6636:	9201      	str	r2, [sp, #4]
   d6638:	f88d 3008 	strb.w	r3, [sp, #8]
   d663c:	f7ff ffda 	bl	d65f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6640:	b005      	add	sp, #20
   d6642:	f85d fb04 	ldr.w	pc, [sp], #4

000d6646 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6646:	2301      	movs	r3, #1
   d6648:	f7ff bfeb 	b.w	d6622 <_ZN7TwoWire11requestFromEhjh>

000d664c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d664c:	7c00      	ldrb	r0, [r0, #16]
   d664e:	2200      	movs	r2, #0
   d6650:	f7ff ba8c 	b.w	d5b6c <hal_i2c_begin_transmission>

000d6654 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6654:	7c00      	ldrb	r0, [r0, #16]
   d6656:	2200      	movs	r2, #0
   d6658:	f7ff ba90 	b.w	d5b7c <hal_i2c_end_transmission>

000d665c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d665c:	2101      	movs	r1, #1
   d665e:	f7ff bff9 	b.w	d6654 <_ZN7TwoWire15endTransmissionEh>

000d6662 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>:
    return ok;
}

bool attachInterruptDirect(IRQn_Type irq, HAL_Direct_Interrupt_Handler handler, bool enable)
{
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6662:	2a00      	cmp	r2, #0
{
   d6664:	b508      	push	{r3, lr}
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6666:	f04f 0300 	mov.w	r3, #0
   d666a:	bf14      	ite	ne
   d666c:	2204      	movne	r2, #4
   d666e:	461a      	moveq	r2, r3
   d6670:	f7ff fa62 	bl	d5b38 <HAL_Set_Direct_Interrupt_Handler>
    return ok;
}
   d6674:	fab0 f080 	clz	r0, r0
   d6678:	0940      	lsrs	r0, r0, #5
   d667a:	bd08      	pop	{r3, pc}

000d667c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d667c:	4770      	bx	lr

000d667e <_ZN9IPAddressD0Ev>:
   d667e:	b510      	push	{r4, lr}
   d6680:	2118      	movs	r1, #24
   d6682:	4604      	mov	r4, r0
   d6684:	f000 ff83 	bl	d758e <_ZdlPvj>
   d6688:	4620      	mov	r0, r4
   d668a:	bd10      	pop	{r4, pc}

000d668c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d668c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d668e:	7d03      	ldrb	r3, [r0, #20]
   d6690:	2b06      	cmp	r3, #6
{
   d6692:	b08d      	sub	sp, #52	; 0x34
   d6694:	460e      	mov	r6, r1
   d6696:	f100 0704 	add.w	r7, r0, #4
   d669a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d669e:	d012      	beq.n	d66c6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d66a0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d66a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d66a8:	220a      	movs	r2, #10
   d66aa:	4630      	mov	r0, r6
   d66ac:	f000 f951 	bl	d6952 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d66b0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d66b2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d66b4:	d019      	beq.n	d66ea <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d66b6:	2c00      	cmp	r4, #0
   d66b8:	d0f4      	beq.n	d66a4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d66ba:	212e      	movs	r1, #46	; 0x2e
   d66bc:	4630      	mov	r0, r6
   d66be:	f000 f92b 	bl	d6918 <_ZN5Print5printEc>
   d66c2:	4404      	add	r4, r0
   d66c4:	e7ee      	b.n	d66a4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d66c6:	232f      	movs	r3, #47	; 0x2f
   d66c8:	466a      	mov	r2, sp
   d66ca:	4639      	mov	r1, r7
   d66cc:	200a      	movs	r0, #10
		buf[0] = 0;
   d66ce:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d66d2:	f7ff fa9b 	bl	d5c0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d66d6:	4668      	mov	r0, sp
   d66d8:	f001 fc1f 	bl	d7f1a <strlen>
   d66dc:	6833      	ldr	r3, [r6, #0]
   d66de:	4602      	mov	r2, r0
   d66e0:	68db      	ldr	r3, [r3, #12]
   d66e2:	4669      	mov	r1, sp
   d66e4:	4630      	mov	r0, r6
   d66e6:	4798      	blx	r3
   d66e8:	4604      	mov	r4, r0
    }
    return n;
}
   d66ea:	4620      	mov	r0, r4
   d66ec:	b00d      	add	sp, #52	; 0x34
   d66ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d66f0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d66f0:	b510      	push	{r4, lr}
   d66f2:	4b05      	ldr	r3, [pc, #20]	; (d6708 <_ZN9IPAddressC1Ev+0x18>)
   d66f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d66f6:	2211      	movs	r2, #17
   d66f8:	f840 3b04 	str.w	r3, [r0], #4
   d66fc:	2100      	movs	r1, #0
   d66fe:	f001 fb87 	bl	d7e10 <memset>
}
   d6702:	4620      	mov	r0, r4
   d6704:	bd10      	pop	{r4, pc}
   d6706:	bf00      	nop
   d6708:	000d82b4 	.word	0x000d82b4

000d670c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d670c:	4603      	mov	r3, r0
   d670e:	4a07      	ldr	r2, [pc, #28]	; (d672c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6710:	b510      	push	{r4, lr}
   d6712:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6716:	f101 0210 	add.w	r2, r1, #16
   d671a:	f851 4b04 	ldr.w	r4, [r1], #4
   d671e:	f843 4b04 	str.w	r4, [r3], #4
   d6722:	4291      	cmp	r1, r2
   d6724:	d1f9      	bne.n	d671a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6726:	780a      	ldrb	r2, [r1, #0]
   d6728:	701a      	strb	r2, [r3, #0]
}
   d672a:	bd10      	pop	{r4, pc}
   d672c:	000d82b4 	.word	0x000d82b4

000d6730 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6730:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6732:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6736:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d673a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d673e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6742:	2304      	movs	r3, #4
   d6744:	6041      	str	r1, [r0, #4]
   d6746:	7503      	strb	r3, [r0, #20]
}
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZN9IPAddressaSEPKh>:
{
   d674a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d674c:	78cb      	ldrb	r3, [r1, #3]
   d674e:	9300      	str	r3, [sp, #0]
   d6750:	788b      	ldrb	r3, [r1, #2]
   d6752:	784a      	ldrb	r2, [r1, #1]
   d6754:	7809      	ldrb	r1, [r1, #0]
   d6756:	f7ff ffeb 	bl	d6730 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d675a:	b002      	add	sp, #8
   d675c:	bd10      	pop	{r4, pc}
	...

000d6760 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6760:	4b01      	ldr	r3, [pc, #4]	; (d6768 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6762:	4a02      	ldr	r2, [pc, #8]	; (d676c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6764:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6766:	4770      	bx	lr
   d6768:	2003e614 	.word	0x2003e614
   d676c:	000d82c0 	.word	0x000d82c0

000d6770 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6770:	2300      	movs	r3, #0
   d6772:	6840      	ldr	r0, [r0, #4]
   d6774:	461a      	mov	r2, r3
   d6776:	f7ff bb3d 	b.w	d5df4 <network_connect>

000d677a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d677a:	6840      	ldr	r0, [r0, #4]
   d677c:	2200      	movs	r2, #0
   d677e:	2102      	movs	r1, #2
   d6780:	f7ff bb48 	b.w	d5e14 <network_disconnect>

000d6784 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6784:	2200      	movs	r2, #0
   d6786:	6840      	ldr	r0, [r0, #4]
   d6788:	4611      	mov	r1, r2
   d678a:	f7ff bb3b 	b.w	d5e04 <network_connecting>

000d678e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d678e:	2200      	movs	r2, #0
   d6790:	6840      	ldr	r0, [r0, #4]
   d6792:	4611      	mov	r1, r2
   d6794:	f7ff bb46 	b.w	d5e24 <network_ready>

000d6798 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6798:	2300      	movs	r3, #0
   d679a:	6840      	ldr	r0, [r0, #4]
   d679c:	461a      	mov	r2, r3
   d679e:	4619      	mov	r1, r3
   d67a0:	f7ff bb48 	b.w	d5e34 <network_on>

000d67a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d67a4:	2300      	movs	r3, #0
   d67a6:	6840      	ldr	r0, [r0, #4]
   d67a8:	461a      	mov	r2, r3
   d67aa:	4619      	mov	r1, r3
   d67ac:	f7ff bb4a 	b.w	d5e44 <network_off>

000d67b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d67b0:	6840      	ldr	r0, [r0, #4]
   d67b2:	2200      	movs	r2, #0
   d67b4:	f081 0101 	eor.w	r1, r1, #1
   d67b8:	f7ff bb4c 	b.w	d5e54 <network_listen>

000d67bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d67bc:	6840      	ldr	r0, [r0, #4]
   d67be:	2200      	movs	r2, #0
   d67c0:	f7ff bb58 	b.w	d5e74 <network_set_listen_timeout>

000d67c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d67c4:	2200      	movs	r2, #0
   d67c6:	6840      	ldr	r0, [r0, #4]
   d67c8:	4611      	mov	r1, r2
   d67ca:	f7ff bb5b 	b.w	d5e84 <network_get_listen_timeout>

000d67ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d67ce:	2200      	movs	r2, #0
   d67d0:	6840      	ldr	r0, [r0, #4]
   d67d2:	4611      	mov	r1, r2
   d67d4:	f7ff bb46 	b.w	d5e64 <network_listening>

000d67d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d67d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d67dc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d67de:	b095      	sub	sp, #84	; 0x54
   d67e0:	4616      	mov	r6, r2
   d67e2:	460d      	mov	r5, r1
   d67e4:	4607      	mov	r7, r0
    IPAddress addr;
   d67e6:	f7ff ff83 	bl	d66f0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d67ea:	4621      	mov	r1, r4
   d67ec:	2218      	movs	r2, #24
   d67ee:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d67f0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d67f2:	f001 fb0d 	bl	d7e10 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d67f6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d67f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d67fc:	4621      	mov	r1, r4
   d67fe:	466b      	mov	r3, sp
   d6800:	aa0c      	add	r2, sp, #48	; 0x30
   d6802:	4630      	mov	r0, r6
   d6804:	f7ff fa12 	bl	d5c2c <netdb_getaddrinfo>
    if (!r) {
   d6808:	4604      	mov	r4, r0
   d680a:	2800      	cmp	r0, #0
   d680c:	d146      	bne.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d680e:	4602      	mov	r2, r0
   d6810:	2101      	movs	r1, #1
   d6812:	6868      	ldr	r0, [r5, #4]
   d6814:	f7ff fb06 	bl	d5e24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6818:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d681a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d681c:	4622      	mov	r2, r4
   d681e:	6868      	ldr	r0, [r5, #4]
   d6820:	f7ff fb00 	bl	d5e24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6824:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6826:	4681      	mov	r9, r0
        bool ok = false;
   d6828:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d682a:	2e00      	cmp	r6, #0
   d682c:	d036      	beq.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d682e:	2900      	cmp	r1, #0
   d6830:	d134      	bne.n	d689c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6832:	6873      	ldr	r3, [r6, #4]
   d6834:	2b02      	cmp	r3, #2
   d6836:	d003      	beq.n	d6840 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6838:	2b0a      	cmp	r3, #10
   d683a:	d00b      	beq.n	d6854 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d683c:	69f6      	ldr	r6, [r6, #28]
   d683e:	e7f4      	b.n	d682a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6840:	f1b8 0f00 	cmp.w	r8, #0
   d6844:	d004      	beq.n	d6850 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6846:	6971      	ldr	r1, [r6, #20]
   d6848:	4638      	mov	r0, r7
   d684a:	3104      	adds	r1, #4
   d684c:	f7ff ff7d 	bl	d674a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6850:	4641      	mov	r1, r8
   d6852:	e7f3      	b.n	d683c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6854:	f1b9 0f00 	cmp.w	r9, #0
   d6858:	d101      	bne.n	d685e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d685a:	4649      	mov	r1, r9
   d685c:	e7ee      	b.n	d683c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d685e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6860:	2210      	movs	r2, #16
   d6862:	a801      	add	r0, sp, #4
   d6864:	f001 fad4 	bl	d7e10 <memset>
                    a.v = 6;
   d6868:	2306      	movs	r3, #6
   d686a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d686e:	ad01      	add	r5, sp, #4
   d6870:	f104 0308 	add.w	r3, r4, #8
   d6874:	3418      	adds	r4, #24
   d6876:	6818      	ldr	r0, [r3, #0]
   d6878:	6859      	ldr	r1, [r3, #4]
   d687a:	462a      	mov	r2, r5
   d687c:	c203      	stmia	r2!, {r0, r1}
   d687e:	3308      	adds	r3, #8
   d6880:	42a3      	cmp	r3, r4
   d6882:	4615      	mov	r5, r2
   d6884:	d1f7      	bne.n	d6876 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6886:	a901      	add	r1, sp, #4
   d6888:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d688a:	ad07      	add	r5, sp, #28
   d688c:	f7ff ff3e 	bl	d670c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6892:	1d3c      	adds	r4, r7, #4
   d6894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6896:	682b      	ldr	r3, [r5, #0]
   d6898:	7023      	strb	r3, [r4, #0]
   d689a:	e7de      	b.n	d685a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d689c:	9800      	ldr	r0, [sp, #0]
   d689e:	f7ff f9bd 	bl	d5c1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d68a2:	4638      	mov	r0, r7
   d68a4:	b015      	add	sp, #84	; 0x54
   d68a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d68ac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d68ac:	4b02      	ldr	r3, [pc, #8]	; (d68b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d68ae:	4a03      	ldr	r2, [pc, #12]	; (d68bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d68b0:	601a      	str	r2, [r3, #0]
   d68b2:	2200      	movs	r2, #0
   d68b4:	605a      	str	r2, [r3, #4]

} // spark
   d68b6:	4770      	bx	lr
   d68b8:	2003e618 	.word	0x2003e618
   d68bc:	000d82cc 	.word	0x000d82cc

000d68c0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d68c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68c2:	4606      	mov	r6, r0
   d68c4:	460d      	mov	r5, r1
  size_t n = 0;
   d68c6:	188f      	adds	r7, r1, r2
   d68c8:	2400      	movs	r4, #0
  while (size--) {
   d68ca:	42bd      	cmp	r5, r7
   d68cc:	d00c      	beq.n	d68e8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d68ce:	6833      	ldr	r3, [r6, #0]
   d68d0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d68d4:	689b      	ldr	r3, [r3, #8]
   d68d6:	4630      	mov	r0, r6
   d68d8:	4798      	blx	r3
     if (chunk>=0)
   d68da:	1e03      	subs	r3, r0, #0
   d68dc:	db01      	blt.n	d68e2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d68de:	441c      	add	r4, r3
  while (size--) {
   d68e0:	e7f3      	b.n	d68ca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d68e2:	2c00      	cmp	r4, #0
   d68e4:	bf08      	it	eq
   d68e6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d68e8:	4620      	mov	r0, r4
   d68ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68ec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d68ec:	b513      	push	{r0, r1, r4, lr}
   d68ee:	4604      	mov	r4, r0
    }
   d68f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d68f2:	b159      	cbz	r1, d690c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d68f4:	9101      	str	r1, [sp, #4]
   d68f6:	f001 fb10 	bl	d7f1a <strlen>
   d68fa:	6823      	ldr	r3, [r4, #0]
   d68fc:	9901      	ldr	r1, [sp, #4]
   d68fe:	68db      	ldr	r3, [r3, #12]
   d6900:	4602      	mov	r2, r0
   d6902:	4620      	mov	r0, r4
    }
   d6904:	b002      	add	sp, #8
   d6906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d690a:	4718      	bx	r3
    }
   d690c:	b002      	add	sp, #8
   d690e:	bd10      	pop	{r4, pc}

000d6910 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6910:	b508      	push	{r3, lr}
  return write(str);
   d6912:	f7ff ffeb 	bl	d68ec <_ZN5Print5writeEPKc>
}
   d6916:	bd08      	pop	{r3, pc}

000d6918 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6918:	6803      	ldr	r3, [r0, #0]
   d691a:	689b      	ldr	r3, [r3, #8]
   d691c:	4718      	bx	r3

000d691e <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d691e:	b508      	push	{r3, lr}
  return write(str);
   d6920:	f7ff ffe4 	bl	d68ec <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d6924:	bd08      	pop	{r3, pc}

000d6926 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d6926:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6928:	210d      	movs	r1, #13
{
   d692a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d692c:	f7ff fff4 	bl	d6918 <_ZN5Print5printEc>
  n += print('\n');
   d6930:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6932:	4604      	mov	r4, r0
  n += print('\n');
   d6934:	4628      	mov	r0, r5
   d6936:	f7ff ffef 	bl	d6918 <_ZN5Print5printEc>
  return n;
}
   d693a:	4420      	add	r0, r4
   d693c:	bd38      	pop	{r3, r4, r5, pc}

000d693e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d693e:	b538      	push	{r3, r4, r5, lr}
   d6940:	4605      	mov	r5, r0
  return write(str);
   d6942:	f7ff ffd3 	bl	d68ec <_ZN5Print5writeEPKc>
   d6946:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6948:	4628      	mov	r0, r5
   d694a:	f7ff ffec 	bl	d6926 <_ZN5Print7printlnEv>
  return n;
}
   d694e:	4420      	add	r0, r4
   d6950:	bd38      	pop	{r3, r4, r5, pc}

000d6952 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6952:	b530      	push	{r4, r5, lr}
   d6954:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6956:	2300      	movs	r3, #0
   d6958:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d695c:	2a01      	cmp	r2, #1
   d695e:	bf98      	it	ls
   d6960:	220a      	movls	r2, #10
   d6962:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6964:	460d      	mov	r5, r1
   d6966:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d696a:	fb01 5312 	mls	r3, r1, r2, r5
   d696e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6972:	2b09      	cmp	r3, #9
   d6974:	bf94      	ite	ls
   d6976:	3330      	addls	r3, #48	; 0x30
   d6978:	3337      	addhi	r3, #55	; 0x37
   d697a:	b2db      	uxtb	r3, r3
  } while(n);
   d697c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d697e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6982:	d9ef      	bls.n	d6964 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6984:	4621      	mov	r1, r4
   d6986:	f7ff ffb1 	bl	d68ec <_ZN5Print5writeEPKc>
}
   d698a:	b00b      	add	sp, #44	; 0x2c
   d698c:	bd30      	pop	{r4, r5, pc}

000d698e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d698e:	b510      	push	{r4, lr}
  if (0 == max) {
   d6990:	4604      	mov	r4, r0
   d6992:	b128      	cbz	r0, d69a0 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d6994:	f001 fa68 	bl	d7e68 <rand>
   d6998:	fb90 f3f4 	sdiv	r3, r0, r4
   d699c:	fb03 0414 	mls	r4, r3, r4, r0
}
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}

000d69a4 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d69a4:	4288      	cmp	r0, r1
{
   d69a6:	b510      	push	{r4, lr}
   d69a8:	4604      	mov	r4, r0
  if (min >= max) {
   d69aa:	da03      	bge.n	d69b4 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d69ac:	1a08      	subs	r0, r1, r0
   d69ae:	f7ff ffee 	bl	d698e <_Z6randomi>
   d69b2:	4404      	add	r4, r0
}
   d69b4:	4620      	mov	r0, r4
   d69b6:	bd10      	pop	{r4, pc}

000d69b8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d69b8:	b510      	push	{r4, lr}
   d69ba:	4604      	mov	r4, r0
   d69bc:	f7ff faea 	bl	d5f94 <_ZNSt14_Function_baseD1Ev>
   d69c0:	4620      	mov	r0, r4
   d69c2:	bd10      	pop	{r4, pc}

000d69c4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d69c4:	4803      	ldr	r0, [pc, #12]	; (d69d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d69c6:	4a04      	ldr	r2, [pc, #16]	; (d69d8 <_GLOBAL__sub_I_RGB+0x14>)
   d69c8:	4904      	ldr	r1, [pc, #16]	; (d69dc <_GLOBAL__sub_I_RGB+0x18>)
   d69ca:	2300      	movs	r3, #0
   d69cc:	6083      	str	r3, [r0, #8]
   d69ce:	f000 bdd9 	b.w	d7584 <__aeabi_atexit>
   d69d2:	bf00      	nop
   d69d4:	2003e620 	.word	0x2003e620
   d69d8:	2003e45c 	.word	0x2003e45c
   d69dc:	000d69b9 	.word	0x000d69b9

000d69e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d69e0:	b510      	push	{r4, lr}
   d69e2:	4604      	mov	r4, r0
   d69e4:	4608      	mov	r0, r1
{
    _spi = spi;
   d69e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d69e8:	f7ff f928 	bl	d5c3c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d69ec:	2300      	movs	r3, #0
   d69ee:	6063      	str	r3, [r4, #4]
}
   d69f0:	4620      	mov	r0, r4
   d69f2:	bd10      	pop	{r4, pc}

000d69f4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d69f4:	b510      	push	{r4, lr}
   d69f6:	4604      	mov	r4, r0
{
	free(buffer);
   d69f8:	6800      	ldr	r0, [r0, #0]
   d69fa:	f7ff fa53 	bl	d5ea4 <free>
}
   d69fe:	4620      	mov	r0, r4
   d6a00:	bd10      	pop	{r4, pc}

000d6a02 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6a02:	b510      	push	{r4, lr}
   d6a04:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6a06:	6800      	ldr	r0, [r0, #0]
   d6a08:	b108      	cbz	r0, d6a0e <_ZN6String10invalidateEv+0xc>
   d6a0a:	f7ff fa4b 	bl	d5ea4 <free>
	buffer = NULL;
   d6a0e:	2300      	movs	r3, #0
	capacity = len = 0;
   d6a10:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6a14:	6023      	str	r3, [r4, #0]
}
   d6a16:	bd10      	pop	{r4, pc}

000d6a18 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6a18:	b538      	push	{r3, r4, r5, lr}
   d6a1a:	4604      	mov	r4, r0
   d6a1c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6a1e:	6800      	ldr	r0, [r0, #0]
   d6a20:	3101      	adds	r1, #1
   d6a22:	f7ff fa47 	bl	d5eb4 <realloc>
	if (newbuffer) {
   d6a26:	b110      	cbz	r0, d6a2e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6a28:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6a2c:	2001      	movs	r0, #1
	}
	return 0;
}
   d6a2e:	bd38      	pop	{r3, r4, r5, pc}

000d6a30 <_ZN6String7reserveEj>:
{
   d6a30:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6a32:	6803      	ldr	r3, [r0, #0]
{
   d6a34:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6a36:	b123      	cbz	r3, d6a42 <_ZN6String7reserveEj+0x12>
   d6a38:	6843      	ldr	r3, [r0, #4]
   d6a3a:	428b      	cmp	r3, r1
   d6a3c:	d301      	bcc.n	d6a42 <_ZN6String7reserveEj+0x12>
   d6a3e:	2001      	movs	r0, #1
}
   d6a40:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6a42:	4620      	mov	r0, r4
   d6a44:	f7ff ffe8 	bl	d6a18 <_ZN6String12changeBufferEj>
   d6a48:	2800      	cmp	r0, #0
   d6a4a:	d0f9      	beq.n	d6a40 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6a4c:	68a3      	ldr	r3, [r4, #8]
   d6a4e:	2b00      	cmp	r3, #0
   d6a50:	d1f5      	bne.n	d6a3e <_ZN6String7reserveEj+0xe>
   d6a52:	6822      	ldr	r2, [r4, #0]
   d6a54:	7013      	strb	r3, [r2, #0]
   d6a56:	e7f2      	b.n	d6a3e <_ZN6String7reserveEj+0xe>

000d6a58 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a5a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6a5c:	4611      	mov	r1, r2
   d6a5e:	9201      	str	r2, [sp, #4]
{
   d6a60:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6a62:	f7ff ffe5 	bl	d6a30 <_ZN6String7reserveEj>
   d6a66:	9a01      	ldr	r2, [sp, #4]
   d6a68:	b928      	cbnz	r0, d6a76 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6a6a:	4620      	mov	r0, r4
   d6a6c:	f7ff ffc9 	bl	d6a02 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6a70:	4620      	mov	r0, r4
   d6a72:	b003      	add	sp, #12
   d6a74:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6a76:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6a78:	4629      	mov	r1, r5
   d6a7a:	6820      	ldr	r0, [r4, #0]
   d6a7c:	f001 f9ba 	bl	d7df4 <memcpy>
	buffer[len] = 0;
   d6a80:	6822      	ldr	r2, [r4, #0]
   d6a82:	68a3      	ldr	r3, [r4, #8]
   d6a84:	2100      	movs	r1, #0
   d6a86:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6a88:	e7f2      	b.n	d6a70 <_ZN6String4copyEPKcj+0x18>

000d6a8a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6a8a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6a8c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6a8e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6a92:	4604      	mov	r4, r0
	len = 0;
   d6a94:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a96:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6a98:	b141      	cbz	r1, d6aac <_ZN6StringC1EPKc+0x22>
   d6a9a:	4608      	mov	r0, r1
   d6a9c:	9101      	str	r1, [sp, #4]
   d6a9e:	f001 fa3c 	bl	d7f1a <strlen>
   d6aa2:	9901      	ldr	r1, [sp, #4]
   d6aa4:	4602      	mov	r2, r0
   d6aa6:	4620      	mov	r0, r4
   d6aa8:	f7ff ffd6 	bl	d6a58 <_ZN6String4copyEPKcj>
}
   d6aac:	4620      	mov	r0, r4
   d6aae:	b002      	add	sp, #8
   d6ab0:	bd10      	pop	{r4, pc}

000d6ab2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6ab2:	b538      	push	{r3, r4, r5, lr}
   d6ab4:	4605      	mov	r5, r0
	if (buffer) {
   d6ab6:	6800      	ldr	r0, [r0, #0]
{
   d6ab8:	460c      	mov	r4, r1
	if (buffer) {
   d6aba:	b168      	cbz	r0, d6ad8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6abc:	686a      	ldr	r2, [r5, #4]
   d6abe:	688b      	ldr	r3, [r1, #8]
   d6ac0:	429a      	cmp	r2, r3
   d6ac2:	d307      	bcc.n	d6ad4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6ac4:	6809      	ldr	r1, [r1, #0]
   d6ac6:	f001 fa03 	bl	d7ed0 <strcpy>
			len = rhs.len;
   d6aca:	68a3      	ldr	r3, [r4, #8]
   d6acc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6ace:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6ad0:	60a3      	str	r3, [r4, #8]
}
   d6ad2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6ad4:	f7ff f9e6 	bl	d5ea4 <free>
	buffer = rhs.buffer;
   d6ad8:	6823      	ldr	r3, [r4, #0]
   d6ada:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6adc:	6863      	ldr	r3, [r4, #4]
   d6ade:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6ae0:	68a3      	ldr	r3, [r4, #8]
   d6ae2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6ae4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6ae6:	e9c4 3300 	strd	r3, r3, [r4]
   d6aea:	e7f1      	b.n	d6ad0 <_ZN6String4moveERS_+0x1e>

000d6aec <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6aec:	4288      	cmp	r0, r1
{
   d6aee:	b510      	push	{r4, lr}
   d6af0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6af2:	d005      	beq.n	d6b00 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6af4:	680b      	ldr	r3, [r1, #0]
   d6af6:	b12b      	cbz	r3, d6b04 <_ZN6StringaSERKS_+0x18>
   d6af8:	688a      	ldr	r2, [r1, #8]
   d6afa:	4619      	mov	r1, r3
   d6afc:	f7ff ffac 	bl	d6a58 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6b00:	4620      	mov	r0, r4
   d6b02:	bd10      	pop	{r4, pc}
	else invalidate();
   d6b04:	f7ff ff7d 	bl	d6a02 <_ZN6String10invalidateEv>
   d6b08:	e7fa      	b.n	d6b00 <_ZN6StringaSERKS_+0x14>

000d6b0a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6b0a:	b510      	push	{r4, lr}
	buffer = NULL;
   d6b0c:	2300      	movs	r3, #0
String::String(const String &value)
   d6b0e:	4604      	mov	r4, r0
	capacity = 0;
   d6b10:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6b14:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b16:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6b18:	f7ff ffe8 	bl	d6aec <_ZN6StringaSERKS_>
}
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}

000d6b20 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6b20:	4288      	cmp	r0, r1
{
   d6b22:	b510      	push	{r4, lr}
   d6b24:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6b26:	d001      	beq.n	d6b2c <_ZN6StringaSEOS_+0xc>
   d6b28:	f7ff ffc3 	bl	d6ab2 <_ZN6String4moveERS_>
	return *this;
}
   d6b2c:	4620      	mov	r0, r4
   d6b2e:	bd10      	pop	{r4, pc}

000d6b30 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6b30:	b513      	push	{r0, r1, r4, lr}
   d6b32:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6b34:	b159      	cbz	r1, d6b4e <_ZN6StringaSEPKc+0x1e>
   d6b36:	4608      	mov	r0, r1
   d6b38:	9101      	str	r1, [sp, #4]
   d6b3a:	f001 f9ee 	bl	d7f1a <strlen>
   d6b3e:	9901      	ldr	r1, [sp, #4]
   d6b40:	4602      	mov	r2, r0
   d6b42:	4620      	mov	r0, r4
   d6b44:	f7ff ff88 	bl	d6a58 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6b48:	4620      	mov	r0, r4
   d6b4a:	b002      	add	sp, #8
   d6b4c:	bd10      	pop	{r4, pc}
	else invalidate();
   d6b4e:	f7ff ff58 	bl	d6a02 <_ZN6String10invalidateEv>
   d6b52:	e7f9      	b.n	d6b48 <_ZN6StringaSEPKc+0x18>

000d6b54 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6b54:	b510      	push	{r4, lr}
   d6b56:	4604      	mov	r4, r0
   d6b58:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6b5a:	2300      	movs	r3, #0
	capacity = 0;
   d6b5c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6b60:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6b62:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6b64:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6b66:	a901      	add	r1, sp, #4
   d6b68:	f000 fa36 	bl	d6fd8 <itoa>
	*this = buf;
   d6b6c:	a901      	add	r1, sp, #4
   d6b6e:	4620      	mov	r0, r4
   d6b70:	f7ff ffde 	bl	d6b30 <_ZN6StringaSEPKc>
}
   d6b74:	4620      	mov	r0, r4
   d6b76:	b00a      	add	sp, #40	; 0x28
   d6b78:	bd10      	pop	{r4, pc}

000d6b7a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6b7a:	b570      	push	{r4, r5, r6, lr}
   d6b7c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6b7e:	460e      	mov	r6, r1
   d6b80:	b909      	cbnz	r1, d6b86 <_ZN6String6concatEPKcj+0xc>
   d6b82:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6b84:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6b86:	b16a      	cbz	r2, d6ba4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6b88:	6884      	ldr	r4, [r0, #8]
   d6b8a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6b8c:	4621      	mov	r1, r4
   d6b8e:	f7ff ff4f 	bl	d6a30 <_ZN6String7reserveEj>
   d6b92:	2800      	cmp	r0, #0
   d6b94:	d0f5      	beq.n	d6b82 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6b96:	6828      	ldr	r0, [r5, #0]
   d6b98:	68ab      	ldr	r3, [r5, #8]
   d6b9a:	4631      	mov	r1, r6
   d6b9c:	4418      	add	r0, r3
   d6b9e:	f001 f997 	bl	d7ed0 <strcpy>
	len = newlen;
   d6ba2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6ba4:	2001      	movs	r0, #1
   d6ba6:	e7ed      	b.n	d6b84 <_ZN6String6concatEPKcj+0xa>

000d6ba8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6ba8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6baa:	2300      	movs	r3, #0
	buf[0] = c;
   d6bac:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6bb0:	2201      	movs	r2, #1
   d6bb2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d6bb4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6bb8:	f7ff ffdf 	bl	d6b7a <_ZN6String6concatEPKcj>
}
   d6bbc:	b003      	add	sp, #12
   d6bbe:	f85d fb04 	ldr.w	pc, [sp], #4

000d6bc2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6bc2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6bc4:	688a      	ldr	r2, [r1, #8]
   d6bc6:	6809      	ldr	r1, [r1, #0]
{
   d6bc8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6bca:	f7ff ffd6 	bl	d6b7a <_ZN6String6concatEPKcj>
   d6bce:	b910      	cbnz	r0, d6bd6 <_ZplRK15StringSumHelperRK6String+0x14>
   d6bd0:	4620      	mov	r0, r4
   d6bd2:	f7ff ff16 	bl	d6a02 <_ZN6String10invalidateEv>
	return a;
}
   d6bd6:	4620      	mov	r0, r4
   d6bd8:	bd10      	pop	{r4, pc}

000d6bda <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d6bda:	b513      	push	{r0, r1, r4, lr}
   d6bdc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6bde:	b929      	cbnz	r1, d6bec <_ZplRK15StringSumHelperPKc+0x12>
   d6be0:	4620      	mov	r0, r4
   d6be2:	f7ff ff0e 	bl	d6a02 <_ZN6String10invalidateEv>
	return a;
}
   d6be6:	4620      	mov	r0, r4
   d6be8:	b002      	add	sp, #8
   d6bea:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d6bec:	4608      	mov	r0, r1
   d6bee:	9101      	str	r1, [sp, #4]
   d6bf0:	f001 f993 	bl	d7f1a <strlen>
   d6bf4:	9901      	ldr	r1, [sp, #4]
   d6bf6:	4602      	mov	r2, r0
   d6bf8:	4620      	mov	r0, r4
   d6bfa:	f7ff ffbe 	bl	d6b7a <_ZN6String6concatEPKcj>
   d6bfe:	2800      	cmp	r0, #0
   d6c00:	d0ee      	beq.n	d6be0 <_ZplRK15StringSumHelperPKc+0x6>
   d6c02:	e7f0      	b.n	d6be6 <_ZplRK15StringSumHelperPKc+0xc>

000d6c04 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   d6c04:	b510      	push	{r4, lr}
   d6c06:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   d6c08:	f7ff ffce 	bl	d6ba8 <_ZN6String6concatEc>
   d6c0c:	b910      	cbnz	r0, d6c14 <_ZplRK15StringSumHelperc+0x10>
   d6c0e:	4620      	mov	r0, r4
   d6c10:	f7ff fef7 	bl	d6a02 <_ZN6String10invalidateEv>
	return a;
}
   d6c14:	4620      	mov	r0, r4
   d6c16:	bd10      	pop	{r4, pc}

000d6c18 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d6c18:	b40e      	push	{r1, r2, r3}
   d6c1a:	b570      	push	{r4, r5, r6, lr}
   d6c1c:	b087      	sub	sp, #28
   d6c1e:	ad0b      	add	r5, sp, #44	; 0x2c
   d6c20:	4604      	mov	r4, r0
   d6c22:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6c26:	9201      	str	r2, [sp, #4]
   d6c28:	462b      	mov	r3, r5
   d6c2a:	2105      	movs	r1, #5
   d6c2c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d6c2e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6c30:	f7ff f948 	bl	d5ec4 <vsnprintf>
    va_end(marker);

    String result;
   d6c34:	490b      	ldr	r1, [pc, #44]	; (d6c64 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d6c36:	4606      	mov	r6, r0
    String result;
   d6c38:	4620      	mov	r0, r4
   d6c3a:	f7ff ff26 	bl	d6a8a <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d6c3e:	4631      	mov	r1, r6
   d6c40:	4620      	mov	r0, r4
   d6c42:	f7ff fef5 	bl	d6a30 <_ZN6String7reserveEj>
    if (result.buffer) {
   d6c46:	6820      	ldr	r0, [r4, #0]
   d6c48:	b130      	cbz	r0, d6c58 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6c4a:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d6c4c:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d6c4e:	462b      	mov	r3, r5
   d6c50:	1c71      	adds	r1, r6, #1
   d6c52:	f7ff f937 	bl	d5ec4 <vsnprintf>
        va_end(marker);
        result.len = n;
   d6c56:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d6c58:	4620      	mov	r0, r4
   d6c5a:	b007      	add	sp, #28
   d6c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6c60:	b003      	add	sp, #12
   d6c62:	4770      	bx	lr
   d6c64:	000d816e 	.word	0x000d816e

000d6c68 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6c68:	b510      	push	{r4, lr}
   d6c6a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6c6c:	6800      	ldr	r0, [r0, #0]
   d6c6e:	b118      	cbz	r0, d6c78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6c70:	f7ff f918 	bl	d5ea4 <free>
            wakeupSource_ = nullptr;
   d6c74:	2300      	movs	r3, #0
   d6c76:	6023      	str	r3, [r4, #0]
        }
    }
   d6c78:	bd10      	pop	{r4, pc}

000d6c7a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6c7a:	b510      	push	{r4, lr}
   d6c7c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6c7e:	f7ff fff3 	bl	d6c68 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6c82:	4620      	mov	r0, r4
   d6c84:	bd10      	pop	{r4, pc}
	...

000d6c88 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6c88:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6c8a:	4b09      	ldr	r3, [pc, #36]	; (d6cb0 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6c8c:	4c09      	ldr	r4, [pc, #36]	; (d6cb4 <_GLOBAL__sub_I_System+0x2c>)
   d6c8e:	2202      	movs	r2, #2
   d6c90:	2000      	movs	r0, #0
   d6c92:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6c94:	4b08      	ldr	r3, [pc, #32]	; (d6cb8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6c96:	6020      	str	r0, [r4, #0]
   d6c98:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6c9a:	71a0      	strb	r0, [r4, #6]
   d6c9c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6c9e:	f7ff f85d 	bl	d5d5c <set_system_mode>
SystemClass System;
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	4a05      	ldr	r2, [pc, #20]	; (d6cbc <_GLOBAL__sub_I_System+0x34>)
   d6ca6:	4906      	ldr	r1, [pc, #24]	; (d6cc0 <_GLOBAL__sub_I_System+0x38>)
   d6ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6cac:	f000 bc6a 	b.w	d7584 <__aeabi_atexit>
   d6cb0:	2003e63c 	.word	0x2003e63c
   d6cb4:	2003e630 	.word	0x2003e630
   d6cb8:	ffff0000 	.word	0xffff0000
   d6cbc:	2003e45c 	.word	0x2003e45c
   d6cc0:	000d6c7b 	.word	0x000d6c7b

000d6cc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6cc4:	4b02      	ldr	r3, [pc, #8]	; (d6cd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6cc6:	681a      	ldr	r2, [r3, #0]
   d6cc8:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6cca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6ccc:	4770      	bx	lr
   d6cce:	bf00      	nop
   d6cd0:	2003e3f4 	.word	0x2003e3f4
   d6cd4:	2003e640 	.word	0x2003e640

000d6cd8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6cd8:	4770      	bx	lr

000d6cda <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6cda:	7441      	strb	r1, [r0, #17]
}
   d6cdc:	4770      	bx	lr

000d6cde <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6cde:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6ce0:	7c00      	ldrb	r0, [r0, #16]
   d6ce2:	f7fe fff3 	bl	d5ccc <hal_usart_available_data_for_write>
}
   d6ce6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cea:	bd08      	pop	{r3, pc}

000d6cec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6cec:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6cee:	7c00      	ldrb	r0, [r0, #16]
   d6cf0:	f7fe ffc4 	bl	d5c7c <hal_usart_available>
}
   d6cf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6cf8:	bd08      	pop	{r3, pc}

000d6cfa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6cfa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6cfc:	7c00      	ldrb	r0, [r0, #16]
   d6cfe:	f7fe ffcd 	bl	d5c9c <hal_usart_peek>
}
   d6d02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6d06:	bd08      	pop	{r3, pc}

000d6d08 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6d08:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6d0a:	7c00      	ldrb	r0, [r0, #16]
   d6d0c:	f7fe ffbe 	bl	d5c8c <hal_usart_read>
}
   d6d10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6d14:	bd08      	pop	{r3, pc}

000d6d16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6d16:	7c00      	ldrb	r0, [r0, #16]
   d6d18:	f7fe bfc8 	b.w	d5cac <hal_usart_flush>

000d6d1c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6d1e:	7c45      	ldrb	r5, [r0, #17]
{
   d6d20:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6d22:	b12d      	cbz	r5, d6d30 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6d24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6d26:	b003      	add	sp, #12
   d6d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6d2c:	f7fe bf9e 	b.w	d5c6c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6d30:	7c00      	ldrb	r0, [r0, #16]
   d6d32:	9101      	str	r1, [sp, #4]
   d6d34:	f7fe ffca 	bl	d5ccc <hal_usart_available_data_for_write>
   d6d38:	2800      	cmp	r0, #0
   d6d3a:	9901      	ldr	r1, [sp, #4]
   d6d3c:	dcf2      	bgt.n	d6d24 <_ZN11USARTSerial5writeEh+0x8>
}
   d6d3e:	4628      	mov	r0, r5
   d6d40:	b003      	add	sp, #12
   d6d42:	bd30      	pop	{r4, r5, pc}

000d6d44 <_ZN11USARTSerialD0Ev>:
   d6d44:	b510      	push	{r4, lr}
   d6d46:	2114      	movs	r1, #20
   d6d48:	4604      	mov	r4, r0
   d6d4a:	f000 fc20 	bl	d758e <_ZdlPvj>
   d6d4e:	4620      	mov	r0, r4
   d6d50:	bd10      	pop	{r4, pc}
	...

000d6d54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6d54:	b510      	push	{r4, lr}
   d6d56:	f04f 0c00 	mov.w	ip, #0
   d6d5a:	4604      	mov	r4, r0
   d6d5c:	4608      	mov	r0, r1
   d6d5e:	4611      	mov	r1, r2
   d6d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6d64:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6d68:	4a04      	ldr	r2, [pc, #16]	; (d6d7c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6d6a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6d6c:	2201      	movs	r2, #1
  _serial = serial;
   d6d6e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6d70:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6d72:	461a      	mov	r2, r3
   d6d74:	f7fe ff72 	bl	d5c5c <hal_usart_init>
}
   d6d78:	4620      	mov	r0, r4
   d6d7a:	bd10      	pop	{r4, pc}
   d6d7c:	000d831c 	.word	0x000d831c

000d6d80 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6d80:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6d82:	4c0e      	ldr	r4, [pc, #56]	; (d6dbc <_Z22__fetch_global_Serial1v+0x3c>)
   d6d84:	7821      	ldrb	r1, [r4, #0]
   d6d86:	f3bf 8f5b 	dmb	ish
   d6d8a:	f011 0101 	ands.w	r1, r1, #1
   d6d8e:	d112      	bne.n	d6db6 <_Z22__fetch_global_Serial1v+0x36>
   d6d90:	4620      	mov	r0, r4
   d6d92:	9101      	str	r1, [sp, #4]
   d6d94:	f7fd f985 	bl	d40a2 <__cxa_guard_acquire>
   d6d98:	9901      	ldr	r1, [sp, #4]
   d6d9a:	b160      	cbz	r0, d6db6 <_Z22__fetch_global_Serial1v+0x36>
   d6d9c:	4a08      	ldr	r2, [pc, #32]	; (d6dc0 <_Z22__fetch_global_Serial1v+0x40>)
   d6d9e:	4b09      	ldr	r3, [pc, #36]	; (d6dc4 <_Z22__fetch_global_Serial1v+0x44>)
   d6da0:	4809      	ldr	r0, [pc, #36]	; (d6dc8 <_Z22__fetch_global_Serial1v+0x48>)
   d6da2:	f7ff ffd7 	bl	d6d54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6da6:	4620      	mov	r0, r4
   d6da8:	f7fd f980 	bl	d40ac <__cxa_guard_release>
   d6dac:	4a07      	ldr	r2, [pc, #28]	; (d6dcc <_Z22__fetch_global_Serial1v+0x4c>)
   d6dae:	4908      	ldr	r1, [pc, #32]	; (d6dd0 <_Z22__fetch_global_Serial1v+0x50>)
   d6db0:	4805      	ldr	r0, [pc, #20]	; (d6dc8 <_Z22__fetch_global_Serial1v+0x48>)
   d6db2:	f000 fbe7 	bl	d7584 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6db6:	4804      	ldr	r0, [pc, #16]	; (d6dc8 <_Z22__fetch_global_Serial1v+0x48>)
   d6db8:	b002      	add	sp, #8
   d6dba:	bd10      	pop	{r4, pc}
   d6dbc:	2003e644 	.word	0x2003e644
   d6dc0:	2003e648 	.word	0x2003e648
   d6dc4:	2003e6cc 	.word	0x2003e6cc
   d6dc8:	2003e750 	.word	0x2003e750
   d6dcc:	2003e45c 	.word	0x2003e45c
   d6dd0:	000d6cd9 	.word	0x000d6cd9

000d6dd4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6dd4:	7441      	strb	r1, [r0, #17]
}
   d6dd6:	4770      	bx	lr

000d6dd8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6dd8:	4770      	bx	lr

000d6dda <_ZN9USBSerial4readEv>:
{
   d6dda:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ddc:	2100      	movs	r1, #0
   d6dde:	7c00      	ldrb	r0, [r0, #16]
   d6de0:	f7fe ff9c 	bl	d5d1c <HAL_USB_USART_Receive_Data>
}
   d6de4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6de8:	bd08      	pop	{r3, pc}

000d6dea <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6dea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6dec:	2101      	movs	r1, #1
   d6dee:	7c00      	ldrb	r0, [r0, #16]
   d6df0:	f7fe ff94 	bl	d5d1c <HAL_USB_USART_Receive_Data>
}
   d6df4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6df8:	bd08      	pop	{r3, pc}

000d6dfa <_ZN9USBSerial17availableForWriteEv>:
{
   d6dfa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6dfc:	7c00      	ldrb	r0, [r0, #16]
   d6dfe:	f7fe ff85 	bl	d5d0c <HAL_USB_USART_Available_Data_For_Write>
}
   d6e02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e06:	bd08      	pop	{r3, pc}

000d6e08 <_ZN9USBSerial9availableEv>:
{
   d6e08:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6e0a:	7c00      	ldrb	r0, [r0, #16]
   d6e0c:	f7fe ff76 	bl	d5cfc <HAL_USB_USART_Available_Data>
}
   d6e10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6e14:	bd08      	pop	{r3, pc}

000d6e16 <_ZN9USBSerial5writeEh>:
{
   d6e16:	b513      	push	{r0, r1, r4, lr}
   d6e18:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6e1a:	7c00      	ldrb	r0, [r0, #16]
{
   d6e1c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6e1e:	f7fe ff75 	bl	d5d0c <HAL_USB_USART_Available_Data_For_Write>
   d6e22:	2800      	cmp	r0, #0
   d6e24:	9901      	ldr	r1, [sp, #4]
   d6e26:	dc01      	bgt.n	d6e2c <_ZN9USBSerial5writeEh+0x16>
   d6e28:	7c60      	ldrb	r0, [r4, #17]
   d6e2a:	b120      	cbz	r0, d6e36 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6e2c:	7c20      	ldrb	r0, [r4, #16]
   d6e2e:	f7fe ff7d 	bl	d5d2c <HAL_USB_USART_Send_Data>
   d6e32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6e36:	b002      	add	sp, #8
   d6e38:	bd10      	pop	{r4, pc}

000d6e3a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6e3a:	7c00      	ldrb	r0, [r0, #16]
   d6e3c:	f7fe bf7e 	b.w	d5d3c <HAL_USB_USART_Flush_Data>

000d6e40 <_ZN9USBSerialD0Ev>:
   d6e40:	b510      	push	{r4, lr}
   d6e42:	2114      	movs	r1, #20
   d6e44:	4604      	mov	r4, r0
   d6e46:	f000 fba2 	bl	d758e <_ZdlPvj>
   d6e4a:	4620      	mov	r0, r4
   d6e4c:	bd10      	pop	{r4, pc}
	...

000d6e50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6e50:	b510      	push	{r4, lr}
   d6e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6e56:	4604      	mov	r4, r0
   d6e58:	4608      	mov	r0, r1
   d6e5a:	2100      	movs	r1, #0
   d6e5c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6e60:	4b04      	ldr	r3, [pc, #16]	; (d6e74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6e62:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6e64:	2301      	movs	r3, #1
  _serial = serial;
   d6e66:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6e68:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6e6a:	4611      	mov	r1, r2
   d6e6c:	f7fe ff36 	bl	d5cdc <HAL_USB_USART_Init>
}
   d6e70:	4620      	mov	r0, r4
   d6e72:	bd10      	pop	{r4, pc}
   d6e74:	000d834c 	.word	0x000d834c

000d6e78 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6e78:	7c00      	ldrb	r0, [r0, #16]
   d6e7a:	2200      	movs	r2, #0
   d6e7c:	f7fe bf36 	b.w	d5cec <HAL_USB_USART_Begin>

000d6e80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6e80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6e82:	2214      	movs	r2, #20
{
   d6e84:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6e86:	2100      	movs	r1, #0
   d6e88:	f000 ffc2 	bl	d7e10 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	bd10      	pop	{r4, pc}

000d6e90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6e90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6e92:	4c10      	ldr	r4, [pc, #64]	; (d6ed4 <_Z16_fetch_usbserialv+0x44>)
{
   d6e94:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6e96:	a803      	add	r0, sp, #12
   d6e98:	f7ff fff2 	bl	d6e80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6e9c:	7821      	ldrb	r1, [r4, #0]
   d6e9e:	f3bf 8f5b 	dmb	ish
   d6ea2:	f011 0101 	ands.w	r1, r1, #1
   d6ea6:	d111      	bne.n	d6ecc <_Z16_fetch_usbserialv+0x3c>
   d6ea8:	4620      	mov	r0, r4
   d6eaa:	9101      	str	r1, [sp, #4]
   d6eac:	f7fd f8f9 	bl	d40a2 <__cxa_guard_acquire>
   d6eb0:	9901      	ldr	r1, [sp, #4]
   d6eb2:	b158      	cbz	r0, d6ecc <_Z16_fetch_usbserialv+0x3c>
   d6eb4:	aa03      	add	r2, sp, #12
   d6eb6:	4808      	ldr	r0, [pc, #32]	; (d6ed8 <_Z16_fetch_usbserialv+0x48>)
   d6eb8:	f7ff ffca 	bl	d6e50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	f7fd f8f5 	bl	d40ac <__cxa_guard_release>
   d6ec2:	4a06      	ldr	r2, [pc, #24]	; (d6edc <_Z16_fetch_usbserialv+0x4c>)
   d6ec4:	4906      	ldr	r1, [pc, #24]	; (d6ee0 <_Z16_fetch_usbserialv+0x50>)
   d6ec6:	4804      	ldr	r0, [pc, #16]	; (d6ed8 <_Z16_fetch_usbserialv+0x48>)
   d6ec8:	f000 fb5c 	bl	d7584 <__aeabi_atexit>
	return _usbserial;
}
   d6ecc:	4802      	ldr	r0, [pc, #8]	; (d6ed8 <_Z16_fetch_usbserialv+0x48>)
   d6ece:	b008      	add	sp, #32
   d6ed0:	bd10      	pop	{r4, pc}
   d6ed2:	bf00      	nop
   d6ed4:	2003e764 	.word	0x2003e764
   d6ed8:	2003e768 	.word	0x2003e768
   d6edc:	2003e45c 	.word	0x2003e45c
   d6ee0:	000d6dd9 	.word	0x000d6dd9

000d6ee4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6ee4:	2200      	movs	r2, #0
   d6ee6:	6840      	ldr	r0, [r0, #4]
   d6ee8:	4611      	mov	r1, r2
   d6eea:	f7fe bf9b 	b.w	d5e24 <network_ready>

000d6eee <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6eee:	2200      	movs	r2, #0
   d6ef0:	6840      	ldr	r0, [r0, #4]
   d6ef2:	4611      	mov	r1, r2
   d6ef4:	f7fe bfb6 	b.w	d5e64 <network_listening>

000d6ef8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6ef8:	2200      	movs	r2, #0
   d6efa:	6840      	ldr	r0, [r0, #4]
   d6efc:	4611      	mov	r1, r2
   d6efe:	f7fe bfc1 	b.w	d5e84 <network_get_listen_timeout>

000d6f02 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6f02:	6840      	ldr	r0, [r0, #4]
   d6f04:	2200      	movs	r2, #0
   d6f06:	f7fe bfb5 	b.w	d5e74 <network_set_listen_timeout>

000d6f0a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f0a:	6840      	ldr	r0, [r0, #4]
   d6f0c:	2200      	movs	r2, #0
   d6f0e:	f081 0101 	eor.w	r1, r1, #1
   d6f12:	f7fe bf9f 	b.w	d5e54 <network_listen>

000d6f16 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6f16:	2300      	movs	r3, #0
   d6f18:	6840      	ldr	r0, [r0, #4]
   d6f1a:	461a      	mov	r2, r3
   d6f1c:	4619      	mov	r1, r3
   d6f1e:	f7fe bf91 	b.w	d5e44 <network_off>

000d6f22 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6f22:	2300      	movs	r3, #0
   d6f24:	6840      	ldr	r0, [r0, #4]
   d6f26:	461a      	mov	r2, r3
   d6f28:	4619      	mov	r1, r3
   d6f2a:	f7fe bf83 	b.w	d5e34 <network_on>

000d6f2e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6f2e:	2200      	movs	r2, #0
   d6f30:	6840      	ldr	r0, [r0, #4]
   d6f32:	4611      	mov	r1, r2
   d6f34:	f7fe bf66 	b.w	d5e04 <network_connecting>

000d6f38 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f38:	6840      	ldr	r0, [r0, #4]
   d6f3a:	2200      	movs	r2, #0
   d6f3c:	2102      	movs	r1, #2
   d6f3e:	f7fe bf69 	b.w	d5e14 <network_disconnect>

000d6f42 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6f42:	2300      	movs	r3, #0
   d6f44:	6840      	ldr	r0, [r0, #4]
   d6f46:	461a      	mov	r2, r3
   d6f48:	f7fe bf54 	b.w	d5df4 <network_connect>

000d6f4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6f4c:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6f4e:	2204      	movs	r2, #4
   d6f50:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6f52:	4a02      	ldr	r2, [pc, #8]	; (d6f5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6f54:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6f56:	4770      	bx	lr
   d6f58:	2003e77c 	.word	0x2003e77c
   d6f5c:	000d837c 	.word	0x000d837c

000d6f60 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6f60:	b510      	push	{r4, lr}
   d6f62:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6f64:	f000 ffd9 	bl	d7f1a <strlen>
   d6f68:	3801      	subs	r0, #1
   d6f6a:	1823      	adds	r3, r4, r0
   d6f6c:	4620      	mov	r0, r4
	while(i<j){
   d6f6e:	4283      	cmp	r3, r0
   d6f70:	d906      	bls.n	d6f80 <_Z11str_reversePc+0x20>
		c = *i;
   d6f72:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6f74:	7819      	ldrb	r1, [r3, #0]
   d6f76:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6f7a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6f7e:	e7f6      	b.n	d6f6e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6f80:	bd10      	pop	{r4, pc}

000d6f82 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6f82:	b570      	push	{r4, r5, r6, lr}
   d6f84:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6f86:	1e91      	subs	r1, r2, #2
   d6f88:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6f8a:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6f8c:	d822      	bhi.n	d6fd4 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6f8e:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6f90:	b16d      	cbz	r5, d6fae <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6f92:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6f96:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6f9a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6f9c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6f9e:	bf94      	ite	ls
   d6fa0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6fa2:	3157      	addhi	r1, #87	; 0x57
   d6fa4:	b2c9      	uxtb	r1, r1
   d6fa6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6faa:	4635      	mov	r5, r6
	while(a){
   d6fac:	e7f0      	b.n	d6f90 <ultoa+0xe>
   d6fae:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6fb0:	4423      	add	r3, r4
            *ptr++ = '0';
   d6fb2:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6fb4:	4293      	cmp	r3, r2
   d6fb6:	d902      	bls.n	d6fbe <ultoa+0x3c>
            *ptr++ = '0';
   d6fb8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6fbc:	e7fa      	b.n	d6fb4 <ultoa+0x32>
   d6fbe:	1a1a      	subs	r2, r3, r0
   d6fc0:	4283      	cmp	r3, r0
   d6fc2:	bf38      	it	cc
   d6fc4:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6fc6:	2300      	movs	r3, #0
   d6fc8:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6fca:	4620      	mov	r0, r4
   d6fcc:	f7ff ffc8 	bl	d6f60 <_Z11str_reversePc>
	return buffer;
   d6fd0:	4620      	mov	r0, r4
}
   d6fd2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6fd4:	2000      	movs	r0, #0
   d6fd6:	e7fc      	b.n	d6fd2 <ultoa+0x50>

000d6fd8 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6fd8:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6fda:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6fdc:	460c      	mov	r4, r1
   d6fde:	4615      	mov	r5, r2
	if(a<0){
   d6fe0:	da0e      	bge.n	d7000 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6fe6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6fea:	bf14      	ite	ne
   d6fec:	4258      	negne	r0, r3
   d6fee:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6ff0:	2301      	movs	r3, #1
		*buffer = '-';
   d6ff2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6ff4:	462a      	mov	r2, r5
   d6ff6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6ff8:	f7ff ffc3 	bl	d6f82 <ultoa>
	}
	return buffer;
}
   d6ffc:	4620      	mov	r0, r4
   d6ffe:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d7000:	2301      	movs	r3, #1
   d7002:	e7f9      	b.n	d6ff8 <itoa+0x20>

000d7004 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7004:	4b01      	ldr	r3, [pc, #4]	; (d700c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7006:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7008:	4770      	bx	lr
   d700a:	bf00      	nop
   d700c:	2003e3f8 	.word	0x2003e3f8

000d7010 <serialEventRun>:
{
   d7010:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7012:	4b0b      	ldr	r3, [pc, #44]	; (d7040 <serialEventRun+0x30>)
   d7014:	b143      	cbz	r3, d7028 <serialEventRun+0x18>
   d7016:	f7ff ff3b 	bl	d6e90 <_Z16_fetch_usbserialv>
   d701a:	6803      	ldr	r3, [r0, #0]
   d701c:	691b      	ldr	r3, [r3, #16]
   d701e:	4798      	blx	r3
   d7020:	2800      	cmp	r0, #0
   d7022:	dd01      	ble.n	d7028 <serialEventRun+0x18>
        serialEvent();
   d7024:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7028:	4b06      	ldr	r3, [pc, #24]	; (d7044 <serialEventRun+0x34>)
   d702a:	b143      	cbz	r3, d703e <serialEventRun+0x2e>
   d702c:	f7ff fea8 	bl	d6d80 <_Z22__fetch_global_Serial1v>
   d7030:	6803      	ldr	r3, [r0, #0]
   d7032:	691b      	ldr	r3, [r3, #16]
   d7034:	4798      	blx	r3
   d7036:	2800      	cmp	r0, #0
   d7038:	dd01      	ble.n	d703e <serialEventRun+0x2e>
        serialEvent1();
   d703a:	f3af 8000 	nop.w
}
   d703e:	bd08      	pop	{r3, pc}
	...

000d7048 <_post_loop>:
{
   d7048:	b508      	push	{r3, lr}
	serialEventRun();
   d704a:	f7ff ffe1 	bl	d7010 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d704e:	f7fe fd43 	bl	d5ad8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7052:	4b01      	ldr	r3, [pc, #4]	; (d7058 <_post_loop+0x10>)
   d7054:	6018      	str	r0, [r3, #0]
}
   d7056:	bd08      	pop	{r3, pc}
   d7058:	2003e798 	.word	0x2003e798

000d705c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d705c:	4802      	ldr	r0, [pc, #8]	; (d7068 <_Z33system_initialize_user_backup_ramv+0xc>)
   d705e:	4a03      	ldr	r2, [pc, #12]	; (d706c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7060:	4903      	ldr	r1, [pc, #12]	; (d7070 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7062:	1a12      	subs	r2, r2, r0
   d7064:	f000 bec6 	b.w	d7df4 <memcpy>
   d7068:	2003f400 	.word	0x2003f400
   d706c:	2003f404 	.word	0x2003f404
   d7070:	000d83e0 	.word	0x000d83e0

000d7074 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7074:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7076:	2300      	movs	r3, #0
   d7078:	9300      	str	r3, [sp, #0]
   d707a:	461a      	mov	r2, r3
   d707c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7080:	f7fe fe96 	bl	d5db0 <system_ctrl_set_result>
}
   d7084:	b003      	add	sp, #12
   d7086:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d708c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d708c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d708e:	8843      	ldrh	r3, [r0, #2]
   d7090:	2b0a      	cmp	r3, #10
   d7092:	d008      	beq.n	d70a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7094:	2b50      	cmp	r3, #80	; 0x50
   d7096:	d10b      	bne.n	d70b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7098:	4b09      	ldr	r3, [pc, #36]	; (d70c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d709a:	681b      	ldr	r3, [r3, #0]
   d709c:	b14b      	cbz	r3, d70b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d709e:	b003      	add	sp, #12
   d70a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d70a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d70a6:	f7ff ffe5 	bl	d7074 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d70aa:	b003      	add	sp, #12
   d70ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d70b0:	2300      	movs	r3, #0
   d70b2:	9300      	str	r3, [sp, #0]
   d70b4:	461a      	mov	r2, r3
   d70b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d70ba:	f7fe fe79 	bl	d5db0 <system_ctrl_set_result>
}
   d70be:	e7f4      	b.n	d70aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d70c0:	2003e788 	.word	0x2003e788

000d70c4 <module_user_init_hook>:
{
   d70c4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d70c6:	4c12      	ldr	r4, [pc, #72]	; (d7110 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d70c8:	4812      	ldr	r0, [pc, #72]	; (d7114 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d70ca:	4d13      	ldr	r5, [pc, #76]	; (d7118 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d70cc:	2100      	movs	r1, #0
   d70ce:	f7fe ff11 	bl	d5ef4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d70d2:	6823      	ldr	r3, [r4, #0]
   d70d4:	42ab      	cmp	r3, r5
   d70d6:	4b11      	ldr	r3, [pc, #68]	; (d711c <module_user_init_hook+0x58>)
   d70d8:	bf0c      	ite	eq
   d70da:	2201      	moveq	r2, #1
   d70dc:	2200      	movne	r2, #0
   d70de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d70e0:	d002      	beq.n	d70e8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d70e2:	f7ff ffbb 	bl	d705c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d70e6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d70e8:	f7fe fcde 	bl	d5aa8 <HAL_RNG_GetRandomNumber>
   d70ec:	4604      	mov	r4, r0
    srand(seed);
   d70ee:	f000 fe97 	bl	d7e20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d70f2:	4b0b      	ldr	r3, [pc, #44]	; (d7120 <module_user_init_hook+0x5c>)
   d70f4:	b113      	cbz	r3, d70fc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d70f6:	4620      	mov	r0, r4
   d70f8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d70fc:	2100      	movs	r1, #0
   d70fe:	4808      	ldr	r0, [pc, #32]	; (d7120 <module_user_init_hook+0x5c>)
   d7100:	f7fe fe70 	bl	d5de4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7108:	4806      	ldr	r0, [pc, #24]	; (d7124 <module_user_init_hook+0x60>)
   d710a:	2100      	movs	r1, #0
   d710c:	f7fe be46 	b.w	d5d9c <system_ctrl_set_app_request_handler>
   d7110:	2003f400 	.word	0x2003f400
   d7114:	000d7005 	.word	0x000d7005
   d7118:	9a271c1e 	.word	0x9a271c1e
   d711c:	2003e784 	.word	0x2003e784
   d7120:	00000000 	.word	0x00000000
   d7124:	000d708d 	.word	0x000d708d

000d7128 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7128:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d712a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d712c:	d902      	bls.n	d7134 <pinAvailable+0xc>
    return false;
   d712e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7130:	b002      	add	sp, #8
   d7132:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7134:	f1a0 030b 	sub.w	r3, r0, #11
   d7138:	2b02      	cmp	r3, #2
   d713a:	d81a      	bhi.n	d7172 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d713c:	4c17      	ldr	r4, [pc, #92]	; (d719c <pinAvailable+0x74>)
   d713e:	7821      	ldrb	r1, [r4, #0]
   d7140:	f3bf 8f5b 	dmb	ish
   d7144:	f011 0101 	ands.w	r1, r1, #1
   d7148:	d10b      	bne.n	d7162 <pinAvailable+0x3a>
   d714a:	4620      	mov	r0, r4
   d714c:	9101      	str	r1, [sp, #4]
   d714e:	f7fc ffa8 	bl	d40a2 <__cxa_guard_acquire>
   d7152:	9901      	ldr	r1, [sp, #4]
   d7154:	b128      	cbz	r0, d7162 <pinAvailable+0x3a>
   d7156:	4812      	ldr	r0, [pc, #72]	; (d71a0 <pinAvailable+0x78>)
   d7158:	f7ff fc42 	bl	d69e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d715c:	4620      	mov	r0, r4
   d715e:	f7fc ffa5 	bl	d40ac <__cxa_guard_release>
   d7162:	4b0f      	ldr	r3, [pc, #60]	; (d71a0 <pinAvailable+0x78>)
   d7164:	7818      	ldrb	r0, [r3, #0]
   d7166:	f7fe fd71 	bl	d5c4c <hal_spi_is_enabled>
   d716a:	2800      	cmp	r0, #0
   d716c:	d1df      	bne.n	d712e <pinAvailable+0x6>
  return true; // 'pin' is available
   d716e:	2001      	movs	r0, #1
   d7170:	e7de      	b.n	d7130 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7172:	2801      	cmp	r0, #1
   d7174:	d809      	bhi.n	d718a <pinAvailable+0x62>
   d7176:	f000 f86f 	bl	d7258 <_Z19__fetch_global_Wirev>
   d717a:	2100      	movs	r1, #0
   d717c:	7c00      	ldrb	r0, [r0, #16]
   d717e:	f7fe fd2d 	bl	d5bdc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7182:	f080 0001 	eor.w	r0, r0, #1
   d7186:	b2c0      	uxtb	r0, r0
   d7188:	e7d2      	b.n	d7130 <pinAvailable+0x8>
   d718a:	3809      	subs	r0, #9
   d718c:	2801      	cmp	r0, #1
   d718e:	d8ee      	bhi.n	d716e <pinAvailable+0x46>
   d7190:	f7ff fdf6 	bl	d6d80 <_Z22__fetch_global_Serial1v>
   d7194:	7c00      	ldrb	r0, [r0, #16]
   d7196:	f7fe fd91 	bl	d5cbc <hal_usart_is_enabled>
   d719a:	e7f2      	b.n	d7182 <pinAvailable+0x5a>
   d719c:	2003e78c 	.word	0x2003e78c
   d71a0:	2003e790 	.word	0x2003e790

000d71a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71a4:	2823      	cmp	r0, #35	; 0x23
{
   d71a6:	b538      	push	{r3, r4, r5, lr}
   d71a8:	4604      	mov	r4, r0
   d71aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71ac:	d80a      	bhi.n	d71c4 <pinMode+0x20>
   d71ae:	29ff      	cmp	r1, #255	; 0xff
   d71b0:	d008      	beq.n	d71c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d71b2:	f7ff ffb9 	bl	d7128 <pinAvailable>
   d71b6:	b128      	cbz	r0, d71c4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d71b8:	4629      	mov	r1, r5
   d71ba:	4620      	mov	r0, r4
}
   d71bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d71c0:	f7fe bc9a 	b.w	d5af8 <HAL_Pin_Mode>
}
   d71c4:	bd38      	pop	{r3, r4, r5, pc}

000d71c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d71c6:	b538      	push	{r3, r4, r5, lr}
   d71c8:	4604      	mov	r4, r0
   d71ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d71cc:	f7fe fc9c 	bl	d5b08 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d71d0:	28ff      	cmp	r0, #255	; 0xff
   d71d2:	d010      	beq.n	d71f6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d71d4:	2806      	cmp	r0, #6
   d71d6:	d804      	bhi.n	d71e2 <digitalWrite+0x1c>
   d71d8:	234d      	movs	r3, #77	; 0x4d
   d71da:	fa23 f000 	lsr.w	r0, r3, r0
   d71de:	07c3      	lsls	r3, r0, #31
   d71e0:	d409      	bmi.n	d71f6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d71e2:	4620      	mov	r0, r4
   d71e4:	f7ff ffa0 	bl	d7128 <pinAvailable>
   d71e8:	b128      	cbz	r0, d71f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d71ea:	4629      	mov	r1, r5
   d71ec:	4620      	mov	r0, r4
}
   d71ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d71f2:	f7fe bc91 	b.w	d5b18 <HAL_GPIO_Write>
}
   d71f6:	bd38      	pop	{r3, r4, r5, pc}

000d71f8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d71f8:	280d      	cmp	r0, #13
{
   d71fa:	b510      	push	{r4, lr}
   d71fc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d71fe:	bf9c      	itt	ls
   d7200:	340e      	addls	r4, #14
   d7202:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7204:	4620      	mov	r0, r4
   d7206:	f7ff ff8f 	bl	d7128 <pinAvailable>
   d720a:	b150      	cbz	r0, d7222 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d720c:	2103      	movs	r1, #3
   d720e:	4620      	mov	r0, r4
   d7210:	f7fe fc6a 	bl	d5ae8 <HAL_Validate_Pin_Function>
   d7214:	2803      	cmp	r0, #3
   d7216:	d104      	bne.n	d7222 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7218:	4620      	mov	r0, r4
}
   d721a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d721e:	f7fe bc83 	b.w	d5b28 <hal_adc_read>
}
   d7222:	2000      	movs	r0, #0
   d7224:	bd10      	pop	{r4, pc}
	...

000d7228 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7228:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d722a:	2300      	movs	r3, #0
   d722c:	2520      	movs	r5, #32
   d722e:	8043      	strh	r3, [r0, #2]
   d7230:	2314      	movs	r3, #20
{
   d7232:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7234:	8003      	strh	r3, [r0, #0]
   d7236:	6085      	str	r5, [r0, #8]
   d7238:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d723a:	4906      	ldr	r1, [pc, #24]	; (d7254 <_Z17acquireWireBufferv+0x2c>)
   d723c:	4628      	mov	r0, r5
   d723e:	f000 f9a8 	bl	d7592 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7242:	4904      	ldr	r1, [pc, #16]	; (d7254 <_Z17acquireWireBufferv+0x2c>)
	};
   d7244:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7246:	4628      	mov	r0, r5
   d7248:	f000 f9a3 	bl	d7592 <_ZnajRKSt9nothrow_t>
	};
   d724c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d724e:	4620      	mov	r0, r4
   d7250:	bd38      	pop	{r3, r4, r5, pc}
   d7252:	bf00      	nop
   d7254:	000d83a8 	.word	0x000d83a8

000d7258 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7258:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d725a:	4d0f      	ldr	r5, [pc, #60]	; (d7298 <_Z19__fetch_global_Wirev+0x40>)
   d725c:	7829      	ldrb	r1, [r5, #0]
   d725e:	f3bf 8f5b 	dmb	ish
   d7262:	f011 0401 	ands.w	r4, r1, #1
{
   d7266:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7268:	d113      	bne.n	d7292 <_Z19__fetch_global_Wirev+0x3a>
   d726a:	4628      	mov	r0, r5
   d726c:	f7fc ff19 	bl	d40a2 <__cxa_guard_acquire>
   d7270:	b178      	cbz	r0, d7292 <_Z19__fetch_global_Wirev+0x3a>
   d7272:	a801      	add	r0, sp, #4
   d7274:	f7ff ffd8 	bl	d7228 <_Z17acquireWireBufferv>
   d7278:	aa01      	add	r2, sp, #4
   d727a:	4621      	mov	r1, r4
   d727c:	4807      	ldr	r0, [pc, #28]	; (d729c <_Z19__fetch_global_Wirev+0x44>)
   d727e:	f7ff f99d 	bl	d65bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7282:	4628      	mov	r0, r5
   d7284:	f7fc ff12 	bl	d40ac <__cxa_guard_release>
   d7288:	4a05      	ldr	r2, [pc, #20]	; (d72a0 <_Z19__fetch_global_Wirev+0x48>)
   d728a:	4906      	ldr	r1, [pc, #24]	; (d72a4 <_Z19__fetch_global_Wirev+0x4c>)
   d728c:	4803      	ldr	r0, [pc, #12]	; (d729c <_Z19__fetch_global_Wirev+0x44>)
   d728e:	f000 f979 	bl	d7584 <__aeabi_atexit>
	return wire;
}
   d7292:	4802      	ldr	r0, [pc, #8]	; (d729c <_Z19__fetch_global_Wirev+0x44>)
   d7294:	b007      	add	sp, #28
   d7296:	bd30      	pop	{r4, r5, pc}
   d7298:	2003e79c 	.word	0x2003e79c
   d729c:	2003e7a0 	.word	0x2003e7a0
   d72a0:	2003e45c 	.word	0x2003e45c
   d72a4:	000d6565 	.word	0x000d6565

000d72a8 <irq_handler>:
}

static void irq_handler(NRF_TIMER_Type        * p_reg,
                        timer_control_block_t * p_cb,
                        uint8_t                 channel_count)
{
   d72a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d72ac:	2400      	movs	r4, #0
   d72ae:	4606      	mov	r6, r0
   d72b0:	460f      	mov	r7, r1
   d72b2:	4690      	mov	r8, r2
   d72b4:	f500 75a0 	add.w	r5, r0, #320	; 0x140
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
}

__STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
   d72b8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d72bc:	46a2      	mov	sl, r4
    return (nrf_timer_event_t)
   d72be:	00a0      	lsls	r0, r4, #2
   d72c0:	f500 73a0 	add.w	r3, r0, #320	; 0x140
   d72c4:	b298      	uxth	r0, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   d72c6:	682b      	ldr	r3, [r5, #0]
    for (i = 0; i < channel_count; ++i)
    {
        nrf_timer_event_t event = nrf_timer_compare_event_get(i);
        nrf_timer_int_mask_t int_mask = nrf_timer_compare_int_get(i);

        if (nrf_timer_event_check(p_reg, event) &&
   d72c8:	b16b      	cbz	r3, d72e6 <irq_handler+0x3e>
    return (bool)(p_reg->INTENSET & timer_int);
   d72ca:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    return (nrf_timer_int_mask_t)
   d72ce:	fa09 f204 	lsl.w	r2, r9, r4
   d72d2:	421a      	tst	r2, r3
   d72d4:	d007      	beq.n	d72e6 <irq_handler+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d72d6:	f8c5 a000 	str.w	sl, [r5]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d72da:	682b      	ldr	r3, [r5, #0]
   d72dc:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d72de:	9b01      	ldr	r3, [sp, #4]
            nrf_timer_int_enable_check(p_reg, int_mask))
        {
            nrf_timer_event_clear(p_reg, event);
            NRFX_LOG_DEBUG("Compare event, channel: %d.", i);
            p_cb->handler(event, p_cb->context);
   d72e0:	e9d7 3100 	ldrd	r3, r1, [r7]
   d72e4:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
   d72e6:	3401      	adds	r4, #1
   d72e8:	45a0      	cmp	r8, r4
   d72ea:	f105 0504 	add.w	r5, r5, #4
   d72ee:	d1e6      	bne.n	d72be <irq_handler+0x16>
        }
    }
}
   d72f0:	b002      	add	sp, #8
   d72f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d72f8 <nrfx_timer_init>:
{
   d72f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d72fc:	4b57      	ldr	r3, [pc, #348]	; (d745c <nrfx_timer_init+0x164>)
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   d72fe:	7907      	ldrb	r7, [r0, #4]
{
   d7300:	4616      	mov	r6, r2
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7302:	6802      	ldr	r2, [r0, #0]
   d7304:	429a      	cmp	r2, r3
{
   d7306:	4604      	mov	r4, r0
   d7308:	460d      	mov	r5, r1
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d730a:	d104      	bne.n	d7316 <nrfx_timer_init+0x1e>
   d730c:	4a54      	ldr	r2, [pc, #336]	; (d7460 <nrfx_timer_init+0x168>)
   d730e:	2100      	movs	r1, #0
   d7310:	200a      	movs	r0, #10
   d7312:	f7fe fd1b 	bl	d5d4c <panic_>
    NRFX_ASSERT(p_config);
   d7316:	b925      	cbnz	r5, d7322 <nrfx_timer_init+0x2a>
   d7318:	4a51      	ldr	r2, [pc, #324]	; (d7460 <nrfx_timer_init+0x168>)
   d731a:	4629      	mov	r1, r5
   d731c:	200a      	movs	r0, #10
   d731e:	f7fe fd15 	bl	d5d4c <panic_>
    NRFX_ASSERT(timer_event_handler);
   d7322:	b926      	cbnz	r6, d732e <nrfx_timer_init+0x36>
   d7324:	4a4e      	ldr	r2, [pc, #312]	; (d7460 <nrfx_timer_init+0x168>)
   d7326:	4631      	mov	r1, r6
   d7328:	200a      	movs	r0, #10
   d732a:	f7fe fd0f 	bl	d5d4c <panic_>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   d732e:	4a4d      	ldr	r2, [pc, #308]	; (d7464 <nrfx_timer_init+0x16c>)
   d7330:	230c      	movs	r3, #12
   d7332:	fb03 2307 	mla	r3, r3, r7, r2
   d7336:	4690      	mov	r8, r2
   d7338:	7a1b      	ldrb	r3, [r3, #8]
   d733a:	2b00      	cmp	r3, #0
   d733c:	f040 808c 	bne.w	d7458 <nrfx_timer_init+0x160>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   d7340:	6823      	ldr	r3, [r4, #0]
   d7342:	4a46      	ldr	r2, [pc, #280]	; (d745c <nrfx_timer_init+0x164>)
   d7344:	4293      	cmp	r3, r2
   d7346:	d00f      	beq.n	d7368 <nrfx_timer_init+0x70>
   d7348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d734c:	4293      	cmp	r3, r2
   d734e:	d00b      	beq.n	d7368 <nrfx_timer_init+0x70>
   d7350:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7354:	4293      	cmp	r3, r2
   d7356:	d007      	beq.n	d7368 <nrfx_timer_init+0x70>
   d7358:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   d735c:	4293      	cmp	r3, r2
   d735e:	d003      	beq.n	d7368 <nrfx_timer_init+0x70>
   d7360:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7364:	4293      	cmp	r3, r2
   d7366:	d102      	bne.n	d736e <nrfx_timer_init+0x76>
   d7368:	78ab      	ldrb	r3, [r5, #2]
   d736a:	2b03      	cmp	r3, #3
   d736c:	d904      	bls.n	d7378 <nrfx_timer_init+0x80>
   d736e:	4a3c      	ldr	r2, [pc, #240]	; (d7460 <nrfx_timer_init+0x168>)
   d7370:	2100      	movs	r1, #0
   d7372:	200a      	movs	r0, #10
   d7374:	f7fe fcea 	bl	d5d4c <panic_>
    p_cb->handler = timer_event_handler;
   d7378:	230c      	movs	r3, #12
   d737a:	437b      	muls	r3, r7
   d737c:	eb08 0203 	add.w	r2, r8, r3
   d7380:	f848 6003 	str.w	r6, [r8, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7384:	2100      	movs	r1, #0
    p_cb->context = p_config->p_context;
   d7386:	686b      	ldr	r3, [r5, #4]
   d7388:	6053      	str	r3, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d738a:	460e      	mov	r6, r1
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d738c:	7960      	ldrb	r0, [r4, #5]
   d738e:	6822      	ldr	r2, [r4, #0]
   d7390:	b2cb      	uxtb	r3, r1
   d7392:	4298      	cmp	r0, r3
   d7394:	d857      	bhi.n	d7446 <nrfx_timer_init+0x14e>
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
   d7396:	78ee      	ldrb	r6, [r5, #3]
#define NRFX_IRQ_PRIORITY_SET(irq_number, priority) \
    _NRFX_IRQ_PRIORITY_SET(irq_number, priority)
static inline void _NRFX_IRQ_PRIORITY_SET(IRQn_Type irq_number,
                                          uint8_t   priority)
{
    NRFX_ASSERT(INTERRUPT_PRIORITY_IS_VALID(priority));
   d7398:	1eb3      	subs	r3, r6, #2
   d739a:	2b01      	cmp	r3, #1
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   d739c:	ea4f 3912 	mov.w	r9, r2, lsr #12
   d73a0:	f342 3a07 	sbfx	sl, r2, #12, #8
   d73a4:	d907      	bls.n	d73b6 <nrfx_timer_init+0xbe>
   d73a6:	1f73      	subs	r3, r6, #5
   d73a8:	2b02      	cmp	r3, #2
   d73aa:	d904      	bls.n	d73b6 <nrfx_timer_init+0xbe>
   d73ac:	4a2c      	ldr	r2, [pc, #176]	; (d7460 <nrfx_timer_init+0x168>)
   d73ae:	2100      	movs	r1, #0
   d73b0:	200a      	movs	r0, #10
   d73b2:	f7fe fccb 	bl	d5d4c <panic_>
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   d73b6:	f1ba 0f00 	cmp.w	sl, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d73ba:	bfac      	ite	ge
   d73bc:	f10a 4360 	addge.w	r3, sl, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d73c0:	4b29      	ldrlt	r3, [pc, #164]	; (d7468 <nrfx_timer_init+0x170>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d73c2:	482a      	ldr	r0, [pc, #168]	; (d746c <nrfx_timer_init+0x174>)
   d73c4:	ea4f 1646 	mov.w	r6, r6, lsl #5
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d73c8:	bfb8      	it	lt
   d73ca:	f009 090f 	andlt.w	r9, r9, #15
   d73ce:	b2f6      	uxtb	r6, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d73d0:	bfaa      	itet	ge
   d73d2:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d73d6:	f803 6009 	strblt.w	r6, [r3, r9]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d73da:	f883 6300 	strbge.w	r6, [r3, #768]	; 0x300
   d73de:	6823      	ldr	r3, [r4, #0]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d73e0:	f343 3107 	sbfx	r1, r3, #12, #8
   d73e4:	0949      	lsrs	r1, r1, #5
   d73e6:	2201      	movs	r2, #1
   d73e8:	f3c3 3304 	ubfx	r3, r3, #12, #5
   d73ec:	fa02 f303 	lsl.w	r3, r2, r3
   d73f0:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   d73f4:	6820      	ldr	r0, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d73f6:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d73f8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d73fc:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7400:	f021 0103 	bic.w	r1, r1, #3
   d7404:	430b      	orrs	r3, r1
   d7406:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   d740a:	6820      	ldr	r0, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d740c:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d740e:	f8d0 1508 	ldr.w	r1, [r0, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d7412:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d7416:	f021 0103 	bic.w	r1, r1, #3
   d741a:	430b      	orrs	r3, r1
   d741c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
   d7420:	6820      	ldr	r0, [r4, #0]
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d7422:	782b      	ldrb	r3, [r5, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d7424:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d7428:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d742c:	f021 010f 	bic.w	r1, r1, #15
   d7430:	430b      	orrs	r3, r1
   d7432:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d7436:	230c      	movs	r3, #12
   d7438:	fb03 8707 	mla	r7, r3, r7, r8
    return err_code;
   d743c:	2000      	movs	r0, #0
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d743e:	723a      	strb	r2, [r7, #8]
}
   d7440:	b002      	add	sp, #8
   d7442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (nrf_timer_event_t)
   d7446:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7448:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   d744c:	3101      	adds	r1, #1
   d744e:	50d6      	str	r6, [r2, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7450:	58d3      	ldr	r3, [r2, r3]
   d7452:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7454:	9b01      	ldr	r3, [sp, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7456:	e799      	b.n	d738c <nrfx_timer_init+0x94>
        return err_code;
   d7458:	2008      	movs	r0, #8
   d745a:	e7f1      	b.n	d7440 <nrfx_timer_init+0x148>
   d745c:	40008000 	.word	0x40008000
   d7460:	000d5ab9 	.word	0x000d5ab9
   d7464:	2003e7b4 	.word	0x2003e7b4
   d7468:	e000ed14 	.word	0xe000ed14
   d746c:	e000e100 	.word	0xe000e100

000d7470 <nrfx_timer_enable>:
{
   d7470:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d7472:	4d0c      	ldr	r5, [pc, #48]	; (d74a4 <nrfx_timer_enable+0x34>)
   d7474:	7902      	ldrb	r2, [r0, #4]
   d7476:	210c      	movs	r1, #12
   d7478:	fb01 5202 	mla	r2, r1, r2, r5
{
   d747c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d747e:	7a12      	ldrb	r2, [r2, #8]
   d7480:	2a01      	cmp	r2, #1
   d7482:	d004      	beq.n	d748e <nrfx_timer_enable+0x1e>
   d7484:	4a08      	ldr	r2, [pc, #32]	; (d74a8 <nrfx_timer_enable+0x38>)
   d7486:	2100      	movs	r1, #0
   d7488:	200a      	movs	r0, #10
   d748a:	f7fe fc5f 	bl	d5d4c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   d748e:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   d7490:	2201      	movs	r2, #1
   d7492:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   d7494:	7923      	ldrb	r3, [r4, #4]
   d7496:	220c      	movs	r2, #12
   d7498:	fb02 5303 	mla	r3, r2, r3, r5
   d749c:	2202      	movs	r2, #2
   d749e:	721a      	strb	r2, [r3, #8]
}
   d74a0:	bd38      	pop	{r3, r4, r5, pc}
   d74a2:	bf00      	nop
   d74a4:	2003e7b4 	.word	0x2003e7b4
   d74a8:	000d5ab9 	.word	0x000d5ab9

000d74ac <nrfx_timer_disable>:
{
   d74ac:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d74ae:	4d0a      	ldr	r5, [pc, #40]	; (d74d8 <nrfx_timer_disable+0x2c>)
   d74b0:	7902      	ldrb	r2, [r0, #4]
   d74b2:	210c      	movs	r1, #12
   d74b4:	fb01 5202 	mla	r2, r1, r2, r5
{
   d74b8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d74ba:	7a11      	ldrb	r1, [r2, #8]
   d74bc:	b919      	cbnz	r1, d74c6 <nrfx_timer_disable+0x1a>
   d74be:	4a07      	ldr	r2, [pc, #28]	; (d74dc <nrfx_timer_disable+0x30>)
   d74c0:	200a      	movs	r0, #10
   d74c2:	f7fe fc43 	bl	d5d4c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   d74c6:	6823      	ldr	r3, [r4, #0]
   d74c8:	2201      	movs	r2, #1
   d74ca:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   d74cc:	7923      	ldrb	r3, [r4, #4]
   d74ce:	210c      	movs	r1, #12
   d74d0:	fb01 5303 	mla	r3, r1, r3, r5
   d74d4:	721a      	strb	r2, [r3, #8]
}
   d74d6:	bd38      	pop	{r3, r4, r5, pc}
   d74d8:	2003e7b4 	.word	0x2003e7b4
   d74dc:	000d5ab9 	.word	0x000d5ab9

000d74e0 <nrfx_timer_clear>:
{
   d74e0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d74e2:	4a08      	ldr	r2, [pc, #32]	; (d7504 <nrfx_timer_clear+0x24>)
   d74e4:	7903      	ldrb	r3, [r0, #4]
   d74e6:	210c      	movs	r1, #12
   d74e8:	fb01 2303 	mla	r3, r1, r3, r2
{
   d74ec:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d74ee:	7a19      	ldrb	r1, [r3, #8]
   d74f0:	b919      	cbnz	r1, d74fa <nrfx_timer_clear+0x1a>
   d74f2:	4a05      	ldr	r2, [pc, #20]	; (d7508 <nrfx_timer_clear+0x28>)
   d74f4:	200a      	movs	r0, #10
   d74f6:	f7fe fc29 	bl	d5d4c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   d74fa:	6823      	ldr	r3, [r4, #0]
   d74fc:	2201      	movs	r2, #1
   d74fe:	60da      	str	r2, [r3, #12]
}
   d7500:	bd10      	pop	{r4, pc}
   d7502:	bf00      	nop
   d7504:	2003e7b4 	.word	0x2003e7b4
   d7508:	000d5ab9 	.word	0x000d5ab9

000d750c <nrfx_timer_compare>:
{
   d750c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
   d750e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
   d7512:	6805      	ldr	r5, [r0, #0]
   d7514:	408c      	lsls	r4, r1
    if (enable_int)
   d7516:	b18b      	cbz	r3, d753c <nrfx_timer_compare+0x30>
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
   d7518:	f101 0350 	add.w	r3, r1, #80	; 0x50
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d751c:	009b      	lsls	r3, r3, #2
   d751e:	2600      	movs	r6, #0
   d7520:	50ee      	str	r6, [r5, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7522:	58eb      	ldr	r3, [r5, r3]
   d7524:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7526:	9b01      	ldr	r3, [sp, #4]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
   d7528:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = timer_int_mask;
   d752a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_write(p_instance->p_reg, cc_channel, cc_value);
   d752e:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
   d7530:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   d7534:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   d7538:	b002      	add	sp, #8
   d753a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = timer_int_mask;
   d753c:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
   d7540:	e7f5      	b.n	d752e <nrfx_timer_compare+0x22>

000d7542 <nrfx_timer_extended_compare>:
{
   d7542:	b4f0      	push	{r4, r5, r6, r7}
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7544:	6807      	ldr	r7, [r0, #0]
        (TIMER_SHORTS_COMPARE0_CLEAR_Msk << cc_channel));
   d7546:	f240 1601 	movw	r6, #257	; 0x101
    p_reg->SHORTS &= ~(timer_shorts_mask);
   d754a:	f8d7 5200 	ldr.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_disable(p_instance->p_reg,
   d754e:	408e      	lsls	r6, r1
   d7550:	ea25 0506 	bic.w	r5, r5, r6
   d7554:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_enable(p_instance->p_reg, timer_short_mask);
   d7558:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS |= timer_shorts_mask;
   d755a:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   d755e:	432b      	orrs	r3, r5
   d7560:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    nrfx_timer_compare(p_instance,
   d7564:	f89d 3010 	ldrb.w	r3, [sp, #16]
}
   d7568:	bcf0      	pop	{r4, r5, r6, r7}
    nrfx_timer_compare(p_instance,
   d756a:	f7ff bfcf 	b.w	d750c <nrfx_timer_compare>
	...

000d7570 <TIMER4_IRQHandler>:
#endif

#if NRFX_CHECK(NRFX_TIMER4_ENABLED)
void nrfx_timer_4_irq_handler(void)
{
    irq_handler(NRF_TIMER4, &m_cb[NRFX_TIMER4_INST_IDX],
   d7570:	4902      	ldr	r1, [pc, #8]	; (d757c <TIMER4_IRQHandler+0xc>)
   d7572:	4803      	ldr	r0, [pc, #12]	; (d7580 <TIMER4_IRQHandler+0x10>)
   d7574:	2206      	movs	r2, #6
   d7576:	f7ff be97 	b.w	d72a8 <irq_handler>
   d757a:	bf00      	nop
   d757c:	2003e7e4 	.word	0x2003e7e4
   d7580:	4001b000 	.word	0x4001b000

000d7584 <__aeabi_atexit>:
   d7584:	460b      	mov	r3, r1
   d7586:	4601      	mov	r1, r0
   d7588:	4618      	mov	r0, r3
   d758a:	f000 bc25 	b.w	d7dd8 <__cxa_atexit>

000d758e <_ZdlPvj>:
   d758e:	f7fc bd86 	b.w	d409e <_ZdlPv>

000d7592 <_ZnajRKSt9nothrow_t>:
   d7592:	f7fc bd82 	b.w	d409a <_Znaj>

000d7596 <_ZSt25__throw_bad_function_callv>:
   d7596:	b508      	push	{r3, lr}
   d7598:	f7fe fc9c 	bl	d5ed4 <abort>

000d759c <__aeabi_drsub>:
   d759c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d75a0:	e002      	b.n	d75a8 <__adddf3>
   d75a2:	bf00      	nop

000d75a4 <__aeabi_dsub>:
   d75a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d75a8 <__adddf3>:
   d75a8:	b530      	push	{r4, r5, lr}
   d75aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d75ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d75b2:	ea94 0f05 	teq	r4, r5
   d75b6:	bf08      	it	eq
   d75b8:	ea90 0f02 	teqeq	r0, r2
   d75bc:	bf1f      	itttt	ne
   d75be:	ea54 0c00 	orrsne.w	ip, r4, r0
   d75c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d75c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d75ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d75ce:	f000 80e2 	beq.w	d7796 <__adddf3+0x1ee>
   d75d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d75d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d75da:	bfb8      	it	lt
   d75dc:	426d      	neglt	r5, r5
   d75de:	dd0c      	ble.n	d75fa <__adddf3+0x52>
   d75e0:	442c      	add	r4, r5
   d75e2:	ea80 0202 	eor.w	r2, r0, r2
   d75e6:	ea81 0303 	eor.w	r3, r1, r3
   d75ea:	ea82 0000 	eor.w	r0, r2, r0
   d75ee:	ea83 0101 	eor.w	r1, r3, r1
   d75f2:	ea80 0202 	eor.w	r2, r0, r2
   d75f6:	ea81 0303 	eor.w	r3, r1, r3
   d75fa:	2d36      	cmp	r5, #54	; 0x36
   d75fc:	bf88      	it	hi
   d75fe:	bd30      	pophi	{r4, r5, pc}
   d7600:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7604:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7608:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d760c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7610:	d002      	beq.n	d7618 <__adddf3+0x70>
   d7612:	4240      	negs	r0, r0
   d7614:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7618:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d761c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7620:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7624:	d002      	beq.n	d762c <__adddf3+0x84>
   d7626:	4252      	negs	r2, r2
   d7628:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d762c:	ea94 0f05 	teq	r4, r5
   d7630:	f000 80a7 	beq.w	d7782 <__adddf3+0x1da>
   d7634:	f1a4 0401 	sub.w	r4, r4, #1
   d7638:	f1d5 0e20 	rsbs	lr, r5, #32
   d763c:	db0d      	blt.n	d765a <__adddf3+0xb2>
   d763e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7642:	fa22 f205 	lsr.w	r2, r2, r5
   d7646:	1880      	adds	r0, r0, r2
   d7648:	f141 0100 	adc.w	r1, r1, #0
   d764c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7650:	1880      	adds	r0, r0, r2
   d7652:	fa43 f305 	asr.w	r3, r3, r5
   d7656:	4159      	adcs	r1, r3
   d7658:	e00e      	b.n	d7678 <__adddf3+0xd0>
   d765a:	f1a5 0520 	sub.w	r5, r5, #32
   d765e:	f10e 0e20 	add.w	lr, lr, #32
   d7662:	2a01      	cmp	r2, #1
   d7664:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7668:	bf28      	it	cs
   d766a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d766e:	fa43 f305 	asr.w	r3, r3, r5
   d7672:	18c0      	adds	r0, r0, r3
   d7674:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d767c:	d507      	bpl.n	d768e <__adddf3+0xe6>
   d767e:	f04f 0e00 	mov.w	lr, #0
   d7682:	f1dc 0c00 	rsbs	ip, ip, #0
   d7686:	eb7e 0000 	sbcs.w	r0, lr, r0
   d768a:	eb6e 0101 	sbc.w	r1, lr, r1
   d768e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7692:	d31b      	bcc.n	d76cc <__adddf3+0x124>
   d7694:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7698:	d30c      	bcc.n	d76b4 <__adddf3+0x10c>
   d769a:	0849      	lsrs	r1, r1, #1
   d769c:	ea5f 0030 	movs.w	r0, r0, rrx
   d76a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d76a4:	f104 0401 	add.w	r4, r4, #1
   d76a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d76ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d76b0:	f080 809a 	bcs.w	d77e8 <__adddf3+0x240>
   d76b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d76b8:	bf08      	it	eq
   d76ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d76be:	f150 0000 	adcs.w	r0, r0, #0
   d76c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d76c6:	ea41 0105 	orr.w	r1, r1, r5
   d76ca:	bd30      	pop	{r4, r5, pc}
   d76cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d76d0:	4140      	adcs	r0, r0
   d76d2:	eb41 0101 	adc.w	r1, r1, r1
   d76d6:	3c01      	subs	r4, #1
   d76d8:	bf28      	it	cs
   d76da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d76de:	d2e9      	bcs.n	d76b4 <__adddf3+0x10c>
   d76e0:	f091 0f00 	teq	r1, #0
   d76e4:	bf04      	itt	eq
   d76e6:	4601      	moveq	r1, r0
   d76e8:	2000      	moveq	r0, #0
   d76ea:	fab1 f381 	clz	r3, r1
   d76ee:	bf08      	it	eq
   d76f0:	3320      	addeq	r3, #32
   d76f2:	f1a3 030b 	sub.w	r3, r3, #11
   d76f6:	f1b3 0220 	subs.w	r2, r3, #32
   d76fa:	da0c      	bge.n	d7716 <__adddf3+0x16e>
   d76fc:	320c      	adds	r2, #12
   d76fe:	dd08      	ble.n	d7712 <__adddf3+0x16a>
   d7700:	f102 0c14 	add.w	ip, r2, #20
   d7704:	f1c2 020c 	rsb	r2, r2, #12
   d7708:	fa01 f00c 	lsl.w	r0, r1, ip
   d770c:	fa21 f102 	lsr.w	r1, r1, r2
   d7710:	e00c      	b.n	d772c <__adddf3+0x184>
   d7712:	f102 0214 	add.w	r2, r2, #20
   d7716:	bfd8      	it	le
   d7718:	f1c2 0c20 	rsble	ip, r2, #32
   d771c:	fa01 f102 	lsl.w	r1, r1, r2
   d7720:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7724:	bfdc      	itt	le
   d7726:	ea41 010c 	orrle.w	r1, r1, ip
   d772a:	4090      	lslle	r0, r2
   d772c:	1ae4      	subs	r4, r4, r3
   d772e:	bfa2      	ittt	ge
   d7730:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7734:	4329      	orrge	r1, r5
   d7736:	bd30      	popge	{r4, r5, pc}
   d7738:	ea6f 0404 	mvn.w	r4, r4
   d773c:	3c1f      	subs	r4, #31
   d773e:	da1c      	bge.n	d777a <__adddf3+0x1d2>
   d7740:	340c      	adds	r4, #12
   d7742:	dc0e      	bgt.n	d7762 <__adddf3+0x1ba>
   d7744:	f104 0414 	add.w	r4, r4, #20
   d7748:	f1c4 0220 	rsb	r2, r4, #32
   d774c:	fa20 f004 	lsr.w	r0, r0, r4
   d7750:	fa01 f302 	lsl.w	r3, r1, r2
   d7754:	ea40 0003 	orr.w	r0, r0, r3
   d7758:	fa21 f304 	lsr.w	r3, r1, r4
   d775c:	ea45 0103 	orr.w	r1, r5, r3
   d7760:	bd30      	pop	{r4, r5, pc}
   d7762:	f1c4 040c 	rsb	r4, r4, #12
   d7766:	f1c4 0220 	rsb	r2, r4, #32
   d776a:	fa20 f002 	lsr.w	r0, r0, r2
   d776e:	fa01 f304 	lsl.w	r3, r1, r4
   d7772:	ea40 0003 	orr.w	r0, r0, r3
   d7776:	4629      	mov	r1, r5
   d7778:	bd30      	pop	{r4, r5, pc}
   d777a:	fa21 f004 	lsr.w	r0, r1, r4
   d777e:	4629      	mov	r1, r5
   d7780:	bd30      	pop	{r4, r5, pc}
   d7782:	f094 0f00 	teq	r4, #0
   d7786:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d778a:	bf06      	itte	eq
   d778c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7790:	3401      	addeq	r4, #1
   d7792:	3d01      	subne	r5, #1
   d7794:	e74e      	b.n	d7634 <__adddf3+0x8c>
   d7796:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d779a:	bf18      	it	ne
   d779c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d77a0:	d029      	beq.n	d77f6 <__adddf3+0x24e>
   d77a2:	ea94 0f05 	teq	r4, r5
   d77a6:	bf08      	it	eq
   d77a8:	ea90 0f02 	teqeq	r0, r2
   d77ac:	d005      	beq.n	d77ba <__adddf3+0x212>
   d77ae:	ea54 0c00 	orrs.w	ip, r4, r0
   d77b2:	bf04      	itt	eq
   d77b4:	4619      	moveq	r1, r3
   d77b6:	4610      	moveq	r0, r2
   d77b8:	bd30      	pop	{r4, r5, pc}
   d77ba:	ea91 0f03 	teq	r1, r3
   d77be:	bf1e      	ittt	ne
   d77c0:	2100      	movne	r1, #0
   d77c2:	2000      	movne	r0, #0
   d77c4:	bd30      	popne	{r4, r5, pc}
   d77c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d77ca:	d105      	bne.n	d77d8 <__adddf3+0x230>
   d77cc:	0040      	lsls	r0, r0, #1
   d77ce:	4149      	adcs	r1, r1
   d77d0:	bf28      	it	cs
   d77d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d77d6:	bd30      	pop	{r4, r5, pc}
   d77d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d77dc:	bf3c      	itt	cc
   d77de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d77e2:	bd30      	popcc	{r4, r5, pc}
   d77e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d77e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d77ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d77f0:	f04f 0000 	mov.w	r0, #0
   d77f4:	bd30      	pop	{r4, r5, pc}
   d77f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d77fa:	bf1a      	itte	ne
   d77fc:	4619      	movne	r1, r3
   d77fe:	4610      	movne	r0, r2
   d7800:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7804:	bf1c      	itt	ne
   d7806:	460b      	movne	r3, r1
   d7808:	4602      	movne	r2, r0
   d780a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d780e:	bf06      	itte	eq
   d7810:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7814:	ea91 0f03 	teqeq	r1, r3
   d7818:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d781c:	bd30      	pop	{r4, r5, pc}
   d781e:	bf00      	nop

000d7820 <__aeabi_ui2d>:
   d7820:	f090 0f00 	teq	r0, #0
   d7824:	bf04      	itt	eq
   d7826:	2100      	moveq	r1, #0
   d7828:	4770      	bxeq	lr
   d782a:	b530      	push	{r4, r5, lr}
   d782c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7830:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7834:	f04f 0500 	mov.w	r5, #0
   d7838:	f04f 0100 	mov.w	r1, #0
   d783c:	e750      	b.n	d76e0 <__adddf3+0x138>
   d783e:	bf00      	nop

000d7840 <__aeabi_i2d>:
   d7840:	f090 0f00 	teq	r0, #0
   d7844:	bf04      	itt	eq
   d7846:	2100      	moveq	r1, #0
   d7848:	4770      	bxeq	lr
   d784a:	b530      	push	{r4, r5, lr}
   d784c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7850:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7854:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7858:	bf48      	it	mi
   d785a:	4240      	negmi	r0, r0
   d785c:	f04f 0100 	mov.w	r1, #0
   d7860:	e73e      	b.n	d76e0 <__adddf3+0x138>
   d7862:	bf00      	nop

000d7864 <__aeabi_f2d>:
   d7864:	0042      	lsls	r2, r0, #1
   d7866:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d786a:	ea4f 0131 	mov.w	r1, r1, rrx
   d786e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7872:	bf1f      	itttt	ne
   d7874:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7878:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d787c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7880:	4770      	bxne	lr
   d7882:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7886:	bf08      	it	eq
   d7888:	4770      	bxeq	lr
   d788a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d788e:	bf04      	itt	eq
   d7890:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7894:	4770      	bxeq	lr
   d7896:	b530      	push	{r4, r5, lr}
   d7898:	f44f 7460 	mov.w	r4, #896	; 0x380
   d789c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d78a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d78a4:	e71c      	b.n	d76e0 <__adddf3+0x138>
   d78a6:	bf00      	nop

000d78a8 <__aeabi_ul2d>:
   d78a8:	ea50 0201 	orrs.w	r2, r0, r1
   d78ac:	bf08      	it	eq
   d78ae:	4770      	bxeq	lr
   d78b0:	b530      	push	{r4, r5, lr}
   d78b2:	f04f 0500 	mov.w	r5, #0
   d78b6:	e00a      	b.n	d78ce <__aeabi_l2d+0x16>

000d78b8 <__aeabi_l2d>:
   d78b8:	ea50 0201 	orrs.w	r2, r0, r1
   d78bc:	bf08      	it	eq
   d78be:	4770      	bxeq	lr
   d78c0:	b530      	push	{r4, r5, lr}
   d78c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d78c6:	d502      	bpl.n	d78ce <__aeabi_l2d+0x16>
   d78c8:	4240      	negs	r0, r0
   d78ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d78ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d78d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d78d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d78da:	f43f aed8 	beq.w	d768e <__adddf3+0xe6>
   d78de:	f04f 0203 	mov.w	r2, #3
   d78e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d78e6:	bf18      	it	ne
   d78e8:	3203      	addne	r2, #3
   d78ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d78ee:	bf18      	it	ne
   d78f0:	3203      	addne	r2, #3
   d78f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d78f6:	f1c2 0320 	rsb	r3, r2, #32
   d78fa:	fa00 fc03 	lsl.w	ip, r0, r3
   d78fe:	fa20 f002 	lsr.w	r0, r0, r2
   d7902:	fa01 fe03 	lsl.w	lr, r1, r3
   d7906:	ea40 000e 	orr.w	r0, r0, lr
   d790a:	fa21 f102 	lsr.w	r1, r1, r2
   d790e:	4414      	add	r4, r2
   d7910:	e6bd      	b.n	d768e <__adddf3+0xe6>
   d7912:	bf00      	nop

000d7914 <__aeabi_dmul>:
   d7914:	b570      	push	{r4, r5, r6, lr}
   d7916:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d791a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d791e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7922:	bf1d      	ittte	ne
   d7924:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7928:	ea94 0f0c 	teqne	r4, ip
   d792c:	ea95 0f0c 	teqne	r5, ip
   d7930:	f000 f8de 	bleq	d7af0 <__aeabi_dmul+0x1dc>
   d7934:	442c      	add	r4, r5
   d7936:	ea81 0603 	eor.w	r6, r1, r3
   d793a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d793e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7942:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7946:	bf18      	it	ne
   d7948:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d794c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7954:	d038      	beq.n	d79c8 <__aeabi_dmul+0xb4>
   d7956:	fba0 ce02 	umull	ip, lr, r0, r2
   d795a:	f04f 0500 	mov.w	r5, #0
   d795e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7962:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7966:	fbe0 e503 	umlal	lr, r5, r0, r3
   d796a:	f04f 0600 	mov.w	r6, #0
   d796e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7972:	f09c 0f00 	teq	ip, #0
   d7976:	bf18      	it	ne
   d7978:	f04e 0e01 	orrne.w	lr, lr, #1
   d797c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7980:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7984:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7988:	d204      	bcs.n	d7994 <__aeabi_dmul+0x80>
   d798a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d798e:	416d      	adcs	r5, r5
   d7990:	eb46 0606 	adc.w	r6, r6, r6
   d7994:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7998:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d799c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d79a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d79a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d79a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d79ac:	bf88      	it	hi
   d79ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d79b2:	d81e      	bhi.n	d79f2 <__aeabi_dmul+0xde>
   d79b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d79b8:	bf08      	it	eq
   d79ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d79be:	f150 0000 	adcs.w	r0, r0, #0
   d79c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d79c6:	bd70      	pop	{r4, r5, r6, pc}
   d79c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d79cc:	ea46 0101 	orr.w	r1, r6, r1
   d79d0:	ea40 0002 	orr.w	r0, r0, r2
   d79d4:	ea81 0103 	eor.w	r1, r1, r3
   d79d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d79dc:	bfc2      	ittt	gt
   d79de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d79e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d79e6:	bd70      	popgt	{r4, r5, r6, pc}
   d79e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d79ec:	f04f 0e00 	mov.w	lr, #0
   d79f0:	3c01      	subs	r4, #1
   d79f2:	f300 80ab 	bgt.w	d7b4c <__aeabi_dmul+0x238>
   d79f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d79fa:	bfde      	ittt	le
   d79fc:	2000      	movle	r0, #0
   d79fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7a02:	bd70      	pople	{r4, r5, r6, pc}
   d7a04:	f1c4 0400 	rsb	r4, r4, #0
   d7a08:	3c20      	subs	r4, #32
   d7a0a:	da35      	bge.n	d7a78 <__aeabi_dmul+0x164>
   d7a0c:	340c      	adds	r4, #12
   d7a0e:	dc1b      	bgt.n	d7a48 <__aeabi_dmul+0x134>
   d7a10:	f104 0414 	add.w	r4, r4, #20
   d7a14:	f1c4 0520 	rsb	r5, r4, #32
   d7a18:	fa00 f305 	lsl.w	r3, r0, r5
   d7a1c:	fa20 f004 	lsr.w	r0, r0, r4
   d7a20:	fa01 f205 	lsl.w	r2, r1, r5
   d7a24:	ea40 0002 	orr.w	r0, r0, r2
   d7a28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7a2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7a30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a34:	fa21 f604 	lsr.w	r6, r1, r4
   d7a38:	eb42 0106 	adc.w	r1, r2, r6
   d7a3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a40:	bf08      	it	eq
   d7a42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a46:	bd70      	pop	{r4, r5, r6, pc}
   d7a48:	f1c4 040c 	rsb	r4, r4, #12
   d7a4c:	f1c4 0520 	rsb	r5, r4, #32
   d7a50:	fa00 f304 	lsl.w	r3, r0, r4
   d7a54:	fa20 f005 	lsr.w	r0, r0, r5
   d7a58:	fa01 f204 	lsl.w	r2, r1, r4
   d7a5c:	ea40 0002 	orr.w	r0, r0, r2
   d7a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7a68:	f141 0100 	adc.w	r1, r1, #0
   d7a6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7a70:	bf08      	it	eq
   d7a72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7a76:	bd70      	pop	{r4, r5, r6, pc}
   d7a78:	f1c4 0520 	rsb	r5, r4, #32
   d7a7c:	fa00 f205 	lsl.w	r2, r0, r5
   d7a80:	ea4e 0e02 	orr.w	lr, lr, r2
   d7a84:	fa20 f304 	lsr.w	r3, r0, r4
   d7a88:	fa01 f205 	lsl.w	r2, r1, r5
   d7a8c:	ea43 0302 	orr.w	r3, r3, r2
   d7a90:	fa21 f004 	lsr.w	r0, r1, r4
   d7a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7a98:	fa21 f204 	lsr.w	r2, r1, r4
   d7a9c:	ea20 0002 	bic.w	r0, r0, r2
   d7aa0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7aa4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7aa8:	bf08      	it	eq
   d7aaa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7aae:	bd70      	pop	{r4, r5, r6, pc}
   d7ab0:	f094 0f00 	teq	r4, #0
   d7ab4:	d10f      	bne.n	d7ad6 <__aeabi_dmul+0x1c2>
   d7ab6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7aba:	0040      	lsls	r0, r0, #1
   d7abc:	eb41 0101 	adc.w	r1, r1, r1
   d7ac0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7ac4:	bf08      	it	eq
   d7ac6:	3c01      	subeq	r4, #1
   d7ac8:	d0f7      	beq.n	d7aba <__aeabi_dmul+0x1a6>
   d7aca:	ea41 0106 	orr.w	r1, r1, r6
   d7ace:	f095 0f00 	teq	r5, #0
   d7ad2:	bf18      	it	ne
   d7ad4:	4770      	bxne	lr
   d7ad6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7ada:	0052      	lsls	r2, r2, #1
   d7adc:	eb43 0303 	adc.w	r3, r3, r3
   d7ae0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7ae4:	bf08      	it	eq
   d7ae6:	3d01      	subeq	r5, #1
   d7ae8:	d0f7      	beq.n	d7ada <__aeabi_dmul+0x1c6>
   d7aea:	ea43 0306 	orr.w	r3, r3, r6
   d7aee:	4770      	bx	lr
   d7af0:	ea94 0f0c 	teq	r4, ip
   d7af4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7af8:	bf18      	it	ne
   d7afa:	ea95 0f0c 	teqne	r5, ip
   d7afe:	d00c      	beq.n	d7b1a <__aeabi_dmul+0x206>
   d7b00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b04:	bf18      	it	ne
   d7b06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b0a:	d1d1      	bne.n	d7ab0 <__aeabi_dmul+0x19c>
   d7b0c:	ea81 0103 	eor.w	r1, r1, r3
   d7b10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b14:	f04f 0000 	mov.w	r0, #0
   d7b18:	bd70      	pop	{r4, r5, r6, pc}
   d7b1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b1e:	bf06      	itte	eq
   d7b20:	4610      	moveq	r0, r2
   d7b22:	4619      	moveq	r1, r3
   d7b24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b28:	d019      	beq.n	d7b5e <__aeabi_dmul+0x24a>
   d7b2a:	ea94 0f0c 	teq	r4, ip
   d7b2e:	d102      	bne.n	d7b36 <__aeabi_dmul+0x222>
   d7b30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7b34:	d113      	bne.n	d7b5e <__aeabi_dmul+0x24a>
   d7b36:	ea95 0f0c 	teq	r5, ip
   d7b3a:	d105      	bne.n	d7b48 <__aeabi_dmul+0x234>
   d7b3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7b40:	bf1c      	itt	ne
   d7b42:	4610      	movne	r0, r2
   d7b44:	4619      	movne	r1, r3
   d7b46:	d10a      	bne.n	d7b5e <__aeabi_dmul+0x24a>
   d7b48:	ea81 0103 	eor.w	r1, r1, r3
   d7b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7b50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7b58:	f04f 0000 	mov.w	r0, #0
   d7b5c:	bd70      	pop	{r4, r5, r6, pc}
   d7b5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7b62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7b66:	bd70      	pop	{r4, r5, r6, pc}

000d7b68 <__aeabi_ddiv>:
   d7b68:	b570      	push	{r4, r5, r6, lr}
   d7b6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7b6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7b72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7b76:	bf1d      	ittte	ne
   d7b78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7b7c:	ea94 0f0c 	teqne	r4, ip
   d7b80:	ea95 0f0c 	teqne	r5, ip
   d7b84:	f000 f8a7 	bleq	d7cd6 <__aeabi_ddiv+0x16e>
   d7b88:	eba4 0405 	sub.w	r4, r4, r5
   d7b8c:	ea81 0e03 	eor.w	lr, r1, r3
   d7b90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7b94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b98:	f000 8088 	beq.w	d7cac <__aeabi_ddiv+0x144>
   d7b9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7ba0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7ba4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7ba8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7bac:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7bb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7bb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7bb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7bbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7bc0:	429d      	cmp	r5, r3
   d7bc2:	bf08      	it	eq
   d7bc4:	4296      	cmpeq	r6, r2
   d7bc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7bca:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7bce:	d202      	bcs.n	d7bd6 <__aeabi_ddiv+0x6e>
   d7bd0:	085b      	lsrs	r3, r3, #1
   d7bd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d7bd6:	1ab6      	subs	r6, r6, r2
   d7bd8:	eb65 0503 	sbc.w	r5, r5, r3
   d7bdc:	085b      	lsrs	r3, r3, #1
   d7bde:	ea4f 0232 	mov.w	r2, r2, rrx
   d7be2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7be6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7bea:	ebb6 0e02 	subs.w	lr, r6, r2
   d7bee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7bf2:	bf22      	ittt	cs
   d7bf4:	1ab6      	subcs	r6, r6, r2
   d7bf6:	4675      	movcs	r5, lr
   d7bf8:	ea40 000c 	orrcs.w	r0, r0, ip
   d7bfc:	085b      	lsrs	r3, r3, #1
   d7bfe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c02:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c0a:	bf22      	ittt	cs
   d7c0c:	1ab6      	subcs	r6, r6, r2
   d7c0e:	4675      	movcs	r5, lr
   d7c10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7c14:	085b      	lsrs	r3, r3, #1
   d7c16:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c22:	bf22      	ittt	cs
   d7c24:	1ab6      	subcs	r6, r6, r2
   d7c26:	4675      	movcs	r5, lr
   d7c28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7c2c:	085b      	lsrs	r3, r3, #1
   d7c2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7c32:	ebb6 0e02 	subs.w	lr, r6, r2
   d7c36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7c3a:	bf22      	ittt	cs
   d7c3c:	1ab6      	subcs	r6, r6, r2
   d7c3e:	4675      	movcs	r5, lr
   d7c40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7c44:	ea55 0e06 	orrs.w	lr, r5, r6
   d7c48:	d018      	beq.n	d7c7c <__aeabi_ddiv+0x114>
   d7c4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7c4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7c52:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7c56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7c5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7c5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7c62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7c66:	d1c0      	bne.n	d7bea <__aeabi_ddiv+0x82>
   d7c68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c6c:	d10b      	bne.n	d7c86 <__aeabi_ddiv+0x11e>
   d7c6e:	ea41 0100 	orr.w	r1, r1, r0
   d7c72:	f04f 0000 	mov.w	r0, #0
   d7c76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7c7a:	e7b6      	b.n	d7bea <__aeabi_ddiv+0x82>
   d7c7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c80:	bf04      	itt	eq
   d7c82:	4301      	orreq	r1, r0
   d7c84:	2000      	moveq	r0, #0
   d7c86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7c8a:	bf88      	it	hi
   d7c8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7c90:	f63f aeaf 	bhi.w	d79f2 <__aeabi_dmul+0xde>
   d7c94:	ebb5 0c03 	subs.w	ip, r5, r3
   d7c98:	bf04      	itt	eq
   d7c9a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7c9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7ca2:	f150 0000 	adcs.w	r0, r0, #0
   d7ca6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7caa:	bd70      	pop	{r4, r5, r6, pc}
   d7cac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7cb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7cb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7cb8:	bfc2      	ittt	gt
   d7cba:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7cbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7cc2:	bd70      	popgt	{r4, r5, r6, pc}
   d7cc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7cc8:	f04f 0e00 	mov.w	lr, #0
   d7ccc:	3c01      	subs	r4, #1
   d7cce:	e690      	b.n	d79f2 <__aeabi_dmul+0xde>
   d7cd0:	ea45 0e06 	orr.w	lr, r5, r6
   d7cd4:	e68d      	b.n	d79f2 <__aeabi_dmul+0xde>
   d7cd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7cda:	ea94 0f0c 	teq	r4, ip
   d7cde:	bf08      	it	eq
   d7ce0:	ea95 0f0c 	teqeq	r5, ip
   d7ce4:	f43f af3b 	beq.w	d7b5e <__aeabi_dmul+0x24a>
   d7ce8:	ea94 0f0c 	teq	r4, ip
   d7cec:	d10a      	bne.n	d7d04 <__aeabi_ddiv+0x19c>
   d7cee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7cf2:	f47f af34 	bne.w	d7b5e <__aeabi_dmul+0x24a>
   d7cf6:	ea95 0f0c 	teq	r5, ip
   d7cfa:	f47f af25 	bne.w	d7b48 <__aeabi_dmul+0x234>
   d7cfe:	4610      	mov	r0, r2
   d7d00:	4619      	mov	r1, r3
   d7d02:	e72c      	b.n	d7b5e <__aeabi_dmul+0x24a>
   d7d04:	ea95 0f0c 	teq	r5, ip
   d7d08:	d106      	bne.n	d7d18 <__aeabi_ddiv+0x1b0>
   d7d0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7d0e:	f43f aefd 	beq.w	d7b0c <__aeabi_dmul+0x1f8>
   d7d12:	4610      	mov	r0, r2
   d7d14:	4619      	mov	r1, r3
   d7d16:	e722      	b.n	d7b5e <__aeabi_dmul+0x24a>
   d7d18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7d1c:	bf18      	it	ne
   d7d1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7d22:	f47f aec5 	bne.w	d7ab0 <__aeabi_dmul+0x19c>
   d7d26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7d2a:	f47f af0d 	bne.w	d7b48 <__aeabi_dmul+0x234>
   d7d2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7d32:	f47f aeeb 	bne.w	d7b0c <__aeabi_dmul+0x1f8>
   d7d36:	e712      	b.n	d7b5e <__aeabi_dmul+0x24a>

000d7d38 <__aeabi_d2f>:
   d7d38:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7d3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7d40:	bf24      	itt	cs
   d7d42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7d46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7d4a:	d90d      	bls.n	d7d68 <__aeabi_d2f+0x30>
   d7d4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7d50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7d54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7d58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7d5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7d60:	bf08      	it	eq
   d7d62:	f020 0001 	biceq.w	r0, r0, #1
   d7d66:	4770      	bx	lr
   d7d68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7d6c:	d121      	bne.n	d7db2 <__aeabi_d2f+0x7a>
   d7d6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7d72:	bfbc      	itt	lt
   d7d74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7d78:	4770      	bxlt	lr
   d7d7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7d82:	f1c2 0218 	rsb	r2, r2, #24
   d7d86:	f1c2 0c20 	rsb	ip, r2, #32
   d7d8a:	fa10 f30c 	lsls.w	r3, r0, ip
   d7d8e:	fa20 f002 	lsr.w	r0, r0, r2
   d7d92:	bf18      	it	ne
   d7d94:	f040 0001 	orrne.w	r0, r0, #1
   d7d98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7d9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7da0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7da4:	ea40 000c 	orr.w	r0, r0, ip
   d7da8:	fa23 f302 	lsr.w	r3, r3, r2
   d7dac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7db0:	e7cc      	b.n	d7d4c <__aeabi_d2f+0x14>
   d7db2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7db6:	d107      	bne.n	d7dc8 <__aeabi_d2f+0x90>
   d7db8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7dbc:	bf1e      	ittt	ne
   d7dbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7dc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7dc6:	4770      	bxne	lr
   d7dc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7dcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7dd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7dd4:	4770      	bx	lr
   d7dd6:	bf00      	nop

000d7dd8 <__cxa_atexit>:
   d7dd8:	b510      	push	{r4, lr}
   d7dda:	4c05      	ldr	r4, [pc, #20]	; (d7df0 <__cxa_atexit+0x18>)
   d7ddc:	4613      	mov	r3, r2
   d7dde:	b12c      	cbz	r4, d7dec <__cxa_atexit+0x14>
   d7de0:	460a      	mov	r2, r1
   d7de2:	4601      	mov	r1, r0
   d7de4:	2002      	movs	r0, #2
   d7de6:	f3af 8000 	nop.w
   d7dea:	bd10      	pop	{r4, pc}
   d7dec:	4620      	mov	r0, r4
   d7dee:	e7fc      	b.n	d7dea <__cxa_atexit+0x12>
   d7df0:	00000000 	.word	0x00000000

000d7df4 <memcpy>:
   d7df4:	440a      	add	r2, r1
   d7df6:	4291      	cmp	r1, r2
   d7df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7dfc:	d100      	bne.n	d7e00 <memcpy+0xc>
   d7dfe:	4770      	bx	lr
   d7e00:	b510      	push	{r4, lr}
   d7e02:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e06:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7e0a:	4291      	cmp	r1, r2
   d7e0c:	d1f9      	bne.n	d7e02 <memcpy+0xe>
   d7e0e:	bd10      	pop	{r4, pc}

000d7e10 <memset>:
   d7e10:	4402      	add	r2, r0
   d7e12:	4603      	mov	r3, r0
   d7e14:	4293      	cmp	r3, r2
   d7e16:	d100      	bne.n	d7e1a <memset+0xa>
   d7e18:	4770      	bx	lr
   d7e1a:	f803 1b01 	strb.w	r1, [r3], #1
   d7e1e:	e7f9      	b.n	d7e14 <memset+0x4>

000d7e20 <srand>:
   d7e20:	b538      	push	{r3, r4, r5, lr}
   d7e22:	4b0d      	ldr	r3, [pc, #52]	; (d7e58 <srand+0x38>)
   d7e24:	681d      	ldr	r5, [r3, #0]
   d7e26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7e28:	4604      	mov	r4, r0
   d7e2a:	b97b      	cbnz	r3, d7e4c <srand+0x2c>
   d7e2c:	2018      	movs	r0, #24
   d7e2e:	f7fe f831 	bl	d5e94 <malloc>
   d7e32:	4a0a      	ldr	r2, [pc, #40]	; (d7e5c <srand+0x3c>)
   d7e34:	4b0a      	ldr	r3, [pc, #40]	; (d7e60 <srand+0x40>)
   d7e36:	63a8      	str	r0, [r5, #56]	; 0x38
   d7e38:	e9c0 2300 	strd	r2, r3, [r0]
   d7e3c:	4b09      	ldr	r3, [pc, #36]	; (d7e64 <srand+0x44>)
   d7e3e:	6083      	str	r3, [r0, #8]
   d7e40:	230b      	movs	r3, #11
   d7e42:	8183      	strh	r3, [r0, #12]
   d7e44:	2201      	movs	r2, #1
   d7e46:	2300      	movs	r3, #0
   d7e48:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7e4e:	2200      	movs	r2, #0
   d7e50:	611c      	str	r4, [r3, #16]
   d7e52:	615a      	str	r2, [r3, #20]
   d7e54:	bd38      	pop	{r3, r4, r5, pc}
   d7e56:	bf00      	nop
   d7e58:	2003e3f8 	.word	0x2003e3f8
   d7e5c:	abcd330e 	.word	0xabcd330e
   d7e60:	e66d1234 	.word	0xe66d1234
   d7e64:	0005deec 	.word	0x0005deec

000d7e68 <rand>:
   d7e68:	4b13      	ldr	r3, [pc, #76]	; (d7eb8 <rand+0x50>)
   d7e6a:	b510      	push	{r4, lr}
   d7e6c:	681c      	ldr	r4, [r3, #0]
   d7e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7e70:	b97b      	cbnz	r3, d7e92 <rand+0x2a>
   d7e72:	2018      	movs	r0, #24
   d7e74:	f7fe f80e 	bl	d5e94 <malloc>
   d7e78:	4a10      	ldr	r2, [pc, #64]	; (d7ebc <rand+0x54>)
   d7e7a:	4b11      	ldr	r3, [pc, #68]	; (d7ec0 <rand+0x58>)
   d7e7c:	63a0      	str	r0, [r4, #56]	; 0x38
   d7e7e:	e9c0 2300 	strd	r2, r3, [r0]
   d7e82:	4b10      	ldr	r3, [pc, #64]	; (d7ec4 <rand+0x5c>)
   d7e84:	6083      	str	r3, [r0, #8]
   d7e86:	230b      	movs	r3, #11
   d7e88:	8183      	strh	r3, [r0, #12]
   d7e8a:	2201      	movs	r2, #1
   d7e8c:	2300      	movs	r3, #0
   d7e8e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7e92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d7e94:	480c      	ldr	r0, [pc, #48]	; (d7ec8 <rand+0x60>)
   d7e96:	690a      	ldr	r2, [r1, #16]
   d7e98:	694b      	ldr	r3, [r1, #20]
   d7e9a:	4c0c      	ldr	r4, [pc, #48]	; (d7ecc <rand+0x64>)
   d7e9c:	4350      	muls	r0, r2
   d7e9e:	fb04 0003 	mla	r0, r4, r3, r0
   d7ea2:	fba2 3404 	umull	r3, r4, r2, r4
   d7ea6:	1c5a      	adds	r2, r3, #1
   d7ea8:	4404      	add	r4, r0
   d7eaa:	f144 0000 	adc.w	r0, r4, #0
   d7eae:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d7eb2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d7eb6:	bd10      	pop	{r4, pc}
   d7eb8:	2003e3f8 	.word	0x2003e3f8
   d7ebc:	abcd330e 	.word	0xabcd330e
   d7ec0:	e66d1234 	.word	0xe66d1234
   d7ec4:	0005deec 	.word	0x0005deec
   d7ec8:	5851f42d 	.word	0x5851f42d
   d7ecc:	4c957f2d 	.word	0x4c957f2d

000d7ed0 <strcpy>:
   d7ed0:	4603      	mov	r3, r0
   d7ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7ed6:	f803 2b01 	strb.w	r2, [r3], #1
   d7eda:	2a00      	cmp	r2, #0
   d7edc:	d1f9      	bne.n	d7ed2 <strcpy+0x2>
   d7ede:	4770      	bx	lr

000d7ee0 <strdup>:
   d7ee0:	4b02      	ldr	r3, [pc, #8]	; (d7eec <strdup+0xc>)
   d7ee2:	4601      	mov	r1, r0
   d7ee4:	6818      	ldr	r0, [r3, #0]
   d7ee6:	f000 b803 	b.w	d7ef0 <_strdup_r>
   d7eea:	bf00      	nop
   d7eec:	2003e3f8 	.word	0x2003e3f8

000d7ef0 <_strdup_r>:
   d7ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7ef2:	4604      	mov	r4, r0
   d7ef4:	4608      	mov	r0, r1
   d7ef6:	460d      	mov	r5, r1
   d7ef8:	f000 f80f 	bl	d7f1a <strlen>
   d7efc:	1c42      	adds	r2, r0, #1
   d7efe:	4611      	mov	r1, r2
   d7f00:	4620      	mov	r0, r4
   d7f02:	9201      	str	r2, [sp, #4]
   d7f04:	f7fd ffee 	bl	d5ee4 <_malloc_r>
   d7f08:	4604      	mov	r4, r0
   d7f0a:	b118      	cbz	r0, d7f14 <_strdup_r+0x24>
   d7f0c:	9a01      	ldr	r2, [sp, #4]
   d7f0e:	4629      	mov	r1, r5
   d7f10:	f7ff ff70 	bl	d7df4 <memcpy>
   d7f14:	4620      	mov	r0, r4
   d7f16:	b003      	add	sp, #12
   d7f18:	bd30      	pop	{r4, r5, pc}

000d7f1a <strlen>:
   d7f1a:	4603      	mov	r3, r0
   d7f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f20:	2a00      	cmp	r2, #0
   d7f22:	d1fb      	bne.n	d7f1c <strlen+0x2>
   d7f24:	1a18      	subs	r0, r3, r0
   d7f26:	3801      	subs	r0, #1
   d7f28:	4770      	bx	lr

000d7f2a <link_code_end>:
	...

000d7f2c <dynalib_user>:
   d7f2c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d7f3c:	0000 0000 207b 4122 4354 2231 203a 6425     ....{ "ATC1": %d
   d7f4c:	202c 4122 5054 2231 203a 6425 202c 4122     , "ATP1": %d, "A
   d7f5c:	4354 2232 203a 6425 202c 4122 5054 2232     TC2": %d, "ATP2"
   d7f6c:	203a 6425 202c 4122 5346 2252 203a 6425     : %d, "AFSR": %d
   d7f7c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7f8c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7f9c:	2020 2c20 2220 4141 6363 2258 203a 6425        , "AAccX": %d
   d7fac:	202c 4122 6341 5963 3a22 2520 2c64 2220     , "AAccY": %d, "
   d7fbc:	4141 6363 225a 203a 6425 202c 4122 7947     AAccZ": %d, "AGy
   d7fcc:	5872 3a22 2520 2c64 2220 4741 7279 2259     rX": %d, "AGyrY"
   d7fdc:	203a 6425 2020 2020 2020 2020 2020 2020     : %d            
   d7fec:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7ffc:	2020 2020 2020 2c20 2220 4741 7279 225a            , "AGyrZ"
   d800c:	203a 6425 202c 4122 5442 3a22 2520 2c64     : %d, "ABT": %d,
   d801c:	2220 544d 3150 3a22 2520 2064 2020 2020      "MTP1": %d     
   d802c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d803c:	2020 2020 2020 2020 2020 2020 2020 202c                   , 
   d804c:	4d22 5054 2232 203a 6425 202c 4d22 6341     "MTP2": %d, "MAc
   d805c:	5863 3a22 2520 2c64 2220 414d 6363 2259     cX": %d, "MAccY"
   d806c:	203a 6425 202c 4d22 6341 5a63 3a22 2520     : %d, "MAccZ": %
   d807c:	2c64 2220 474d 7279 2258 203a 6425 2020     d, "MGyrX": %d  
   d808c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d809c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d80ac:	2c20 2220 474d 7279 2259 203a 6425 202c      , "MGyrY": %d, 
   d80bc:	4d22 7947 5a72 3a22 2520 2c64 2220 5248     "MGyrZ": %d, "HR
   d80cc:	3a22 2520 2c64 2220 5248 2256 203a 6625     ": %d, "HRV": %f
   d80dc:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d80ec:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d80fc:	2020 2c20 2220 6142 7474 3a22 2520 2c66        , "Batt": %f,
   d810c:	2220 464d 5253 3a22 2520 7d64 2200 007d      "MFSR": %d}."}.
   d811c:	4445 3141 7b00 2220 4445 3141 3a22 2220     EDA1.{ "EDA1": "
   d812c:	5300 6d75 616d 7972 6552 6f70 7472 4c00     .SummaryReport.L
   d813c:	6f6f 2070 6954 656d 203a 4900 696e 6974     oop Time: .Initi
   d814c:	6c61 7a69 7461 6f69 206e 666f 7420 6568     alization of the
   d815c:	7320 6e65 6f73 2072 6572 7574 6e72 6465      sensor returned
   d816c:	203a 5400 7972 6e69 2067 6761 6961 2e6e     : .Trying again.
   d817c:	2e2e 5500 6b6e 6f6e 6e77 5320 6174 7574     ...Unknown Statu
   d818c:	0073 6c41 206c 7369 7720 6c65 2e6c 4700     s.All is well..G
   d819c:	6e65 7265 6c61 4520 7272 726f 4e00 746f     eneral Error.Not
   d81ac:	4920 706d 656c 656d 746e 6465 5000 7261      Implemented.Par
   d81bc:	6d61 7465 7265 4520 7272 726f 5700 6f72     ameter Error.Wro
   d81cc:	676e 4920 0044 6e49 6176 696c 2064 6553     ng ID.Invalid Se
   d81dc:	736e 726f 4400 7461 2061 6e55 6564 6672     nsor.Data Underf
   d81ec:	6f6c 0077 6553 736e 726f 4e20 746f 5320     low.Sensor Not S
   d81fc:	7075 6f70 7472 6465 0000 0000               upported....

000d8208 <CSWTCH.31>:
   d8208:	818e 000d 819b 000d 81a9 000d 81b9 000d     ................
   d8218:	81c9 000d 81d2 000d 81e1 000d 81f0 000d     ................

000d8228 <_ZTV13ICM_20948_I2C>:
	...
   d8230:	5a2d 000d                                   -Z..

000d8234 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d823c:	5f79 000d 5f7f 000d 5fcf 000d 5f8d 000d     y_..._..._..._..
   d824c:	5f7b 000d                                   {_..

000d8250 <_ZTVN5spark13EthernetClassE>:
	...
   d8258:	6547 000d 653d 000d 6533 000d 6529 000d     Ge..=e..3e..)e..
   d8268:	651d 000d 6511 000d 6505 000d 64fd 000d     .e...e...e...d..
   d8278:	64f3 000d 64e9 000d 67d9 000d               .d...d...g..

000d8284 <_ZTV7TwoWire>:
	...
   d828c:	6565 000d 65af 000d 6587 000d 6567 000d     ee...e...e..ge..
   d829c:	658f 000d 6597 000d 659f 000d 65a7 000d     .e...e...e...e..

000d82ac <_ZTV9IPAddress>:
	...
   d82b4:	668d 000d 667d 000d 667f 000d 7061 0070     .f..}f...f..app.

000d82c4 <_ZTVN5spark12NetworkClassE>:
	...
   d82cc:	6771 000d 677b 000d 6785 000d 678f 000d     qg..{g...g...g..
   d82dc:	6799 000d 67a5 000d 67b1 000d 67bd 000d     .g...g...g...g..
   d82ec:	67c5 000d 67cf 000d 67d9 000d 5925 252d     .g...g...g..%Y-%
   d82fc:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d830c:	7361 7463 6d69 0065                         asctime.

000d8314 <_ZTV11USARTSerial>:
	...
   d831c:	6cd9 000d 6d45 000d 6d1d 000d 68c1 000d     .l..Em...m...h..
   d832c:	6ced 000d 6d09 000d 6cfb 000d 6d17 000d     .l...m...l...m..
   d833c:	6cdb 000d 6cdf 000d                         .l...l..

000d8344 <_ZTV9USBSerial>:
	...
   d834c:	6dd9 000d 6e41 000d 6e17 000d 68c1 000d     .m..An...n...h..
   d835c:	6e09 000d 6ddb 000d 6deb 000d 6e3b 000d     .n...m...m..;n..
   d836c:	6dfb 000d 6dd5 000d                         .m...m..

000d8374 <_ZTVN5spark9WiFiClassE>:
	...
   d837c:	6f43 000d 6f39 000d 6f2f 000d 6ee5 000d     Co..9o../o...n..
   d838c:	6f23 000d 6f17 000d 6f0b 000d 6f03 000d     #o...o...o...o..
   d839c:	6ef9 000d 6eef 000d 67d9 000d               .n...n...g..

000d83a8 <_ZSt7nothrow>:
	...

000d83a9 <link_const_variable_data_end>:
   d83a9:	00          	.byte	0x00
	...

000d83ac <link_constructors_location>:
   d83ac:	000d4f45 	.word	0x000d4f45
   d83b0:	000d551d 	.word	0x000d551d
   d83b4:	000d5f51 	.word	0x000d5f51
   d83b8:	000d6551 	.word	0x000d6551
   d83bc:	000d6761 	.word	0x000d6761
   d83c0:	000d68ad 	.word	0x000d68ad
   d83c4:	000d69c5 	.word	0x000d69c5
   d83c8:	000d6c89 	.word	0x000d6c89
   d83cc:	000d6cc5 	.word	0x000d6cc5
   d83d0:	000d6f4d 	.word	0x000d6f4d

000d83d4 <link_constructors_end>:
	...
