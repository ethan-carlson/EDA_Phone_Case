
/Users/ethan/Desktop/EDA_Phone_Case_Code_Repo/EDA_Phone_Case_Rev3/target/2.0.1/argon/EDA_Phone_Case_Rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e00  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9e20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e394  000d9e24  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003d0  2003e420  2003e420  0002e420  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9eb0  000d9eb0  00029eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9ed8  000d9ed8  00029ed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00182312  00000000  00000000  00029edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000199eb  00000000  00000000  001ac1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030264  00000000  00000000  001c5bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c78  00000000  00000000  001f5e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007d88  00000000  00000000  001f8ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d706  00000000  00000000  0020083d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00041288  00000000  00000000  0023df43  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111364  00000000  00000000  0027f1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007d50  00000000  00000000  00390530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fbd9 	bl	d97e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fbe1 	bl	d9804 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e394 	.word	0x2003e394
   d404c:	000d9e24 	.word	0x000d9e24
   d4050:	2003e420 	.word	0x2003e420
   d4054:	2003e420 	.word	0x2003e420
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fad9 	bl	d7618 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9df8 	.word	0x000d9df8
   d4080:	000d9e20 	.word	0x000d9e20

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bea2 	b.w	d4dcc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f811 	bl	d50b0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 ba83 	b.w	d759c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b913 	b.w	d62c0 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b911 	b.w	d62c0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b917 	b.w	d62d0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <ICM_20948_execute_w>:
	pdev->_serif = s;
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40b2:	b410      	push	{r4}
   d40b4:	4604      	mov	r4, r0
   d40b6:	4608      	mov	r0, r1
   d40b8:	4611      	mov	r1, r2
   d40ba:	461a      	mov	r2, r3
	if (pdev->_serif->write == NULL)
   d40bc:	6823      	ldr	r3, [r4, #0]
   d40be:	681c      	ldr	r4, [r3, #0]
   d40c0:	b124      	cbz	r4, d40cc <ICM_20948_execute_w+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40c2:	46a4      	mov	ip, r4
   d40c4:	689b      	ldr	r3, [r3, #8]
}
   d40c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40ca:	4760      	bx	ip
}
   d40cc:	2002      	movs	r0, #2
   d40ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40d2:	4770      	bx	lr

000d40d4 <ICM_20948_execute_r>:

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40d4:	b410      	push	{r4}
   d40d6:	4604      	mov	r4, r0
   d40d8:	4608      	mov	r0, r1
   d40da:	4611      	mov	r1, r2
   d40dc:	461a      	mov	r2, r3
	if (pdev->_serif->read == NULL)
   d40de:	6823      	ldr	r3, [r4, #0]
   d40e0:	685c      	ldr	r4, [r3, #4]
   d40e2:	b124      	cbz	r4, d40ee <ICM_20948_execute_r+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40e4:	46a4      	mov	ip, r4
   d40e6:	689b      	ldr	r3, [r3, #8]
}
   d40e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40ec:	4760      	bx	ip
}
   d40ee:	2002      	movs	r0, #2
   d40f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40f4:	4770      	bx	lr

000d40f6 <ICM_20948_set_bank>:
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
}

ICM_20948_Status_e ICM_20948_set_bank(ICM_20948_Device_t *pdev, uint8_t bank)
{
	if (bank > 3)
   d40f6:	2903      	cmp	r1, #3
{
   d40f8:	b507      	push	{r0, r1, r2, lr}
	if (bank > 3)
   d40fa:	d80b      	bhi.n	d4114 <ICM_20948_set_bank+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
   d40fc:	0109      	lsls	r1, r1, #4
   d40fe:	f88d 1007 	strb.w	r1, [sp, #7]
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
   d4102:	2301      	movs	r3, #1
   d4104:	f10d 0207 	add.w	r2, sp, #7
   d4108:	217f      	movs	r1, #127	; 0x7f
   d410a:	f7ff ffd2 	bl	d40b2 <ICM_20948_execute_w>
}
   d410e:	b003      	add	sp, #12
   d4110:	f85d fb04 	ldr.w	pc, [sp], #4
		return ICM_20948_Stat_ParamErr;
   d4114:	2003      	movs	r0, #3
   d4116:	e7fa      	b.n	d410e <ICM_20948_set_bank+0x18>

000d4118 <ICM_20948_i2c_master_slv4_txn>:
{
   d4118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d411c:	b085      	sub	sp, #20
   d411e:	461d      	mov	r5, r3
   d4120:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   d4124:	f88d 2006 	strb.w	r2, [sp, #6]
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4128:	2e00      	cmp	r6, #0
   d412a:	bf14      	ite	ne
   d412c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   d4130:	2300      	moveq	r3, #0
   d4132:	4319      	orrs	r1, r3
{
   d4134:	4604      	mov	r4, r0
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4136:	f88d 1007 	strb.w	r1, [sp, #7]
	retval = ICM_20948_set_bank(pdev, 3);
   d413a:	2103      	movs	r1, #3
   d413c:	f7ff ffdb 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
   d4140:	2301      	movs	r3, #1
   d4142:	f10d 0207 	add.w	r2, sp, #7
   d4146:	2113      	movs	r1, #19
   d4148:	4620      	mov	r0, r4
   d414a:	f7ff ffb2 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d414e:	2800      	cmp	r0, #0
   d4150:	d168      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	retval = ICM_20948_set_bank(pdev, 3);
   d4152:	2103      	movs	r1, #3
   d4154:	4620      	mov	r0, r4
   d4156:	f7ff ffce 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
   d415a:	2301      	movs	r3, #1
   d415c:	f10d 0206 	add.w	r2, sp, #6
   d4160:	2114      	movs	r1, #20
   d4162:	4620      	mov	r0, r4
   d4164:	f7ff ffa5 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d4168:	2800      	cmp	r0, #0
   d416a:	d15b      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	ctrl.REG_DIS = !send_reg_addr;
   d416c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	while (nByte < len)
   d4170:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	ctrl.REG_DIS = !send_reg_addr;
   d4174:	f082 0201 	eor.w	r2, r2, #1
	ctrl.DLY = 0;
   d4178:	0152      	lsls	r2, r2, #5
   d417a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d417e:	f88d 2008 	strb.w	r2, [sp, #8]
	while (nByte < len)
   d4182:	4607      	mov	r7, r0
   d4184:	fa1f f989 	uxth.w	r9, r9
   d4188:	b2bb      	uxth	r3, r7
   d418a:	4599      	cmp	r9, r3
   d418c:	d94a      	bls.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		if (!Rw)
   d418e:	2e00      	cmp	r6, #0
   d4190:	d03c      	beq.n	d420c <ICM_20948_i2c_master_slv4_txn+0xf4>
		retval = ICM_20948_set_bank(pdev, 3);
   d4192:	2103      	movs	r1, #3
   d4194:	4620      	mov	r0, r4
   d4196:	f7ff ffae 	bl	d40f6 <ICM_20948_set_bank>
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
   d419a:	2301      	movs	r3, #1
   d419c:	aa02      	add	r2, sp, #8
   d419e:	2115      	movs	r1, #21
   d41a0:	4620      	mov	r0, r4
   d41a2:	f7ff ff86 	bl	d40b2 <ICM_20948_execute_w>
		if (retval != ICM_20948_Stat_Ok)
   d41a6:	2800      	cmp	r0, #0
   d41a8:	d13c      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		uint32_t count = 0;
   d41aa:	4680      	mov	r8, r0
			retval = ICM_20948_set_bank(pdev, 0);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4620      	mov	r0, r4
   d41b0:	f7ff ffa1 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
   d41b4:	2301      	movs	r3, #1
   d41b6:	aa03      	add	r2, sp, #12
   d41b8:	2117      	movs	r1, #23
   d41ba:	4620      	mov	r0, r4
   d41bc:	f7ff ff8a 	bl	d40d4 <ICM_20948_execute_r>
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
			slave4Done |= (count >= max_cycles);
   d41c4:	f240 31e7 	movw	r1, #999	; 0x3e7
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c8:	461a      	mov	r2, r3
   d41ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d41ce:	4588      	cmp	r8, r1
   d41d0:	bf88      	it	hi
   d41d2:	f043 0301 	orrhi.w	r3, r3, #1
		while (!slave4Done)
   d41d6:	07db      	lsls	r3, r3, #31
			count++;
   d41d8:	f108 0801 	add.w	r8, r8, #1
		while (!slave4Done)
   d41dc:	d5e6      	bpl.n	d41ac <ICM_20948_i2c_master_slv4_txn+0x94>
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
   d41de:	f3c2 1300 	ubfx	r3, r2, #4, #1
		if (txn_failed)
   d41e2:	4588      	cmp	r8, r1
   d41e4:	bf94      	ite	ls
   d41e6:	4698      	movls	r8, r3
   d41e8:	f043 0801 	orrhi.w	r8, r3, #1
   d41ec:	f018 0f01 	tst.w	r8, #1
   d41f0:	d11b      	bne.n	d422a <ICM_20948_i2c_master_slv4_txn+0x112>
		if (Rw)
   d41f2:	b14e      	cbz	r6, d4208 <ICM_20948_i2c_master_slv4_txn+0xf0>
			retval = ICM_20948_set_bank(pdev, 3);
   d41f4:	2103      	movs	r1, #3
   d41f6:	4620      	mov	r0, r4
   d41f8:	f7ff ff7d 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_SLV4_DI, &data[nByte], 1);
   d41fc:	2301      	movs	r3, #1
   d41fe:	19ea      	adds	r2, r5, r7
   d4200:	2117      	movs	r1, #23
   d4202:	4620      	mov	r0, r4
   d4204:	f7ff ff66 	bl	d40d4 <ICM_20948_execute_r>
		nByte++;
   d4208:	3701      	adds	r7, #1
   d420a:	e7bd      	b.n	d4188 <ICM_20948_i2c_master_slv4_txn+0x70>
			retval = ICM_20948_set_bank(pdev, 3);
   d420c:	2103      	movs	r1, #3
   d420e:	4620      	mov	r0, r4
   d4210:	f7ff ff71 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
   d4214:	2301      	movs	r3, #1
   d4216:	19ea      	adds	r2, r5, r7
   d4218:	2116      	movs	r1, #22
   d421a:	4620      	mov	r0, r4
   d421c:	f7ff ff49 	bl	d40b2 <ICM_20948_execute_w>
			if (retval != ICM_20948_Stat_Ok)
   d4220:	2800      	cmp	r0, #0
   d4222:	d0b6      	beq.n	d4192 <ICM_20948_i2c_master_slv4_txn+0x7a>
}
   d4224:	b005      	add	sp, #20
   d4226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ICM_20948_Stat_Err;
   d422a:	2001      	movs	r0, #1
   d422c:	e7fa      	b.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>

000d422e <ICM_20948_i2c_master_single_w>:
{
   d422e:	b530      	push	{r4, r5, lr}
   d4230:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
   d4232:	2401      	movs	r4, #1
   d4234:	2500      	movs	r5, #0
   d4236:	e9cd 5401 	strd	r5, r4, [sp, #4]
   d423a:	9400      	str	r4, [sp, #0]
   d423c:	f7ff ff6c 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4240:	b005      	add	sp, #20
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <ICM_20948_i2c_master_single_r>:
{
   d4244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
   d4246:	2401      	movs	r4, #1
   d4248:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d424c:	9400      	str	r4, [sp, #0]
   d424e:	f7ff ff63 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4252:	b004      	add	sp, #16
   d4254:	bd10      	pop	{r4, pc}

000d4256 <ICM_20948_sw_reset>:

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
   d4256:	b513      	push	{r0, r1, r4, lr}
   d4258:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d425a:	2100      	movs	r1, #0
   d425c:	f7ff ff4b 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4260:	2301      	movs	r3, #1
   d4262:	aa01      	add	r2, sp, #4
   d4264:	2106      	movs	r1, #6
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff34 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d426c:	b958      	cbnz	r0, d4286 <ICM_20948_sw_reset+0x30>
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
   d426e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4276:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d427a:	aa01      	add	r2, sp, #4
   d427c:	2301      	movs	r3, #1
   d427e:	2106      	movs	r1, #6
   d4280:	4620      	mov	r0, r4
   d4282:	f7ff ff16 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d4286:	b002      	add	sp, #8
   d4288:	bd10      	pop	{r4, pc}

000d428a <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
   d428a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d428c:	4604      	mov	r4, r0
   d428e:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4290:	2100      	movs	r1, #0
   d4292:	f7ff ff30 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4296:	2301      	movs	r3, #1
   d4298:	aa01      	add	r2, sp, #4
   d429a:	2106      	movs	r1, #6
   d429c:	4620      	mov	r0, r4
   d429e:	f7ff ff19 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42a2:	b958      	cbnz	r0, d42bc <ICM_20948_sleep+0x32>
	{
		return retval;
	}

	if (on)
   d42a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42a8:	f365 1386 	bfi	r3, r5, #6, #1
   d42ac:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.SLEEP = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42b0:	aa01      	add	r2, sp, #4
   d42b2:	2301      	movs	r3, #1
   d42b4:	2106      	movs	r1, #6
   d42b6:	4620      	mov	r0, r4
   d42b8:	f7ff fefb 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42bc:	b003      	add	sp, #12
   d42be:	bd30      	pop	{r4, r5, pc}

000d42c0 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
   d42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42c2:	4604      	mov	r4, r0
   d42c4:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42c6:	2100      	movs	r1, #0
   d42c8:	f7ff ff15 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42cc:	2301      	movs	r3, #1
   d42ce:	aa01      	add	r2, sp, #4
   d42d0:	2106      	movs	r1, #6
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fefe 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42d8:	b958      	cbnz	r0, d42f2 <ICM_20948_low_power+0x32>
	{
		return retval;
	}

	if (on)
   d42da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42de:	f365 1345 	bfi	r3, r5, #5, #1
   d42e2:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.LP_EN = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42e6:	aa01      	add	r2, sp, #4
   d42e8:	2301      	movs	r3, #1
   d42ea:	2106      	movs	r1, #6
   d42ec:	4620      	mov	r0, r4
   d42ee:	f7ff fee0 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}

000d42f6 <ICM_20948_get_who_am_i>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
   d42f6:	b570      	push	{r4, r5, r6, lr}
   d42f8:	4605      	mov	r5, r0
	if (whoami == NULL)
   d42fa:	460c      	mov	r4, r1
   d42fc:	b151      	cbz	r1, d4314 <ICM_20948_get_who_am_i+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42fe:	2100      	movs	r1, #0
   d4300:	f7ff fef9 	bl	d40f6 <ICM_20948_set_bank>
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d4304:	4622      	mov	r2, r4
   d4306:	4628      	mov	r0, r5
   d4308:	2301      	movs	r3, #1
}
   d430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d430e:	2100      	movs	r1, #0
   d4310:	f7ff bee0 	b.w	d40d4 <ICM_20948_execute_r>
}
   d4314:	2003      	movs	r0, #3
   d4316:	bd70      	pop	{r4, r5, r6, pc}

000d4318 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
   d4318:	b507      	push	{r0, r1, r2, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
   d431a:	2300      	movs	r3, #0
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d431c:	f10d 0107 	add.w	r1, sp, #7
	uint8_t whoami = 0x00;
   d4320:	f88d 3007 	strb.w	r3, [sp, #7]
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d4324:	f7ff ffe7 	bl	d42f6 <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
   d4328:	b920      	cbnz	r0, d4334 <ICM_20948_check_id+0x1c>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
   d432a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d432e:	2bea      	cmp	r3, #234	; 0xea
	{
		return ICM_20948_Stat_WrongID;
   d4330:	bf18      	it	ne
   d4332:	2004      	movne	r0, #4
	}
	return retval;
}
   d4334:	b003      	add	sp, #12
   d4336:	f85d fb04 	ldr.w	pc, [sp], #4

000d433a <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d433a:	f011 0f13 	tst.w	r1, #19
{
   d433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4340:	4606      	mov	r6, r0
   d4342:	460c      	mov	r4, r1
   d4344:	4615      	mov	r5, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d4346:	d02a      	beq.n	d439e <ICM_20948_set_sample_mode+0x64>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4348:	2100      	movs	r1, #0
   d434a:	f7ff fed4 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d434e:	bb20      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d4350:	2301      	movs	r3, #1
   d4352:	aa01      	add	r2, sp, #4
   d4354:	2105      	movs	r1, #5
   d4356:	4630      	mov	r0, r6
   d4358:	f7ff febc 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d435c:	b9e8      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d435e:	07e1      	lsls	r1, r4, #31
	{
		reg.ACCEL_CYCLE = mode;
   d4360:	bf42      	ittt	mi
   d4362:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4366:	f365 1345 	bfimi	r3, r5, #5, #1
   d436a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
   d436e:	07a2      	lsls	r2, r4, #30
	{
		reg.GYRO_CYCLE = mode;
   d4370:	bf42      	ittt	mi
   d4372:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4376:	f365 1304 	bfimi	r3, r5, #4, #1
   d437a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
   d437e:	06e3      	lsls	r3, r4, #27
	{
		reg.I2C_MST_CYCLE = mode;
   d4380:	bf42      	ittt	mi
   d4382:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4386:	f365 1386 	bfimi	r3, r5, #6, #1
   d438a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d438e:	aa01      	add	r2, sp, #4
   d4390:	2301      	movs	r3, #1
   d4392:	2105      	movs	r1, #5
   d4394:	4630      	mov	r0, r6
   d4396:	f7ff fe8c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d439a:	b002      	add	sp, #8
   d439c:	bd70      	pop	{r4, r5, r6, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d439e:	2007      	movs	r0, #7
   d43a0:	e7fb      	b.n	d439a <ICM_20948_set_sample_mode+0x60>

000d43a2 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43a2:	f011 0f03 	tst.w	r1, #3
{
   d43a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43aa:	4606      	mov	r6, r0
   d43ac:	4688      	mov	r8, r1
   d43ae:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43b0:	d041      	beq.n	d4436 <ICM_20948_set_full_scale+0x94>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d43b2:	f011 0401 	ands.w	r4, r1, #1
   d43b6:	d019      	beq.n	d43ec <ICM_20948_set_full_scale+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43b8:	2102      	movs	r1, #2
   d43ba:	f7ff fe9c 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43be:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43c0:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43c2:	aa01      	add	r2, sp, #4
   d43c4:	2114      	movs	r1, #20
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe84 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_FS_SEL = fss.a;
   d43cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d0:	4328      	orrs	r0, r5
		reg.ACCEL_FS_SEL = fss.a;
   d43d2:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d6:	b2c4      	uxtb	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
   d43d8:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43dc:	aa01      	add	r2, sp, #4
   d43de:	2301      	movs	r3, #1
   d43e0:	2114      	movs	r1, #20
   d43e2:	4630      	mov	r0, r6
   d43e4:	f7ff fe65 	bl	d40b2 <ICM_20948_execute_w>
   d43e8:	4304      	orrs	r4, r0
   d43ea:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d43ec:	f018 0f02 	tst.w	r8, #2
   d43f0:	d01d      	beq.n	d442e <ICM_20948_set_full_scale+0x8c>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43f2:	2102      	movs	r1, #2
   d43f4:	4630      	mov	r0, r6
   d43f6:	f7ff fe7e 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d43fa:	2301      	movs	r3, #1
   d43fc:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43fe:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4400:	aa01      	add	r2, sp, #4
   d4402:	4630      	mov	r0, r6
   d4404:	f7ff fe66 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_FS_SEL = fss.g;
   d4408:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d440c:	f3c7 0781 	ubfx	r7, r7, #2, #2
   d4410:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4414:	4328      	orrs	r0, r5
		reg.GYRO_FS_SEL = fss.g;
   d4416:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441a:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441c:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441e:	aa01      	add	r2, sp, #4
   d4420:	4619      	mov	r1, r3
   d4422:	4630      	mov	r0, r6
   d4424:	f7ff fe45 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4428:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d442a:	4304      	orrs	r4, r0
   d442c:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d442e:	4620      	mov	r0, r4
   d4430:	b002      	add	sp, #8
   d4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4436:	2407      	movs	r4, #7
   d4438:	e7f9      	b.n	d442e <ICM_20948_set_full_scale+0x8c>

000d443a <ICM_20948_set_dlpf_cfg>:

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
   d443a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d443c:	b085      	sub	sp, #20
   d443e:	4606      	mov	r6, r0
   d4440:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4444:	078a      	lsls	r2, r1, #30
{
   d4446:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4448:	d042      	beq.n	d44d0 <ICM_20948_set_dlpf_cfg+0x96>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d444a:	f011 0401 	ands.w	r4, r1, #1
   d444e:	d01c      	beq.n	d448a <ICM_20948_set_dlpf_cfg+0x50>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4450:	2102      	movs	r1, #2
   d4452:	f7ff fe50 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4456:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4458:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d445a:	aa03      	add	r2, sp, #12
   d445c:	2114      	movs	r1, #20
   d445e:	4630      	mov	r0, r6
   d4460:	f7ff fe38 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_DLPFCFG = cfg.a;
   d4464:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4468:	f89d 2004 	ldrb.w	r2, [sp, #4]
   d446c:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4470:	4305      	orrs	r5, r0
		reg.ACCEL_DLPFCFG = cfg.a;
   d4472:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4476:	aa03      	add	r2, sp, #12
   d4478:	2301      	movs	r3, #1
   d447a:	2114      	movs	r1, #20
   d447c:	4630      	mov	r0, r6
   d447e:	f7ff fe18 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4482:	b2ed      	uxtb	r5, r5
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4484:	ea45 0400 	orr.w	r4, r5, r0
   d4488:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d448a:	07bb      	lsls	r3, r7, #30
   d448c:	d51d      	bpl.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d448e:	2102      	movs	r1, #2
   d4490:	4630      	mov	r0, r6
   d4492:	f7ff fe30 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4496:	2301      	movs	r3, #1
   d4498:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d449a:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d449c:	aa03      	add	r2, sp, #12
   d449e:	4630      	mov	r0, r6
   d44a0:	f7ff fe18 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_DLPFCFG = cfg.g;
   d44a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d44a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d44ac:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b0:	4328      	orrs	r0, r5
		reg.GYRO_DLPFCFG = cfg.g;
   d44b2:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b6:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b8:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44ba:	aa03      	add	r2, sp, #12
   d44bc:	4619      	mov	r1, r3
   d44be:	4630      	mov	r0, r6
   d44c0:	f7ff fdf7 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c4:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c6:	4304      	orrs	r4, r0
   d44c8:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d44ca:	4620      	mov	r0, r4
   d44cc:	b005      	add	sp, #20
   d44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d44d0:	2407      	movs	r4, #7
   d44d2:	e7fa      	b.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>

000d44d4 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44d4:	f011 0f03 	tst.w	r1, #3
{
   d44d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44dc:	4606      	mov	r6, r0
   d44de:	4688      	mov	r8, r1
   d44e0:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44e2:	d03f      	beq.n	d4564 <ICM_20948_enable_dlpf+0x90>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d44e4:	f011 0401 	ands.w	r4, r1, #1
   d44e8:	d019      	beq.n	d451e <ICM_20948_enable_dlpf+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44ea:	2102      	movs	r1, #2
   d44ec:	f7ff fe03 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f0:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44f2:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f4:	aa01      	add	r2, sp, #4
   d44f6:	2114      	movs	r1, #20
   d44f8:	4630      	mov	r0, r6
   d44fa:	f7ff fdeb 	bl	d40d4 <ICM_20948_execute_r>
   d44fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4502:	4328      	orrs	r0, r5
   d4504:	f367 0300 	bfi	r3, r7, #0, #1
   d4508:	b2c4      	uxtb	r4, r0
		if (enable)
   d450a:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d450e:	aa01      	add	r2, sp, #4
   d4510:	2301      	movs	r3, #1
   d4512:	2114      	movs	r1, #20
   d4514:	4630      	mov	r0, r6
   d4516:	f7ff fdcc 	bl	d40b2 <ICM_20948_execute_w>
   d451a:	4304      	orrs	r4, r0
   d451c:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d451e:	f018 0f02 	tst.w	r8, #2
   d4522:	d01b      	beq.n	d455c <ICM_20948_enable_dlpf+0x88>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4524:	2102      	movs	r1, #2
   d4526:	4630      	mov	r0, r6
   d4528:	f7ff fde5 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d452c:	2301      	movs	r3, #1
   d452e:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4530:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4532:	aa01      	add	r2, sp, #4
   d4534:	4630      	mov	r0, r6
   d4536:	f7ff fdcd 	bl	d40d4 <ICM_20948_execute_r>
   d453a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d453e:	f367 0300 	bfi	r3, r7, #0, #1
   d4542:	4328      	orrs	r0, r5
   d4544:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4548:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454a:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454c:	aa01      	add	r2, sp, #4
   d454e:	4619      	mov	r1, r3
   d4550:	4630      	mov	r0, r6
   d4552:	f7ff fdae 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4556:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4558:	4304      	orrs	r4, r0
   d455a:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d455c:	4620      	mov	r0, r4
   d455e:	b002      	add	sp, #8
   d4560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4564:	2407      	movs	r4, #7
   d4566:	e7f9      	b.n	d455c <ICM_20948_enable_dlpf+0x88>

000d4568 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
   d4568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d456a:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d456c:	2100      	movs	r1, #0
{
   d456e:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d4570:	f7ff fdc1 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4574:	b990      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4576:	2301      	movs	r3, #1
   d4578:	aa01      	add	r2, sp, #4
   d457a:	210f      	movs	r1, #15
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff fda9 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4582:	b958      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
   d4584:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4588:	f365 0341 	bfi	r3, r5, #1, #1
   d458c:	f88d 3004 	strb.w	r3, [sp, #4]
	retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4590:	aa01      	add	r2, sp, #4
   d4592:	2301      	movs	r3, #1
   d4594:	210f      	movs	r1, #15
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff fd8b 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d459c:	b003      	add	sp, #12
   d459e:	bd30      	pop	{r4, r5, pc}

000d45a0 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
   d45a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45a2:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a4:	2100      	movs	r1, #0
{
   d45a6:	4604      	mov	r4, r0
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a8:	f7ff ffde 	bl	d4568 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
   d45ac:	bb90      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
   d45ae:	2103      	movs	r1, #3
   d45b0:	4620      	mov	r0, r4
   d45b2:	f7ff fda0 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45b6:	bb68      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45b8:	2301      	movs	r3, #1
   d45ba:	466a      	mov	r2, sp
   d45bc:	4619      	mov	r1, r3
   d45be:	4620      	mov	r0, r4
   d45c0:	f7ff fd88 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45c4:	bb30      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
   d45c6:	f89d 3000 	ldrb.w	r3, [sp]
   d45ca:	f023 031f 	bic.w	r3, r3, #31
   d45ce:	f043 0317 	orr.w	r3, r3, #23
   d45d2:	f88d 3000 	strb.w	r3, [sp]
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45d6:	2301      	movs	r3, #1
   d45d8:	466a      	mov	r2, sp
   d45da:	4619      	mov	r1, r3
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff fd68 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d45e2:	b9b8      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d45e4:	4601      	mov	r1, r0
   d45e6:	4620      	mov	r0, r4
   d45e8:	f7ff fd85 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45ec:	b990      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d45ee:	2301      	movs	r3, #1
   d45f0:	aa01      	add	r2, sp, #4
   d45f2:	2103      	movs	r1, #3
   d45f4:	4620      	mov	r0, r4
   d45f6:	f7ff fd6d 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45fa:	b958      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	if (enable)
   d45fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4600:	f365 1345 	bfi	r3, r5, #5, #1
   d4604:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	else
	{
		reg.I2C_MST_EN = 0;
	}
	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d4608:	aa01      	add	r2, sp, #4
   d460a:	2301      	movs	r3, #1
   d460c:	2103      	movs	r1, #3
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff fd4f 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d4614:	b003      	add	sp, #12
   d4616:	bd30      	pop	{r4, r5, pc}

000d4618 <ICM_20948_i2c_master_reset>:

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
   d4618:	b513      	push	{r0, r1, r4, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
   d461a:	2100      	movs	r1, #0
{
   d461c:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d461e:	f7ff fd6a 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4622:	b990      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d4624:	2301      	movs	r3, #1
   d4626:	aa01      	add	r2, sp, #4
   d4628:	2103      	movs	r1, #3
   d462a:	4620      	mov	r0, r4
   d462c:	f7ff fd52 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4630:	b958      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
   d4632:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4636:	f043 0302 	orr.w	r3, r3, #2
   d463a:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d463e:	aa01      	add	r2, sp, #4
   d4640:	2301      	movs	r3, #1
   d4642:	2103      	movs	r1, #3
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff fd34 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d464a:	b002      	add	sp, #8
   d464c:	bd10      	pop	{r4, pc}

000d464e <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
   d464e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4652:	2903      	cmp	r1, #3
   d4654:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   d4658:	4605      	mov	r5, r0
   d465a:	460c      	mov	r4, r1
   d465c:	4617      	mov	r7, r2
   d465e:	461e      	mov	r6, r3
   d4660:	d847      	bhi.n	d46f2 <ICM_20948_i2c_master_configure_slave+0xa4>
		break;
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
   d4662:	2103      	movs	r1, #3
   d4664:	f7ff fd47 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4668:	2800      	cmp	r0, #0
   d466a:	d13f      	bne.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
   d466c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4670:	f367 0306 	bfi	r3, r7, #0, #7
   d4674:	f88d 3004 	strb.w	r3, [sp, #4]
	if (Rw)
   d4678:	f1b8 0f00 	cmp.w	r8, #0
   d467c:	d004      	beq.n	d4688 <ICM_20948_i2c_master_configure_slave+0x3a>
	{
		address.RNW = 1;
   d467e:	b2db      	uxtb	r3, r3
   d4680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4684:	f88d 3004 	strb.w	r3, [sp, #4]
   d4688:	00a4      	lsls	r4, r4, #2
   d468a:	b2e4      	uxtb	r4, r4
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
   d468c:	1ce1      	adds	r1, r4, #3
   d468e:	2301      	movs	r3, #1
   d4690:	aa01      	add	r2, sp, #4
   d4692:	b2c9      	uxtb	r1, r1
   d4694:	4628      	mov	r0, r5
   d4696:	f7ff fd0c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d469a:	bb38      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d469c:	1d21      	adds	r1, r4, #4
   d469e:	2301      	movs	r3, #1
   d46a0:	aa02      	add	r2, sp, #8
   d46a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d46a6:	4628      	mov	r0, r5
	subaddress.REG = reg;
   d46a8:	f88d 6008 	strb.w	r6, [sp, #8]
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d46ac:	f7ff fd01 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d46b0:	b9e0      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
   d46b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d46b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d46ba:	f003 030f 	and.w	r3, r3, #15
   d46be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d46c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   d46c6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d46ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d46d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46d6:	1d61      	adds	r1, r4, #5
	ctrl.LENG = len;
   d46d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   d46dc:	f88d 300c 	strb.w	r3, [sp, #12]
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46e0:	aa03      	add	r2, sp, #12
   d46e2:	2301      	movs	r3, #1
   d46e4:	b2c9      	uxtb	r1, r1
   d46e6:	4628      	mov	r0, r5
   d46e8:	f7ff fce3 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d46ec:	b004      	add	sp, #16
   d46ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d46f2:	2003      	movs	r0, #3
   d46f4:	e7fa      	b.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>

000d46f6 <ICM_20948_get_agmt>:

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
   d46f6:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
   d46fa:	4680      	mov	r8, r0
   d46fc:	b08b      	sub	sp, #44	; 0x2c
	if (pagmt == NULL)
   d46fe:	460f      	mov	r7, r1
   d4700:	2900      	cmp	r1, #0
   d4702:	f000 808f 	beq.w	d4824 <ICM_20948_get_agmt+0x12e>
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
   d4706:	2100      	movs	r1, #0
   d4708:	f7ff fcf5 	bl	d40f6 <ICM_20948_set_bank>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d470c:	2317      	movs	r3, #23
	retval |= ICM_20948_set_bank(pdev, 0);
   d470e:	4606      	mov	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d4710:	aa04      	add	r2, sp, #16
   d4712:	212d      	movs	r1, #45	; 0x2d
   d4714:	4640      	mov	r0, r8
   d4716:	f7ff fcdd 	bl	d40d4 <ICM_20948_execute_r>

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
   d471a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   d471e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4726:	803b      	strh	r3, [r7, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
   d4728:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d472c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   d4730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4734:	807b      	strh	r3, [r7, #2]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
   d4736:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d473a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d473e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4742:	80bb      	strh	r3, [r7, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
   d4744:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d4748:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d474c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4750:	80fb      	strh	r3, [r7, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
   d4752:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d4756:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d475a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d475e:	813b      	strh	r3, [r7, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
   d4760:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4764:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d476c:	817b      	strh	r3, [r7, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
   d476e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4772:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d4776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d477a:	827b      	strh	r3, [r7, #18]

	pagmt->magStat1 = buff[14];
   d477c:	f89d 301e 	ldrb.w	r3, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4780:	f89d 2020 	ldrb.w	r2, [sp, #32]
	pagmt->magStat1 = buff[14];
   d4784:	757b      	strb	r3, [r7, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4786:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d478a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d478e:	81bb      	strh	r3, [r7, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
   d4790:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   d4794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d479c:	81fb      	strh	r3, [r7, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d479e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   d47a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d47a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47aa:	4330      	orrs	r0, r6
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d47ac:	823b      	strh	r3, [r7, #16]
	pagmt->magStat2 = buff[22];
   d47ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   d47b2:	75bb      	strb	r3, [r7, #22]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47b4:	b2c4      	uxtb	r4, r0

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
   d47b6:	2102      	movs	r1, #2
   d47b8:	4640      	mov	r0, r8
   d47ba:	f7ff fc9c 	bl	d40f6 <ICM_20948_set_bank>
   d47be:	4320      	orrs	r0, r4
   d47c0:	b2c6      	uxtb	r6, r0
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47c2:	2301      	movs	r3, #1
   d47c4:	aa01      	add	r2, sp, #4
   d47c6:	2114      	movs	r1, #20
   d47c8:	4640      	mov	r0, r8
   d47ca:	f7ff fc83 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d47d2:	7d3a      	ldrb	r2, [r7, #20]
   d47d4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d47d8:	f363 0201 	bfi	r2, r3, #0, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47dc:	4330      	orrs	r0, r6
   d47de:	b2c6      	uxtb	r6, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47e0:	753a      	strb	r2, [r7, #20]
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
   d47e2:	2102      	movs	r1, #2
   d47e4:	4640      	mov	r0, r8
   d47e6:	f7ff fc86 	bl	d40f6 <ICM_20948_set_bank>
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47ea:	2301      	movs	r3, #1
   d47ec:	4619      	mov	r1, r3
	retval |= ICM_20948_set_bank(pdev, 2);
   d47ee:	4306      	orrs	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47f0:	aa02      	add	r2, sp, #8
   d47f2:	4640      	mov	r0, r8
   d47f4:	f7ff fc6e 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d47f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d47fc:	7d3a      	ldrb	r2, [r7, #20]
   d47fe:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d4802:	f363 0283 	bfi	r2, r3, #2, #2
	retval |= ICM_20948_set_bank(pdev, 2);
   d4806:	b2f4      	uxtb	r4, r6
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4808:	4304      	orrs	r4, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d480a:	753a      	strb	r2, [r7, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d480c:	2301      	movs	r3, #1
   d480e:	aa03      	add	r2, sp, #12
   d4810:	2115      	movs	r1, #21
   d4812:	4640      	mov	r0, r8
   d4814:	f7ff fc5e 	bl	d40d4 <ICM_20948_execute_r>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4818:	b2e4      	uxtb	r4, r4
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d481a:	4320      	orrs	r0, r4
   d481c:	b2c0      	uxtb	r0, r0

	return retval;
}
   d481e:	b00b      	add	sp, #44	; 0x2c
   d4820:	e8bd 81d0 	ldmia.w	sp!, {r4, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d4824:	2003      	movs	r0, #3
   d4826:	e7fa      	b.n	d481e <ICM_20948_get_agmt+0x128>

000d4828 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4828:	2000      	movs	r0, #0
   d482a:	f001 bb51 	b.w	d5ed0 <hal_timer_millis>
	...

000d4830 <_Z21PulseSensorAmped_dataii>:
   //Serial.println((System.millis() - loopTimer));
}


void PulseSensorAmped_data(int BPM, int IBI){  //This is clunky.  Could clean up later
  pulse = BPM;
   d4830:	4b01      	ldr	r3, [pc, #4]	; (d4838 <_Z21PulseSensorAmped_dataii+0x8>)
   d4832:	6018      	str	r0, [r3, #0]
}
   d4834:	4770      	bx	lr
   d4836:	bf00      	nop
   d4838:	2003e558 	.word	0x2003e558
   d483c:	00000000 	.word	0x00000000

000d4840 <_Z12calculateHRVi>:


void calculateHRV(int IBI){
   d4840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4842:	ed2d 8b02 	vpush	{d8}
  float avg_ibi = 0;
  float ibi_stdev = 0;

  /*  Add the latest IBI to the buffer */
  ibi_buffer[ibiBufferCounter] = IBI;
   d4846:	4a2e      	ldr	r2, [pc, #184]	; (d4900 <_Z12calculateHRVi+0xc0>)
   d4848:	492e      	ldr	r1, [pc, #184]	; (d4904 <_Z12calculateHRVi+0xc4>)
   d484a:	7813      	ldrb	r3, [r2, #0]
   d484c:	4d2d      	ldr	r5, [pc, #180]	; (d4904 <_Z12calculateHRVi+0xc4>)
   d484e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  ibiBufferCounter++;
   d4852:	3301      	adds	r3, #1
   d4854:	b2db      	uxtb	r3, r3
  if (ibiBufferCounter >= IBI_BUFFER_SIZE){
   d4856:	2b07      	cmp	r3, #7
    ibiBufferCounter = 0;
   d4858:	bf88      	it	hi
   d485a:	2300      	movhi	r3, #0
  float avg_ibi = 0;
   d485c:	eddf 8a2a 	vldr	s17, [pc, #168]	; d4908 <_Z12calculateHRVi+0xc8>
    ibiBufferCounter = 0;
   d4860:	7013      	strb	r3, [r2, #0]
void calculateHRV(int IBI){
   d4862:	4629      	mov	r1, r5
  }

  /*  Compute the Standard Deviation  */
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4864:	2200      	movs	r2, #0
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4866:	f851 3b04 	ldr.w	r3, [r1], #4
   d486a:	08db      	lsrs	r3, r3, #3
   d486c:	ee07 3a90 	vmov	s15, r3
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4870:	3201      	adds	r2, #1
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4876:	2a08      	cmp	r2, #8
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4878:	ee78 8aa7 	vadd.f32	s17, s17, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d487c:	d1f3      	bne.n	d4866 <_Z12calculateHRVi+0x26>
  float ibi_stdev = 0;
   d487e:	ed9f 8a22 	vldr	s16, [pc, #136]	; d4908 <_Z12calculateHRVi+0xc8>
  }
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d4882:	2400      	movs	r4, #0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d4884:	ecf5 7a01 	vldmia	r5!, {s15}
   d4888:	eef8 7a67 	vcvt.f32.u32	s15, s15
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d488c:	3401      	adds	r4, #1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d488e:	ee77 7ae8 	vsub.f32	s15, s15, s17
   d4892:	ee17 0a90 	vmov	r0, s15
   d4896:	f004 fc41 	bl	d911c <__aeabi_f2d>
   d489a:	4602      	mov	r2, r0
   d489c:	460b      	mov	r3, r1
   d489e:	f004 fc95 	bl	d91cc <__aeabi_dmul>
   d48a2:	4606      	mov	r6, r0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48a4:	ee18 0a10 	vmov	r0, s16
   d48a8:	460f      	mov	r7, r1
   d48aa:	f004 fc37 	bl	d911c <__aeabi_f2d>
   d48ae:	4602      	mov	r2, r0
   d48b0:	460b      	mov	r3, r1
   d48b2:	4630      	mov	r0, r6
   d48b4:	4639      	mov	r1, r7
   d48b6:	f004 fad3 	bl	d8e60 <__adddf3>
   d48ba:	f004 ff37 	bl	d972c <__aeabi_d2f>
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48be:	2c08      	cmp	r4, #8
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48c0:	ee08 0a10 	vmov	s16, r0
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48c4:	d1de      	bne.n	d4884 <_Z12calculateHRVi+0x44>
   d48c6:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   d48ca:	ee68 7a27 	vmul.f32	s15, s16, s15
   d48ce:	ee17 0a90 	vmov	r0, s15
   d48d2:	f004 fc23 	bl	d911c <__aeabi_f2d>
   d48d6:	ed9f 1b08 	vldr	d1, [pc, #32]	; d48f8 <_Z12calculateHRVi+0xb8>
   d48da:	ec41 0b10 	vmov	d0, r0, r1
   d48de:	f003 f91b 	bl	d7b18 <pow>
   d48e2:	ec51 0b10 	vmov	r0, r1, d0
  }
  ibi_stdev /= IBI_BUFFER_SIZE;
  ibi_stdev = pow(ibi_stdev, 0.5);
   d48e6:	f004 ff21 	bl	d972c <__aeabi_d2f>
   d48ea:	4b08      	ldr	r3, [pc, #32]	; (d490c <_Z12calculateHRVi+0xcc>)
   d48ec:	6018      	str	r0, [r3, #0]

  hrv = ibi_stdev;
}
   d48ee:	ecbd 8b02 	vpop	{d8}
   d48f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48f4:	f3af 8000 	nop.w
   d48f8:	00000000 	.word	0x00000000
   d48fc:	3fe00000 	.word	0x3fe00000
   d4900:	2003e4f4 	.word	0x2003e4f4
   d4904:	2003e4f8 	.word	0x2003e4f8
   d4908:	00000000 	.word	0x00000000
   d490c:	2003e4f0 	.word	0x2003e4f0

000d4910 <_Z21PulseSensorAmped_lostv>:


void PulseSensorAmped_lost(void) {
  //Serial.println("Pulse Lost");
}
   d4910:	4770      	bx	lr
   d4912:	0000      	movs	r0, r0
   d4914:	0000      	movs	r0, r0
	...

000d4918 <_Z20computeSummaryReportv>:


void computeSummaryReport(){
   d4918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d491c:	4b7c      	ldr	r3, [pc, #496]	; (d4b10 <_Z20computeSummaryReportv+0x1f8>)
  avg_tc2 = avg_tc2 / (baseReadCounter - 1);
   d491e:	f8df 9268 	ldr.w	r9, [pc, #616]	; d4b88 <_Z20computeSummaryReportv+0x270>
  avg_accx = avg_accx / (baseReadCounter - 1);
   d4922:	4f7c      	ldr	r7, [pc, #496]	; (d4b14 <_Z20computeSummaryReportv+0x1fc>)
  avg_accy = avg_accy / (baseReadCounter - 1);
   d4924:	f8df 8264 	ldr.w	r8, [pc, #612]	; d4b8c <_Z20computeSummaryReportv+0x274>
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d4928:	497b      	ldr	r1, [pc, #492]	; (d4b18 <_Z20computeSummaryReportv+0x200>)
  avg_accz = avg_accz / (baseReadCounter - 1);
   d492a:	487c      	ldr	r0, [pc, #496]	; (d4b1c <_Z20computeSummaryReportv+0x204>)
  avg_gyrx = avg_gyrx / (baseReadCounter - 1);
   d492c:	4c7c      	ldr	r4, [pc, #496]	; (d4b20 <_Z20computeSummaryReportv+0x208>)
  avg_gyry = avg_gyry / (baseReadCounter - 1);
   d492e:	4d7d      	ldr	r5, [pc, #500]	; (d4b24 <_Z20computeSummaryReportv+0x20c>)
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	680a      	ldr	r2, [r1, #0]
  avg_gyrz = avg_gyrz / (baseReadCounter - 1);
  avg_brdtemp = avg_brdtemp / (baseReadCounter - 1);
  avg_mic = avg_mic / (baseReadCounter - 1);
   d4934:	4e7c      	ldr	r6, [pc, #496]	; (d4b28 <_Z20computeSummaryReportv+0x210>)
  avg_tp1 = avg_tp1 / (tp1ReadCounter - 1);
  avg_tp2 = avg_tp2 / (tp2ReadCounter - 1);
   d4936:	f8df a258 	ldr.w	sl, [pc, #600]	; d4b90 <_Z20computeSummaryReportv+0x278>
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d493a:	f8df b258 	ldr.w	fp, [pc, #600]	; d4b94 <_Z20computeSummaryReportv+0x27c>
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d493e:	3b01      	subs	r3, #1
   d4940:	fb92 f2f3 	sdiv	r2, r2, r3
   d4944:	600a      	str	r2, [r1, #0]
  avg_tc2 = avg_tc2 / (baseReadCounter - 1);
   d4946:	f8d9 2000 	ldr.w	r2, [r9]
   d494a:	fb92 f2f3 	sdiv	r2, r2, r3
   d494e:	f8c9 2000 	str.w	r2, [r9]
  avg_accx = avg_accx / (baseReadCounter - 1);
   d4952:	683a      	ldr	r2, [r7, #0]
   d4954:	fb92 f2f3 	sdiv	r2, r2, r3
   d4958:	603a      	str	r2, [r7, #0]
  avg_accy = avg_accy / (baseReadCounter - 1);
   d495a:	f8d8 2000 	ldr.w	r2, [r8]
   d495e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4962:	f8c8 2000 	str.w	r2, [r8]
  avg_accz = avg_accz / (baseReadCounter - 1);
   d4966:	6802      	ldr	r2, [r0, #0]
   d4968:	fb92 f2f3 	sdiv	r2, r2, r3
   d496c:	6002      	str	r2, [r0, #0]
  avg_gyrx = avg_gyrx / (baseReadCounter - 1);
   d496e:	6822      	ldr	r2, [r4, #0]
   d4970:	fb92 f2f3 	sdiv	r2, r2, r3
   d4974:	6022      	str	r2, [r4, #0]
  avg_gyry = avg_gyry / (baseReadCounter - 1);
   d4976:	682a      	ldr	r2, [r5, #0]
  avg_gyrz = avg_gyrz / (baseReadCounter - 1);
   d4978:	4c6c      	ldr	r4, [pc, #432]	; (d4b2c <_Z20computeSummaryReportv+0x214>)
  avg_gyry = avg_gyry / (baseReadCounter - 1);
   d497a:	fb92 f2f3 	sdiv	r2, r2, r3
   d497e:	602a      	str	r2, [r5, #0]
  avg_brdtemp = avg_brdtemp / (baseReadCounter - 1);
   d4980:	4d6b      	ldr	r5, [pc, #428]	; (d4b30 <_Z20computeSummaryReportv+0x218>)
  avg_gyrz = avg_gyrz / (baseReadCounter - 1);
   d4982:	6822      	ldr	r2, [r4, #0]
   d4984:	fb92 f2f3 	sdiv	r2, r2, r3
   d4988:	6022      	str	r2, [r4, #0]
  avg_brdtemp = avg_brdtemp / (baseReadCounter - 1);
   d498a:	682a      	ldr	r2, [r5, #0]
   d498c:	fb92 f2f3 	sdiv	r2, r2, r3
   d4990:	602a      	str	r2, [r5, #0]
  avg_mic = avg_mic / (baseReadCounter - 1);
   d4992:	6832      	ldr	r2, [r6, #0]
   d4994:	fb92 f3f3 	sdiv	r3, r2, r3
   d4998:	6033      	str	r3, [r6, #0]
  avg_tp1 = avg_tp1 / (tp1ReadCounter - 1);
   d499a:	4b66      	ldr	r3, [pc, #408]	; (d4b34 <_Z20computeSummaryReportv+0x21c>)
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d499c:	4866      	ldr	r0, [pc, #408]	; (d4b38 <_Z20computeSummaryReportv+0x220>)
  avg_tp1 = avg_tp1 / (tp1ReadCounter - 1);
   d499e:	681b      	ldr	r3, [r3, #0]
   d49a0:	1e5a      	subs	r2, r3, #1
   d49a2:	4b66      	ldr	r3, [pc, #408]	; (d4b3c <_Z20computeSummaryReportv+0x224>)
   d49a4:	4619      	mov	r1, r3
   d49a6:	681b      	ldr	r3, [r3, #0]
   d49a8:	fb93 f3f2 	sdiv	r3, r3, r2
   d49ac:	600b      	str	r3, [r1, #0]
  avg_tp2 = avg_tp2 / (tp2ReadCounter - 1);
   d49ae:	4b64      	ldr	r3, [pc, #400]	; (d4b40 <_Z20computeSummaryReportv+0x228>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	1e5a      	subs	r2, r3, #1
   d49b4:	f8da 3000 	ldr.w	r3, [sl]
   d49b8:	fb93 f3f2 	sdiv	r3, r3, r2
   d49bc:	f8ca 3000 	str.w	r3, [sl]
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d49c0:	6803      	ldr	r3, [r0, #0]
void computeSummaryReport(){
   d49c2:	b09f      	sub	sp, #124	; 0x7c

  float voltage = analogRead(BATT) * 0.0011224;
   d49c4:	2021      	movs	r0, #33	; 0x21
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d49c6:	1e5a      	subs	r2, r3, #1
   d49c8:	f8db 3000 	ldr.w	r3, [fp]
   d49cc:	fb93 f3f2 	sdiv	r3, r3, r2
   d49d0:	f8cb 3000 	str.w	r3, [fp]
  float voltage = analogRead(BATT) * 0.0011224;
   d49d4:	f002 fecd 	bl	d7772 <analogRead>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;

  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d49d8:	4b5a      	ldr	r3, [pc, #360]	; (d4b44 <_Z20computeSummaryReportv+0x22c>)
   d49da:	681b      	ldr	r3, [r3, #0]
   d49dc:	9319      	str	r3, [sp, #100]	; 0x64
   d49de:	4b5a      	ldr	r3, [pc, #360]	; (d4b48 <_Z20computeSummaryReportv+0x230>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	9318      	str	r3, [sp, #96]	; 0x60
  float voltage = analogRead(BATT) * 0.0011224;
   d49e4:	f004 fb88 	bl	d90f8 <__aeabi_i2d>
   d49e8:	a347      	add	r3, pc, #284	; (adr r3, d4b08 <_Z20computeSummaryReportv+0x1f0>)
   d49ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49ee:	f004 fbed 	bl	d91cc <__aeabi_dmul>
   d49f2:	f004 fe9b 	bl	d972c <__aeabi_d2f>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;
   d49f6:	f004 fb91 	bl	d911c <__aeabi_f2d>
   d49fa:	4b54      	ldr	r3, [pc, #336]	; (d4b4c <_Z20computeSummaryReportv+0x234>)
   d49fc:	2200      	movs	r2, #0
   d49fe:	f004 fa2d 	bl	d8e5c <__aeabi_dsub>
   d4a02:	4b53      	ldr	r3, [pc, #332]	; (d4b50 <_Z20computeSummaryReportv+0x238>)
   d4a04:	2200      	movs	r2, #0
   d4a06:	f004 fd0b 	bl	d9420 <__aeabi_ddiv>
   d4a0a:	2200      	movs	r2, #0
   d4a0c:	4b51      	ldr	r3, [pc, #324]	; (d4b54 <_Z20computeSummaryReportv+0x23c>)
   d4a0e:	f004 fbdd 	bl	d91cc <__aeabi_dmul>
   d4a12:	f004 fe8b 	bl	d972c <__aeabi_d2f>
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d4a16:	f004 fb81 	bl	d911c <__aeabi_f2d>
   d4a1a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   d4a1e:	4b4e      	ldr	r3, [pc, #312]	; (d4b58 <_Z20computeSummaryReportv+0x240>)
   d4a20:	6818      	ldr	r0, [r3, #0]
   d4a22:	f004 fb7b 	bl	d911c <__aeabi_f2d>
   d4a26:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d4a2a:	4b4c      	ldr	r3, [pc, #304]	; (d4b5c <_Z20computeSummaryReportv+0x244>)
   d4a2c:	494c      	ldr	r1, [pc, #304]	; (d4b60 <_Z20computeSummaryReportv+0x248>)
   d4a2e:	681b      	ldr	r3, [r3, #0]
   d4a30:	9313      	str	r3, [sp, #76]	; 0x4c
   d4a32:	680b      	ldr	r3, [r1, #0]
   d4a34:	484b      	ldr	r0, [pc, #300]	; (d4b64 <_Z20computeSummaryReportv+0x24c>)
   d4a36:	9312      	str	r3, [sp, #72]	; 0x48
   d4a38:	6803      	ldr	r3, [r0, #0]
   d4a3a:	9311      	str	r3, [sp, #68]	; 0x44
   d4a3c:	4b4a      	ldr	r3, [pc, #296]	; (d4b68 <_Z20computeSummaryReportv+0x250>)
   d4a3e:	4a4b      	ldr	r2, [pc, #300]	; (d4b6c <_Z20computeSummaryReportv+0x254>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	9310      	str	r3, [sp, #64]	; 0x40
   d4a44:	6813      	ldr	r3, [r2, #0]
   d4a46:	494a      	ldr	r1, [pc, #296]	; (d4b70 <_Z20computeSummaryReportv+0x258>)
   d4a48:	930f      	str	r3, [sp, #60]	; 0x3c
   d4a4a:	680b      	ldr	r3, [r1, #0]
   d4a4c:	4849      	ldr	r0, [pc, #292]	; (d4b74 <_Z20computeSummaryReportv+0x25c>)
   d4a4e:	930e      	str	r3, [sp, #56]	; 0x38
   d4a50:	6803      	ldr	r3, [r0, #0]
   d4a52:	930d      	str	r3, [sp, #52]	; 0x34
   d4a54:	4b48      	ldr	r3, [pc, #288]	; (d4b78 <_Z20computeSummaryReportv+0x260>)
   d4a56:	4a49      	ldr	r2, [pc, #292]	; (d4b7c <_Z20computeSummaryReportv+0x264>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	930c      	str	r3, [sp, #48]	; 0x30
   d4a5c:	6813      	ldr	r3, [r2, #0]
   d4a5e:	930b      	str	r3, [sp, #44]	; 0x2c
   d4a60:	6833      	ldr	r3, [r6, #0]
   d4a62:	930a      	str	r3, [sp, #40]	; 0x28
   d4a64:	682b      	ldr	r3, [r5, #0]
   d4a66:	9309      	str	r3, [sp, #36]	; 0x24
   d4a68:	6823      	ldr	r3, [r4, #0]
   d4a6a:	4d2e      	ldr	r5, [pc, #184]	; (d4b24 <_Z20computeSummaryReportv+0x20c>)
   d4a6c:	9308      	str	r3, [sp, #32]
   d4a6e:	682b      	ldr	r3, [r5, #0]
   d4a70:	4c2b      	ldr	r4, [pc, #172]	; (d4b20 <_Z20computeSummaryReportv+0x208>)
   d4a72:	9307      	str	r3, [sp, #28]
   d4a74:	6823      	ldr	r3, [r4, #0]
   d4a76:	4829      	ldr	r0, [pc, #164]	; (d4b1c <_Z20computeSummaryReportv+0x204>)
   d4a78:	9306      	str	r3, [sp, #24]
   d4a7a:	6803      	ldr	r3, [r0, #0]
   d4a7c:	9305      	str	r3, [sp, #20]
   d4a7e:	f8d8 3000 	ldr.w	r3, [r8]
   d4a82:	9304      	str	r3, [sp, #16]
   d4a84:	683b      	ldr	r3, [r7, #0]
   d4a86:	9303      	str	r3, [sp, #12]
   d4a88:	f8db 3000 	ldr.w	r3, [fp]
   d4a8c:	9302      	str	r3, [sp, #8]
   d4a8e:	f8da 3000 	ldr.w	r3, [sl]
   d4a92:	9301      	str	r3, [sp, #4]
   d4a94:	4a29      	ldr	r2, [pc, #164]	; (d4b3c <_Z20computeSummaryReportv+0x224>)
   d4a96:	f8d9 3000 	ldr.w	r3, [r9]
   d4a9a:	491f      	ldr	r1, [pc, #124]	; (d4b18 <_Z20computeSummaryReportv+0x200>)
   d4a9c:	9300      	str	r3, [sp, #0]
   d4a9e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d4aa2:	6813      	ldr	r3, [r2, #0]
   d4aa4:	680a      	ldr	r2, [r1, #0]
   d4aa6:	4936      	ldr	r1, [pc, #216]	; (d4b80 <_Z20computeSummaryReportv+0x268>)
                                  , avg_tc1, avg_tp1, avg_tc2, avg_tp2, avg_fsr, avg_accx, avg_accy, avg_accz, \
                                  avg_gyrx, avg_gyry, avg_gyrz, avg_brdtemp, avg_mic, max_tp1, max_tp2, \
                                  max_accx, max_accy, max_accz, max_gyrx, max_gyry, max_gyrz, pulse, \
                                  hrv, batt_perc, max_fsr, max_mic);

  max_tp1 = 0;
   d4aa8:	4c34      	ldr	r4, [pc, #208]	; (d4b7c <_Z20computeSummaryReportv+0x264>)
  max_tp2 = 0;
   d4aaa:	4f33      	ldr	r7, [pc, #204]	; (d4b78 <_Z20computeSummaryReportv+0x260>)
  max_accx = 0;
   d4aac:	4e31      	ldr	r6, [pc, #196]	; (d4b74 <_Z20computeSummaryReportv+0x25c>)
  max_accy = 0;
   d4aae:	4d30      	ldr	r5, [pc, #192]	; (d4b70 <_Z20computeSummaryReportv+0x258>)
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d4ab0:	4660      	mov	r0, ip
   d4ab2:	f002 facb 	bl	d704c <_ZN6String6formatEPKcz>
                                  hrv, batt_perc, max_fsr, max_mic);
   d4ab6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d4aba:	4661      	mov	r1, ip
   d4abc:	4831      	ldr	r0, [pc, #196]	; (d4b84 <_Z20computeSummaryReportv+0x26c>)
   d4abe:	f002 fa49 	bl	d6f54 <_ZN6StringaSEOS_>
   d4ac2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d4ac6:	4660      	mov	r0, ip
   d4ac8:	f002 f9ae 	bl	d6e28 <_ZN6StringD1Ev>
  max_gyry = 0;
  max_gyrz = 0;
  max_fsr = 0;
  max_mic = 0;

  baseReadCounter = 0;
   d4acc:	4a10      	ldr	r2, [pc, #64]	; (d4b10 <_Z20computeSummaryReportv+0x1f8>)
  max_mic = 0;
   d4ace:	491d      	ldr	r1, [pc, #116]	; (d4b44 <_Z20computeSummaryReportv+0x22c>)
  tp1ReadCounter = 0;
  tp2ReadCounter = 0;
  fsrReadCounter = 0;
   d4ad0:	4819      	ldr	r0, [pc, #100]	; (d4b38 <_Z20computeSummaryReportv+0x220>)
  max_tp1 = 0;
   d4ad2:	2300      	movs	r3, #0
   d4ad4:	6023      	str	r3, [r4, #0]
  baseReadCounter = 0;
   d4ad6:	6013      	str	r3, [r2, #0]
  max_accz = 0;
   d4ad8:	4c24      	ldr	r4, [pc, #144]	; (d4b6c <_Z20computeSummaryReportv+0x254>)
  tp1ReadCounter = 0;
   d4ada:	4a16      	ldr	r2, [pc, #88]	; (d4b34 <_Z20computeSummaryReportv+0x21c>)
  max_tp2 = 0;
   d4adc:	603b      	str	r3, [r7, #0]
  max_accx = 0;
   d4ade:	6033      	str	r3, [r6, #0]
  max_accy = 0;
   d4ae0:	602b      	str	r3, [r5, #0]
  max_accz = 0;
   d4ae2:	6023      	str	r3, [r4, #0]
  tp1ReadCounter = 0;
   d4ae4:	6013      	str	r3, [r2, #0]
  max_gyrx = 0;
   d4ae6:	4f20      	ldr	r7, [pc, #128]	; (d4b68 <_Z20computeSummaryReportv+0x250>)
  max_gyry = 0;
   d4ae8:	4e1e      	ldr	r6, [pc, #120]	; (d4b64 <_Z20computeSummaryReportv+0x24c>)
  max_gyrz = 0;
   d4aea:	4d1d      	ldr	r5, [pc, #116]	; (d4b60 <_Z20computeSummaryReportv+0x248>)
  max_fsr = 0;
   d4aec:	4c16      	ldr	r4, [pc, #88]	; (d4b48 <_Z20computeSummaryReportv+0x230>)
  tp2ReadCounter = 0;
   d4aee:	4a14      	ldr	r2, [pc, #80]	; (d4b40 <_Z20computeSummaryReportv+0x228>)
  max_gyrx = 0;
   d4af0:	603b      	str	r3, [r7, #0]
  max_gyry = 0;
   d4af2:	6033      	str	r3, [r6, #0]
  max_gyrz = 0;
   d4af4:	602b      	str	r3, [r5, #0]
  max_fsr = 0;
   d4af6:	6023      	str	r3, [r4, #0]
  max_mic = 0;
   d4af8:	600b      	str	r3, [r1, #0]
  tp2ReadCounter = 0;
   d4afa:	6013      	str	r3, [r2, #0]
  fsrReadCounter = 0;
   d4afc:	6003      	str	r3, [r0, #0]
}
   d4afe:	b01f      	add	sp, #124	; 0x7c
   d4b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b04:	f3af 8000 	nop.w
   d4b08:	d2c10294 	.word	0xd2c10294
   d4b0c:	3f5263af 	.word	0x3f5263af
   d4b10:	2003e394 	.word	0x2003e394
   d4b14:	2003e478 	.word	0x2003e478
   d4b18:	2003e49c 	.word	0x2003e49c
   d4b1c:	2003e480 	.word	0x2003e480
   d4b20:	2003e48c 	.word	0x2003e48c
   d4b24:	2003e490 	.word	0x2003e490
   d4b28:	2003e498 	.word	0x2003e498
   d4b2c:	2003e494 	.word	0x2003e494
   d4b30:	2003e484 	.word	0x2003e484
   d4b34:	2003e3a4 	.word	0x2003e3a4
   d4b38:	2003e39c 	.word	0x2003e39c
   d4b3c:	2003e4a4 	.word	0x2003e4a4
   d4b40:	2003e3a8 	.word	0x2003e3a8
   d4b44:	2003e538 	.word	0x2003e538
   d4b48:	2003e528 	.word	0x2003e528
   d4b4c:	40080000 	.word	0x40080000
   d4b50:	3ff20000 	.word	0x3ff20000
   d4b54:	40590000 	.word	0x40590000
   d4b58:	2003e4f0 	.word	0x2003e4f0
   d4b5c:	2003e558 	.word	0x2003e558
   d4b60:	2003e534 	.word	0x2003e534
   d4b64:	2003e530 	.word	0x2003e530
   d4b68:	2003e52c 	.word	0x2003e52c
   d4b6c:	2003e520 	.word	0x2003e520
   d4b70:	2003e51c 	.word	0x2003e51c
   d4b74:	2003e518 	.word	0x2003e518
   d4b78:	2003e548 	.word	0x2003e548
   d4b7c:	2003e544 	.word	0x2003e544
   d4b80:	000d9934 	.word	0x000d9934
   d4b84:	2003e570 	.word	0x2003e570
   d4b88:	2003e4a0 	.word	0x2003e4a0
   d4b8c:	2003e47c 	.word	0x2003e47c
   d4b90:	2003e4a8 	.word	0x2003e4a8
   d4b94:	2003e488 	.word	0x2003e488

000d4b98 <_Z17updateSummaryValsPi>:


void updateSummaryVals(int summaryArray[10]){
  avg_tc1 = avg_tc1 + summaryArray[0];
   d4b98:	4a32      	ldr	r2, [pc, #200]	; (d4c64 <_Z17updateSummaryValsPi+0xcc>)
   d4b9a:	6803      	ldr	r3, [r0, #0]
   d4b9c:	6811      	ldr	r1, [r2, #0]
   d4b9e:	440b      	add	r3, r1
   d4ba0:	6013      	str	r3, [r2, #0]
  if(summaryArray[0] > max_tc1){
   d4ba2:	4b31      	ldr	r3, [pc, #196]	; (d4c68 <_Z17updateSummaryValsPi+0xd0>)
   d4ba4:	6802      	ldr	r2, [r0, #0]
   d4ba6:	6819      	ldr	r1, [r3, #0]
   d4ba8:	428a      	cmp	r2, r1
    max_tc1 = summaryArray[0];
  }
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4baa:	4930      	ldr	r1, [pc, #192]	; (d4c6c <_Z17updateSummaryValsPi+0xd4>)
    max_tc1 = summaryArray[0];
   d4bac:	bfc8      	it	gt
   d4bae:	601a      	strgt	r2, [r3, #0]
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4bb0:	680a      	ldr	r2, [r1, #0]
   d4bb2:	6843      	ldr	r3, [r0, #4]
   d4bb4:	441a      	add	r2, r3
   d4bb6:	600a      	str	r2, [r1, #0]
  if(summaryArray[1] > max_tc2){
   d4bb8:	4a2d      	ldr	r2, [pc, #180]	; (d4c70 <_Z17updateSummaryValsPi+0xd8>)
   d4bba:	6811      	ldr	r1, [r2, #0]
   d4bbc:	428b      	cmp	r3, r1
    max_tc2 = summaryArray[1];
  }
  avg_accx = avg_accx + summaryArray[2];
   d4bbe:	492d      	ldr	r1, [pc, #180]	; (d4c74 <_Z17updateSummaryValsPi+0xdc>)
    max_tc2 = summaryArray[1];
   d4bc0:	bfc8      	it	gt
   d4bc2:	6013      	strgt	r3, [r2, #0]
  avg_accx = avg_accx + summaryArray[2];
   d4bc4:	680a      	ldr	r2, [r1, #0]
   d4bc6:	6883      	ldr	r3, [r0, #8]
   d4bc8:	441a      	add	r2, r3
   d4bca:	600a      	str	r2, [r1, #0]
  if(summaryArray[2] > max_accx){
   d4bcc:	4a2a      	ldr	r2, [pc, #168]	; (d4c78 <_Z17updateSummaryValsPi+0xe0>)
   d4bce:	6811      	ldr	r1, [r2, #0]
   d4bd0:	428b      	cmp	r3, r1
    max_accx = summaryArray[2];
  }
  avg_accy = avg_accy + summaryArray[3];
   d4bd2:	492a      	ldr	r1, [pc, #168]	; (d4c7c <_Z17updateSummaryValsPi+0xe4>)
    max_accx = summaryArray[2];
   d4bd4:	bfc8      	it	gt
   d4bd6:	6013      	strgt	r3, [r2, #0]
  avg_accy = avg_accy + summaryArray[3];
   d4bd8:	680a      	ldr	r2, [r1, #0]
   d4bda:	68c3      	ldr	r3, [r0, #12]
   d4bdc:	441a      	add	r2, r3
   d4bde:	600a      	str	r2, [r1, #0]
  if(summaryArray[3] > max_accy){
   d4be0:	4a27      	ldr	r2, [pc, #156]	; (d4c80 <_Z17updateSummaryValsPi+0xe8>)
   d4be2:	6811      	ldr	r1, [r2, #0]
   d4be4:	428b      	cmp	r3, r1
    max_accy = summaryArray[3];
  }
  avg_accz = avg_accz + summaryArray[4];
   d4be6:	4927      	ldr	r1, [pc, #156]	; (d4c84 <_Z17updateSummaryValsPi+0xec>)
    max_accy = summaryArray[3];
   d4be8:	bfc8      	it	gt
   d4bea:	6013      	strgt	r3, [r2, #0]
  avg_accz = avg_accz + summaryArray[4];
   d4bec:	6903      	ldr	r3, [r0, #16]
   d4bee:	680a      	ldr	r2, [r1, #0]
   d4bf0:	441a      	add	r2, r3
   d4bf2:	600a      	str	r2, [r1, #0]
  if(summaryArray[4] > max_accz){
   d4bf4:	4a24      	ldr	r2, [pc, #144]	; (d4c88 <_Z17updateSummaryValsPi+0xf0>)
   d4bf6:	6811      	ldr	r1, [r2, #0]
   d4bf8:	428b      	cmp	r3, r1
    max_accz = summaryArray[4];
  }
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4bfa:	4924      	ldr	r1, [pc, #144]	; (d4c8c <_Z17updateSummaryValsPi+0xf4>)
    max_accz = summaryArray[4];
   d4bfc:	bfc8      	it	gt
   d4bfe:	6013      	strgt	r3, [r2, #0]
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4c00:	6943      	ldr	r3, [r0, #20]
   d4c02:	680a      	ldr	r2, [r1, #0]
   d4c04:	441a      	add	r2, r3
   d4c06:	600a      	str	r2, [r1, #0]
  if(summaryArray[5] > max_gyrx){
   d4c08:	4a21      	ldr	r2, [pc, #132]	; (d4c90 <_Z17updateSummaryValsPi+0xf8>)
   d4c0a:	6811      	ldr	r1, [r2, #0]
   d4c0c:	428b      	cmp	r3, r1
    max_gyrx = summaryArray[5];
  }
  avg_gyry = avg_gyry + summaryArray[6];
   d4c0e:	4921      	ldr	r1, [pc, #132]	; (d4c94 <_Z17updateSummaryValsPi+0xfc>)
    max_gyrx = summaryArray[5];
   d4c10:	bfc8      	it	gt
   d4c12:	6013      	strgt	r3, [r2, #0]
  avg_gyry = avg_gyry + summaryArray[6];
   d4c14:	6983      	ldr	r3, [r0, #24]
   d4c16:	680a      	ldr	r2, [r1, #0]
   d4c18:	441a      	add	r2, r3
   d4c1a:	600a      	str	r2, [r1, #0]
  if(summaryArray[6] > max_gyry){
   d4c1c:	4a1e      	ldr	r2, [pc, #120]	; (d4c98 <_Z17updateSummaryValsPi+0x100>)
   d4c1e:	6811      	ldr	r1, [r2, #0]
   d4c20:	428b      	cmp	r3, r1
    max_gyry = summaryArray[6];
  }
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4c22:	491e      	ldr	r1, [pc, #120]	; (d4c9c <_Z17updateSummaryValsPi+0x104>)
    max_gyry = summaryArray[6];
   d4c24:	bfc8      	it	gt
   d4c26:	6013      	strgt	r3, [r2, #0]
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4c28:	680a      	ldr	r2, [r1, #0]
   d4c2a:	69c3      	ldr	r3, [r0, #28]
   d4c2c:	441a      	add	r2, r3
   d4c2e:	600a      	str	r2, [r1, #0]
  if(summaryArray[7] > max_gyrz){
   d4c30:	4a1b      	ldr	r2, [pc, #108]	; (d4ca0 <_Z17updateSummaryValsPi+0x108>)
   d4c32:	6811      	ldr	r1, [r2, #0]
   d4c34:	428b      	cmp	r3, r1
    max_gyrz = summaryArray[7];
  }
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4c36:	491b      	ldr	r1, [pc, #108]	; (d4ca4 <_Z17updateSummaryValsPi+0x10c>)
    max_gyrz = summaryArray[7];
   d4c38:	bfc8      	it	gt
   d4c3a:	6013      	strgt	r3, [r2, #0]
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4c3c:	6a03      	ldr	r3, [r0, #32]
   d4c3e:	680a      	ldr	r2, [r1, #0]
   d4c40:	441a      	add	r2, r3
   d4c42:	600a      	str	r2, [r1, #0]
  if(summaryArray[8] > max_brdtemp){
   d4c44:	4a18      	ldr	r2, [pc, #96]	; (d4ca8 <_Z17updateSummaryValsPi+0x110>)
   d4c46:	6811      	ldr	r1, [r2, #0]
   d4c48:	428b      	cmp	r3, r1
    max_brdtemp = summaryArray[8];
  }
  avg_mic = avg_mic + summaryArray[9];
   d4c4a:	4918      	ldr	r1, [pc, #96]	; (d4cac <_Z17updateSummaryValsPi+0x114>)
    max_brdtemp = summaryArray[8];
   d4c4c:	bfc8      	it	gt
   d4c4e:	6013      	strgt	r3, [r2, #0]
  avg_mic = avg_mic + summaryArray[9];
   d4c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4c52:	680a      	ldr	r2, [r1, #0]
   d4c54:	441a      	add	r2, r3
   d4c56:	600a      	str	r2, [r1, #0]
  if(summaryArray[9] > max_mic){
   d4c58:	4a15      	ldr	r2, [pc, #84]	; (d4cb0 <_Z17updateSummaryValsPi+0x118>)
   d4c5a:	6811      	ldr	r1, [r2, #0]
   d4c5c:	428b      	cmp	r3, r1
    max_mic = summaryArray[9];
   d4c5e:	bfc8      	it	gt
   d4c60:	6013      	strgt	r3, [r2, #0]
  }
}
   d4c62:	4770      	bx	lr
   d4c64:	2003e49c 	.word	0x2003e49c
   d4c68:	2003e53c 	.word	0x2003e53c
   d4c6c:	2003e4a0 	.word	0x2003e4a0
   d4c70:	2003e540 	.word	0x2003e540
   d4c74:	2003e478 	.word	0x2003e478
   d4c78:	2003e518 	.word	0x2003e518
   d4c7c:	2003e47c 	.word	0x2003e47c
   d4c80:	2003e51c 	.word	0x2003e51c
   d4c84:	2003e480 	.word	0x2003e480
   d4c88:	2003e520 	.word	0x2003e520
   d4c8c:	2003e48c 	.word	0x2003e48c
   d4c90:	2003e52c 	.word	0x2003e52c
   d4c94:	2003e490 	.word	0x2003e490
   d4c98:	2003e530 	.word	0x2003e530
   d4c9c:	2003e494 	.word	0x2003e494
   d4ca0:	2003e534 	.word	0x2003e534
   d4ca4:	2003e484 	.word	0x2003e484
   d4ca8:	2003e524 	.word	0x2003e524
   d4cac:	2003e498 	.word	0x2003e498
   d4cb0:	2003e538 	.word	0x2003e538

000d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4cb4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4cb6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4cb8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4cba:	b17c      	cbz	r4, d4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4cbc:	6863      	ldr	r3, [r4, #4]
   d4cbe:	3b01      	subs	r3, #1
   d4cc0:	6063      	str	r3, [r4, #4]
   d4cc2:	b95b      	cbnz	r3, d4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4cc4:	6823      	ldr	r3, [r4, #0]
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	689b      	ldr	r3, [r3, #8]
   d4cca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ccc:	68a3      	ldr	r3, [r4, #8]
   d4cce:	3b01      	subs	r3, #1
   d4cd0:	60a3      	str	r3, [r4, #8]
   d4cd2:	b91b      	cbnz	r3, d4cdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4cd4:	6823      	ldr	r3, [r4, #0]
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	68db      	ldr	r3, [r3, #12]
   d4cda:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4cdc:	4628      	mov	r0, r5
   d4cde:	bd38      	pop	{r3, r4, r5, pc}

000d4ce0 <_GLOBAL__sub_I_reportTurnCounter>:

    sleepTimer = System.millis();  //Reset sleep timer

    return; //head back to main
  }
   d4ce0:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4ce2:	4b18      	ldr	r3, [pc, #96]	; (d4d44 <_GLOBAL__sub_I_reportTurnCounter+0x64>)
String eda1Report = "";
   d4ce4:	4d18      	ldr	r5, [pc, #96]	; (d4d48 <_GLOBAL__sub_I_reportTurnCounter+0x68>)
   d4ce6:	4e19      	ldr	r6, [pc, #100]	; (d4d4c <_GLOBAL__sub_I_reportTurnCounter+0x6c>)
   d4ce8:	4c19      	ldr	r4, [pc, #100]	; (d4d50 <_GLOBAL__sub_I_reportTurnCounter+0x70>)
   d4cea:	2201      	movs	r2, #1
   d4cec:	701a      	strb	r2, [r3, #0]
   d4cee:	4629      	mov	r1, r5
   d4cf0:	4630      	mov	r0, r6
   d4cf2:	f002 f8e4 	bl	d6ebe <_ZN6StringC1EPKc>
   d4cf6:	4630      	mov	r0, r6
String eda2Report = "";
   d4cf8:	4e16      	ldr	r6, [pc, #88]	; (d4d54 <_GLOBAL__sub_I_reportTurnCounter+0x74>)
String eda1Report = "";
   d4cfa:	4a17      	ldr	r2, [pc, #92]	; (d4d58 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4cfc:	4621      	mov	r1, r4
   d4cfe:	f002 fefd 	bl	d7afc <__aeabi_atexit>
String eda2Report = "";
   d4d02:	4629      	mov	r1, r5
   d4d04:	4630      	mov	r0, r6
   d4d06:	f002 f8da 	bl	d6ebe <_ZN6StringC1EPKc>
   d4d0a:	4630      	mov	r0, r6
String summaryReport = "";
   d4d0c:	4e13      	ldr	r6, [pc, #76]	; (d4d5c <_GLOBAL__sub_I_reportTurnCounter+0x7c>)
String eda2Report = "";
   d4d0e:	4a12      	ldr	r2, [pc, #72]	; (d4d58 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4d10:	4621      	mov	r1, r4
   d4d12:	f002 fef3 	bl	d7afc <__aeabi_atexit>
String summaryReport = "";
   d4d16:	4629      	mov	r1, r5
   d4d18:	4630      	mov	r0, r6
   d4d1a:	f002 f8d0 	bl	d6ebe <_ZN6StringC1EPKc>
   d4d1e:	4621      	mov	r1, r4
   d4d20:	4a0d      	ldr	r2, [pc, #52]	; (d4d58 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4d22:	4630      	mov	r0, r6
   d4d24:	f002 feea 	bl	d7afc <__aeabi_atexit>
ICM_20948_I2C ICM;
   d4d28:	480d      	ldr	r0, [pc, #52]	; (d4d60 <_GLOBAL__sub_I_reportTurnCounter+0x80>)
   d4d2a:	f000 ffc9 	bl	d5cc0 <_ZN13ICM_20948_I2CC1Ev>
Adafruit_ADS1115 ads_other(0x48);
   d4d2e:	2148      	movs	r1, #72	; 0x48
   d4d30:	480c      	ldr	r0, [pc, #48]	; (d4d64 <_GLOBAL__sub_I_reportTurnCounter+0x84>)
   d4d32:	f000 fbf4 	bl	d551e <_ZN16Adafruit_ADS1115C1Eh>
   d4d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_ADS1115 ads_eda(0x49);
   d4d3a:	480b      	ldr	r0, [pc, #44]	; (d4d68 <_GLOBAL__sub_I_reportTurnCounter+0x88>)
   d4d3c:	2149      	movs	r1, #73	; 0x49
   d4d3e:	f000 bbee 	b.w	d551e <_ZN16Adafruit_ADS1115C1Eh>
   d4d42:	bf00      	nop
   d4d44:	2003e45c 	.word	0x2003e45c
   d4d48:	000d9b50 	.word	0x000d9b50
   d4d4c:	2003e4b4 	.word	0x2003e4b4
   d4d50:	000d6e29 	.word	0x000d6e29
   d4d54:	2003e4c4 	.word	0x2003e4c4
   d4d58:	2003e420 	.word	0x2003e420
   d4d5c:	2003e570 	.word	0x2003e570
   d4d60:	2003e424 	.word	0x2003e424
   d4d64:	2003e472 	.word	0x2003e472
   d4d68:	2003e46c 	.word	0x2003e46c

000d4d6c <_Z13initializeIMUv>:
void initializeIMU(){
   d4d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ICM.begin( Wire, AD0_VAL );
   d4d6e:	4d14      	ldr	r5, [pc, #80]	; (d4dc0 <_Z13initializeIMUv+0x54>)
    Serial.print( F("Initialization of the sensor returned: ") );
   d4d70:	4e14      	ldr	r6, [pc, #80]	; (d4dc4 <_Z13initializeIMUv+0x58>)
    Serial.println( ICM.statusString() );
   d4d72:	1d2f      	adds	r7, r5, #4
    ICM.begin( Wire, AD0_VAL );
   d4d74:	f002 fd2c 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d4d78:	23ff      	movs	r3, #255	; 0xff
   d4d7a:	2200      	movs	r2, #0
   d4d7c:	4601      	mov	r1, r0
   d4d7e:	4810      	ldr	r0, [pc, #64]	; (d4dc0 <_Z13initializeIMUv+0x54>)
   d4d80:	f001 f848 	bl	d5e14 <_ZN13ICM_20948_I2C5beginER7TwoWirebh>
    Serial.print( F("Initialization of the sensor returned: ") );
   d4d84:	f002 fb2e 	bl	d73e4 <_Z16_fetch_usbserialv>
   d4d88:	4631      	mov	r1, r6
   d4d8a:	f001 ffe2 	bl	d6d52 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println( ICM.statusString() );
   d4d8e:	f002 fb29 	bl	d73e4 <_Z16_fetch_usbserialv>
   d4d92:	2108      	movs	r1, #8
   d4d94:	4604      	mov	r4, r0
   d4d96:	4638      	mov	r0, r7
   d4d98:	f000 ff00 	bl	d5b9c <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>
   d4d9c:	4601      	mov	r1, r0
   d4d9e:	4620      	mov	r0, r4
   d4da0:	f001 ffe7 	bl	d6d72 <_ZN5Print7printlnEPKc>
    if( ICM.status != ICM_20948_Stat_Ok ){
   d4da4:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4da8:	b14b      	cbz	r3, d4dbe <_Z13initializeIMUv+0x52>
      Serial.println( "Trying again..." );
   d4daa:	f002 fb1b 	bl	d73e4 <_Z16_fetch_usbserialv>
   d4dae:	4906      	ldr	r1, [pc, #24]	; (d4dc8 <_Z13initializeIMUv+0x5c>)
   d4db0:	f001 ffdf 	bl	d6d72 <_ZN5Print7printlnEPKc>
      delay(500);
   d4db4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4db8:	f001 fac2 	bl	d6340 <delay>
   d4dbc:	e7da      	b.n	d4d74 <_Z13initializeIMUv+0x8>
}
   d4dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4dc0:	2003e424 	.word	0x2003e424
   d4dc4:	000d9b29 	.word	0x000d9b29
   d4dc8:	000d9b51 	.word	0x000d9b51

000d4dcc <setup>:
void setup() {
   d4dcc:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(115200);
   d4dce:	f002 fb09 	bl	d73e4 <_Z16_fetch_usbserialv>
   d4dd2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4dd6:	f002 faf9 	bl	d73cc <_ZN9USBSerial5beginEl>
  Wire.begin();
   d4dda:	f002 fcf9 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d4dde:	f001 fe21 	bl	d6a24 <_ZN7TwoWire5beginEv>
  Wire.setClock(400000);  //The IMU is capped at the 400khz level
   d4de2:	f002 fcf5 	bl	d77d0 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4de6:	493c      	ldr	r1, [pc, #240]	; (d4ed8 <setup+0x10c>)
  ads_other.setGain(GAIN_TWOTHIRDS);  
   d4de8:	4d3c      	ldr	r5, [pc, #240]	; (d4edc <setup+0x110>)
  ads_eda.setGain(GAIN_ONE);  
   d4dea:	4c3d      	ldr	r4, [pc, #244]	; (d4ee0 <setup+0x114>)
   d4dec:	f001 fe16 	bl	d6a1c <_ZN7TwoWire8setSpeedEm>
  pinMode(TC1,INPUT);  //Local temp compensation NTC thermistors from the thermopile assemblies
   d4df0:	2100      	movs	r1, #0
   d4df2:	2012      	movs	r0, #18
   d4df4:	f002 fc80 	bl	d76f8 <pinMode>
  pinMode(TC2,INPUT);
   d4df8:	2100      	movs	r1, #0
   d4dfa:	2011      	movs	r0, #17
   d4dfc:	f002 fc7c 	bl	d76f8 <pinMode>
  pinMode(alert, INPUT);  //Device turns off when there's no EDA activity
   d4e00:	2100      	movs	r1, #0
   d4e02:	2006      	movs	r0, #6
   d4e04:	f002 fc78 	bl	d76f8 <pinMode>
  pinMode(MIC, INPUT);  //Measure ambient noise level
   d4e08:	2100      	movs	r1, #0
   d4e0a:	2010      	movs	r0, #16
   d4e0c:	f002 fc74 	bl	d76f8 <pinMode>
  pinMode(eda1_out,OUTPUT);  //To send voltage out into the hand
   d4e10:	2101      	movs	r1, #1
   d4e12:	2005      	movs	r0, #5
   d4e14:	f002 fc70 	bl	d76f8 <pinMode>
  pinMode(eda2_out,OUTPUT);
   d4e18:	2101      	movs	r1, #1
   d4e1a:	2004      	movs	r0, #4
   d4e1c:	f002 fc6c 	bl	d76f8 <pinMode>
  pinMode(led_on,OUTPUT);  //To turn the pulse LED on
   d4e20:	2101      	movs	r1, #1
   d4e22:	2013      	movs	r0, #19
   d4e24:	f002 fc68 	bl	d76f8 <pinMode>
  pinMode(slp,OUTPUT);  //To turn off much of the board functionality when not in use
   d4e28:	2101      	movs	r1, #1
   d4e2a:	2008      	movs	r0, #8
   d4e2c:	f002 fc64 	bl	d76f8 <pinMode>
  pinMode(eda1_depol, OUTPUT); // To depolarize the eda1 electrodes.  Not implemented in Rev3 due to PCB error.
   d4e30:	2101      	movs	r1, #1
   d4e32:	2002      	movs	r0, #2
   d4e34:	f002 fc60 	bl	d76f8 <pinMode>
  pinMode(eda2_depol, OUTPUT);
   d4e38:	2101      	movs	r1, #1
   d4e3a:	2003      	movs	r0, #3
   d4e3c:	f002 fc5c 	bl	d76f8 <pinMode>
  digitalWrite(eda1_depol,LOW);  //Not implemented in Rev3 so pull low for safety
   d4e40:	2100      	movs	r1, #0
   d4e42:	2002      	movs	r0, #2
   d4e44:	f002 fc69 	bl	d771a <digitalWrite>
  digitalWrite(eda2_depol,LOW);
   d4e48:	2100      	movs	r1, #0
   d4e4a:	2003      	movs	r0, #3
   d4e4c:	f002 fc65 	bl	d771a <digitalWrite>
  digitalWrite(eda1_out,HIGH);  //On constant for now, later only have this on sometimes to prevent shorts
   d4e50:	2101      	movs	r1, #1
   d4e52:	2005      	movs	r0, #5
   d4e54:	f002 fc61 	bl	d771a <digitalWrite>
  digitalWrite(eda2_out,HIGH);
   d4e58:	2101      	movs	r1, #1
   d4e5a:	2004      	movs	r0, #4
   d4e5c:	f002 fc5d 	bl	d771a <digitalWrite>
  digitalWrite(slp, HIGH);  //Start with board awake
   d4e60:	2101      	movs	r1, #1
   d4e62:	2008      	movs	r0, #8
   d4e64:	f002 fc59 	bl	d771a <digitalWrite>
  delay(100);
   d4e68:	2064      	movs	r0, #100	; 0x64
   d4e6a:	f001 fa69 	bl	d6340 <delay>
  initializeIMU();
   d4e6e:	f7ff ff7d 	bl	d4d6c <_Z13initializeIMUv>
  ads_other.setGain(GAIN_TWOTHIRDS);  
   d4e72:	2100      	movs	r1, #0
   d4e74:	4628      	mov	r0, r5
   d4e76:	f000 fb60 	bl	d553a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_eda.setGain(GAIN_ONE);  
   d4e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4e7e:	4620      	mov	r0, r4
   d4e80:	f000 fb5b 	bl	d553a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_other.begin();
   d4e84:	4628      	mov	r0, r5
   d4e86:	f000 fb51 	bl	d552c <_ZN16Adafruit_ADS10155beginEv>
  ads_eda.begin();
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	f000 fb4e 	bl	d552c <_ZN16Adafruit_ADS10155beginEv>
  digitalWrite(led_on,HIGH);  //For now this is on all the time.  Doesn't seem to work well with the library if partially off.
   d4e90:	2101      	movs	r1, #1
   d4e92:	2013      	movs	r0, #19
   d4e94:	f002 fc41 	bl	d771a <digitalWrite>
  PulseSensorAmped.attach(PULSE_SIGNAL_PIN);
   d4e98:	210f      	movs	r1, #15
   d4e9a:	4812      	ldr	r0, [pc, #72]	; (d4ee4 <setup+0x118>)
   d4e9c:	f000 fc00 	bl	d56a0 <_ZN21PulseSensorAmpedClass6attachEi>
  PulseSensorAmped.start();  //Start reading heart beats
   d4ea0:	4810      	ldr	r0, [pc, #64]	; (d4ee4 <setup+0x118>)
   d4ea2:	f000 fc05 	bl	d56b0 <_ZN21PulseSensorAmpedClass5startEv>
  delay(100);
   d4ea6:	2064      	movs	r0, #100	; 0x64
   d4ea8:	f001 fa4a 	bl	d6340 <delay>
  reportTimer = System.millis();  //Timer to avoid sending reports more than once per second (Particle cap)
   d4eac:	f7ff fcbc 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4eb0:	4b0d      	ldr	r3, [pc, #52]	; (d4ee8 <setup+0x11c>)
   d4eb2:	e9c3 0100 	strd	r0, r1, [r3]
  edaReadTimer = System.millis();  //Timer to rate limit EDA readings to the Particle publishing size cap (622 bytes)
   d4eb6:	f7ff fcb7 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4eba:	4b0c      	ldr	r3, [pc, #48]	; (d4eec <setup+0x120>)
   d4ebc:	e9c3 0100 	strd	r0, r1, [r3]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4ec0:	f000 fff6 	bl	d5eb0 <HAL_Timer_Get_Micro_Seconds>
  otherReadTimer = micros();  //Timer to rate limit the other ADS signals to the max rate of the ADS1115
   d4ec4:	4b0a      	ldr	r3, [pc, #40]	; (d4ef0 <setup+0x124>)
   d4ec6:	2200      	movs	r2, #0
   d4ec8:	6018      	str	r0, [r3, #0]
   d4eca:	605a      	str	r2, [r3, #4]
  sleepTimer = System.millis();  //Timer to figure out when the device isn't being used and go to sleep
   d4ecc:	f7ff fcac 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4ed0:	4b08      	ldr	r3, [pc, #32]	; (d4ef4 <setup+0x128>)
   d4ed2:	e9c3 0100 	strd	r0, r1, [r3]
}
   d4ed6:	bd38      	pop	{r3, r4, r5, pc}
   d4ed8:	00061a80 	.word	0x00061a80
   d4edc:	2003e472 	.word	0x2003e472
   d4ee0:	2003e46c 	.word	0x2003e46c
   d4ee4:	2003e590 	.word	0x2003e590
   d4ee8:	2003e560 	.word	0x2003e560
   d4eec:	2003e4d8 	.word	0x2003e4d8
   d4ef0:	2003e550 	.word	0x2003e550
   d4ef4:	2003e568 	.word	0x2003e568

000d4ef8 <_Z9gotoSleepv>:
void gotoSleep(){
   d4ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4efc:	b08d      	sub	sp, #52	; 0x34
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4efe:	2500      	movs	r5, #0
        : config_(config) {
   d4f00:	ab07      	add	r3, sp, #28
              valid_(true) {
   d4f02:	f04f 0801 	mov.w	r8, #1
        config_.size = sizeof(hal_sleep_config_t);
   d4f06:	f8df 917c 	ldr.w	r9, [pc, #380]	; d5084 <_Z9gotoSleepv+0x18c>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4f0a:	495d      	ldr	r1, [pc, #372]	; (d5080 <_Z9gotoSleepv+0x188>)
        : config_(config) {
   d4f0c:	9306      	str	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4f0e:	2010      	movs	r0, #16
        config_.wakeup_sources = nullptr;
   d4f10:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
              valid_(true) {
   d4f14:	f8ad 5021 	strh.w	r5, [sp, #33]	; 0x21
   d4f18:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
   d4f1c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
        config_.size = sizeof(hal_sleep_config_t);
   d4f20:	f8cd 901c 	str.w	r9, [sp, #28]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4f24:	f88d 8020 	strb.w	r8, [sp, #32]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4f28:	f002 fdef 	bl	d7b0a <_ZnwjRKSt9nothrow_t>
   d4f2c:	4604      	mov	r4, r0
   d4f2e:	2800      	cmp	r0, #0
   d4f30:	f000 809b 	beq.w	d506a <_Z9gotoSleepv+0x172>
   d4f34:	2210      	movs	r2, #16
   d4f36:	4629      	mov	r1, r5
   d4f38:	f004 fc64 	bl	d9804 <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   d4f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f3e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4f40:	2306      	movs	r3, #6
   d4f42:	81a3      	strh	r3, [r4, #12]
            wakeupSource->mode = mode;
   d4f44:	2302      	movs	r3, #2
   d4f46:	73a3      	strb	r3, [r4, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4f48:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4f4c:	f8c4 9000 	str.w	r9, [r4]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4f50:	f8a4 8004 	strh.w	r8, [r4, #4]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4f54:	940a      	str	r4, [sp, #40]	; 0x28
        if (valid_) {
   d4f56:	b1e3      	cbz	r3, d4f92 <_Z9gotoSleepv+0x9a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4f58:	9b06      	ldr	r3, [sp, #24]
   d4f5a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4f5c:	b12b      	cbz	r3, d4f6a <_Z9gotoSleepv+0x72>
            if (start->type == type) {
   d4f5e:	889a      	ldrh	r2, [r3, #4]
   d4f60:	2a04      	cmp	r2, #4
   d4f62:	f000 8086 	beq.w	d5072 <_Z9gotoSleepv+0x17a>
            start = start->next;
   d4f66:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4f68:	e7f8      	b.n	d4f5c <_Z9gotoSleepv+0x64>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4f6a:	4945      	ldr	r1, [pc, #276]	; (d5080 <_Z9gotoSleepv+0x188>)
   d4f6c:	2010      	movs	r0, #16
   d4f6e:	f002 fdcc 	bl	d7b0a <_ZnwjRKSt9nothrow_t>
   d4f72:	4604      	mov	r4, r0
   d4f74:	2800      	cmp	r0, #0
   d4f76:	d078      	beq.n	d506a <_Z9gotoSleepv+0x172>
   d4f78:	2210      	movs	r2, #16
   d4f7a:	2100      	movs	r1, #0
   d4f7c:	f004 fc42 	bl	d9804 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4f80:	4b40      	ldr	r3, [pc, #256]	; (d5084 <_Z9gotoSleepv+0x18c>)
   d4f82:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4f84:	2304      	movs	r3, #4
   d4f86:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f8a:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d4f8c:	4b3e      	ldr	r3, [pc, #248]	; (d5088 <_Z9gotoSleepv+0x190>)
   d4f8e:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4f90:	940a      	str	r4, [sp, #40]	; 0x28
  PulseSensorAmped.stop();  //Stop reading heart beats 
   d4f92:	483e      	ldr	r0, [pc, #248]	; (d508c <_Z9gotoSleepv+0x194>)
    if((System.millis() - reportTimer) >= 1001){  //If it's safe to do so, shoot off a battery report
   d4f94:	4c3e      	ldr	r4, [pc, #248]	; (d5090 <_Z9gotoSleepv+0x198>)
      summaryReport = "";
   d4f96:	4d3f      	ldr	r5, [pc, #252]	; (d5094 <_Z9gotoSleepv+0x19c>)
  PulseSensorAmped.stop();  //Stop reading heart beats 
   d4f98:	f000 fbaa 	bl	d56f0 <_ZN21PulseSensorAmpedClass4stopEv>
  digitalWrite(slp, LOW);  //Turn most of the board off
   d4f9c:	2100      	movs	r1, #0
   d4f9e:	2008      	movs	r0, #8
   d4fa0:	f002 fbbb 	bl	d771a <digitalWrite>
  digitalWrite(led_on, LOW);  //Turn the pulse sensor off
   d4fa4:	2100      	movs	r1, #0
   d4fa6:	2013      	movs	r0, #19
   d4fa8:	f002 fbb7 	bl	d771a <digitalWrite>
  ads_eda.startComparator_SingleEnded(0,100);  //Set up the alert pin to notify when the device is being used
   d4fac:	483a      	ldr	r0, [pc, #232]	; (d5098 <_Z9gotoSleepv+0x1a0>)
   d4fae:	2264      	movs	r2, #100	; 0x64
   d4fb0:	2100      	movs	r1, #0
   d4fb2:	f000 fb0a 	bl	d55ca <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs>
    if((System.millis() - reportTimer) >= 1001){  //If it's safe to do so, shoot off a battery report
   d4fb6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d4fba:	f04f 0900 	mov.w	r9, #0
    System.sleep(config);  //Put the Argon to sleep
   d4fbe:	a803      	add	r0, sp, #12
   d4fc0:	a906      	add	r1, sp, #24
   d4fc2:	f002 f8a7 	bl	d7114 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4fc6:	9803      	ldr	r0, [sp, #12]
   d4fc8:	b108      	cbz	r0, d4fce <_Z9gotoSleepv+0xd6>
            free(wakeupSource_);
   d4fca:	f001 f981 	bl	d62d0 <free>
    if((System.millis() - reportTimer) >= 1001){  //If it's safe to do so, shoot off a battery report
   d4fce:	f7ff fc2b 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4fd2:	e9d4 3200 	ldrd	r3, r2, [r4]
   d4fd6:	1ac6      	subs	r6, r0, r3
   d4fd8:	eb61 0702 	sbc.w	r7, r1, r2
   d4fdc:	45b9      	cmp	r9, r7
   d4fde:	bf08      	it	eq
   d4fe0:	45b0      	cmpeq	r8, r6
   d4fe2:	d21a      	bcs.n	d501a <_Z9gotoSleepv+0x122>
      reportTimer = System.millis();
   d4fe4:	f7ff fc20 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4fe8:	e9c4 0100 	strd	r0, r1, [r4]
      computeSummaryReport();
   d4fec:	f7ff fc94 	bl	d4918 <_Z20computeSummaryReportv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ff0:	f001 f8fe 	bl	d61f0 <spark_cloud_flag_connected>
      if(Particle.connected()){
   d4ff4:	b168      	cbz	r0, d5012 <_Z9gotoSleepv+0x11a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4ff6:	4b29      	ldr	r3, [pc, #164]	; (d509c <_Z9gotoSleepv+0x1a4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4ff8:	4a29      	ldr	r2, [pc, #164]	; (d50a0 <_Z9gotoSleepv+0x1a8>)
   d4ffa:	781b      	ldrb	r3, [r3, #0]
   d4ffc:	f88d 3000 	strb.w	r3, [sp]
   d5000:	a803      	add	r0, sp, #12
   d5002:	6812      	ldr	r2, [r2, #0]
   d5004:	4927      	ldr	r1, [pc, #156]	; (d50a4 <_Z9gotoSleepv+0x1ac>)
   d5006:	233c      	movs	r3, #60	; 0x3c
   d5008:	f001 fb16 	bl	d6638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d500c:	a804      	add	r0, sp, #16
   d500e:	f7ff fe51 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      summaryReport = "";
   d5012:	4823      	ldr	r0, [pc, #140]	; (d50a0 <_Z9gotoSleepv+0x1a8>)
   d5014:	4629      	mov	r1, r5
   d5016:	f001 ffa5 	bl	d6f64 <_ZN6StringaSEPKc>
    alert_flag = digitalRead(alert);  //Check to see if we're  awake
   d501a:	2006      	movs	r0, #6
   d501c:	f002 fb96 	bl	d774c <digitalRead>
    if (!alert_flag){  
   d5020:	2800      	cmp	r0, #0
   d5022:	d1cc      	bne.n	d4fbe <_Z9gotoSleepv+0xc6>
    digitalWrite(slp, HIGH);  //Turn the board back on
   d5024:	2101      	movs	r1, #1
   d5026:	2008      	movs	r0, #8
   d5028:	f002 fb77 	bl	d771a <digitalWrite>
    digitalWrite(led_on, HIGH);  //Turn the pulse sensor back on
   d502c:	2101      	movs	r1, #1
   d502e:	2013      	movs	r0, #19
   d5030:	f002 fb73 	bl	d771a <digitalWrite>
    delay(100);  //Let it wake up
   d5034:	2064      	movs	r0, #100	; 0x64
   d5036:	f001 f983 	bl	d6340 <delay>
    initializeIMU();
   d503a:	f7ff fe97 	bl	d4d6c <_Z13initializeIMUv>
    ads_other.begin();
   d503e:	481a      	ldr	r0, [pc, #104]	; (d50a8 <_Z9gotoSleepv+0x1b0>)
   d5040:	f000 fa74 	bl	d552c <_ZN16Adafruit_ADS10155beginEv>
    ads_eda.begin();
   d5044:	4814      	ldr	r0, [pc, #80]	; (d5098 <_Z9gotoSleepv+0x1a0>)
   d5046:	f000 fa71 	bl	d552c <_ZN16Adafruit_ADS10155beginEv>
    PulseSensorAmped.start();  //Start reading heart beats
   d504a:	4810      	ldr	r0, [pc, #64]	; (d508c <_Z9gotoSleepv+0x194>)
   d504c:	f000 fb30 	bl	d56b0 <_ZN21PulseSensorAmpedClass5startEv>
    sleepTimer = System.millis();  //Reset sleep timer
   d5050:	f7ff fbea 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5054:	4b15      	ldr	r3, [pc, #84]	; (d50ac <_Z9gotoSleepv+0x1b4>)
   d5056:	e9c3 0100 	strd	r0, r1, [r3]
        auto wakeupSource = config_.wakeup_sources;
   d505a:	980a      	ldr	r0, [sp, #40]	; 0x28
        while (wakeupSource) {
   d505c:	b160      	cbz	r0, d5078 <_Z9gotoSleepv+0x180>
            auto next = wakeupSource->next;
   d505e:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d5060:	210c      	movs	r1, #12
   d5062:	f002 fd50 	bl	d7b06 <_ZdlPvj>
            wakeupSource = next;
   d5066:	4620      	mov	r0, r4
        while (wakeupSource) {
   d5068:	e7f8      	b.n	d505c <_Z9gotoSleepv+0x164>
                valid_ = false;
   d506a:	2300      	movs	r3, #0
   d506c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                return *this;
   d5070:	e78f      	b.n	d4f92 <_Z9gotoSleepv+0x9a>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d5072:	4a05      	ldr	r2, [pc, #20]	; (d5088 <_Z9gotoSleepv+0x190>)
   d5074:	60da      	str	r2, [r3, #12]
                return *this;
   d5076:	e78c      	b.n	d4f92 <_Z9gotoSleepv+0x9a>
   d5078:	b00d      	add	sp, #52	; 0x34
   d507a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d507e:	bf00      	nop
   d5080:	000d9ddc 	.word	0x000d9ddc
   d5084:	00030010 	.word	0x00030010
   d5088:	000927c0 	.word	0x000927c0
   d508c:	2003e590 	.word	0x2003e590
   d5090:	2003e560 	.word	0x2003e560
   d5094:	000d9b50 	.word	0x000d9b50
   d5098:	2003e46c 	.word	0x2003e46c
   d509c:	2003e45c 	.word	0x2003e45c
   d50a0:	2003e570 	.word	0x2003e570
   d50a4:	000d9b61 	.word	0x000d9b61
   d50a8:	2003e472 	.word	0x2003e472
   d50ac:	2003e568 	.word	0x2003e568

000d50b0 <loop>:
void loop() {
   d50b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50b4:	ed2d 8b02 	vpush	{d8}
  if ((System.millis() - sleepTimer) > 15000){  //Go to sleep after 10s of non-use
   d50b8:	f8df 8370 	ldr.w	r8, [pc, #880]	; d542c <loop+0x37c>
void loop() {
   d50bc:	b093      	sub	sp, #76	; 0x4c
  if ((System.millis() - sleepTimer) > 15000){  //Go to sleep after 10s of non-use
   d50be:	f7ff fbb3 	bl	d4828 <_ZN11SystemClass6millisEv>
   d50c2:	e9d8 3200 	ldrd	r3, r2, [r8]
   d50c6:	ebb0 0a03 	subs.w	sl, r0, r3
   d50ca:	eb61 0b02 	sbc.w	fp, r1, r2
   d50ce:	2300      	movs	r3, #0
   d50d0:	f643 2298 	movw	r2, #15000	; 0x3a98
   d50d4:	455b      	cmp	r3, fp
   d50d6:	bf08      	it	eq
   d50d8:	4552      	cmpeq	r2, sl
   d50da:	d201      	bcs.n	d50e0 <loop+0x30>
    gotoSleep();
   d50dc:	f7ff ff0c 	bl	d4ef8 <_Z9gotoSleepv>
  if((edaTurnCounter == 1) && ((System.millis()-edaReadTimer) >= 20)){
   d50e0:	4bb0      	ldr	r3, [pc, #704]	; (d53a4 <loop+0x2f4>)
   d50e2:	781b      	ldrb	r3, [r3, #0]
   d50e4:	2b01      	cmp	r3, #1
   d50e6:	d136      	bne.n	d5156 <loop+0xa6>
   d50e8:	f8df 9344 	ldr.w	r9, [pc, #836]	; d5430 <loop+0x380>
   d50ec:	f7ff fb9c 	bl	d4828 <_ZN11SystemClass6millisEv>
   d50f0:	e9d9 3200 	ldrd	r3, r2, [r9]
   d50f4:	1ac6      	subs	r6, r0, r3
   d50f6:	eb61 0702 	sbc.w	r7, r1, r2
   d50fa:	2f00      	cmp	r7, #0
   d50fc:	bf08      	it	eq
   d50fe:	2e14      	cmpeq	r6, #20
   d5100:	d329      	bcc.n	d5156 <loop+0xa6>
    edaReadTimer = System.millis();
   d5102:	f7ff fb91 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5106:	e9c9 0100 	strd	r0, r1, [r9]
    eda1 = ads_eda.readADC_Differential_0_1();
   d510a:	48a7      	ldr	r0, [pc, #668]	; (d53a8 <loop+0x2f8>)
   d510c:	4ea7      	ldr	r6, [pc, #668]	; (d53ac <loop+0x2fc>)
   d510e:	f000 fa3f 	bl	d5590 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5112:	49a7      	ldr	r1, [pc, #668]	; (d53b0 <loop+0x300>)
   d5114:	6030      	str	r0, [r6, #0]
   d5116:	a808      	add	r0, sp, #32
   d5118:	f001 ff11 	bl	d6f3e <_ZN6StringC1ERKS_>
    eda1Report = eda1Report + String(eda1) + ' '; //EDA1
   d511c:	220a      	movs	r2, #10
   d511e:	6831      	ldr	r1, [r6, #0]
   d5120:	a804      	add	r0, sp, #16
   d5122:	f001 ff31 	bl	d6f88 <_ZN6StringC1Eih>
   d5126:	a904      	add	r1, sp, #16
   d5128:	a808      	add	r0, sp, #32
   d512a:	f001 ff64 	bl	d6ff6 <_ZplRK15StringSumHelperRK6String>
   d512e:	2120      	movs	r1, #32
   d5130:	f001 ff82 	bl	d7038 <_ZplRK15StringSumHelperc>
   d5134:	4601      	mov	r1, r0
   d5136:	489e      	ldr	r0, [pc, #632]	; (d53b0 <loop+0x300>)
   d5138:	f001 fef2 	bl	d6f20 <_ZN6StringaSERKS_>
   d513c:	a804      	add	r0, sp, #16
   d513e:	f001 fe73 	bl	d6e28 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d5142:	a808      	add	r0, sp, #32
   d5144:	f001 fe70 	bl	d6e28 <_ZN6StringD1Ev>
    if(eda1 > 100){  //If the device is being held, reset the sleep timer
   d5148:	6833      	ldr	r3, [r6, #0]
   d514a:	2b64      	cmp	r3, #100	; 0x64
   d514c:	dd03      	ble.n	d5156 <loop+0xa6>
      sleepTimer = System.millis();
   d514e:	f7ff fb6b 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5152:	e9c8 0100 	strd	r0, r1, [r8]
  tc1 = analogRead(TC1);
   d5156:	2012      	movs	r0, #18
   d5158:	f002 fb0b 	bl	d7772 <analogRead>
   d515c:	4a95      	ldr	r2, [pc, #596]	; (d53b4 <loop+0x304>)
  accx = ICM.accX()*100;
   d515e:	ed9f 8a96 	vldr	s16, [pc, #600]	; d53b8 <loop+0x308>
  tc1 = analogRead(TC1);
   d5162:	6010      	str	r0, [r2, #0]
  tc2 = analogRead(TC2);
   d5164:	2011      	movs	r0, #17
   d5166:	f002 fb04 	bl	d7772 <analogRead>
   d516a:	4b94      	ldr	r3, [pc, #592]	; (d53bc <loop+0x30c>)
  ICM.getAGMT();  // Update IMU Values
   d516c:	4994      	ldr	r1, [pc, #592]	; (d53c0 <loop+0x310>)
  tc2 = analogRead(TC2);
   d516e:	6018      	str	r0, [r3, #0]
  ICM.getAGMT();  // Update IMU Values
   d5170:	a808      	add	r0, sp, #32
   d5172:	f000 fc23 	bl	d59bc <_ZN9ICM_209487getAGMTEv>
  accx = ICM.accX()*100;
   d5176:	4892      	ldr	r0, [pc, #584]	; (d53c0 <loop+0x310>)
  accy = ICM.accY()*100;
   d5178:	f8df b2b8 	ldr.w	fp, [pc, #696]	; d5434 <loop+0x384>
  accz = ICM.accZ()*100;
   d517c:	f8df a2b8 	ldr.w	sl, [pc, #696]	; d5438 <loop+0x388>
  gyrx = ICM.gyrX()*100;
   d5180:	f8df 92b8 	ldr.w	r9, [pc, #696]	; d543c <loop+0x38c>
  gyry = ICM.gyrY()*100;
   d5184:	f8df 82b8 	ldr.w	r8, [pc, #696]	; d5440 <loop+0x390>
  gyrz = ICM.gyrZ()*100;
   d5188:	4f8e      	ldr	r7, [pc, #568]	; (d53c4 <loop+0x314>)
  brdtemp = ICM.temp()*100;
   d518a:	4e8f      	ldr	r6, [pc, #572]	; (d53c8 <loop+0x318>)
  accx = ICM.accX()*100;
   d518c:	f000 fc82 	bl	d5a94 <_ZN9ICM_209484accXEv>
   d5190:	ee20 0a08 	vmul.f32	s0, s0, s16
   d5194:	498d      	ldr	r1, [pc, #564]	; (d53cc <loop+0x31c>)
  accy = ICM.accY()*100;
   d5196:	488a      	ldr	r0, [pc, #552]	; (d53c0 <loop+0x310>)
  accx = ICM.accX()*100;
   d5198:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d519c:	ed81 0a00 	vstr	s0, [r1]
  accy = ICM.accY()*100;
   d51a0:	f000 fc7c 	bl	d5a9c <_ZN9ICM_209484accYEv>
   d51a4:	ee20 0a08 	vmul.f32	s0, s0, s16
  accz = ICM.accZ()*100;
   d51a8:	4885      	ldr	r0, [pc, #532]	; (d53c0 <loop+0x310>)
  accy = ICM.accY()*100;
   d51aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51ae:	ed8b 0a00 	vstr	s0, [fp]
  accz = ICM.accZ()*100;
   d51b2:	f000 fc77 	bl	d5aa4 <_ZN9ICM_209484accZEv>
   d51b6:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyrx = ICM.gyrX()*100;
   d51ba:	4881      	ldr	r0, [pc, #516]	; (d53c0 <loop+0x310>)
  accz = ICM.accZ()*100;
   d51bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51c0:	ed8a 0a00 	vstr	s0, [sl]
  gyrx = ICM.gyrX()*100;
   d51c4:	f000 fcba 	bl	d5b3c <_ZN9ICM_209484gyrXEv>
   d51c8:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyry = ICM.gyrY()*100;
   d51cc:	487c      	ldr	r0, [pc, #496]	; (d53c0 <loop+0x310>)
  gyrx = ICM.gyrX()*100;
   d51ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51d2:	ed89 0a00 	vstr	s0, [r9]
  gyry = ICM.gyrY()*100;
   d51d6:	f000 fcb5 	bl	d5b44 <_ZN9ICM_209484gyrYEv>
   d51da:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyrz = ICM.gyrZ()*100;
   d51de:	4878      	ldr	r0, [pc, #480]	; (d53c0 <loop+0x310>)
  gyry = ICM.gyrY()*100;
   d51e0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51e4:	ed88 0a00 	vstr	s0, [r8]
  gyrz = ICM.gyrZ()*100;
   d51e8:	f000 fcb0 	bl	d5b4c <_ZN9ICM_209484gyrZEv>
   d51ec:	ee20 0a08 	vmul.f32	s0, s0, s16
  brdtemp = ICM.temp()*100;
   d51f0:	4873      	ldr	r0, [pc, #460]	; (d53c0 <loop+0x310>)
  gyrz = ICM.gyrZ()*100;
   d51f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51f6:	ed87 0a00 	vstr	s0, [r7]
  brdtemp = ICM.temp()*100;
   d51fa:	f000 fcad 	bl	d5b58 <_ZN9ICM_209484tempEv>
   d51fe:	ee20 0a08 	vmul.f32	s0, s0, s16
  mic = analogRead(MIC);
   d5202:	2010      	movs	r0, #16
  brdtemp = ICM.temp()*100;
   d5204:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5208:	ed86 0a00 	vstr	s0, [r6]
  mic = analogRead(MIC);
   d520c:	f002 fab1 	bl	d7772 <analogRead>
  int summaryArray[10] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp, mic};
   d5210:	4b6a      	ldr	r3, [pc, #424]	; (d53bc <loop+0x30c>)
   d5212:	496e      	ldr	r1, [pc, #440]	; (d53cc <loop+0x31c>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	9309      	str	r3, [sp, #36]	; 0x24
   d5218:	680b      	ldr	r3, [r1, #0]
   d521a:	930a      	str	r3, [sp, #40]	; 0x28
   d521c:	f8db 3000 	ldr.w	r3, [fp]
   d5220:	930b      	str	r3, [sp, #44]	; 0x2c
   d5222:	f8da 3000 	ldr.w	r3, [sl]
   d5226:	930c      	str	r3, [sp, #48]	; 0x30
   d5228:	4a62      	ldr	r2, [pc, #392]	; (d53b4 <loop+0x304>)
   d522a:	f8d9 3000 	ldr.w	r3, [r9]
   d522e:	930d      	str	r3, [sp, #52]	; 0x34
   d5230:	f8d8 3000 	ldr.w	r3, [r8]
   d5234:	6812      	ldr	r2, [r2, #0]
   d5236:	930e      	str	r3, [sp, #56]	; 0x38
   d5238:	683b      	ldr	r3, [r7, #0]
   d523a:	9208      	str	r2, [sp, #32]
   d523c:	930f      	str	r3, [sp, #60]	; 0x3c
  baseReadCounter++;
   d523e:	4a64      	ldr	r2, [pc, #400]	; (d53d0 <loop+0x320>)
  int summaryArray[10] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp, mic};
   d5240:	6833      	ldr	r3, [r6, #0]
  mic = analogRead(MIC);
   d5242:	f8df c200 	ldr.w	ip, [pc, #512]	; d5444 <loop+0x394>
  if((micros() - otherReadTimer) > 4100){  //This is probably superfluous given our current loop time of ~5-10 ms
   d5246:	4e63      	ldr	r6, [pc, #396]	; (d53d4 <loop+0x324>)
  mic = analogRead(MIC);
   d5248:	f8cc 0000 	str.w	r0, [ip]
  int summaryArray[10] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp, mic};
   d524c:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
  baseReadCounter++;
   d5250:	6813      	ldr	r3, [r2, #0]
  updateSummaryVals(summaryArray);
   d5252:	a808      	add	r0, sp, #32
  baseReadCounter++;
   d5254:	3301      	adds	r3, #1
   d5256:	6013      	str	r3, [r2, #0]
  updateSummaryVals(summaryArray);
   d5258:	f7ff fc9e 	bl	d4b98 <_Z17updateSummaryValsPi>
  PulseSensorAmped.process();
   d525c:	485e      	ldr	r0, [pc, #376]	; (d53d8 <loop+0x328>)
   d525e:	f000 fb3d 	bl	d58dc <_ZN21PulseSensorAmpedClass7processEv>
   d5262:	f000 fe25 	bl	d5eb0 <HAL_Timer_Get_Micro_Seconds>
  if((micros() - otherReadTimer) > 4100){  //This is probably superfluous given our current loop time of ~5-10 ms
   d5266:	e9d6 3200 	ldrd	r3, r2, [r6]
   d526a:	1ac4      	subs	r4, r0, r3
   d526c:	eb62 0542 	sbc.w	r5, r2, r2, lsl #1
   d5270:	2300      	movs	r3, #0
   d5272:	f241 0204 	movw	r2, #4100	; 0x1004
   d5276:	42ab      	cmp	r3, r5
   d5278:	bf08      	it	eq
   d527a:	42a2      	cmpeq	r2, r4
   d527c:	d220      	bcs.n	d52c0 <loop+0x210>
    switch (readTurnCounter){ //Take turns reading from each line
   d527e:	4c57      	ldr	r4, [pc, #348]	; (d53dc <loop+0x32c>)
   d5280:	f000 fe16 	bl	d5eb0 <HAL_Timer_Get_Micro_Seconds>
   d5284:	7823      	ldrb	r3, [r4, #0]
    otherReadTimer = micros();
   d5286:	2100      	movs	r1, #0
    switch (readTurnCounter){ //Take turns reading from each line
   d5288:	2b02      	cmp	r3, #2
    otherReadTimer = micros();
   d528a:	e9c6 0100 	strd	r0, r1, [r6]
    switch (readTurnCounter){ //Take turns reading from each line
   d528e:	d03c      	beq.n	d530a <loop+0x25a>
   d5290:	2b03      	cmp	r3, #3
   d5292:	d04b      	beq.n	d532c <loop+0x27c>
   d5294:	2b01      	cmp	r3, #1
   d5296:	d113      	bne.n	d52c0 <loop+0x210>
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d5298:	4851      	ldr	r0, [pc, #324]	; (d53e0 <loop+0x330>)
   d529a:	f000 f950 	bl	d553e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp1 = avg_tp1 + tp1;
   d529e:	4a51      	ldr	r2, [pc, #324]	; (d53e4 <loop+0x334>)
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d52a0:	4b51      	ldr	r3, [pc, #324]	; (d53e8 <loop+0x338>)
   d52a2:	6018      	str	r0, [r3, #0]
        avg_tp1 = avg_tp1 + tp1;
   d52a4:	6813      	ldr	r3, [r2, #0]
   d52a6:	4403      	add	r3, r0
   d52a8:	6013      	str	r3, [r2, #0]
        if(tp1 > max_tp1){
   d52aa:	4b50      	ldr	r3, [pc, #320]	; (d53ec <loop+0x33c>)
   d52ac:	681a      	ldr	r2, [r3, #0]
   d52ae:	4290      	cmp	r0, r2
        tp1ReadCounter++;
   d52b0:	4a4f      	ldr	r2, [pc, #316]	; (d53f0 <loop+0x340>)
          max_tp1 = tp1;
   d52b2:	bfc8      	it	gt
   d52b4:	6018      	strgt	r0, [r3, #0]
        tp2ReadCounter++;
   d52b6:	6813      	ldr	r3, [r2, #0]
   d52b8:	3301      	adds	r3, #1
   d52ba:	6013      	str	r3, [r2, #0]
        readTurnCounter = 3;
   d52bc:	2303      	movs	r3, #3
        readTurnCounter = 1;
   d52be:	7023      	strb	r3, [r4, #0]
  if((System.millis() - reportTimer) >= 1001){
   d52c0:	4c4c      	ldr	r4, [pc, #304]	; (d53f4 <loop+0x344>)
   d52c2:	f7ff fab1 	bl	d4828 <_ZN11SystemClass6millisEv>
   d52c6:	e9d4 3200 	ldrd	r3, r2, [r4]
   d52ca:	1ac3      	subs	r3, r0, r3
   d52cc:	9302      	str	r3, [sp, #8]
   d52ce:	eb61 0302 	sbc.w	r3, r1, r2
   d52d2:	9303      	str	r3, [sp, #12]
   d52d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d52d8:	2300      	movs	r3, #0
   d52da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52de:	428b      	cmp	r3, r1
   d52e0:	bf08      	it	eq
   d52e2:	4282      	cmpeq	r2, r0
   d52e4:	d20a      	bcs.n	d52fc <loop+0x24c>
    reportTimer = System.millis();
   d52e6:	f7ff fa9f 	bl	d4828 <_ZN11SystemClass6millisEv>
   d52ea:	e9c4 0100 	strd	r0, r1, [r4]
    switch (reportTurnCounter){
   d52ee:	4c42      	ldr	r4, [pc, #264]	; (d53f8 <loop+0x348>)
   d52f0:	7823      	ldrb	r3, [r4, #0]
   d52f2:	2b01      	cmp	r3, #1
   d52f4:	d02f      	beq.n	d5356 <loop+0x2a6>
   d52f6:	2b03      	cmp	r3, #3
   d52f8:	f000 80a6 	beq.w	d5448 <loop+0x398>
   d52fc:	f000 fdd8 	bl	d5eb0 <HAL_Timer_Get_Micro_Seconds>
}
   d5300:	b013      	add	sp, #76	; 0x4c
   d5302:	ecbd 8b02 	vpop	{d8}
   d5306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d530a:	4835      	ldr	r0, [pc, #212]	; (d53e0 <loop+0x330>)
   d530c:	2101      	movs	r1, #1
   d530e:	f000 f916 	bl	d553e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp2 = avg_tp2 + tp2;
   d5312:	4a3a      	ldr	r2, [pc, #232]	; (d53fc <loop+0x34c>)
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d5314:	4b3a      	ldr	r3, [pc, #232]	; (d5400 <loop+0x350>)
   d5316:	6018      	str	r0, [r3, #0]
        avg_tp2 = avg_tp2 + tp2;
   d5318:	6813      	ldr	r3, [r2, #0]
   d531a:	4403      	add	r3, r0
   d531c:	6013      	str	r3, [r2, #0]
        if(tp2 > max_tp2){
   d531e:	4b39      	ldr	r3, [pc, #228]	; (d5404 <loop+0x354>)
   d5320:	681a      	ldr	r2, [r3, #0]
   d5322:	4290      	cmp	r0, r2
          max_tp2 = tp2;
   d5324:	bfc8      	it	gt
   d5326:	6018      	strgt	r0, [r3, #0]
        tp2ReadCounter++;
   d5328:	4a37      	ldr	r2, [pc, #220]	; (d5408 <loop+0x358>)
   d532a:	e7c4      	b.n	d52b6 <loop+0x206>
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d532c:	482c      	ldr	r0, [pc, #176]	; (d53e0 <loop+0x330>)
   d532e:	2102      	movs	r1, #2
   d5330:	f000 f905 	bl	d553e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_fsr = avg_fsr + fsr;
   d5334:	4a35      	ldr	r2, [pc, #212]	; (d540c <loop+0x35c>)
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d5336:	4b36      	ldr	r3, [pc, #216]	; (d5410 <loop+0x360>)
   d5338:	6018      	str	r0, [r3, #0]
        avg_fsr = avg_fsr + fsr;
   d533a:	6813      	ldr	r3, [r2, #0]
   d533c:	4403      	add	r3, r0
   d533e:	6013      	str	r3, [r2, #0]
        if(fsr > max_fsr){
   d5340:	4b34      	ldr	r3, [pc, #208]	; (d5414 <loop+0x364>)
   d5342:	681a      	ldr	r2, [r3, #0]
   d5344:	4290      	cmp	r0, r2
        fsrReadCounter++;
   d5346:	4a34      	ldr	r2, [pc, #208]	; (d5418 <loop+0x368>)
          max_fsr = fsr;
   d5348:	bfc8      	it	gt
   d534a:	6018      	strgt	r0, [r3, #0]
        fsrReadCounter++;
   d534c:	6813      	ldr	r3, [r2, #0]
   d534e:	3301      	adds	r3, #1
   d5350:	6013      	str	r3, [r2, #0]
        readTurnCounter = 1;
   d5352:	2301      	movs	r3, #1
   d5354:	e7b3      	b.n	d52be <loop+0x20e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5356:	f000 ff4b 	bl	d61f0 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d535a:	b1e0      	cbz	r0, d5396 <loop+0x2e6>
	StringSumHelper(const String &s) : String(s) {}
   d535c:	4d14      	ldr	r5, [pc, #80]	; (d53b0 <loop+0x300>)
   d535e:	a804      	add	r0, sp, #16
   d5360:	4629      	mov	r1, r5
   d5362:	f001 fdec 	bl	d6f3e <_ZN6StringC1ERKS_>
          eda1Report = eda1Report + "\"}";
   d5366:	492d      	ldr	r1, [pc, #180]	; (d541c <loop+0x36c>)
   d5368:	a804      	add	r0, sp, #16
   d536a:	f001 fe50 	bl	d700e <_ZplRK15StringSumHelperPKc>
   d536e:	4601      	mov	r1, r0
   d5370:	4628      	mov	r0, r5
   d5372:	f001 fdd5 	bl	d6f20 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d5376:	a804      	add	r0, sp, #16
   d5378:	f001 fd56 	bl	d6e28 <_ZN6StringD1Ev>
   d537c:	4b28      	ldr	r3, [pc, #160]	; (d5420 <loop+0x370>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d537e:	4929      	ldr	r1, [pc, #164]	; (d5424 <loop+0x374>)
   d5380:	781b      	ldrb	r3, [r3, #0]
   d5382:	f88d 3000 	strb.w	r3, [sp]
   d5386:	a804      	add	r0, sp, #16
   d5388:	682a      	ldr	r2, [r5, #0]
   d538a:	233c      	movs	r3, #60	; 0x3c
   d538c:	f001 f954 	bl	d6638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5390:	a805      	add	r0, sp, #20
   d5392:	f7ff fc8f 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        eda1Report = "{ \"EDA1\": \"";
   d5396:	4924      	ldr	r1, [pc, #144]	; (d5428 <loop+0x378>)
   d5398:	4805      	ldr	r0, [pc, #20]	; (d53b0 <loop+0x300>)
   d539a:	f001 fde3 	bl	d6f64 <_ZN6StringaSEPKc>
        reportTurnCounter = 3;
   d539e:	2303      	movs	r3, #3
        reportTurnCounter = 1;
   d53a0:	7023      	strb	r3, [r4, #0]
        break;
   d53a2:	e7ab      	b.n	d52fc <loop+0x24c>
   d53a4:	2003e398 	.word	0x2003e398
   d53a8:	2003e46c 	.word	0x2003e46c
   d53ac:	2003e4b0 	.word	0x2003e4b0
   d53b0:	2003e4b4 	.word	0x2003e4b4
   d53b4:	2003e580 	.word	0x2003e580
   d53b8:	42c80000 	.word	0x42c80000
   d53bc:	2003e584 	.word	0x2003e584
   d53c0:	2003e428 	.word	0x2003e428
   d53c4:	2003e4ec 	.word	0x2003e4ec
   d53c8:	2003e4ac 	.word	0x2003e4ac
   d53cc:	2003e460 	.word	0x2003e460
   d53d0:	2003e394 	.word	0x2003e394
   d53d4:	2003e550 	.word	0x2003e550
   d53d8:	2003e590 	.word	0x2003e590
   d53dc:	2003e3a0 	.word	0x2003e3a0
   d53e0:	2003e472 	.word	0x2003e472
   d53e4:	2003e4a4 	.word	0x2003e4a4
   d53e8:	2003e588 	.word	0x2003e588
   d53ec:	2003e544 	.word	0x2003e544
   d53f0:	2003e3a4 	.word	0x2003e3a4
   d53f4:	2003e560 	.word	0x2003e560
   d53f8:	2003e3a1 	.word	0x2003e3a1
   d53fc:	2003e4a8 	.word	0x2003e4a8
   d5400:	2003e58c 	.word	0x2003e58c
   d5404:	2003e548 	.word	0x2003e548
   d5408:	2003e3a8 	.word	0x2003e3a8
   d540c:	2003e488 	.word	0x2003e488
   d5410:	2003e4e0 	.word	0x2003e4e0
   d5414:	2003e528 	.word	0x2003e528
   d5418:	2003e39c 	.word	0x2003e39c
   d541c:	000d9b6f 	.word	0x000d9b6f
   d5420:	2003e45c 	.word	0x2003e45c
   d5424:	000d9b72 	.word	0x000d9b72
   d5428:	000d9b77 	.word	0x000d9b77
   d542c:	2003e568 	.word	0x2003e568
   d5430:	2003e4d8 	.word	0x2003e4d8
   d5434:	2003e464 	.word	0x2003e464
   d5438:	2003e468 	.word	0x2003e468
   d543c:	2003e4e4 	.word	0x2003e4e4
   d5440:	2003e4e8 	.word	0x2003e4e8
   d5444:	2003e54c 	.word	0x2003e54c
        computeSummaryReport();
   d5448:	f7ff fa66 	bl	d4918 <_Z20computeSummaryReportv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d544c:	f000 fed0 	bl	d61f0 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d5450:	b168      	cbz	r0, d546e <loop+0x3be>
   d5452:	4b0a      	ldr	r3, [pc, #40]	; (d547c <loop+0x3cc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5454:	4a0a      	ldr	r2, [pc, #40]	; (d5480 <loop+0x3d0>)
   d5456:	781b      	ldrb	r3, [r3, #0]
   d5458:	f88d 3000 	strb.w	r3, [sp]
   d545c:	a804      	add	r0, sp, #16
   d545e:	6812      	ldr	r2, [r2, #0]
   d5460:	4908      	ldr	r1, [pc, #32]	; (d5484 <loop+0x3d4>)
   d5462:	233c      	movs	r3, #60	; 0x3c
   d5464:	f001 f8e8 	bl	d6638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5468:	a805      	add	r0, sp, #20
   d546a:	f7ff fc23 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        summaryReport = "";
   d546e:	4906      	ldr	r1, [pc, #24]	; (d5488 <loop+0x3d8>)
   d5470:	4803      	ldr	r0, [pc, #12]	; (d5480 <loop+0x3d0>)
   d5472:	f001 fd77 	bl	d6f64 <_ZN6StringaSEPKc>
        reportTurnCounter = 1;
   d5476:	2301      	movs	r3, #1
   d5478:	e792      	b.n	d53a0 <loop+0x2f0>
   d547a:	bf00      	nop
   d547c:	2003e45c 	.word	0x2003e45c
   d5480:	2003e570 	.word	0x2003e570
   d5484:	000d9b61 	.word	0x000d9b61
   d5488:	000d9b50 	.word	0x000d9b50

000d548c <_ZL8i2cwriteh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
    @param x byte to write
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
   d548c:	b507      	push	{r0, r1, r2, lr}
   d548e:	9001      	str	r0, [sp, #4]
#if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d5490:	f002 f99e 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d5494:	6803      	ldr	r3, [r0, #0]
   d5496:	9901      	ldr	r1, [sp, #4]
   d5498:	689b      	ldr	r3, [r3, #8]
#else
  Wire.send(x);
#endif
}
   d549a:	b003      	add	sp, #12
   d549c:	f85d eb04 	ldr.w	lr, [sp], #4
  Wire.write((uint8_t)x);
   d54a0:	4718      	bx	r3

000d54a2 <_ZL7i2creadv>:
static uint8_t i2cread(void) {
   d54a2:	b508      	push	{r3, lr}
  return Wire.read();
   d54a4:	f002 f994 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d54a8:	6803      	ldr	r3, [r0, #0]
   d54aa:	695b      	ldr	r3, [r3, #20]
   d54ac:	4798      	blx	r3
}
   d54ae:	b2c0      	uxtb	r0, r0
   d54b0:	bd08      	pop	{r3, pc}

000d54b2 <_ZL13writeRegisterhht>:
    @param i2cAddress I2C address of device
    @param reg register address to write to
    @param value value to write to register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
   d54b2:	b570      	push	{r4, r5, r6, lr}
   d54b4:	4606      	mov	r6, r0
   d54b6:	4614      	mov	r4, r2
   d54b8:	460d      	mov	r5, r1
  Wire.beginTransmission(i2cAddress);
   d54ba:	f002 f989 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d54be:	4631      	mov	r1, r6
   d54c0:	f001 fae2 	bl	d6a88 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
   d54c4:	4628      	mov	r0, r5
   d54c6:	f7ff ffe1 	bl	d548c <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value >> 8));
   d54ca:	0a20      	lsrs	r0, r4, #8
   d54cc:	f7ff ffde 	bl	d548c <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
   d54d0:	b2e0      	uxtb	r0, r4
   d54d2:	f7ff ffdb 	bl	d548c <_ZL8i2cwriteh>
  Wire.endTransmission();
   d54d6:	f002 f97b 	bl	d77d0 <_Z19__fetch_global_Wirev>
}
   d54da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d54de:	f001 badb 	b.w	d6a98 <_ZN7TwoWire15endTransmissionEv>

000d54e2 <_ZL12readRegisterhh.constprop.0>:
    @param i2cAddress I2C address of device
    @param reg register address to read from
    @return 16 bit register value read
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
   d54e2:	b513      	push	{r0, r1, r4, lr}
   d54e4:	9001      	str	r0, [sp, #4]
  Wire.beginTransmission(i2cAddress);
   d54e6:	f002 f973 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d54ea:	9901      	ldr	r1, [sp, #4]
   d54ec:	f001 facc 	bl	d6a88 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(reg);
   d54f0:	2000      	movs	r0, #0
   d54f2:	f7ff ffcb 	bl	d548c <_ZL8i2cwriteh>
  Wire.endTransmission();
   d54f6:	f002 f96b 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d54fa:	f001 facd 	bl	d6a98 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
   d54fe:	f002 f967 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d5502:	9901      	ldr	r1, [sp, #4]
   d5504:	2202      	movs	r2, #2
   d5506:	f001 fabc 	bl	d6a82 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());
   d550a:	f7ff ffca 	bl	d54a2 <_ZL7i2creadv>
   d550e:	4604      	mov	r4, r0
   d5510:	f7ff ffc7 	bl	d54a2 <_ZL7i2creadv>
   d5514:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
   d5518:	b280      	uxth	r0, r0
   d551a:	b002      	add	sp, #8
   d551c:	bd10      	pop	{r4, pc}

000d551e <_ZN16Adafruit_ADS1115C1Eh>:
/**************************************************************************/
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
  m_conversionDelay = ADS1015_CONVERSIONDELAY;
  m_bitShift = 4;
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d551e:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
    @param i2cAddress I2C address of device
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
   d5520:	7001      	strb	r1, [r0, #0]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d5522:	2102      	movs	r1, #2
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5524:	8082      	strh	r2, [r0, #4]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d5526:	7041      	strb	r1, [r0, #1]
  m_bitShift = 0;
   d5528:	7082      	strb	r2, [r0, #2]
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d552a:	4770      	bx	lr

000d552c <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() { Wire.begin(); }
   d552c:	b508      	push	{r3, lr}
   d552e:	f002 f94f 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d5532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5536:	f001 ba75 	b.w	d6a24 <_ZN7TwoWire5beginEv>

000d553a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
/*!
    @brief  Sets the gain and input voltage range
    @param gain gain setting to use
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain) { m_gain = gain; }
   d553a:	8081      	strh	r1, [r0, #4]
   d553c:	4770      	bx	lr

000d553e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
    @param channel ADC channel to read
    @return the ADC reading
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3) {
   d553e:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
   d5540:	b510      	push	{r4, lr}
   d5542:	4604      	mov	r4, r0
  if (channel > 3) {
   d5544:	d822      	bhi.n	d558c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel) {
   d5546:	2902      	cmp	r1, #2
  config |= m_gain;
   d5548:	8882      	ldrh	r2, [r0, #4]
  switch (channel) {
   d554a:	d019      	beq.n	d5580 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
   d554c:	2903      	cmp	r1, #3
   d554e:	d01a      	beq.n	d5586 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
   d5550:	2901      	cmp	r1, #1
  case (0):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
   d5552:	bf14      	ite	ne
   d5554:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
    break;
  case (1):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d5558:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
    break;
  case (2):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    break;
  case (3):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d555c:	f042 0243 	orr.w	r2, r2, #67	; 0x43

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d5560:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   d5564:	2101      	movs	r1, #1
   d5566:	7820      	ldrb	r0, [r4, #0]
   d5568:	f7ff ffa3 	bl	d54b2 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d556c:	7860      	ldrb	r0, [r4, #1]
   d556e:	f000 fee7 	bl	d6340 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d5572:	7820      	ldrb	r0, [r4, #0]
   d5574:	f7ff ffb5 	bl	d54e2 <_ZL12readRegisterhh.constprop.0>
   d5578:	78a3      	ldrb	r3, [r4, #2]
   d557a:	4118      	asrs	r0, r3
   d557c:	b280      	uxth	r0, r0
}
   d557e:	bd10      	pop	{r4, pc}
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d5580:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
   d5584:	e7ea      	b.n	d555c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d5586:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
   d558a:	e7e7      	b.n	d555c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
   d558c:	2000      	movs	r0, #0
   d558e:	e7f6      	b.n	d557e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

000d5590 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev>:
            a signed value since the difference can be either
            positive or negative.
    @return the ADC reading
*/
/**************************************************************************/
int16_t Adafruit_ADS1015::readADC_Differential_0_1() {
   d5590:	b510      	push	{r4, lr}

  // Set channels
  config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
   d5592:	8882      	ldrh	r2, [r0, #4]
int16_t Adafruit_ADS1015::readADC_Differential_0_1() {
   d5594:	4604      	mov	r4, r0

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d5596:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
   d559a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
   d559e:	2101      	movs	r1, #1
   d55a0:	7800      	ldrb	r0, [r0, #0]
   d55a2:	f7ff ff86 	bl	d54b2 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d55a6:	7860      	ldrb	r0, [r4, #1]
   d55a8:	f000 feca 	bl	d6340 <delay>

  // Read the conversion results
  uint16_t res =
      readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d55ac:	7820      	ldrb	r0, [r4, #0]
   d55ae:	f7ff ff98 	bl	d54e2 <_ZL12readRegisterhh.constprop.0>
   d55b2:	78a3      	ldrb	r3, [r4, #2]
   d55b4:	4118      	asrs	r0, r3
  if (m_bitShift == 0) {
   d55b6:	b90b      	cbnz	r3, d55bc <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev+0x2c>
    // making sure we keep the sign bit intact
    if (res > 0x07FF) {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
    }
    return (int16_t)res;
   d55b8:	b200      	sxth	r0, r0
  }
}
   d55ba:	bd10      	pop	{r4, pc}
      readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d55bc:	b280      	uxth	r0, r0
    if (res > 0x07FF) {
   d55be:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
      res |= 0xF000;
   d55c2:	bf28      	it	cs
   d55c4:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
   d55c8:	e7f6      	b.n	d55b8 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev+0x28>

000d55ca <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs>:
    @param channel ADC channel to use
    @param threshold comparator threshold
*/
/**************************************************************************/
void Adafruit_ADS1015::startComparator_SingleEnded(uint8_t channel,
                                                   int16_t threshold) {
   d55ca:	b538      	push	{r3, r4, r5, lr}

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel) {
   d55cc:	2902      	cmp	r1, #2
  config |= m_gain;
   d55ce:	8884      	ldrh	r4, [r0, #4]
                                                   int16_t threshold) {
   d55d0:	4605      	mov	r5, r0
  switch (channel) {
   d55d2:	d013      	beq.n	d55fc <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x32>
   d55d4:	2903      	cmp	r1, #3
   d55d6:	d014      	beq.n	d5602 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x38>
   d55d8:	2901      	cmp	r1, #1
   d55da:	d101      	bne.n	d55e0 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x16>
  case (0):
    config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1;
    break;
  case (1):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d55dc:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
  }

  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH,
                threshold << m_bitShift);
   d55e0:	78ab      	ldrb	r3, [r5, #2]
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH,
   d55e2:	7828      	ldrb	r0, [r5, #0]
                threshold << m_bitShift);
   d55e4:	409a      	lsls	r2, r3
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH,
   d55e6:	b292      	uxth	r2, r2
   d55e8:	2103      	movs	r1, #3
   d55ea:	f7ff ff62 	bl	d54b2 <_ZL13writeRegisterhht>

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d55ee:	7828      	ldrb	r0, [r5, #0]
   d55f0:	4622      	mov	r2, r4
   d55f2:	2101      	movs	r1, #1
}
   d55f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d55f8:	f7ff bf5b 	b.w	d54b2 <_ZL13writeRegisterhht>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d55fc:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    break;
   d5600:	e7ee      	b.n	d55e0 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x16>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d5602:	f444 44e0 	orr.w	r4, r4, #28672	; 0x7000
    break;
   d5606:	e7eb      	b.n	d55e0 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x16>

000d5608 <_Z5timerj>:
    // Timer Event 
    //if (NRF_TIMER4->EVENTS_COMPARE[0] != 0)
    PulseSensorAmped.update();
}

void timer(unsigned ms) {
   d5608:	b5f0      	push	{r4, r5, r6, r7, lr}

    // Set priority as high as possible.
    timer_config.interrupt_priority = 3;

    // Init the timer
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d560a:	4c21      	ldr	r4, [pc, #132]	; (d5690 <_Z5timerj+0x88>)
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d560c:	4921      	ldr	r1, [pc, #132]	; (d5694 <_Z5timerj+0x8c>)
void timer(unsigned ms) {
   d560e:	b085      	sub	sp, #20
   d5610:	4605      	mov	r5, r0
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d5612:	2201      	movs	r2, #1
   d5614:	201b      	movs	r0, #27
   d5616:	f001 fa42 	bl	d6a9e <_Z21attachInterruptDirect9IRQn_TypePFvvEb>
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d561a:	2600      	movs	r6, #0
   d561c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5620:	4a1d      	ldr	r2, [pc, #116]	; (d5698 <_Z5timerj+0x90>)
   d5622:	a902      	add	r1, sp, #8
   d5624:	4620      	mov	r0, r4
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d5626:	e9cd 3602 	strd	r3, r6, [sp, #8]
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d562a:	f002 f921 	bl	d7870 <nrfx_timer_init>
    // if( err_code != NRF_SUCCESS ) Log.error("nrfx_timer_error");

    // Disable and clear the timer.
    nrfx_timer_disable(&timer4);
   d562e:	4620      	mov	r0, r4
   d5630:	f002 f9f8 	bl	d7a24 <nrfx_timer_disable>
    nrfx_timer_clear(&timer4);
   d5634:	4620      	mov	r0, r4
   d5636:	f002 fa0f 	bl	d7a58 <nrfx_timer_clear>

    // Calculate the ticks for 50 uS
    uint32_t ticks = nrfx_timer_us_to_ticks(&timer4,ms*1000);
   d563a:	6823      	ldr	r3, [r4, #0]
                              TIMER_PRESCALER_PRESCALER_Msk);
}

__STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type * p_reg)
{
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
   d563c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   d5640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                                               nrf_timer_frequency_t frequency)
{
    // The "frequency" parameter here is actually the prescaler value, and the
    // timer runs at the following frequency: f = 16 MHz / 2^prescaler.
    uint32_t prescaler = (uint32_t)frequency;
    uint64_t ticks = ((time_us * 16ULL) >> prescaler);
   d5644:	b2db      	uxtb	r3, r3
   d5646:	fb02 f005 	mul.w	r0, r2, r5
   d564a:	0f02      	lsrs	r2, r0, #28
   d564c:	f1c3 0720 	rsb	r7, r3, #32
   d5650:	0100      	lsls	r0, r0, #4
   d5652:	f1a3 0120 	sub.w	r1, r3, #32
   d5656:	fa20 f403 	lsr.w	r4, r0, r3
   d565a:	fa02 f707 	lsl.w	r7, r2, r7
   d565e:	433c      	orrs	r4, r7
   d5660:	fa22 f101 	lsr.w	r1, r2, r1
   d5664:	fa22 f503 	lsr.w	r5, r2, r3
   d5668:	430c      	orrs	r4, r1
    NRFX_ASSERT(ticks <= UINT32_MAX);
   d566a:	2d01      	cmp	r5, #1
   d566c:	bf08      	it	eq
   d566e:	2c00      	cmpeq	r4, #0
   d5670:	d304      	bcc.n	d567c <_Z5timerj+0x74>
   d5672:	4a0a      	ldr	r2, [pc, #40]	; (d569c <_Z5timerj+0x94>)
   d5674:	4631      	mov	r1, r6
   d5676:	200a      	movs	r0, #10
   d5678:	f000 fd6c 	bl	d6154 <panic_>

    // Set the compare for the start and the end
    nrfx_timer_extended_compare(&timer4, NRF_TIMER_CC_CHANNEL0, ticks, NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK, true);
   d567c:	2301      	movs	r3, #1
   d567e:	4804      	ldr	r0, [pc, #16]	; (d5690 <_Z5timerj+0x88>)
   d5680:	9300      	str	r3, [sp, #0]
   d5682:	4622      	mov	r2, r4
   d5684:	2100      	movs	r1, #0
   d5686:	f002 fa18 	bl	d7aba <nrfx_timer_extended_compare>
}
   d568a:	b005      	add	sp, #20
   d568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d568e:	bf00      	nop
   d5690:	2003e3ac 	.word	0x2003e3ac
   d5694:	000d7ae9 	.word	0x000d7ae9
   d5698:	000d58d1 	.word	0x000d58d1
   d569c:	000d5ea1 	.word	0x000d5ea1

000d56a0 <_ZN21PulseSensorAmpedClass6attachEi>:
}                     
                                                                                                                                                                                                                                                                              
// Configure the sensor
void PulseSensorAmpedClass::attach(int pin) {
  // Do not allow analog pin to change
  if(analogPin==-1) {
   d56a0:	6803      	ldr	r3, [r0, #0]
   d56a2:	3301      	adds	r3, #1
    analogPin = pin;
   d56a4:	bf08      	it	eq
   d56a6:	6001      	streq	r1, [r0, #0]
  }
  timer(2); // Enable a 2ms timer.
   d56a8:	2002      	movs	r0, #2
   d56aa:	f7ff bfad 	b.w	d5608 <_Z5timerj>
	...

000d56b0 <_ZN21PulseSensorAmpedClass5startEv>:
}

void PulseSensorAmpedClass::start(void) {
   d56b0:	b510      	push	{r4, lr}
  // Only allow the sensor to start/stop if the pin is configured
  // Start TIMER (If pin configured)
  if(analogPin != -1)
   d56b2:	6803      	ldr	r3, [r0, #0]
   d56b4:	3301      	adds	r3, #1
void PulseSensorAmpedClass::start(void) {
   d56b6:	4604      	mov	r4, r0
  if(analogPin != -1)
   d56b8:	d002      	beq.n	d56c0 <_ZN21PulseSensorAmpedClass5startEv+0x10>
      nrfx_timer_enable(&timer4);
   d56ba:	480c      	ldr	r0, [pc, #48]	; (d56ec <_ZN21PulseSensorAmpedClass5startEv+0x3c>)
   d56bc:	f002 f994 	bl	d79e8 <nrfx_timer_enable>

  // Re-initialize variables:
  sampleCounter = 0;
  lastBeatTime = 0; 
  peak = 512;
   d56c0:	f44f 7200 	mov.w	r2, #512	; 0x200
  trough = 512;
   d56c4:	e9c4 2206 	strd	r2, r2, [r4, #24]
  thresh = 525;
  amplitude = 100;
   d56c8:	f240 210d 	movw	r1, #525	; 0x20d
   d56cc:	2264      	movs	r2, #100	; 0x64
   d56ce:	e9c4 1208 	strd	r1, r2, [r4, #32]
  IBI = 600;
   d56d2:	f44f 7216 	mov.w	r2, #600	; 0x258
  sampleCounter = 0;
   d56d6:	2300      	movs	r3, #0
  IBI = 600;
   d56d8:	60e2      	str	r2, [r4, #12]
  pulse = false;
   d56da:	f44f 7280 	mov.w	r2, #256	; 0x100
  lastBeatTime = 0; 
   d56de:	e9c4 3304 	strd	r3, r3, [r4, #16]
  pulse = false;
   d56e2:	8522      	strh	r2, [r4, #40]	; 0x28
  pulseLost = true;
  beatCount = 0;
   d56e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  postUpdate = false;
   d56e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d56ea:	bd10      	pop	{r4, pc}
   d56ec:	2003e3ac 	.word	0x2003e3ac

000d56f0 <_ZN21PulseSensorAmpedClass4stopEv>:

void PulseSensorAmpedClass::stop(void) {
   d56f0:	b510      	push	{r4, lr}
   d56f2:	4604      	mov	r4, r0
  // Stop measurements
  nrfx_timer_disable(&timer4);
   d56f4:	4803      	ldr	r0, [pc, #12]	; (d5704 <_ZN21PulseSensorAmpedClass4stopEv+0x14>)
   d56f6:	f002 f995 	bl	d7a24 <nrfx_timer_disable>
  postUpdate = false;
   d56fa:	2300      	movs	r3, #0
   d56fc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d5700:	bd10      	pop	{r4, pc}
   d5702:	bf00      	nop
   d5704:	2003e3ac 	.word	0x2003e3ac

000d5708 <_ZN21PulseSensorAmpedClass6updateEv>:



void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d5708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned rate[10];                         // array to average IBI values for average rate
  static unsigned beatCount = 0;

  if(fakeData) {
   d570a:	7903      	ldrb	r3, [r0, #4]
void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d570c:	4604      	mov	r4, r0
  if(fakeData) {
   d570e:	b313      	cbz	r3, d5756 <_ZN21PulseSensorAmpedClass6updateEv+0x4e>
    // Send an update once per second
    if(beatCount >= 500) {
   d5710:	4d6b      	ldr	r5, [pc, #428]	; (d58c0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d5712:	682b      	ldr	r3, [r5, #0]
   d5714:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d5718:	d30c      	bcc.n	d5734 <_ZN21PulseSensorAmpedClass6updateEv+0x2c>
       if(random(100)<2) {
   d571a:	2064      	movs	r0, #100	; 0x64
   d571c:	f001 fb51 	bl	d6dc2 <_Z6randomi>
   d5720:	2801      	cmp	r0, #1
   d5722:	dc0b      	bgt.n	d573c <_ZN21PulseSensorAmpedClass6updateEv+0x34>
         BPM = -1;
   d5724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
       } else {
        IBI = random(770,1100);
        BPM = 60000/IBI;        
   d5728:	60a3      	str	r3, [r4, #8]
       }
       postUpdate = true;
   d572a:	2301      	movs	r3, #1
   d572c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
       beatCount = 0;
   d5730:	2300      	movs	r3, #0
   d5732:	602b      	str	r3, [r5, #0]
    }
    beatCount++;
   d5734:	682b      	ldr	r3, [r5, #0]
   d5736:	3301      	adds	r3, #1
   d5738:	602b      	str	r3, [r5, #0]
    trough = signal;                 // set T default
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
    pulseLost = true;
    beatCount = 0;
  }
}
   d573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        IBI = random(770,1100);
   d573c:	f240 414c 	movw	r1, #1100	; 0x44c
   d5740:	f240 3002 	movw	r0, #770	; 0x302
   d5744:	f001 fb48 	bl	d6dd8 <_Z6randomii>
   d5748:	60e0      	str	r0, [r4, #12]
        BPM = 60000/IBI;        
   d574a:	68e2      	ldr	r2, [r4, #12]
   d574c:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5750:	fbb3 f3f2 	udiv	r3, r3, r2
   d5754:	e7e8      	b.n	d5728 <_ZN21PulseSensorAmpedClass6updateEv+0x20>
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d5756:	4d5b      	ldr	r5, [pc, #364]	; (d58c4 <_ZN21PulseSensorAmpedClass6updateEv+0x1bc>)
    hal_adc_set_sample_time(sample_time);
}

inline int32_t __attribute__((deprecated("Use hal_adc_read() instead"), always_inline))
HAL_ADC_Read(pin_t pin) {
    return hal_adc_read(pin);
   d5758:	8800      	ldrh	r0, [r0, #0]
   d575a:	f000 fbe9 	bl	d5f30 <hal_adc_read>
   d575e:	4a5a      	ldr	r2, [pc, #360]	; (d58c8 <_ZN21PulseSensorAmpedClass6updateEv+0x1c0>)
   d5760:	682b      	ldr	r3, [r5, #0]
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d5762:	6926      	ldr	r6, [r4, #16]
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d5764:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  filterIndex = (filterIndex+1)%5;
   d5768:	2105      	movs	r1, #5
   d576a:	3301      	adds	r3, #1
   d576c:	fbb3 f0f1 	udiv	r0, r3, r1
   d5770:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d5774:	1a1b      	subs	r3, r3, r0
   d5776:	602b      	str	r3, [r5, #0]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d5778:	e9d2 3500 	ldrd	r3, r5, [r2]
   d577c:	441d      	add	r5, r3
   d577e:	6893      	ldr	r3, [r2, #8]
   d5780:	441d      	add	r5, r3
   d5782:	68d3      	ldr	r3, [r2, #12]
   d5784:	441d      	add	r5, r3
   d5786:	6913      	ldr	r3, [r2, #16]
  if(signal < thresh) {         // Update trough based on threshold
   d5788:	6a22      	ldr	r2, [r4, #32]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d578a:	441d      	add	r5, r3
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d578c:	6963      	ldr	r3, [r4, #20]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d578e:	fbb5 f5f1 	udiv	r5, r5, r1
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d5792:	3602      	adds	r6, #2
  if(signal < thresh) {         // Update trough based on threshold
   d5794:	4295      	cmp	r5, r2
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d5796:	6126      	str	r6, [r4, #16]
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d5798:	eba6 0603 	sub.w	r6, r6, r3
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d579c:	68e3      	ldr	r3, [r4, #12]
   d579e:	fbb3 f3f1 	udiv	r3, r3, r1
   d57a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if(signal < thresh) {         // Update trough based on threshold
   d57a6:	da23      	bge.n	d57f0 <_ZN21PulseSensorAmpedClass6updateEv+0xe8>
    if(beyondDicrotic) {       // avoid dicrotic noise when finding trough
   d57a8:	429e      	cmp	r6, r3
   d57aa:	d904      	bls.n	d57b6 <_ZN21PulseSensorAmpedClass6updateEv+0xae>
      trough = min(signal, trough);
   d57ac:	69e3      	ldr	r3, [r4, #28]
   d57ae:	42ab      	cmp	r3, r5
   d57b0:	bfd4      	ite	le
   d57b2:	61e3      	strle	r3, [r4, #28]
   d57b4:	61e5      	strgt	r5, [r4, #28]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d57b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d57ba:	2b00      	cmp	r3, #0
   d57bc:	d05f      	beq.n	d587e <_ZN21PulseSensorAmpedClass6updateEv+0x176>
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d57be:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d57c2:	1a9b      	subs	r3, r3, r2
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d57c4:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   d57c8:	eb02 0261 	add.w	r2, r2, r1, asr #1
    trough = thresh;                          // Trough won't update until beyond threshold
   d57cc:	e9c4 2206 	strd	r2, r2, [r4, #24]
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d57d0:	6222      	str	r2, [r4, #32]
    if(amplitude>300)
   d57d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    pulse = false;                            // Update status
   d57d6:	f04f 0200 	mov.w	r2, #0
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d57da:	6263      	str	r3, [r4, #36]	; 0x24
    pulse = false;                            // Update status
   d57dc:	8522      	strh	r2, [r4, #40]	; 0x28
    if(amplitude>300)
   d57de:	dd02      	ble.n	d57e6 <_ZN21PulseSensorAmpedClass6updateEv+0xde>
      postUpdate = true;
   d57e0:	2301      	movs	r3, #1
   d57e2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d57e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d57ea:	429e      	cmp	r6, r3
   d57ec:	d84f      	bhi.n	d588e <_ZN21PulseSensorAmpedClass6updateEv+0x186>
   d57ee:	e7a4      	b.n	d573a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    peak = max(signal, peak);  
   d57f0:	69a1      	ldr	r1, [r4, #24]
   d57f2:	42a9      	cmp	r1, r5
   d57f4:	bfac      	ite	ge
   d57f6:	61a1      	strge	r1, [r4, #24]
   d57f8:	61a5      	strlt	r5, [r4, #24]
  if(elapsedTime > 250){                         // Assume at least 250ms between beats (i.e., BPM<240); Helps avoid noise
   d57fa:	2efa      	cmp	r6, #250	; 0xfa
   d57fc:	d99d      	bls.n	d573a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if((signal > thresh) && (pulse == false) && beyondDicrotic) {        
   d57fe:	4295      	cmp	r5, r2
   d5800:	dd3d      	ble.n	d587e <_ZN21PulseSensorAmpedClass6updateEv+0x176>
   d5802:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   d5806:	2a00      	cmp	r2, #0
   d5808:	d136      	bne.n	d5878 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
   d580a:	429e      	cmp	r6, r3
   d580c:	d934      	bls.n	d5878 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
      pulse = true;
   d580e:	2301      	movs	r3, #1
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS (Starting from point the threshold is exceeded)
   d5810:	60e6      	str	r6, [r4, #12]
      calculateHRV(IBI);
   d5812:	68e0      	ldr	r0, [r4, #12]
      pulse = true;
   d5814:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      calculateHRV(IBI);
   d5818:	f7ff f812 	bl	d4840 <_Z12calculateHRVi>
      rate[beatCount%10] = IBI;
   d581c:	4928      	ldr	r1, [pc, #160]	; (d58c0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
      lastBeatTime = sampleCounter;               // keep track of the start time of this beat
   d581e:	6923      	ldr	r3, [r4, #16]
   d5820:	6163      	str	r3, [r4, #20]
      rate[beatCount%10] = IBI;
   d5822:	680b      	ldr	r3, [r1, #0]
   d5824:	4f29      	ldr	r7, [pc, #164]	; (d58cc <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d5826:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   d582a:	200a      	movs	r0, #10
   d582c:	fbb3 f2f0 	udiv	r2, r3, r0
   d5830:	fb00 3212 	mls	r2, r0, r2, r3
      beatCount++;
   d5834:	3301      	adds	r3, #1
      if(beatCount<3) {
   d5836:	2b02      	cmp	r3, #2
      rate[beatCount%10] = IBI;
   d5838:	f847 c022 	str.w	ip, [r7, r2, lsl #2]
      beatCount++;
   d583c:	600b      	str	r3, [r1, #0]
      if(beatCount<3) {
   d583e:	f67f af7c 	bls.w	d573a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
      } else if(beatCount==3) {
   d5842:	2b03      	cmp	r3, #3
        rate[0]=(rate[1]+rate[2])/2;  
   d5844:	bf01      	itttt	eq
   d5846:	e9d7 2101 	ldrdeq	r2, r1, [r7, #4]
   d584a:	1852      	addeq	r2, r2, r1
   d584c:	0852      	lsreq	r2, r2, #1
   d584e:	603a      	streq	r2, [r7, #0]
      int maxIndex = min(beatCount, 10);      
   d5850:	481e      	ldr	r0, [pc, #120]	; (d58cc <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d5852:	2b0a      	cmp	r3, #10
      word runningTotal = 0;
   d5854:	f04f 0200 	mov.w	r2, #0
      int maxIndex = min(beatCount, 10);      
   d5858:	bf28      	it	cs
   d585a:	230a      	movcs	r3, #10
      for(int i=0; i<maxIndex; i++) {
   d585c:	4611      	mov	r1, r2
        runningTotal += rate[i];              
   d585e:	f850 7b04 	ldr.w	r7, [r0], #4
      for(int i=0; i<maxIndex; i++) {
   d5862:	3101      	adds	r1, #1
   d5864:	428b      	cmp	r3, r1
        runningTotal += rate[i];              
   d5866:	443a      	add	r2, r7
      for(int i=0; i<maxIndex; i++) {
   d5868:	dcf9      	bgt.n	d585e <_ZN21PulseSensorAmpedClass6updateEv+0x156>
      runningTotal /= maxIndex;               // average the last 10 IBI values 
   d586a:	fbb2 f3f3 	udiv	r3, r2, r3
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
   d586e:	f64e 2260 	movw	r2, #60000	; 0xea60
   d5872:	fbb2 f3f3 	udiv	r3, r2, r3
   d5876:	60a3      	str	r3, [r4, #8]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d5878:	6a23      	ldr	r3, [r4, #32]
   d587a:	429d      	cmp	r5, r3
   d587c:	db9b      	blt.n	d57b6 <_ZN21PulseSensorAmpedClass6updateEv+0xae>
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d587e:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d5882:	429e      	cmp	r6, r3
   d5884:	f67f af59 	bls.w	d573a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if(!pulseLost) {                       // If it was good, notify the loss
   d5888:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d588c:	b92b      	cbnz	r3, d589a <_ZN21PulseSensorAmpedClass6updateEv+0x192>
      BPM = -1;
   d588e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5892:	60a3      	str	r3, [r4, #8]
      postUpdate = true;
   d5894:	2301      	movs	r3, #1
   d5896:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    thresh = trough + (peak-trough)/3;  // set thresh default
   d589a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d589e:	2103      	movs	r1, #3
   d58a0:	1a9b      	subs	r3, r3, r2
   d58a2:	fb93 f3f1 	sdiv	r3, r3, r1
   d58a6:	4413      	add	r3, r2
   d58a8:	6223      	str	r3, [r4, #32]
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
   d58aa:	6923      	ldr	r3, [r4, #16]
   d58ac:	6163      	str	r3, [r4, #20]
    pulseLost = true;
   d58ae:	2301      	movs	r3, #1
   d58b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    beatCount = 0;
   d58b4:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d58b6:	2200      	movs	r2, #0
    trough = signal;                 // set T default
   d58b8:	e9c4 5506 	strd	r5, r5, [r4, #24]
    beatCount = 0;
   d58bc:	601a      	str	r2, [r3, #0]
   d58be:	e73c      	b.n	d573a <_ZN21PulseSensorAmpedClass6updateEv+0x32>
   d58c0:	2003e604 	.word	0x2003e604
   d58c4:	2003e5c4 	.word	0x2003e5c4
   d58c8:	2003e5c8 	.word	0x2003e5c8
   d58cc:	2003e5dc 	.word	0x2003e5dc

000d58d0 <_Z9timer_isr17nrf_timer_event_tPv>:
    PulseSensorAmped.update();
   d58d0:	4801      	ldr	r0, [pc, #4]	; (d58d8 <_Z9timer_isr17nrf_timer_event_tPv+0x8>)
   d58d2:	f7ff bf19 	b.w	d5708 <_ZN21PulseSensorAmpedClass6updateEv>
   d58d6:	bf00      	nop
   d58d8:	2003e590 	.word	0x2003e590

000d58dc <_ZN21PulseSensorAmpedClass7processEv>:

void PulseSensorAmpedClass::process(void) {
   d58dc:	b510      	push	{r4, lr}
  // Put updates into foreground
  if(postUpdate) {
   d58de:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void PulseSensorAmpedClass::process(void) {
   d58e2:	4604      	mov	r4, r0
  if(postUpdate) {
   d58e4:	b14b      	cbz	r3, d58fa <_ZN21PulseSensorAmpedClass7processEv+0x1e>
    if(BPM>=0)
   d58e6:	6883      	ldr	r3, [r0, #8]
   d58e8:	2b00      	cmp	r3, #0
   d58ea:	db07      	blt.n	d58fc <_ZN21PulseSensorAmpedClass7processEv+0x20>
      PulseSensorAmped_data(BPM, IBI);
   d58ec:	6880      	ldr	r0, [r0, #8]
   d58ee:	68e1      	ldr	r1, [r4, #12]
   d58f0:	f7fe ff9e 	bl	d4830 <_Z21PulseSensorAmped_dataii>
    else 
      PulseSensorAmped_lost();	         
    postUpdate = false;
   d58f4:	2300      	movs	r3, #0
   d58f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  } 
}
   d58fa:	bd10      	pop	{r4, pc}
      PulseSensorAmped_lost();	         
   d58fc:	f7ff f808 	bl	d4910 <_Z21PulseSensorAmped_lostv>
   d5900:	e7f8      	b.n	d58f4 <_ZN21PulseSensorAmpedClass7processEv+0x18>
	...

000d5904 <_GLOBAL__sub_I_PulseSensorAmped>:
  analogPin = -1;
   d5904:	4b03      	ldr	r3, [pc, #12]	; (d5914 <_GLOBAL__sub_I_PulseSensorAmped+0x10>)
   d5906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d590a:	601a      	str	r2, [r3, #0]
  fakeData = false;
   d590c:	2200      	movs	r2, #0
   d590e:	711a      	strb	r2, [r3, #4]
}
   d5910:	4770      	bx	lr
   d5912:	bf00      	nop
   d5914:	2003e590 	.word	0x2003e590

000d5918 <_Z19ICM_20948_write_I2ChPhmPv>:
    return ICM_20948_Stat_Ok;
}

// serif functions for the I2C and SPI classes
ICM_20948_Status_e ICM_20948_write_I2C(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
   d5918:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d591a:	4606      	mov	r6, r0
   d591c:	460d      	mov	r5, r1
   d591e:	9201      	str	r2, [sp, #4]
    if (user == NULL)
   d5920:	b1bb      	cbz	r3, d5952 <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c; // Cast user field to ICM_20948_I2C type and extract the I2C interface pointer
   d5922:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d5924:	b1ac      	cbz	r4, d5952 <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d5926:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   d592a:	4620      	mov	r0, r4
   d592c:	f001 f8ac 	bl	d6a88 <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d5930:	6823      	ldr	r3, [r4, #0]
   d5932:	4631      	mov	r1, r6
   d5934:	689b      	ldr	r3, [r3, #8]
   d5936:	4620      	mov	r0, r4
   d5938:	4798      	blx	r3
    _i2c->write(data, len);
   d593a:	6823      	ldr	r3, [r4, #0]
   d593c:	9a01      	ldr	r2, [sp, #4]
   d593e:	68db      	ldr	r3, [r3, #12]
   d5940:	4629      	mov	r1, r5
   d5942:	4620      	mov	r0, r4
   d5944:	4798      	blx	r3
    _i2c->endTransmission();
   d5946:	4620      	mov	r0, r4
   d5948:	f001 f8a6 	bl	d6a98 <_ZN7TwoWire15endTransmissionEv>
    //     delay(10);
    // }

    // delay(10);

    return ICM_20948_Stat_Ok;
   d594c:	2000      	movs	r0, #0
}
   d594e:	b002      	add	sp, #8
   d5950:	bd70      	pop	{r4, r5, r6, pc}
        return ICM_20948_Stat_ParamErr;
   d5952:	2003      	movs	r0, #3
   d5954:	e7fb      	b.n	d594e <_Z19ICM_20948_write_I2ChPhmPv+0x36>

000d5956 <_Z18ICM_20948_read_I2ChPhmPv>:

ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
   d5956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d595a:	4607      	mov	r7, r0
   d595c:	460e      	mov	r6, r1
   d595e:	4615      	mov	r5, r2
    if (user == NULL)
   d5960:	b32b      	cbz	r3, d59ae <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c;
   d5962:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d5964:	b31c      	cbz	r4, d59ae <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
   d5966:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d596a:	4620      	mov	r0, r4
   d596c:	4641      	mov	r1, r8
   d596e:	f001 f88b 	bl	d6a88 <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d5972:	6823      	ldr	r3, [r4, #0]
   d5974:	4639      	mov	r1, r7
   d5976:	689b      	ldr	r3, [r3, #8]
   d5978:	4620      	mov	r0, r4
   d597a:	4798      	blx	r3
    _i2c->endTransmission(false); // Send repeated start
   d597c:	2100      	movs	r1, #0
   d597e:	4620      	mov	r0, r4
   d5980:	f001 f886 	bl	d6a90 <_ZN7TwoWire15endTransmissionEh>

    uint32_t offset = 0;
    uint32_t num_received = _i2c->requestFrom(addr, len);
   d5984:	462a      	mov	r2, r5
   d5986:	4641      	mov	r1, r8
   d5988:	4620      	mov	r0, r4
   d598a:	f001 f87a 	bl	d6a82 <_ZN7TwoWire11requestFromEhj>
    //     }else{
    //         break;
    //     }
    // }

    if (num_received == len)
   d598e:	4285      	cmp	r5, r0
   d5990:	d110      	bne.n	d59b4 <_Z18ICM_20948_read_I2ChPhmPv+0x5e>
   d5992:	2700      	movs	r7, #0
    {
        for (uint8_t i = 0; i < len; i++)
   d5994:	fa5f f887 	uxtb.w	r8, r7
   d5998:	4545      	cmp	r5, r8
   d599a:	f107 0701 	add.w	r7, r7, #1
   d599e:	d90b      	bls.n	d59b8 <_Z18ICM_20948_read_I2ChPhmPv+0x62>
        {
            buff[i] = _i2c->read();
   d59a0:	6823      	ldr	r3, [r4, #0]
   d59a2:	4620      	mov	r0, r4
   d59a4:	695b      	ldr	r3, [r3, #20]
   d59a6:	4798      	blx	r3
   d59a8:	f806 0008 	strb.w	r0, [r6, r8]
        for (uint8_t i = 0; i < len; i++)
   d59ac:	e7f2      	b.n	d5994 <_Z18ICM_20948_read_I2ChPhmPv+0x3e>
        return ICM_20948_Stat_ParamErr;
   d59ae:	2003      	movs	r0, #3
    if (len != 0)
    {
        return ICM_20948_Stat_NoData;
    }
    return ICM_20948_Stat_Ok;
}
   d59b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ICM_20948_Stat_NoData;
   d59b4:	2006      	movs	r0, #6
   d59b6:	e7fb      	b.n	d59b0 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>
        return ICM_20948_Stat_Ok;
   d59b8:	2000      	movs	r0, #0
   d59ba:	e7f9      	b.n	d59b0 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>

000d59bc <_ZN9ICM_209487getAGMTEv>:
{
   d59bc:	b570      	push	{r4, r5, r6, lr}
   d59be:	460c      	mov	r4, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
   d59c0:	1d0d      	adds	r5, r1, #4
{
   d59c2:	4606      	mov	r6, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
   d59c4:	4629      	mov	r1, r5
   d59c6:	4620      	mov	r0, r4
   d59c8:	f7fe fe95 	bl	d46f6 <ICM_20948_get_agmt>
   d59cc:	f804 0f1c 	strb.w	r0, [r4, #28]!
    return agmt;
   d59d0:	462b      	mov	r3, r5
   d59d2:	4635      	mov	r5, r6
   d59d4:	461a      	mov	r2, r3
   d59d6:	ca03      	ldmia	r2!, {r0, r1}
   d59d8:	42a2      	cmp	r2, r4
   d59da:	6028      	str	r0, [r5, #0]
   d59dc:	6069      	str	r1, [r5, #4]
   d59de:	4613      	mov	r3, r2
   d59e0:	f105 0508 	add.w	r5, r5, #8
   d59e4:	d1f6      	bne.n	d59d4 <_ZN9ICM_209487getAGMTEv+0x18>
}
   d59e6:	4630      	mov	r0, r6
   d59e8:	bd70      	pop	{r4, r5, r6, pc}
   d59ea:	0000      	movs	r0, r0
   d59ec:	0000      	movs	r0, r0
	...

000d59f0 <_ZN9ICM_209488getAccMGEs>:
{
   d59f0:	b508      	push	{r3, lr}
    switch (agmt.fss.a)
   d59f2:	7e03      	ldrb	r3, [r0, #24]
   d59f4:	f003 0303 	and.w	r3, r3, #3
{
   d59f8:	ee07 1a90 	vmov	s15, r1
   d59fc:	2b03      	cmp	r3, #3
   d59fe:	d831      	bhi.n	d5a64 <_ZN9ICM_209488getAccMGEs+0x74>
   d5a00:	e8df f003 	tbb	[pc, r3]
   d5a04:	261c1202 	.word	0x261c1202
        return (((float)axis_val) / 16.384);
   d5a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a0c:	ee17 0a90 	vmov	r0, s15
   d5a10:	f003 fb84 	bl	d911c <__aeabi_f2d>
   d5a14:	a317      	add	r3, pc, #92	; (adr r3, d5a74 <_ZN9ICM_209488getAccMGEs+0x84>)
   d5a16:	e9d3 2300 	ldrd	r2, r3, [r3]
        return (((float)axis_val) / 2.048);
   d5a1a:	f003 fd01 	bl	d9420 <__aeabi_ddiv>
   d5a1e:	f003 fe85 	bl	d972c <__aeabi_d2f>
   d5a22:	ee00 0a10 	vmov	s0, r0
}
   d5a26:	bd08      	pop	{r3, pc}
        return (((float)axis_val) / 8.192);
   d5a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a2c:	ee17 0a90 	vmov	r0, s15
   d5a30:	f003 fb74 	bl	d911c <__aeabi_f2d>
   d5a34:	a311      	add	r3, pc, #68	; (adr r3, d5a7c <_ZN9ICM_209488getAccMGEs+0x8c>)
   d5a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a3a:	e7ee      	b.n	d5a1a <_ZN9ICM_209488getAccMGEs+0x2a>
        return (((float)axis_val) / 4.096);
   d5a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a40:	ee17 0a90 	vmov	r0, s15
   d5a44:	f003 fb6a 	bl	d911c <__aeabi_f2d>
   d5a48:	a30e      	add	r3, pc, #56	; (adr r3, d5a84 <_ZN9ICM_209488getAccMGEs+0x94>)
   d5a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a4e:	e7e4      	b.n	d5a1a <_ZN9ICM_209488getAccMGEs+0x2a>
        return (((float)axis_val) / 2.048);
   d5a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a54:	ee17 0a90 	vmov	r0, s15
   d5a58:	f003 fb60 	bl	d911c <__aeabi_f2d>
   d5a5c:	a30b      	add	r3, pc, #44	; (adr r3, d5a8c <_ZN9ICM_209488getAccMGEs+0x9c>)
   d5a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a62:	e7da      	b.n	d5a1a <_ZN9ICM_209488getAccMGEs+0x2a>
    switch (agmt.fss.a)
   d5a64:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5a70 <_ZN9ICM_209488getAccMGEs+0x80>
   d5a68:	e7dd      	b.n	d5a26 <_ZN9ICM_209488getAccMGEs+0x36>
   d5a6a:	bf00      	nop
   d5a6c:	f3af 8000 	nop.w
   d5a70:	00000000 	.word	0x00000000
   d5a74:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a78:	4030624d 	.word	0x4030624d
   d5a7c:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a80:	4020624d 	.word	0x4020624d
   d5a84:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a88:	4010624d 	.word	0x4010624d
   d5a8c:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a90:	4000624d 	.word	0x4000624d

000d5a94 <_ZN9ICM_209484accXEv>:
    return getAccMG(agmt.acc.axes.x);
   d5a94:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   d5a98:	f7ff bfaa 	b.w	d59f0 <_ZN9ICM_209488getAccMGEs>

000d5a9c <_ZN9ICM_209484accYEv>:
    return getAccMG(agmt.acc.axes.y);
   d5a9c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   d5aa0:	f7ff bfa6 	b.w	d59f0 <_ZN9ICM_209488getAccMGEs>

000d5aa4 <_ZN9ICM_209484accZEv>:
    return getAccMG(agmt.acc.axes.z);
   d5aa4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5aa8:	f7ff bfa2 	b.w	d59f0 <_ZN9ICM_209488getAccMGEs>
   d5aac:	0000      	movs	r0, r0
	...

000d5ab0 <_ZN9ICM_209489getGyrDPSEs>:
{
   d5ab0:	b508      	push	{r3, lr}
    switch (agmt.fss.g)
   d5ab2:	7e03      	ldrb	r3, [r0, #24]
   d5ab4:	f3c3 0381 	ubfx	r3, r3, #2, #2
{
   d5ab8:	ee07 1a90 	vmov	s15, r1
   d5abc:	2b03      	cmp	r3, #3
   d5abe:	d829      	bhi.n	d5b14 <_ZN9ICM_209489getGyrDPSEs+0x64>
   d5ac0:	e8df f003 	tbb	[pc, r3]
   d5ac4:	1e0e0902 	.word	0x1e0e0902
        return (((float)axis_val) / 131);
   d5ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5acc:	ed9f 7a18 	vldr	s14, [pc, #96]	; d5b30 <_ZN9ICM_209489getGyrDPSEs+0x80>
        return (((float)axis_val) / 65.5);
   d5ad0:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5ad4:	bd08      	pop	{r3, pc}
        return (((float)axis_val) / 65.5);
   d5ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5ada:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5b34 <_ZN9ICM_209489getGyrDPSEs+0x84>
   d5ade:	e7f7      	b.n	d5ad0 <_ZN9ICM_209489getGyrDPSEs+0x20>
        return (((float)axis_val) / 32.8);
   d5ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5ae4:	ee17 0a90 	vmov	r0, s15
   d5ae8:	f003 fb18 	bl	d911c <__aeabi_f2d>
   d5aec:	a30c      	add	r3, pc, #48	; (adr r3, d5b20 <_ZN9ICM_209489getGyrDPSEs+0x70>)
   d5aee:	e9d3 2300 	ldrd	r2, r3, [r3]
        return (((float)axis_val) / 16.4);
   d5af2:	f003 fc95 	bl	d9420 <__aeabi_ddiv>
   d5af6:	f003 fe19 	bl	d972c <__aeabi_d2f>
   d5afa:	ee00 0a10 	vmov	s0, r0
   d5afe:	e7e9      	b.n	d5ad4 <_ZN9ICM_209489getGyrDPSEs+0x24>
   d5b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b04:	ee17 0a90 	vmov	r0, s15
   d5b08:	f003 fb08 	bl	d911c <__aeabi_f2d>
   d5b0c:	a306      	add	r3, pc, #24	; (adr r3, d5b28 <_ZN9ICM_209489getGyrDPSEs+0x78>)
   d5b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b12:	e7ee      	b.n	d5af2 <_ZN9ICM_209489getGyrDPSEs+0x42>
    switch (agmt.fss.g)
   d5b14:	ed9f 0a08 	vldr	s0, [pc, #32]	; d5b38 <_ZN9ICM_209489getGyrDPSEs+0x88>
   d5b18:	e7dc      	b.n	d5ad4 <_ZN9ICM_209489getGyrDPSEs+0x24>
   d5b1a:	bf00      	nop
   d5b1c:	f3af 8000 	nop.w
   d5b20:	66666666 	.word	0x66666666
   d5b24:	40406666 	.word	0x40406666
   d5b28:	66666666 	.word	0x66666666
   d5b2c:	40306666 	.word	0x40306666
   d5b30:	43030000 	.word	0x43030000
   d5b34:	42830000 	.word	0x42830000
   d5b38:	00000000 	.word	0x00000000

000d5b3c <_ZN9ICM_209484gyrXEv>:
    return getGyrDPS(agmt.gyr.axes.x);
   d5b3c:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d5b40:	f7ff bfb6 	b.w	d5ab0 <_ZN9ICM_209489getGyrDPSEs>

000d5b44 <_ZN9ICM_209484gyrYEv>:
    return getGyrDPS(agmt.gyr.axes.y);
   d5b44:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5b48:	f7ff bfb2 	b.w	d5ab0 <_ZN9ICM_209489getGyrDPSEs>

000d5b4c <_ZN9ICM_209484gyrZEv>:
    return getGyrDPS(agmt.gyr.axes.z);
   d5b4c:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5b50:	f7ff bfae 	b.w	d5ab0 <_ZN9ICM_209489getGyrDPSEs>
   d5b54:	0000      	movs	r0, r0
	...

000d5b58 <_ZN9ICM_209484tempEv>:
{
   d5b58:	b508      	push	{r3, lr}
    return (((float)val) / 333.87) + 21;
   d5b5a:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
   d5b5e:	ee07 0a90 	vmov	s15, r0
   d5b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b66:	ee17 0a90 	vmov	r0, s15
   d5b6a:	f003 fad7 	bl	d911c <__aeabi_f2d>
   d5b6e:	a309      	add	r3, pc, #36	; (adr r3, d5b94 <_ZN9ICM_209484tempEv+0x3c>)
   d5b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b74:	f003 fc54 	bl	d9420 <__aeabi_ddiv>
   d5b78:	4b05      	ldr	r3, [pc, #20]	; (d5b90 <_ZN9ICM_209484tempEv+0x38>)
   d5b7a:	2200      	movs	r2, #0
   d5b7c:	f003 f970 	bl	d8e60 <__adddf3>
   d5b80:	f003 fdd4 	bl	d972c <__aeabi_d2f>
}
   d5b84:	ee00 0a10 	vmov	s0, r0
   d5b88:	bd08      	pop	{r3, pc}
   d5b8a:	bf00      	nop
   d5b8c:	f3af 8000 	nop.w
   d5b90:	40350000 	.word	0x40350000
   d5b94:	851eb852 	.word	0x851eb852
   d5b98:	4074ddeb 	.word	0x4074ddeb

000d5b9c <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>:
    if (stat == ICM_20948_Stat_NUM)
   d5b9c:	2908      	cmp	r1, #8
        val = status;
   d5b9e:	bf08      	it	eq
   d5ba0:	7f01      	ldrbeq	r1, [r0, #28]
    switch (val)
   d5ba2:	2907      	cmp	r1, #7
   d5ba4:	bf9a      	itte	ls
   d5ba6:	4b02      	ldrls	r3, [pc, #8]	; (d5bb0 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x14>)
   d5ba8:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
   d5bac:	4801      	ldrhi	r0, [pc, #4]	; (d5bb4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x18>)
}
   d5bae:	4770      	bx	lr
   d5bb0:	000d9c0c 	.word	0x000d9c0c
   d5bb4:	000d9b83 	.word	0x000d9b83

000d5bb8 <_ZN9ICM_209487swResetEv>:
{
   d5bb8:	b510      	push	{r4, lr}
   d5bba:	4604      	mov	r4, r0
    status = ICM_20948_sw_reset(&_device);
   d5bbc:	f7fe fb4b 	bl	d4256 <ICM_20948_sw_reset>
   d5bc0:	7720      	strb	r0, [r4, #28]
}
   d5bc2:	bd10      	pop	{r4, pc}

000d5bc4 <_ZN9ICM_209485sleepEb>:
{
   d5bc4:	b510      	push	{r4, lr}
   d5bc6:	4604      	mov	r4, r0
    status = ICM_20948_sleep(&_device, on);
   d5bc8:	f7fe fb5f 	bl	d428a <ICM_20948_sleep>
   d5bcc:	7720      	strb	r0, [r4, #28]
}
   d5bce:	bd10      	pop	{r4, pc}

000d5bd0 <_ZN9ICM_209488lowPowerEb>:
{
   d5bd0:	b510      	push	{r4, lr}
   d5bd2:	4604      	mov	r4, r0
    status = ICM_20948_low_power(&_device, on);
   d5bd4:	f7fe fb74 	bl	d42c0 <ICM_20948_low_power>
   d5bd8:	7720      	strb	r0, [r4, #28]
}
   d5bda:	bd10      	pop	{r4, pc}

000d5bdc <_ZN9ICM_209487checkIDEv>:
{
   d5bdc:	b510      	push	{r4, lr}
   d5bde:	4604      	mov	r4, r0
    status = ICM_20948_check_id(&_device);
   d5be0:	f7fe fb9a 	bl	d4318 <ICM_20948_check_id>
   d5be4:	7720      	strb	r0, [r4, #28]
}
   d5be6:	bd10      	pop	{r4, pc}

000d5be8 <_ZN9ICM_2094813setSampleModeEhh>:
{
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
   d5bec:	f7fe fba5 	bl	d433a <ICM_20948_set_sample_mode>
   d5bf0:	7720      	strb	r0, [r4, #28]
}
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>:
{
   d5bf4:	b510      	push	{r4, lr}
   d5bf6:	4604      	mov	r4, r0
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
   d5bf8:	f7fe fbd3 	bl	d43a2 <ICM_20948_set_full_scale>
   d5bfc:	7720      	strb	r0, [r4, #28]
}
   d5bfe:	bd10      	pop	{r4, pc}

000d5c00 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>:
{
   d5c00:	b513      	push	{r0, r1, r4, lr}
   d5c02:	f8ad 2004 	strh.w	r2, [sp, #4]
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5c06:	9a01      	ldr	r2, [sp, #4]
{
   d5c08:	4604      	mov	r4, r0
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5c0a:	f7fe fc16 	bl	d443a <ICM_20948_set_dlpf_cfg>
   d5c0e:	7720      	strb	r0, [r4, #28]
}
   d5c10:	b002      	add	sp, #8
   d5c12:	bd10      	pop	{r4, pc}

000d5c14 <_ZN9ICM_2094810enableDLPFEhb>:
{
   d5c14:	b510      	push	{r4, lr}
   d5c16:	4604      	mov	r4, r0
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
   d5c18:	f7fe fc5c 	bl	d44d4 <ICM_20948_enable_dlpf>
   d5c1c:	7720      	strb	r0, [r4, #28]
}
   d5c1e:	bd10      	pop	{r4, pc}

000d5c20 <_ZN9ICM_2094820i2cMasterPassthroughEb>:
{
   d5c20:	b510      	push	{r4, lr}
   d5c22:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
   d5c24:	f7fe fca0 	bl	d4568 <ICM_20948_i2c_master_passthrough>
   d5c28:	7720      	strb	r0, [r4, #28]
}
   d5c2a:	bd10      	pop	{r4, pc}

000d5c2c <_ZN9ICM_2094815i2cMasterEnableEb>:
{
   d5c2c:	b510      	push	{r4, lr}
   d5c2e:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_enable(&_device, enable);
   d5c30:	f7fe fcb6 	bl	d45a0 <ICM_20948_i2c_master_enable>
   d5c34:	7720      	strb	r0, [r4, #28]
}
   d5c36:	bd10      	pop	{r4, pc}

000d5c38 <_ZN9ICM_2094814i2cMasterResetEv>:
{
   d5c38:	b510      	push	{r4, lr}
   d5c3a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_reset(&_device);
   d5c3c:	f7fe fcec 	bl	d4618 <ICM_20948_i2c_master_reset>
   d5c40:	7720      	strb	r0, [r4, #28]
}
   d5c42:	bd10      	pop	{r4, pc}

000d5c44 <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>:
{
   d5c44:	b530      	push	{r4, r5, lr}
   d5c46:	b087      	sub	sp, #28
   d5c48:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
   d5c4a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
   d5c4e:	9505      	str	r5, [sp, #20]
   d5c50:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   d5c54:	9504      	str	r5, [sp, #16]
   d5c56:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5c5a:	9503      	str	r5, [sp, #12]
   d5c5c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d5c60:	9502      	str	r5, [sp, #8]
   d5c62:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5c66:	9501      	str	r5, [sp, #4]
   d5c68:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   d5c6c:	9500      	str	r5, [sp, #0]
   d5c6e:	f7fe fcee 	bl	d464e <ICM_20948_i2c_master_configure_slave>
   d5c72:	7720      	strb	r0, [r4, #28]
}
   d5c74:	b007      	add	sp, #28
   d5c76:	bd30      	pop	{r4, r5, pc}

000d5c78 <_ZN9ICM_2094816i2cMasterSingleWEhhh>:
{
   d5c78:	b513      	push	{r0, r1, r4, lr}
   d5c7a:	f88d 3007 	strb.w	r3, [sp, #7]
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d5c7e:	f10d 0307 	add.w	r3, sp, #7
{
   d5c82:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d5c84:	f7fe fad3 	bl	d422e <ICM_20948_i2c_master_single_w>
   d5c88:	7720      	strb	r0, [r4, #28]
}
   d5c8a:	b002      	add	sp, #8
   d5c8c:	bd10      	pop	{r4, pc}

000d5c8e <_ZN9ICM_2094816i2cMasterSingleREhh>:
{
   d5c8e:	b513      	push	{r0, r1, r4, lr}
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d5c90:	f10d 0307 	add.w	r3, sp, #7
{
   d5c94:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d5c96:	f7fe fad5 	bl	d4244 <ICM_20948_i2c_master_single_r>
   d5c9a:	7720      	strb	r0, [r4, #28]
}
   d5c9c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5ca0:	b002      	add	sp, #8
   d5ca2:	bd10      	pop	{r4, pc}

000d5ca4 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>:
{
   d5ca4:	460a      	mov	r2, r1
    uint8_t data = i2cMasterSingleR(MAG_AK09916_I2C_ADDR, reg);
   d5ca6:	210c      	movs	r1, #12
   d5ca8:	f7ff bff1 	b.w	d5c8e <_ZN9ICM_2094816i2cMasterSingleREhh>

000d5cac <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>:
{
   d5cac:	b510      	push	{r4, lr}
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d5cae:	7813      	ldrb	r3, [r2, #0]
   d5cb0:	460a      	mov	r2, r1
   d5cb2:	210c      	movs	r1, #12
{
   d5cb4:	4604      	mov	r4, r0
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d5cb6:	f7ff ffdf 	bl	d5c78 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
   d5cba:	7720      	strb	r0, [r4, #28]
}
   d5cbc:	bd10      	pop	{r4, pc}
	...

000d5cc0 <_ZN13ICM_20948_I2CC1Ev>:
ICM_20948_I2C::ICM_20948_I2C()
   d5cc0:	4b01      	ldr	r3, [pc, #4]	; (d5cc8 <_ZN13ICM_20948_I2CC1Ev+0x8>)
   d5cc2:	6003      	str	r3, [r0, #0]
}
   d5cc4:	4770      	bx	lr
   d5cc6:	bf00      	nop
   d5cc8:	000d9c34 	.word	0x000d9c34

000d5ccc <_ZN9ICM_209489magWhoIAmEv>:
{
   d5ccc:	b538      	push	{r3, r4, r5, lr}
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5cce:	2100      	movs	r1, #0
{
   d5cd0:	4604      	mov	r4, r0
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5cd2:	f7ff ffe7 	bl	d5ca4 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    whoiam2 = readMag(AK09916_REG_WIA2);
   d5cd6:	2101      	movs	r1, #1
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5cd8:	4605      	mov	r5, r0
    whoiam2 = readMag(AK09916_REG_WIA2);
   d5cda:	4620      	mov	r0, r4
   d5cdc:	f7ff ffe2 	bl	d5ca4 <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
   d5ce0:	2d48      	cmp	r5, #72	; 0x48
   d5ce2:	d104      	bne.n	d5cee <_ZN9ICM_209489magWhoIAmEv+0x22>
   d5ce4:	2809      	cmp	r0, #9
   d5ce6:	d102      	bne.n	d5cee <_ZN9ICM_209489magWhoIAmEv+0x22>
    status = retval;
   d5ce8:	2000      	movs	r0, #0
    status = retval;
   d5cea:	7720      	strb	r0, [r4, #28]
}
   d5cec:	bd38      	pop	{r3, r4, r5, pc}
    status = retval;
   d5cee:	2004      	movs	r0, #4
   d5cf0:	e7fb      	b.n	d5cea <_ZN9ICM_209489magWhoIAmEv+0x1e>

000d5cf2 <_ZN9ICM_2094819startupMagnetometerEv>:
{
   d5cf2:	b530      	push	{r4, r5, lr}
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5cf4:	2100      	movs	r1, #0
{
   d5cf6:	b089      	sub	sp, #36	; 0x24
   d5cf8:	4604      	mov	r4, r0
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5cfa:	f7ff ff91 	bl	d5c20 <_ZN9ICM_2094820i2cMasterPassthroughEb>
    i2cMasterEnable(true);
   d5cfe:	2101      	movs	r1, #1
   d5d00:	4620      	mov	r0, r4
   d5d02:	f7ff ff93 	bl	d5c2c <_ZN9ICM_2094815i2cMasterEnableEb>
   d5d06:	2505      	movs	r5, #5
        retval = magWhoIAm();
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f7ff ffdf 	bl	d5ccc <_ZN9ICM_209489magWhoIAmEv>
        if (retval == ICM_20948_Stat_Ok)
   d5d0e:	b158      	cbz	r0, d5d28 <_ZN9ICM_2094819startupMagnetometerEv+0x36>
        i2cMasterReset(); //Otherwise, reset the master I2C and try again
   d5d10:	4620      	mov	r0, r4
   d5d12:	3d01      	subs	r5, #1
   d5d14:	f7ff ff90 	bl	d5c38 <_ZN9ICM_2094814i2cMasterResetEv>
    while (tries < maxTries)
   d5d18:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5d1c:	d1f4      	bne.n	d5d08 <_ZN9ICM_2094819startupMagnetometerEv+0x16>
        status = ICM_20948_Stat_WrongID;
   d5d1e:	2004      	movs	r0, #4
   d5d20:	e01f      	b.n	d5d62 <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    return status;
   d5d22:	7f20      	ldrb	r0, [r4, #28]
}
   d5d24:	b009      	add	sp, #36	; 0x24
   d5d26:	bd30      	pop	{r4, r5, pc}
    reg.MODE = AK09916_mode_cont_100hz;
   d5d28:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d5d2c:	2208      	movs	r2, #8
   d5d2e:	f362 0304 	bfi	r3, r2, #0, #5
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5d32:	2131      	movs	r1, #49	; 0x31
   d5d34:	aa07      	add	r2, sp, #28
   d5d36:	4620      	mov	r0, r4
    reg.MODE = AK09916_mode_cont_100hz;
   d5d38:	f88d 301c 	strb.w	r3, [sp, #28]
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5d3c:	f7ff ffb6 	bl	d5cac <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>
    if (retval != ICM_20948_Stat_Ok)
   d5d40:	b978      	cbnz	r0, d5d62 <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    retval = i2cMasterConfigureSlave(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false);
   d5d42:	2301      	movs	r3, #1
   d5d44:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d5d48:	2309      	movs	r3, #9
   d5d4a:	e9cd 0004 	strd	r0, r0, [sp, #16]
   d5d4e:	9003      	str	r0, [sp, #12]
   d5d50:	9300      	str	r3, [sp, #0]
   d5d52:	4601      	mov	r1, r0
   d5d54:	2310      	movs	r3, #16
   d5d56:	220c      	movs	r2, #12
   d5d58:	4620      	mov	r0, r4
   d5d5a:	f7ff ff73 	bl	d5c44 <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>
    if (retval != ICM_20948_Stat_Ok)
   d5d5e:	2800      	cmp	r0, #0
   d5d60:	d0df      	beq.n	d5d22 <_ZN9ICM_2094819startupMagnetometerEv+0x30>
        status = ICM_20948_Stat_WrongID;
   d5d62:	7720      	strb	r0, [r4, #28]
        return status;
   d5d64:	e7de      	b.n	d5d24 <_ZN9ICM_2094819startupMagnetometerEv+0x32>

000d5d66 <_ZN9ICM_2094814startupDefaultEv>:
{
   d5d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d68:	4605      	mov	r5, r0
    retval = checkID();
   d5d6a:	f7ff ff37 	bl	d5bdc <_ZN9ICM_209487checkIDEv>
    if (retval != ICM_20948_Stat_Ok)
   d5d6e:	4604      	mov	r4, r0
   d5d70:	b118      	cbz	r0, d5d7a <_ZN9ICM_2094814startupDefaultEv+0x14>
        status = retval;
   d5d72:	772c      	strb	r4, [r5, #28]
}
   d5d74:	4620      	mov	r0, r4
   d5d76:	b003      	add	sp, #12
   d5d78:	bd30      	pop	{r4, r5, pc}
    retval = swReset();
   d5d7a:	4628      	mov	r0, r5
   d5d7c:	f7ff ff1c 	bl	d5bb8 <_ZN9ICM_209487swResetEv>
    if (retval != ICM_20948_Stat_Ok)
   d5d80:	4604      	mov	r4, r0
   d5d82:	2800      	cmp	r0, #0
   d5d84:	d1f5      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    delay(50);
   d5d86:	2032      	movs	r0, #50	; 0x32
   d5d88:	f000 fada 	bl	d6340 <delay>
    retval = sleep(false);
   d5d8c:	4621      	mov	r1, r4
   d5d8e:	4628      	mov	r0, r5
   d5d90:	f7ff ff18 	bl	d5bc4 <_ZN9ICM_209485sleepEb>
    if (retval != ICM_20948_Stat_Ok)
   d5d94:	4604      	mov	r4, r0
   d5d96:	2800      	cmp	r0, #0
   d5d98:	d1eb      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = lowPower(false);
   d5d9a:	4601      	mov	r1, r0
   d5d9c:	4628      	mov	r0, r5
   d5d9e:	f7ff ff17 	bl	d5bd0 <_ZN9ICM_209488lowPowerEb>
    if (retval != ICM_20948_Stat_Ok)
   d5da2:	4604      	mov	r4, r0
   d5da4:	2800      	cmp	r0, #0
   d5da6:	d1e4      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
   d5da8:	4602      	mov	r2, r0
   d5daa:	2103      	movs	r1, #3
   d5dac:	4628      	mov	r0, r5
   d5dae:	f7ff ff1b 	bl	d5be8 <_ZN9ICM_2094813setSampleModeEhh>
    if (retval != ICM_20948_Stat_Ok)
   d5db2:	4604      	mov	r4, r0
   d5db4:	2800      	cmp	r0, #0
   d5db6:	d1dc      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
   d5db8:	f04f 0200 	mov.w	r2, #0
   d5dbc:	2103      	movs	r1, #3
   d5dbe:	4628      	mov	r0, r5
   d5dc0:	f7ff ff18 	bl	d5bf4 <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
    if (retval != ICM_20948_Stat_Ok)
   d5dc4:	4604      	mov	r4, r0
   d5dc6:	2800      	cmp	r0, #0
   d5dc8:	d1d3      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    dlpcfg.a = acc_d473bw_n499bw;
   d5dca:	f240 7307 	movw	r3, #1799	; 0x707
   d5dce:	f8ad 3004 	strh.w	r3, [sp, #4]
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
   d5dd2:	9a01      	ldr	r2, [sp, #4]
   d5dd4:	2103      	movs	r1, #3
   d5dd6:	4628      	mov	r0, r5
   d5dd8:	f7ff ff12 	bl	d5c00 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>
    if (retval != ICM_20948_Stat_Ok)
   d5ddc:	4604      	mov	r4, r0
   d5dde:	2800      	cmp	r0, #0
   d5de0:	d1c7      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Acc, false);
   d5de2:	4602      	mov	r2, r0
   d5de4:	2101      	movs	r1, #1
   d5de6:	4628      	mov	r0, r5
   d5de8:	f7ff ff14 	bl	d5c14 <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5dec:	4604      	mov	r4, r0
   d5dee:	2800      	cmp	r0, #0
   d5df0:	d1bf      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
   d5df2:	4602      	mov	r2, r0
   d5df4:	2102      	movs	r1, #2
   d5df6:	4628      	mov	r0, r5
   d5df8:	f7ff ff0c 	bl	d5c14 <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5dfc:	4604      	mov	r4, r0
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	d1b7      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = startupMagnetometer();
   d5e02:	4628      	mov	r0, r5
   d5e04:	f7ff ff75 	bl	d5cf2 <_ZN9ICM_2094819startupMagnetometerEv>
    if (retval != ICM_20948_Stat_Ok)
   d5e08:	4604      	mov	r4, r0
   d5e0a:	2800      	cmp	r0, #0
   d5e0c:	d1b1      	bne.n	d5d72 <_ZN9ICM_2094814startupDefaultEv+0xc>
    return status;
   d5e0e:	7f2c      	ldrb	r4, [r5, #28]
   d5e10:	e7b0      	b.n	d5d74 <_ZN9ICM_2094814startupDefaultEv+0xe>
	...

000d5e14 <_ZN13ICM_20948_I2C5beginER7TwoWirebh>:
{
   d5e14:	b510      	push	{r4, lr}
   d5e16:	4604      	mov	r4, r0
   d5e18:	4618      	mov	r0, r3
    _ad0 = ad0pin;
   d5e1a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    _i2c = &wirePort;
   d5e1e:	6261      	str	r1, [r4, #36]	; 0x24
    _ad0val = ad0val;
   d5e20:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if (_ad0val)
   d5e24:	b9f2      	cbnz	r2, d5e64 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x50>
    _addr = ICM_20948_I2C_ADDR_AD0;
   d5e26:	2268      	movs	r2, #104	; 0x68
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5e28:	28ff      	cmp	r0, #255	; 0xff
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5e2a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5e2e:	d002      	beq.n	d5e36 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x22>
        pinMode(_ad0, OUTPUT);
   d5e30:	2101      	movs	r1, #1
   d5e32:	f001 fc61 	bl	d76f8 <pinMode>
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5e36:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   d5e3a:	28ff      	cmp	r0, #255	; 0xff
   d5e3c:	d003      	beq.n	d5e46 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x32>
        digitalWrite(_ad0, _ad0val);
   d5e3e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d5e42:	f001 fc6a 	bl	d771a <digitalWrite>
    _serif.write = ICM_20948_write_I2C;
   d5e46:	4b08      	ldr	r3, [pc, #32]	; (d5e68 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x54>)
   d5e48:	62e3      	str	r3, [r4, #44]	; 0x2c
    _serif.read = ICM_20948_read_I2C;
   d5e4a:	4b08      	ldr	r3, [pc, #32]	; (d5e6c <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x58>)
    _device._serif = &_serif;
   d5e4c:	4620      	mov	r0, r4
    _serif.user = (void *)this; // refer to yourself in the user field
   d5e4e:	e9c4 340c 	strd	r3, r4, [r4, #48]	; 0x30
    _device._serif = &_serif;
   d5e52:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   d5e56:	f840 3f04 	str.w	r3, [r0, #4]!
    status = startupDefault();
   d5e5a:	f7ff ff84 	bl	d5d66 <_ZN9ICM_2094814startupDefaultEv>
   d5e5e:	f884 0020 	strb.w	r0, [r4, #32]
}
   d5e62:	bd10      	pop	{r4, pc}
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5e64:	2269      	movs	r2, #105	; 0x69
   d5e66:	e7df      	b.n	d5e28 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x14>
   d5e68:	000d5919 	.word	0x000d5919
   d5e6c:	000d5957 	.word	0x000d5957

000d5e70 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <os_mutex_recursive_create+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	00030248 	.word	0x00030248

000d5e80 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <os_mutex_recursive_destroy+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	00030248 	.word	0x00030248

000d5e90 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <HAL_RNG_GetRandomNumber+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	685b      	ldr	r3, [r3, #4]
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030218 	.word	0x00030218

000d5ea0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <HAL_Delay_Microseconds+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	68db      	ldr	r3, [r3, #12]
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	00030218 	.word	0x00030218

000d5eb0 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	691b      	ldr	r3, [r3, #16]
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030218 	.word	0x00030218

000d5ec0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	695b      	ldr	r3, [r3, #20]
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030218 	.word	0x00030218

000d5ed0 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <hal_timer_millis+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030218 	.word	0x00030218

000d5ee0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <HAL_Validate_Pin_Function+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	685b      	ldr	r3, [r3, #4]
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	0003022c 	.word	0x0003022c

000d5ef0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <HAL_Pin_Mode+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	689b      	ldr	r3, [r3, #8]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	0003022c 	.word	0x0003022c

000d5f00 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <HAL_Get_Pin_Mode+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	68db      	ldr	r3, [r3, #12]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	0003022c 	.word	0x0003022c

000d5f10 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <HAL_GPIO_Write+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	691b      	ldr	r3, [r3, #16]
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	0003022c 	.word	0x0003022c

000d5f20 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <HAL_GPIO_Read+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	695b      	ldr	r3, [r3, #20]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	0003022c 	.word	0x0003022c

000d5f30 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <hal_adc_read+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	0003022c 	.word	0x0003022c

000d5f40 <HAL_Set_Direct_Interrupt_Handler>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
DYNALIB_FN(35, hal_gpio, HAL_Interrupts_Detach_Ext, int(uint16_t, uint8_t, void*))
DYNALIB_FN(36, hal_gpio, HAL_Set_Direct_Interrupt_Handler, int(IRQn_Type irqn, HAL_Direct_Interrupt_Handler handler, uint32_t flags, void* reserved))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b03      	ldr	r3, [pc, #12]	; (d5f50 <HAL_Set_Direct_Interrupt_Handler+0x10>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d5f4a:	9301      	str	r3, [sp, #4]
   d5f4c:	bd08      	pop	{r3, pc}
   d5f4e:	0000      	.short	0x0000
   d5f50:	0003022c 	.word	0x0003022c

000d5f54 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5f54:	b508      	push	{r3, lr}
   d5f56:	4b02      	ldr	r3, [pc, #8]	; (d5f60 <hal_i2c_set_speed+0xc>)
   d5f58:	681b      	ldr	r3, [r3, #0]
   d5f5a:	681b      	ldr	r3, [r3, #0]
   d5f5c:	9301      	str	r3, [sp, #4]
   d5f5e:	bd08      	pop	{r3, pc}
   d5f60:	00030228 	.word	0x00030228

000d5f64 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5f64:	b508      	push	{r3, lr}
   d5f66:	4b02      	ldr	r3, [pc, #8]	; (d5f70 <hal_i2c_begin+0xc>)
   d5f68:	681b      	ldr	r3, [r3, #0]
   d5f6a:	68db      	ldr	r3, [r3, #12]
   d5f6c:	9301      	str	r3, [sp, #4]
   d5f6e:	bd08      	pop	{r3, pc}
   d5f70:	00030228 	.word	0x00030228

000d5f74 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5f74:	b508      	push	{r3, lr}
   d5f76:	4b02      	ldr	r3, [pc, #8]	; (d5f80 <hal_i2c_begin_transmission+0xc>)
   d5f78:	681b      	ldr	r3, [r3, #0]
   d5f7a:	699b      	ldr	r3, [r3, #24]
   d5f7c:	9301      	str	r3, [sp, #4]
   d5f7e:	bd08      	pop	{r3, pc}
   d5f80:	00030228 	.word	0x00030228

000d5f84 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5f84:	b508      	push	{r3, lr}
   d5f86:	4b02      	ldr	r3, [pc, #8]	; (d5f90 <hal_i2c_end_transmission+0xc>)
   d5f88:	681b      	ldr	r3, [r3, #0]
   d5f8a:	69db      	ldr	r3, [r3, #28]
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	bd08      	pop	{r3, pc}
   d5f90:	00030228 	.word	0x00030228

000d5f94 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <hal_i2c_write+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	6a1b      	ldr	r3, [r3, #32]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	00030228 	.word	0x00030228

000d5fa4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <hal_i2c_available+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	00030228 	.word	0x00030228

000d5fb4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <hal_i2c_read+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	00030228 	.word	0x00030228

000d5fc4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <hal_i2c_peek+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	00030228 	.word	0x00030228

000d5fd4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <hal_i2c_flush+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	00030228 	.word	0x00030228

000d5fe4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <hal_i2c_is_enabled+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	00030228 	.word	0x00030228

000d5ff4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <hal_i2c_init+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	00030228 	.word	0x00030228

000d6004 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <hal_i2c_request_ex+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	00030228 	.word	0x00030228

000d6014 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <inet_inet_ntop+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	695b      	ldr	r3, [r3, #20]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	00030264 	.word	0x00030264

000d6024 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <netdb_freeaddrinfo+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	689b      	ldr	r3, [r3, #8]
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	00030268 	.word	0x00030268

000d6034 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <netdb_getaddrinfo+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	68db      	ldr	r3, [r3, #12]
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	00030268 	.word	0x00030268

000d6044 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <hal_spi_init+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	69db      	ldr	r3, [r3, #28]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	00030230 	.word	0x00030230

000d6054 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <hal_spi_is_enabled+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6a1b      	ldr	r3, [r3, #32]
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	00030230 	.word	0x00030230

000d6064 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <hal_usart_init+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	681b      	ldr	r3, [r3, #0]
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	0003023c 	.word	0x0003023c

000d6074 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <hal_usart_write+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	68db      	ldr	r3, [r3, #12]
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	0003023c 	.word	0x0003023c

000d6084 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <hal_usart_available+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	691b      	ldr	r3, [r3, #16]
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	0003023c 	.word	0x0003023c

000d6094 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <hal_usart_read+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	695b      	ldr	r3, [r3, #20]
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	0003023c 	.word	0x0003023c

000d60a4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <hal_usart_peek+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	699b      	ldr	r3, [r3, #24]
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	0003023c 	.word	0x0003023c

000d60b4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b02      	ldr	r3, [pc, #8]	; (d60c0 <hal_usart_flush+0xc>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	69db      	ldr	r3, [r3, #28]
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	0003023c 	.word	0x0003023c

000d60c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d60c4:	b508      	push	{r3, lr}
   d60c6:	4b02      	ldr	r3, [pc, #8]	; (d60d0 <hal_usart_is_enabled+0xc>)
   d60c8:	681b      	ldr	r3, [r3, #0]
   d60ca:	6a1b      	ldr	r3, [r3, #32]
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	bd08      	pop	{r3, pc}
   d60d0:	0003023c 	.word	0x0003023c

000d60d4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <hal_usart_available_data_for_write+0xc>)
   d60d8:	681b      	ldr	r3, [r3, #0]
   d60da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60dc:	9301      	str	r3, [sp, #4]
   d60de:	bd08      	pop	{r3, pc}
   d60e0:	0003023c 	.word	0x0003023c

000d60e4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d60e4:	b508      	push	{r3, lr}
   d60e6:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <HAL_USB_USART_Init+0xc>)
   d60e8:	681b      	ldr	r3, [r3, #0]
   d60ea:	681b      	ldr	r3, [r3, #0]
   d60ec:	9301      	str	r3, [sp, #4]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	0003024c 	.word	0x0003024c

000d60f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b02      	ldr	r3, [pc, #8]	; (d6100 <HAL_USB_USART_Begin+0xc>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	685b      	ldr	r3, [r3, #4]
   d60fc:	9301      	str	r3, [sp, #4]
   d60fe:	bd08      	pop	{r3, pc}
   d6100:	0003024c 	.word	0x0003024c

000d6104 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6104:	b508      	push	{r3, lr}
   d6106:	4b02      	ldr	r3, [pc, #8]	; (d6110 <HAL_USB_USART_Available_Data+0xc>)
   d6108:	681b      	ldr	r3, [r3, #0]
   d610a:	691b      	ldr	r3, [r3, #16]
   d610c:	9301      	str	r3, [sp, #4]
   d610e:	bd08      	pop	{r3, pc}
   d6110:	0003024c 	.word	0x0003024c

000d6114 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6114:	b508      	push	{r3, lr}
   d6116:	4b02      	ldr	r3, [pc, #8]	; (d6120 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6118:	681b      	ldr	r3, [r3, #0]
   d611a:	695b      	ldr	r3, [r3, #20]
   d611c:	9301      	str	r3, [sp, #4]
   d611e:	bd08      	pop	{r3, pc}
   d6120:	0003024c 	.word	0x0003024c

000d6124 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6124:	b508      	push	{r3, lr}
   d6126:	4b02      	ldr	r3, [pc, #8]	; (d6130 <HAL_USB_USART_Receive_Data+0xc>)
   d6128:	681b      	ldr	r3, [r3, #0]
   d612a:	699b      	ldr	r3, [r3, #24]
   d612c:	9301      	str	r3, [sp, #4]
   d612e:	bd08      	pop	{r3, pc}
   d6130:	0003024c 	.word	0x0003024c

000d6134 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6134:	b508      	push	{r3, lr}
   d6136:	4b02      	ldr	r3, [pc, #8]	; (d6140 <HAL_USB_USART_Send_Data+0xc>)
   d6138:	681b      	ldr	r3, [r3, #0]
   d613a:	69db      	ldr	r3, [r3, #28]
   d613c:	9301      	str	r3, [sp, #4]
   d613e:	bd08      	pop	{r3, pc}
   d6140:	0003024c 	.word	0x0003024c

000d6144 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6144:	b508      	push	{r3, lr}
   d6146:	4b02      	ldr	r3, [pc, #8]	; (d6150 <HAL_USB_USART_Flush_Data+0xc>)
   d6148:	681b      	ldr	r3, [r3, #0]
   d614a:	6a1b      	ldr	r3, [r3, #32]
   d614c:	9301      	str	r3, [sp, #4]
   d614e:	bd08      	pop	{r3, pc}
   d6150:	0003024c 	.word	0x0003024c

000d6154 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6154:	b508      	push	{r3, lr}
   d6156:	4b02      	ldr	r3, [pc, #8]	; (d6160 <panic_+0xc>)
   d6158:	681b      	ldr	r3, [r3, #0]
   d615a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d615c:	9301      	str	r3, [sp, #4]
   d615e:	bd08      	pop	{r3, pc}
   d6160:	00030260 	.word	0x00030260

000d6164 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6164:	b508      	push	{r3, lr}
   d6166:	4b02      	ldr	r3, [pc, #8]	; (d6170 <log_message+0xc>)
   d6168:	681b      	ldr	r3, [r3, #0]
   d616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d616c:	9301      	str	r3, [sp, #4]
   d616e:	bd08      	pop	{r3, pc}
   d6170:	00030260 	.word	0x00030260

000d6174 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6174:	b508      	push	{r3, lr}
   d6176:	4b02      	ldr	r3, [pc, #8]	; (d6180 <set_system_mode+0xc>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	685b      	ldr	r3, [r3, #4]
   d617c:	9301      	str	r3, [sp, #4]
   d617e:	bd08      	pop	{r3, pc}
   d6180:	00030220 	.word	0x00030220

000d6184 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6184:	b508      	push	{r3, lr}
   d6186:	4b02      	ldr	r3, [pc, #8]	; (d6190 <system_delay_ms+0xc>)
   d6188:	681b      	ldr	r3, [r3, #0]
   d618a:	695b      	ldr	r3, [r3, #20]
   d618c:	9301      	str	r3, [sp, #4]
   d618e:	bd08      	pop	{r3, pc}
   d6190:	00030220 	.word	0x00030220

000d6194 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6194:	b508      	push	{r3, lr}
   d6196:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <application_thread_current+0xc>)
   d6198:	681b      	ldr	r3, [r3, #0]
   d619a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d619c:	9301      	str	r3, [sp, #4]
   d619e:	bd08      	pop	{r3, pc}
   d61a0:	00030220 	.word	0x00030220

000d61a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d61a4:	b508      	push	{r3, lr}
   d61a6:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <application_thread_invoke+0xc>)
   d61a8:	681b      	ldr	r3, [r3, #0]
   d61aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d61ac:	9301      	str	r3, [sp, #4]
   d61ae:	bd08      	pop	{r3, pc}
   d61b0:	00030220 	.word	0x00030220

000d61b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d61b4:	b508      	push	{r3, lr}
   d61b6:	4b03      	ldr	r3, [pc, #12]	; (d61c4 <system_ctrl_set_app_request_handler+0x10>)
   d61b8:	681b      	ldr	r3, [r3, #0]
   d61ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d61be:	9301      	str	r3, [sp, #4]
   d61c0:	bd08      	pop	{r3, pc}
   d61c2:	0000      	.short	0x0000
   d61c4:	00030220 	.word	0x00030220

000d61c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d61c8:	b508      	push	{r3, lr}
   d61ca:	4b03      	ldr	r3, [pc, #12]	; (d61d8 <system_ctrl_set_result+0x10>)
   d61cc:	681b      	ldr	r3, [r3, #0]
   d61ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d61d2:	9301      	str	r3, [sp, #4]
   d61d4:	bd08      	pop	{r3, pc}
   d61d6:	0000      	.short	0x0000
   d61d8:	00030220 	.word	0x00030220

000d61dc <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b03      	ldr	r3, [pc, #12]	; (d61ec <system_sleep_ext+0x10>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d61e6:	9301      	str	r3, [sp, #4]
   d61e8:	bd08      	pop	{r3, pc}
   d61ea:	0000      	.short	0x0000
   d61ec:	00030220 	.word	0x00030220

000d61f0 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <spark_cloud_flag_connected+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	695b      	ldr	r3, [r3, #20]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	00030244 	.word	0x00030244

000d6200 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <spark_send_event+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	6a1b      	ldr	r3, [r3, #32]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	00030244 	.word	0x00030244

000d6210 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	00030244 	.word	0x00030244

000d6220 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <network_connect+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	685b      	ldr	r3, [r3, #4]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	00030240 	.word	0x00030240

000d6230 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <network_connecting+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	689b      	ldr	r3, [r3, #8]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	00030240 	.word	0x00030240

000d6240 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <network_disconnect+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	68db      	ldr	r3, [r3, #12]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	00030240 	.word	0x00030240

000d6250 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <network_ready+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	691b      	ldr	r3, [r3, #16]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030240 	.word	0x00030240

000d6260 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <network_on+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	695b      	ldr	r3, [r3, #20]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030240 	.word	0x00030240

000d6270 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <network_off+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	699b      	ldr	r3, [r3, #24]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030240 	.word	0x00030240

000d6280 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <network_listen+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	69db      	ldr	r3, [r3, #28]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030240 	.word	0x00030240

000d6290 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <network_listening+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	6a1b      	ldr	r3, [r3, #32]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030240 	.word	0x00030240

000d62a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <network_set_listen_timeout+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030240 	.word	0x00030240

000d62b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <network_get_listen_timeout+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030240 	.word	0x00030240

000d62c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <malloc+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	681b      	ldr	r3, [r3, #0]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	0003021c 	.word	0x0003021c

000d62d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <free+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	685b      	ldr	r3, [r3, #4]
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	0003021c 	.word	0x0003021c

000d62e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <realloc+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	689b      	ldr	r3, [r3, #8]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	0003021c 	.word	0x0003021c

000d62f0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <vsnprintf+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	0003021c 	.word	0x0003021c

000d6300 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <abort+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	0003021c 	.word	0x0003021c

000d6310 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <_malloc_r+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	0003021c 	.word	0x0003021c

000d6320 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <__errno+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	0003021c 	.word	0x0003021c

000d6330 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <newlib_impure_ptr_callback+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	0003021c 	.word	0x0003021c

000d6340 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6340:	2100      	movs	r1, #0
   d6342:	f7ff bf1f 	b.w	d6184 <system_delay_ms>

000d6346 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6346:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6348:	6883      	ldr	r3, [r0, #8]
   d634a:	4604      	mov	r4, r0
   d634c:	b90b      	cbnz	r3, d6352 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d634e:	f001 fbe0 	bl	d7b12 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6352:	68c3      	ldr	r3, [r0, #12]
   d6354:	4798      	blx	r3
      if (_M_manager)
   d6356:	68a3      	ldr	r3, [r4, #8]
   d6358:	b11b      	cbz	r3, d6362 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d635a:	2203      	movs	r2, #3
   d635c:	4621      	mov	r1, r4
   d635e:	4620      	mov	r0, r4
   d6360:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6362:	4620      	mov	r0, r4
   d6364:	2110      	movs	r1, #16
}
   d6366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d636a:	f001 bbcc 	b.w	d7b06 <_ZdlPvj>

000d636e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d636e:	b510      	push	{r4, lr}
   d6370:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6372:	6800      	ldr	r0, [r0, #0]
   d6374:	b108      	cbz	r0, d637a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6376:	f7ff fd83 	bl	d5e80 <os_mutex_recursive_destroy>
    }
   d637a:	4620      	mov	r0, r4
   d637c:	bd10      	pop	{r4, pc}

000d637e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d637e:	680b      	ldr	r3, [r1, #0]
   d6380:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6382:	b113      	cbz	r3, d638a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6384:	685a      	ldr	r2, [r3, #4]
   d6386:	3201      	adds	r2, #1
   d6388:	605a      	str	r2, [r3, #4]
      }
   d638a:	4770      	bx	lr

000d638c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d638c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d638e:	4c06      	ldr	r4, [pc, #24]	; (d63a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6390:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6392:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6394:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6396:	f7ff fd6b 	bl	d5e70 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d639a:	4620      	mov	r0, r4
   d639c:	4a03      	ldr	r2, [pc, #12]	; (d63ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d639e:	4904      	ldr	r1, [pc, #16]	; (d63b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d63a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d63a4:	f001 bbaa 	b.w	d7afc <__aeabi_atexit>
   d63a8:	2003e608 	.word	0x2003e608
   d63ac:	2003e420 	.word	0x2003e420
   d63b0:	000d636f 	.word	0x000d636f

000d63b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63b4:	4770      	bx	lr

000d63b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d63b6:	2000      	movs	r0, #0
   d63b8:	4770      	bx	lr

000d63ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63ba:	b510      	push	{r4, lr}
   d63bc:	2110      	movs	r1, #16
   d63be:	4604      	mov	r4, r0
   d63c0:	f001 fba1 	bl	d7b06 <_ZdlPvj>
   d63c4:	4620      	mov	r0, r4
   d63c6:	bd10      	pop	{r4, pc}

000d63c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d63c8:	b508      	push	{r3, lr}
      { delete this; }
   d63ca:	f7ff fff6 	bl	d63ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d63ce:	bd08      	pop	{r3, pc}

000d63d0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d63d0:	b510      	push	{r4, lr}
      if (_M_manager)
   d63d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d63d4:	4604      	mov	r4, r0
      if (_M_manager)
   d63d6:	b113      	cbz	r3, d63de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63d8:	2203      	movs	r2, #3
   d63da:	4601      	mov	r1, r0
   d63dc:	4798      	blx	r3
    }
   d63de:	4620      	mov	r0, r4
   d63e0:	bd10      	pop	{r4, pc}

000d63e2 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d63e2:	b530      	push	{r4, r5, lr}
        type_(type) {
   d63e4:	2200      	movs	r2, #0
   d63e6:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d63ea:	6002      	str	r2, [r0, #0]
   d63ec:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d63ee:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d63f0:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d63f2:	680c      	ldr	r4, [r1, #0]
   d63f4:	8085      	strh	r5, [r0, #4]
   d63f6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d63f8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d63fa:	bd30      	pop	{r4, r5, pc}

000d63fc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d63fc:	b510      	push	{r4, lr}
   d63fe:	4604      	mov	r4, r0
    free((void*)msg_);
   d6400:	6800      	ldr	r0, [r0, #0]
   d6402:	f7ff ff65 	bl	d62d0 <free>
}
   d6406:	4620      	mov	r0, r4
   d6408:	bd10      	pop	{r4, pc}

000d640a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d640a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d640c:	68c4      	ldr	r4, [r0, #12]
   d640e:	b1f4      	cbz	r4, d644e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6410:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6412:	2b02      	cmp	r3, #2
   d6414:	d103      	bne.n	d641e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6416:	f104 000c 	add.w	r0, r4, #12
   d641a:	f7ff ffef 	bl	d63fc <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d641e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6420:	b135      	cbz	r5, d6430 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6422:	4628      	mov	r0, r5
   d6424:	f7ff ffd4 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
   d6428:	2110      	movs	r1, #16
   d642a:	4628      	mov	r0, r5
   d642c:	f001 fb6b 	bl	d7b06 <_ZdlPvj>
   d6430:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6432:	b135      	cbz	r5, d6442 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6434:	4628      	mov	r0, r5
   d6436:	f7ff ffcb 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
   d643a:	2110      	movs	r1, #16
   d643c:	4628      	mov	r0, r5
   d643e:	f001 fb62 	bl	d7b06 <_ZdlPvj>
   d6442:	4620      	mov	r0, r4
   d6444:	2114      	movs	r1, #20
   d6446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d644a:	f001 bb5c 	b.w	d7b06 <_ZdlPvj>
   d644e:	bd38      	pop	{r3, r4, r5, pc}

000d6450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6450:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6452:	460e      	mov	r6, r1
   d6454:	4604      	mov	r4, r0
   d6456:	f856 3b04 	ldr.w	r3, [r6], #4
   d645a:	9300      	str	r3, [sp, #0]
   d645c:	460d      	mov	r5, r1
   d645e:	a801      	add	r0, sp, #4
   d6460:	4631      	mov	r1, r6
   d6462:	f7ff ff8c 	bl	d637e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6466:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6468:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d646a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d646c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d646e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6470:	2300      	movs	r3, #0
   d6472:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6474:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6476:	f7fe fc1d 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d647a:	4630      	mov	r0, r6
   d647c:	f7fe fc1a 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6480:	4628      	mov	r0, r5
   d6482:	2108      	movs	r1, #8
   d6484:	f001 fb3f 	bl	d7b06 <_ZdlPvj>
        return p;
    }
   d6488:	4620      	mov	r0, r4
   d648a:	b002      	add	sp, #8
   d648c:	bd70      	pop	{r4, r5, r6, pc}

000d648e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d648e:	b513      	push	{r0, r1, r4, lr}
   d6490:	460b      	mov	r3, r1
   d6492:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6494:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6498:	466c      	mov	r4, sp
   d649a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d649e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d64a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d64a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d64aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d64ae:	b002      	add	sp, #8
   d64b0:	bd10      	pop	{r4, pc}

000d64b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d64b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d64b4:	b510      	push	{r4, lr}
      if (_M_empty())
   d64b6:	b90a      	cbnz	r2, d64bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d64b8:	f001 fb2b 	bl	d7b12 <_ZSt25__throw_bad_function_callv>
    }
   d64bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64c0:	68c3      	ldr	r3, [r0, #12]
   d64c2:	4718      	bx	r3

000d64c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d64c6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d64c8:	f100 0110 	add.w	r1, r0, #16
   d64cc:	f7ff fff1 	bl	d64b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d64d0:	bd08      	pop	{r3, pc}

000d64d2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d64d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d64d4:	b510      	push	{r4, lr}
      if (_M_empty())
   d64d6:	b90a      	cbnz	r2, d64dc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d64d8:	f001 fb1b 	bl	d7b12 <_ZSt25__throw_bad_function_callv>
    }
   d64dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64e0:	68c3      	ldr	r3, [r0, #12]
   d64e2:	4718      	bx	r3

000d64e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d64e6:	6800      	ldr	r0, [r0, #0]
   d64e8:	f100 0110 	add.w	r1, r0, #16
   d64ec:	f7ff fff1 	bl	d64d2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d64f0:	bd08      	pop	{r3, pc}
	...

000d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d64f4:	b538      	push	{r3, r4, r5, lr}
   d64f6:	2300      	movs	r3, #0
   d64f8:	4604      	mov	r4, r0
   d64fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d64fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d64fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6500:	f7fd fdc9 	bl	d4096 <_Znwj>
   d6504:	b128      	cbz	r0, d6512 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6506:	2301      	movs	r3, #1
   d6508:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d650c:	4b02      	ldr	r3, [pc, #8]	; (d6518 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d650e:	6003      	str	r3, [r0, #0]
   d6510:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6512:	6020      	str	r0, [r4, #0]
	}
   d6514:	4620      	mov	r0, r4
   d6516:	bd38      	pop	{r3, r4, r5, pc}
   d6518:	000d9c40 	.word	0x000d9c40

000d651c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d651c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d651e:	2300      	movs	r3, #0
   d6520:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6522:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6524:	4604      	mov	r4, r0
   d6526:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6528:	b12b      	cbz	r3, d6536 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d652a:	2202      	movs	r2, #2
   d652c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d652e:	68eb      	ldr	r3, [r5, #12]
   d6530:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6532:	68ab      	ldr	r3, [r5, #8]
   d6534:	60a3      	str	r3, [r4, #8]
    }
   d6536:	4620      	mov	r0, r4
   d6538:	bd38      	pop	{r3, r4, r5, pc}
	...

000d653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d653c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d653e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6540:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6542:	4668      	mov	r0, sp
   d6544:	f7ff ff4d 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6548:	f04f 0302 	mov.w	r3, #2
   d654c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6550:	2a00      	cmp	r2, #0
   d6552:	d103      	bne.n	d655c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6554:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6558:	2900      	cmp	r1, #0
   d655a:	d1f7      	bne.n	d654c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d655c:	d125      	bne.n	d65aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d655e:	f104 050c 	add.w	r5, r4, #12
   d6562:	4669      	mov	r1, sp
   d6564:	4628      	mov	r0, r5
   d6566:	f7ff ff3c 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d656a:	f3bf 8f5b 	dmb	ish
   d656e:	2301      	movs	r3, #1
   d6570:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6572:	2000      	movs	r0, #0
   d6574:	f104 0308 	add.w	r3, r4, #8
   d6578:	f3bf 8f5b 	dmb	ish
   d657c:	e853 6f00 	ldrex	r6, [r3]
   d6580:	e843 0200 	strex	r2, r0, [r3]
   d6584:	2a00      	cmp	r2, #0
   d6586:	d1f9      	bne.n	d657c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6588:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d658c:	b16e      	cbz	r6, d65aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d658e:	f7ff fe01 	bl	d6194 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6592:	b178      	cbz	r0, d65b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6594:	4629      	mov	r1, r5
   d6596:	4630      	mov	r0, r6
   d6598:	f7ff ff8b 	bl	d64b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d659c:	4630      	mov	r0, r6
   d659e:	f7ff ff17 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d65a2:	2110      	movs	r1, #16
   d65a4:	4630      	mov	r0, r6
   d65a6:	f001 faae 	bl	d7b06 <_ZdlPvj>
        p_->setError(std::move(error));
   d65aa:	4668      	mov	r0, sp
   d65ac:	f7ff ff26 	bl	d63fc <_ZN8particle5ErrorD1Ev>
    }
   d65b0:	b009      	add	sp, #36	; 0x24
   d65b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65b4:	4631      	mov	r1, r6
   d65b6:	a802      	add	r0, sp, #8
   d65b8:	f7ff ffb0 	bl	d651c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d65bc:	68e0      	ldr	r0, [r4, #12]
   d65be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d65c2:	b108      	cbz	r0, d65c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d65c4:	f003 f986 	bl	d98d4 <strdup>
        type_(type) {
   d65c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65ca:	2010      	movs	r0, #16
   d65cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   d65d0:	f7fd fd61 	bl	d4096 <_Znwj>
   d65d4:	4605      	mov	r5, r0
   d65d6:	b1e8      	cbz	r0, d6614 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d65d8:	2700      	movs	r7, #0
   d65da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65dc:	2018      	movs	r0, #24
   d65de:	f7fd fd5a 	bl	d4096 <_Znwj>
   d65e2:	4604      	mov	r4, r0
   d65e4:	b188      	cbz	r0, d660a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d65e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d65e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d65ea:	a802      	add	r0, sp, #8
   d65ec:	f7ff ff4f 	bl	d648e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d65f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d65f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d65f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d65f8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d65fa:	a906      	add	r1, sp, #24
   d65fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d65fe:	60e3      	str	r3, [r4, #12]
   d6600:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6604:	9205      	str	r2, [sp, #20]
   d6606:	f7ff feec 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d660a:	4b08      	ldr	r3, [pc, #32]	; (d662c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d660c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d660e:	4b08      	ldr	r3, [pc, #32]	; (d6630 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6610:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6612:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6614:	a806      	add	r0, sp, #24
   d6616:	f7ff fef1 	bl	d63fc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d661a:	a802      	add	r0, sp, #8
   d661c:	f7ff fed8 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6620:	2200      	movs	r2, #0
   d6622:	4629      	mov	r1, r5
   d6624:	4803      	ldr	r0, [pc, #12]	; (d6634 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6626:	f7ff fdbd 	bl	d61a4 <application_thread_invoke>
   d662a:	e7b7      	b.n	d659c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d662c:	000d64c5 	.word	0x000d64c5
   d6630:	000d675d 	.word	0x000d675d
   d6634:	000d6347 	.word	0x000d6347

000d6638 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d663c:	b08a      	sub	sp, #40	; 0x28
   d663e:	4605      	mov	r5, r0
   d6640:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6644:	460c      	mov	r4, r1
   d6646:	4617      	mov	r7, r2
   d6648:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d664a:	f7ff fdd1 	bl	d61f0 <spark_cloud_flag_connected>
   d664e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6650:	4682      	mov	sl, r0
   d6652:	bb38      	cbnz	r0, d66a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6654:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6658:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d665a:	a905      	add	r1, sp, #20
   d665c:	4630      	mov	r0, r6
   d665e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6662:	f7ff febe 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
   d6666:	2014      	movs	r0, #20
   d6668:	f7fd fd15 	bl	d4096 <_Znwj>
   d666c:	4604      	mov	r4, r0
   d666e:	b148      	cbz	r0, d6684 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6670:	2302      	movs	r3, #2
   d6672:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6674:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6676:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d667a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d667c:	4631      	mov	r1, r6
   d667e:	300c      	adds	r0, #12
   d6680:	f7ff feaf 	bl	d63e2 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6684:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6686:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6688:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d668c:	f7ff ff32 	bl	d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6690:	4630      	mov	r0, r6
   d6692:	f7ff feb3 	bl	d63fc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6696:	a805      	add	r0, sp, #20
   d6698:	f7ff feb0 	bl	d63fc <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d669c:	4628      	mov	r0, r5
   d669e:	b00a      	add	sp, #40	; 0x28
   d66a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d66a4:	230c      	movs	r3, #12
   d66a6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d66aa:	2014      	movs	r0, #20
   d66ac:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d66b0:	9307      	str	r3, [sp, #28]
   d66b2:	f7fd fcf0 	bl	d4096 <_Znwj>
   d66b6:	4601      	mov	r1, r0
   d66b8:	b128      	cbz	r0, d66c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66ba:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d66be:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66c2:	f880 a001 	strb.w	sl, [r0, #1]
   d66c6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d66c8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d66ca:	f7ff ff13 	bl	d64f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d66ce:	4b22      	ldr	r3, [pc, #136]	; (d6758 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d66d0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d66d2:	2008      	movs	r0, #8
   d66d4:	f7fd fcdf 	bl	d4096 <_Znwj>
   d66d8:	4682      	mov	sl, r0
   d66da:	b128      	cbz	r0, d66e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66dc:	9b03      	ldr	r3, [sp, #12]
   d66de:	f840 3b04 	str.w	r3, [r0], #4
   d66e2:	a904      	add	r1, sp, #16
   d66e4:	f7ff fe4b 	bl	d637e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d66e8:	9600      	str	r6, [sp, #0]
   d66ea:	fa5f f389 	uxtb.w	r3, r9
   d66ee:	4642      	mov	r2, r8
   d66f0:	4639      	mov	r1, r7
   d66f2:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d66f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d66f8:	f7ff fd82 	bl	d6200 <spark_send_event>
   d66fc:	b9b8      	cbnz	r0, d672e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d66fe:	9b03      	ldr	r3, [sp, #12]
   d6700:	785b      	ldrb	r3, [r3, #1]
   d6702:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6706:	b993      	cbnz	r3, d672e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6708:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d670c:	a905      	add	r1, sp, #20
   d670e:	a803      	add	r0, sp, #12
   d6710:	9205      	str	r2, [sp, #20]
   d6712:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6716:	f7ff ff11 	bl	d653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d671a:	a805      	add	r0, sp, #20
   d671c:	f7ff fe6e 	bl	d63fc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6720:	a805      	add	r0, sp, #20
   d6722:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6724:	f7ff fe94 	bl	d6450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6728:	a806      	add	r0, sp, #24
   d672a:	f7fe fac3 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d672e:	9b03      	ldr	r3, [sp, #12]
   d6730:	9305      	str	r3, [sp, #20]
   d6732:	a904      	add	r1, sp, #16
   d6734:	a806      	add	r0, sp, #24
   d6736:	f7ff fe22 	bl	d637e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d673a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d673c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d673e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6740:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6742:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6744:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6746:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6748:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d674a:	f7fe fab3 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d674e:	a804      	add	r0, sp, #16
   d6750:	f7fe fab0 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6754:	e7a2      	b.n	d669c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6756:	bf00      	nop
   d6758:	000d6821 	.word	0x000d6821

000d675c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d675c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d675e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6760:	4605      	mov	r5, r0
	  switch (__op)
   d6762:	d007      	beq.n	d6774 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6764:	2a03      	cmp	r2, #3
   d6766:	d018      	beq.n	d679a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6768:	2a01      	cmp	r2, #1
   d676a:	d101      	bne.n	d6770 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d676c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d676e:	6003      	str	r3, [r0, #0]
	}
   d6770:	2000      	movs	r0, #0
   d6772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6774:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6776:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6778:	f7fd fc8d 	bl	d4096 <_Znwj>
   d677c:	4604      	mov	r4, r0
   d677e:	b150      	cbz	r0, d6796 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6780:	4631      	mov	r1, r6
   d6782:	f7ff fecb 	bl	d651c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6786:	6930      	ldr	r0, [r6, #16]
   d6788:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d678c:	b108      	cbz	r0, d6792 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d678e:	f003 f8a1 	bl	d98d4 <strdup>
        type_(type) {
   d6792:	6120      	str	r0, [r4, #16]
   d6794:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6796:	602c      	str	r4, [r5, #0]
	}
   d6798:	e7ea      	b.n	d6770 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d679a:	6804      	ldr	r4, [r0, #0]
   d679c:	2c00      	cmp	r4, #0
   d679e:	d0e7      	beq.n	d6770 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d67a0:	f104 0010 	add.w	r0, r4, #16
   d67a4:	f7ff fe2a 	bl	d63fc <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d67a8:	4620      	mov	r0, r4
   d67aa:	f7ff fe11 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d67ae:	2118      	movs	r1, #24
   d67b0:	4620      	mov	r0, r4
   d67b2:	f001 f9a8 	bl	d7b06 <_ZdlPvj>
   d67b6:	e7db      	b.n	d6770 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d67b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d67b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d67ba:	2300      	movs	r3, #0
   d67bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d67be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d67c0:	4604      	mov	r4, r0
   d67c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d67c4:	b12b      	cbz	r3, d67d2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d67c6:	2202      	movs	r2, #2
   d67c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d67ca:	68eb      	ldr	r3, [r5, #12]
   d67cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d67ce:	68ab      	ldr	r3, [r5, #8]
   d67d0:	60a3      	str	r3, [r4, #8]
    }
   d67d2:	4620      	mov	r0, r4
   d67d4:	bd38      	pop	{r3, r4, r5, pc}

000d67d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d67d6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67d8:	b570      	push	{r4, r5, r6, lr}
   d67da:	4604      	mov	r4, r0
	  switch (__op)
   d67dc:	d007      	beq.n	d67ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d67de:	2a03      	cmp	r2, #3
   d67e0:	d012      	beq.n	d6808 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d67e2:	2a01      	cmp	r2, #1
   d67e4:	d101      	bne.n	d67ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d67e6:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d67e8:	6003      	str	r3, [r0, #0]
	}
   d67ea:	2000      	movs	r0, #0
   d67ec:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d67ee:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d67f0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d67f2:	f7fd fc50 	bl	d4096 <_Znwj>
   d67f6:	4605      	mov	r5, r0
   d67f8:	b120      	cbz	r0, d6804 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d67fa:	4631      	mov	r1, r6
   d67fc:	f7ff ffdc 	bl	d67b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6800:	7c33      	ldrb	r3, [r6, #16]
   d6802:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6804:	6025      	str	r5, [r4, #0]
	}
   d6806:	e7f0      	b.n	d67ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6808:	6804      	ldr	r4, [r0, #0]
   d680a:	2c00      	cmp	r4, #0
   d680c:	d0ed      	beq.n	d67ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d680e:	4620      	mov	r0, r4
   d6810:	f7ff fdde 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6814:	2114      	movs	r1, #20
   d6816:	4620      	mov	r0, r4
   d6818:	f001 f975 	bl	d7b06 <_ZdlPvj>
   d681c:	e7e5      	b.n	d67ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6820 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6820:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6822:	b089      	sub	sp, #36	; 0x24
   d6824:	4604      	mov	r4, r0
   d6826:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6828:	a801      	add	r0, sp, #4
   d682a:	4611      	mov	r1, r2
   d682c:	f7ff fe10 	bl	d6450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6830:	b1a4      	cbz	r4, d685c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6832:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6834:	b11d      	cbz	r5, d683e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6836:	4628      	mov	r0, r5
   d6838:	f003 f84c 	bl	d98d4 <strdup>
   d683c:	4605      	mov	r5, r0
   d683e:	a801      	add	r0, sp, #4
   d6840:	a903      	add	r1, sp, #12
        type_(type) {
   d6842:	9503      	str	r5, [sp, #12]
   d6844:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6848:	f7ff fe78 	bl	d653c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d684c:	a803      	add	r0, sp, #12
   d684e:	f7ff fdd5 	bl	d63fc <_ZN8particle5ErrorD1Ev>
   d6852:	a802      	add	r0, sp, #8
   d6854:	f7fe fa2e 	bl	d4cb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6858:	b009      	add	sp, #36	; 0x24
   d685a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d685c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d685e:	2301      	movs	r3, #1
   d6860:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6864:	2a00      	cmp	r2, #0
   d6866:	d103      	bne.n	d6870 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6868:	e8c5 3f41 	strexb	r1, r3, [r5]
   d686c:	2900      	cmp	r1, #0
   d686e:	d1f7      	bne.n	d6860 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6870:	d1ef      	bne.n	d6852 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6872:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6874:	f3bf 8f5b 	dmb	ish
   d6878:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d687a:	1d2b      	adds	r3, r5, #4
   d687c:	f3bf 8f5b 	dmb	ish
   d6880:	e853 6f00 	ldrex	r6, [r3]
   d6884:	e843 4200 	strex	r2, r4, [r3]
   d6888:	2a00      	cmp	r2, #0
   d688a:	d1f9      	bne.n	d6880 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d688c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6890:	2e00      	cmp	r6, #0
   d6892:	d0de      	beq.n	d6852 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6894:	4620      	mov	r0, r4
   d6896:	f7ff fc7d 	bl	d6194 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d689a:	4607      	mov	r7, r0
   d689c:	b160      	cbz	r0, d68b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d689e:	f105 010c 	add.w	r1, r5, #12
   d68a2:	4630      	mov	r0, r6
   d68a4:	f7ff fe15 	bl	d64d2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d68a8:	4630      	mov	r0, r6
   d68aa:	f7ff fd91 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d68ae:	2110      	movs	r1, #16
   d68b0:	4630      	mov	r0, r6
   d68b2:	f001 f928 	bl	d7b06 <_ZdlPvj>
   d68b6:	e7cc      	b.n	d6852 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d68b8:	4631      	mov	r1, r6
   d68ba:	a803      	add	r0, sp, #12
   d68bc:	f7ff ff7c 	bl	d67b8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68c0:	7b2b      	ldrb	r3, [r5, #12]
   d68c2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d68c6:	2010      	movs	r0, #16
   d68c8:	f7fd fbe5 	bl	d4096 <_Znwj>
   d68cc:	4605      	mov	r5, r0
   d68ce:	b1d0      	cbz	r0, d6906 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d68d0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68d2:	2014      	movs	r0, #20
   d68d4:	f7fd fbdf 	bl	d4096 <_Znwj>
   d68d8:	4604      	mov	r4, r0
   d68da:	b178      	cbz	r0, d68fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d68dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d68de:	4601      	mov	r1, r0
   d68e0:	a803      	add	r0, sp, #12
   d68e2:	f7ff fdd4 	bl	d648e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68e6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d68e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68ea:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68ec:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d68ee:	9205      	str	r2, [sp, #20]
   d68f0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d68f2:	60e3      	str	r3, [r4, #12]
   d68f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d68f8:	9206      	str	r2, [sp, #24]
   d68fa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d68fc:	4b06      	ldr	r3, [pc, #24]	; (d6918 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d68fe:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6900:	4b06      	ldr	r3, [pc, #24]	; (d691c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6902:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6904:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6906:	a803      	add	r0, sp, #12
   d6908:	f7ff fd62 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d690c:	2200      	movs	r2, #0
   d690e:	4629      	mov	r1, r5
   d6910:	4803      	ldr	r0, [pc, #12]	; (d6920 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6912:	f7ff fc47 	bl	d61a4 <application_thread_invoke>
   d6916:	e7c7      	b.n	d68a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6918:	000d64e5 	.word	0x000d64e5
   d691c:	000d67d7 	.word	0x000d67d7
   d6920:	000d6347 	.word	0x000d6347

000d6924 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6924:	2200      	movs	r2, #0
   d6926:	6840      	ldr	r0, [r0, #4]
   d6928:	4611      	mov	r1, r2
   d692a:	f7ff bcb1 	b.w	d6290 <network_listening>

000d692e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d692e:	2200      	movs	r2, #0
   d6930:	6840      	ldr	r0, [r0, #4]
   d6932:	4611      	mov	r1, r2
   d6934:	f7ff bcbc 	b.w	d62b0 <network_get_listen_timeout>

000d6938 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6938:	6840      	ldr	r0, [r0, #4]
   d693a:	2200      	movs	r2, #0
   d693c:	f7ff bcb0 	b.w	d62a0 <network_set_listen_timeout>

000d6940 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6940:	6840      	ldr	r0, [r0, #4]
   d6942:	2200      	movs	r2, #0
   d6944:	f081 0101 	eor.w	r1, r1, #1
   d6948:	f7ff bc9a 	b.w	d6280 <network_listen>

000d694c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d694c:	2300      	movs	r3, #0
   d694e:	6840      	ldr	r0, [r0, #4]
   d6950:	461a      	mov	r2, r3
   d6952:	4619      	mov	r1, r3
   d6954:	f7ff bc8c 	b.w	d6270 <network_off>

000d6958 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6958:	2300      	movs	r3, #0
   d695a:	6840      	ldr	r0, [r0, #4]
   d695c:	461a      	mov	r2, r3
   d695e:	4619      	mov	r1, r3
   d6960:	f7ff bc7e 	b.w	d6260 <network_on>

000d6964 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6964:	2200      	movs	r2, #0
   d6966:	6840      	ldr	r0, [r0, #4]
   d6968:	4611      	mov	r1, r2
   d696a:	f7ff bc71 	b.w	d6250 <network_ready>

000d696e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d696e:	2200      	movs	r2, #0
   d6970:	6840      	ldr	r0, [r0, #4]
   d6972:	4611      	mov	r1, r2
   d6974:	f7ff bc5c 	b.w	d6230 <network_connecting>

000d6978 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6978:	6840      	ldr	r0, [r0, #4]
   d697a:	2200      	movs	r2, #0
   d697c:	2102      	movs	r1, #2
   d697e:	f7ff bc5f 	b.w	d6240 <network_disconnect>

000d6982 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6982:	2300      	movs	r3, #0
   d6984:	6840      	ldr	r0, [r0, #4]
   d6986:	461a      	mov	r2, r3
   d6988:	f7ff bc4a 	b.w	d6220 <network_connect>

000d698c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d698c:	4b02      	ldr	r3, [pc, #8]	; (d6998 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d698e:	2203      	movs	r2, #3
   d6990:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6992:	4a02      	ldr	r2, [pc, #8]	; (d699c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6994:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6996:	4770      	bx	lr
   d6998:	2003e60c 	.word	0x2003e60c
   d699c:	000d9c5c 	.word	0x000d9c5c

000d69a0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d69a0:	4770      	bx	lr

000d69a2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d69a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69a4:	4606      	mov	r6, r0
   d69a6:	4615      	mov	r5, r2
   d69a8:	460c      	mov	r4, r1
   d69aa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d69ac:	42bc      	cmp	r4, r7
   d69ae:	d006      	beq.n	d69be <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d69b0:	6833      	ldr	r3, [r6, #0]
   d69b2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d69b6:	689b      	ldr	r3, [r3, #8]
   d69b8:	4630      	mov	r0, r6
   d69ba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d69bc:	e7f6      	b.n	d69ac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d69be:	4628      	mov	r0, r5
   d69c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69c2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d69c2:	7c00      	ldrb	r0, [r0, #16]
   d69c4:	2200      	movs	r2, #0
   d69c6:	f7ff bae5 	b.w	d5f94 <hal_i2c_write>

000d69ca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d69ca:	7c00      	ldrb	r0, [r0, #16]
   d69cc:	2100      	movs	r1, #0
   d69ce:	f7ff bae9 	b.w	d5fa4 <hal_i2c_available>

000d69d2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d69d2:	7c00      	ldrb	r0, [r0, #16]
   d69d4:	2100      	movs	r1, #0
   d69d6:	f7ff baed 	b.w	d5fb4 <hal_i2c_read>

000d69da <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d69da:	7c00      	ldrb	r0, [r0, #16]
   d69dc:	2100      	movs	r1, #0
   d69de:	f7ff baf1 	b.w	d5fc4 <hal_i2c_peek>

000d69e2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d69e2:	7c00      	ldrb	r0, [r0, #16]
   d69e4:	2100      	movs	r1, #0
   d69e6:	f7ff baf5 	b.w	d5fd4 <hal_i2c_flush>

000d69ea <_ZN7TwoWireD0Ev>:
   d69ea:	b510      	push	{r4, lr}
   d69ec:	2114      	movs	r1, #20
   d69ee:	4604      	mov	r4, r0
   d69f0:	f001 f889 	bl	d7b06 <_ZdlPvj>
   d69f4:	4620      	mov	r0, r4
   d69f6:	bd10      	pop	{r4, pc}

000d69f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d69f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d69fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d69fe:	4604      	mov	r4, r0
   d6a00:	4608      	mov	r0, r1
   d6a02:	2100      	movs	r1, #0
   d6a04:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a08:	4b03      	ldr	r3, [pc, #12]	; (d6a18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6a0a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6a0c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6a0e:	4611      	mov	r1, r2
   d6a10:	f7ff faf0 	bl	d5ff4 <hal_i2c_init>
}
   d6a14:	4620      	mov	r0, r4
   d6a16:	bd10      	pop	{r4, pc}
   d6a18:	000d9c90 	.word	0x000d9c90

000d6a1c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6a1c:	7c00      	ldrb	r0, [r0, #16]
   d6a1e:	2200      	movs	r2, #0
   d6a20:	f7ff ba98 	b.w	d5f54 <hal_i2c_set_speed>

000d6a24 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6a24:	2300      	movs	r3, #0
   d6a26:	7c00      	ldrb	r0, [r0, #16]
   d6a28:	461a      	mov	r2, r3
   d6a2a:	4619      	mov	r1, r3
   d6a2c:	f7ff ba9a 	b.w	d5f64 <hal_i2c_begin>

000d6a30 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6a30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6a32:	2200      	movs	r2, #0
   d6a34:	2314      	movs	r3, #20
   d6a36:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6a3a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6a3e:	780b      	ldrb	r3, [r1, #0]
   d6a40:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a44:	684b      	ldr	r3, [r1, #4]
   d6a46:	9303      	str	r3, [sp, #12]
   d6a48:	68cb      	ldr	r3, [r1, #12]
   d6a4a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6a4c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6a4e:	7a0b      	ldrb	r3, [r1, #8]
   d6a50:	9305      	str	r3, [sp, #20]
   d6a52:	a901      	add	r1, sp, #4
   d6a54:	f7ff fad6 	bl	d6004 <hal_i2c_request_ex>
}
   d6a58:	b007      	add	sp, #28
   d6a5a:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a5e <_ZN7TwoWire11requestFromEhjh>:
{
   d6a5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6a60:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6a62:	f88d 1000 	strb.w	r1, [sp]
   d6a66:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6a6a:	9103      	str	r1, [sp, #12]
   d6a6c:	bf18      	it	ne
   d6a6e:	2301      	movne	r3, #1
   d6a70:	4669      	mov	r1, sp
    size_ = size;
   d6a72:	9201      	str	r2, [sp, #4]
   d6a74:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a78:	f7ff ffda 	bl	d6a30 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6a7c:	b005      	add	sp, #20
   d6a7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a82 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6a82:	2301      	movs	r3, #1
   d6a84:	f7ff bfeb 	b.w	d6a5e <_ZN7TwoWire11requestFromEhjh>

000d6a88 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6a88:	7c00      	ldrb	r0, [r0, #16]
   d6a8a:	2200      	movs	r2, #0
   d6a8c:	f7ff ba72 	b.w	d5f74 <hal_i2c_begin_transmission>

000d6a90 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6a90:	7c00      	ldrb	r0, [r0, #16]
   d6a92:	2200      	movs	r2, #0
   d6a94:	f7ff ba76 	b.w	d5f84 <hal_i2c_end_transmission>

000d6a98 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6a98:	2101      	movs	r1, #1
   d6a9a:	f7ff bff9 	b.w	d6a90 <_ZN7TwoWire15endTransmissionEh>

000d6a9e <_Z21attachInterruptDirect9IRQn_TypePFvvEb>:
    return ok;
}

bool attachInterruptDirect(IRQn_Type irq, HAL_Direct_Interrupt_Handler handler, bool enable)
{
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6a9e:	2a00      	cmp	r2, #0
{
   d6aa0:	b508      	push	{r3, lr}
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6aa2:	f04f 0300 	mov.w	r3, #0
   d6aa6:	bf14      	ite	ne
   d6aa8:	2204      	movne	r2, #4
   d6aaa:	461a      	moveq	r2, r3
   d6aac:	f7ff fa48 	bl	d5f40 <HAL_Set_Direct_Interrupt_Handler>
    return ok;
}
   d6ab0:	fab0 f080 	clz	r0, r0
   d6ab4:	0940      	lsrs	r0, r0, #5
   d6ab6:	bd08      	pop	{r3, pc}

000d6ab8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ab8:	4770      	bx	lr

000d6aba <_ZN9IPAddressD0Ev>:
   d6aba:	b510      	push	{r4, lr}
   d6abc:	2118      	movs	r1, #24
   d6abe:	4604      	mov	r4, r0
   d6ac0:	f001 f821 	bl	d7b06 <_ZdlPvj>
   d6ac4:	4620      	mov	r0, r4
   d6ac6:	bd10      	pop	{r4, pc}

000d6ac8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6aca:	7d03      	ldrb	r3, [r0, #20]
   d6acc:	2b06      	cmp	r3, #6
{
   d6ace:	b08d      	sub	sp, #52	; 0x34
   d6ad0:	460e      	mov	r6, r1
   d6ad2:	f100 0704 	add.w	r7, r0, #4
   d6ad6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6ada:	d012      	beq.n	d6b02 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6adc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ae4:	220a      	movs	r2, #10
   d6ae6:	4630      	mov	r0, r6
   d6ae8:	f000 f94d 	bl	d6d86 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6aec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6aee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6af0:	d019      	beq.n	d6b26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6af2:	2c00      	cmp	r4, #0
   d6af4:	d0f4      	beq.n	d6ae0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6af6:	212e      	movs	r1, #46	; 0x2e
   d6af8:	4630      	mov	r0, r6
   d6afa:	f000 f927 	bl	d6d4c <_ZN5Print5printEc>
   d6afe:	4404      	add	r4, r0
   d6b00:	e7ee      	b.n	d6ae0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b02:	232f      	movs	r3, #47	; 0x2f
   d6b04:	466a      	mov	r2, sp
   d6b06:	4639      	mov	r1, r7
   d6b08:	200a      	movs	r0, #10
		buf[0] = 0;
   d6b0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b0e:	f7ff fa81 	bl	d6014 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6b12:	4668      	mov	r0, sp
   d6b14:	f002 fefb 	bl	d990e <strlen>
   d6b18:	6833      	ldr	r3, [r6, #0]
   d6b1a:	4602      	mov	r2, r0
   d6b1c:	68db      	ldr	r3, [r3, #12]
   d6b1e:	4669      	mov	r1, sp
   d6b20:	4630      	mov	r0, r6
   d6b22:	4798      	blx	r3
   d6b24:	4604      	mov	r4, r0
    }
    return n;
}
   d6b26:	4620      	mov	r0, r4
   d6b28:	b00d      	add	sp, #52	; 0x34
   d6b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6b2c:	b510      	push	{r4, lr}
   d6b2e:	4b05      	ldr	r3, [pc, #20]	; (d6b44 <_ZN9IPAddressC1Ev+0x18>)
   d6b30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b32:	2211      	movs	r2, #17
   d6b34:	f840 3b04 	str.w	r3, [r0], #4
   d6b38:	2100      	movs	r1, #0
   d6b3a:	f002 fe63 	bl	d9804 <memset>
}
   d6b3e:	4620      	mov	r0, r4
   d6b40:	bd10      	pop	{r4, pc}
   d6b42:	bf00      	nop
   d6b44:	000d9cb8 	.word	0x000d9cb8

000d6b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b48:	4603      	mov	r3, r0
   d6b4a:	4a07      	ldr	r2, [pc, #28]	; (d6b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b4c:	b510      	push	{r4, lr}
   d6b4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6b52:	f101 0210 	add.w	r2, r1, #16
   d6b56:	f851 4b04 	ldr.w	r4, [r1], #4
   d6b5a:	f843 4b04 	str.w	r4, [r3], #4
   d6b5e:	4291      	cmp	r1, r2
   d6b60:	d1f9      	bne.n	d6b56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6b62:	780a      	ldrb	r2, [r1, #0]
   d6b64:	701a      	strb	r2, [r3, #0]
}
   d6b66:	bd10      	pop	{r4, pc}
   d6b68:	000d9cb8 	.word	0x000d9cb8

000d6b6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6b6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6b7e:	2304      	movs	r3, #4
   d6b80:	6041      	str	r1, [r0, #4]
   d6b82:	7503      	strb	r3, [r0, #20]
}
   d6b84:	bd10      	pop	{r4, pc}

000d6b86 <_ZN9IPAddressaSEPKh>:
{
   d6b86:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6b88:	78cb      	ldrb	r3, [r1, #3]
   d6b8a:	9300      	str	r3, [sp, #0]
   d6b8c:	788b      	ldrb	r3, [r1, #2]
   d6b8e:	784a      	ldrb	r2, [r1, #1]
   d6b90:	7809      	ldrb	r1, [r1, #0]
   d6b92:	f7ff ffeb 	bl	d6b6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6b96:	b002      	add	sp, #8
   d6b98:	bd10      	pop	{r4, pc}
	...

000d6b9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6b9c:	4b01      	ldr	r3, [pc, #4]	; (d6ba4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6b9e:	4a02      	ldr	r2, [pc, #8]	; (d6ba8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6ba0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6ba2:	4770      	bx	lr
   d6ba4:	2003e614 	.word	0x2003e614
   d6ba8:	000d9cc4 	.word	0x000d9cc4

000d6bac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6bac:	2300      	movs	r3, #0
   d6bae:	6840      	ldr	r0, [r0, #4]
   d6bb0:	461a      	mov	r2, r3
   d6bb2:	f7ff bb35 	b.w	d6220 <network_connect>

000d6bb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6bb6:	6840      	ldr	r0, [r0, #4]
   d6bb8:	2200      	movs	r2, #0
   d6bba:	2102      	movs	r1, #2
   d6bbc:	f7ff bb40 	b.w	d6240 <network_disconnect>

000d6bc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6bc0:	2200      	movs	r2, #0
   d6bc2:	6840      	ldr	r0, [r0, #4]
   d6bc4:	4611      	mov	r1, r2
   d6bc6:	f7ff bb33 	b.w	d6230 <network_connecting>

000d6bca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6bca:	2200      	movs	r2, #0
   d6bcc:	6840      	ldr	r0, [r0, #4]
   d6bce:	4611      	mov	r1, r2
   d6bd0:	f7ff bb3e 	b.w	d6250 <network_ready>

000d6bd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6bd4:	2300      	movs	r3, #0
   d6bd6:	6840      	ldr	r0, [r0, #4]
   d6bd8:	461a      	mov	r2, r3
   d6bda:	4619      	mov	r1, r3
   d6bdc:	f7ff bb40 	b.w	d6260 <network_on>

000d6be0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6be0:	2300      	movs	r3, #0
   d6be2:	6840      	ldr	r0, [r0, #4]
   d6be4:	461a      	mov	r2, r3
   d6be6:	4619      	mov	r1, r3
   d6be8:	f7ff bb42 	b.w	d6270 <network_off>

000d6bec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6bec:	6840      	ldr	r0, [r0, #4]
   d6bee:	2200      	movs	r2, #0
   d6bf0:	f081 0101 	eor.w	r1, r1, #1
   d6bf4:	f7ff bb44 	b.w	d6280 <network_listen>

000d6bf8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6bf8:	6840      	ldr	r0, [r0, #4]
   d6bfa:	2200      	movs	r2, #0
   d6bfc:	f7ff bb50 	b.w	d62a0 <network_set_listen_timeout>

000d6c00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6c00:	2200      	movs	r2, #0
   d6c02:	6840      	ldr	r0, [r0, #4]
   d6c04:	4611      	mov	r1, r2
   d6c06:	f7ff bb53 	b.w	d62b0 <network_get_listen_timeout>

000d6c0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6c0a:	2200      	movs	r2, #0
   d6c0c:	6840      	ldr	r0, [r0, #4]
   d6c0e:	4611      	mov	r1, r2
   d6c10:	f7ff bb3e 	b.w	d6290 <network_listening>

000d6c14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c18:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6c1a:	b095      	sub	sp, #84	; 0x54
   d6c1c:	4616      	mov	r6, r2
   d6c1e:	460d      	mov	r5, r1
   d6c20:	4607      	mov	r7, r0
    IPAddress addr;
   d6c22:	f7ff ff83 	bl	d6b2c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6c26:	4621      	mov	r1, r4
   d6c28:	2218      	movs	r2, #24
   d6c2a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6c2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c2e:	f002 fde9 	bl	d9804 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c32:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6c34:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c38:	4621      	mov	r1, r4
   d6c3a:	466b      	mov	r3, sp
   d6c3c:	aa0c      	add	r2, sp, #48	; 0x30
   d6c3e:	4630      	mov	r0, r6
   d6c40:	f7ff f9f8 	bl	d6034 <netdb_getaddrinfo>
    if (!r) {
   d6c44:	4604      	mov	r4, r0
   d6c46:	2800      	cmp	r0, #0
   d6c48:	d146      	bne.n	d6cd8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c4a:	4602      	mov	r2, r0
   d6c4c:	2101      	movs	r1, #1
   d6c4e:	6868      	ldr	r0, [r5, #4]
   d6c50:	f7ff fafe 	bl	d6250 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c54:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c56:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c58:	4622      	mov	r2, r4
   d6c5a:	6868      	ldr	r0, [r5, #4]
   d6c5c:	f7ff faf8 	bl	d6250 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c60:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c62:	4681      	mov	r9, r0
        bool ok = false;
   d6c64:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c66:	2e00      	cmp	r6, #0
   d6c68:	d036      	beq.n	d6cd8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6c6a:	2900      	cmp	r1, #0
   d6c6c:	d134      	bne.n	d6cd8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c6e:	6873      	ldr	r3, [r6, #4]
   d6c70:	2b02      	cmp	r3, #2
   d6c72:	d003      	beq.n	d6c7c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6c74:	2b0a      	cmp	r3, #10
   d6c76:	d00b      	beq.n	d6c90 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c78:	69f6      	ldr	r6, [r6, #28]
   d6c7a:	e7f4      	b.n	d6c66 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6c7c:	f1b8 0f00 	cmp.w	r8, #0
   d6c80:	d004      	beq.n	d6c8c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c82:	6971      	ldr	r1, [r6, #20]
   d6c84:	4638      	mov	r0, r7
   d6c86:	3104      	adds	r1, #4
   d6c88:	f7ff ff7d 	bl	d6b86 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6c8c:	4641      	mov	r1, r8
   d6c8e:	e7f3      	b.n	d6c78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c90:	f1b9 0f00 	cmp.w	r9, #0
   d6c94:	d101      	bne.n	d6c9a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6c96:	4649      	mov	r1, r9
   d6c98:	e7ee      	b.n	d6c78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c9a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c9c:	2210      	movs	r2, #16
   d6c9e:	a801      	add	r0, sp, #4
   d6ca0:	f002 fdb0 	bl	d9804 <memset>
                    a.v = 6;
   d6ca4:	2306      	movs	r3, #6
   d6ca6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6caa:	ad01      	add	r5, sp, #4
   d6cac:	f104 0308 	add.w	r3, r4, #8
   d6cb0:	3418      	adds	r4, #24
   d6cb2:	6818      	ldr	r0, [r3, #0]
   d6cb4:	6859      	ldr	r1, [r3, #4]
   d6cb6:	462a      	mov	r2, r5
   d6cb8:	c203      	stmia	r2!, {r0, r1}
   d6cba:	3308      	adds	r3, #8
   d6cbc:	42a3      	cmp	r3, r4
   d6cbe:	4615      	mov	r5, r2
   d6cc0:	d1f7      	bne.n	d6cb2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6cc2:	a901      	add	r1, sp, #4
   d6cc4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6cc6:	ad07      	add	r5, sp, #28
   d6cc8:	f7ff ff3e 	bl	d6b48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cce:	1d3c      	adds	r4, r7, #4
   d6cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cd2:	682b      	ldr	r3, [r5, #0]
   d6cd4:	7023      	strb	r3, [r4, #0]
   d6cd6:	e7de      	b.n	d6c96 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6cd8:	9800      	ldr	r0, [sp, #0]
   d6cda:	f7ff f9a3 	bl	d6024 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6cde:	4638      	mov	r0, r7
   d6ce0:	b015      	add	sp, #84	; 0x54
   d6ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6ce8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ce8:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6cea:	4a03      	ldr	r2, [pc, #12]	; (d6cf8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6cec:	601a      	str	r2, [r3, #0]
   d6cee:	2200      	movs	r2, #0
   d6cf0:	605a      	str	r2, [r3, #4]

} // spark
   d6cf2:	4770      	bx	lr
   d6cf4:	2003e618 	.word	0x2003e618
   d6cf8:	000d9cd0 	.word	0x000d9cd0

000d6cfc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cfe:	4606      	mov	r6, r0
   d6d00:	460d      	mov	r5, r1
  size_t n = 0;
   d6d02:	188f      	adds	r7, r1, r2
   d6d04:	2400      	movs	r4, #0
  while (size--) {
   d6d06:	42bd      	cmp	r5, r7
   d6d08:	d00c      	beq.n	d6d24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6d0a:	6833      	ldr	r3, [r6, #0]
   d6d0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d10:	689b      	ldr	r3, [r3, #8]
   d6d12:	4630      	mov	r0, r6
   d6d14:	4798      	blx	r3
     if (chunk>=0)
   d6d16:	1e03      	subs	r3, r0, #0
   d6d18:	db01      	blt.n	d6d1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d1a:	441c      	add	r4, r3
  while (size--) {
   d6d1c:	e7f3      	b.n	d6d06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d1e:	2c00      	cmp	r4, #0
   d6d20:	bf08      	it	eq
   d6d22:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d24:	4620      	mov	r0, r4
   d6d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d28 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6d28:	b513      	push	{r0, r1, r4, lr}
   d6d2a:	4604      	mov	r4, r0
    }
   d6d2c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6d2e:	b159      	cbz	r1, d6d48 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6d30:	9101      	str	r1, [sp, #4]
   d6d32:	f002 fdec 	bl	d990e <strlen>
   d6d36:	6823      	ldr	r3, [r4, #0]
   d6d38:	9901      	ldr	r1, [sp, #4]
   d6d3a:	68db      	ldr	r3, [r3, #12]
   d6d3c:	4602      	mov	r2, r0
   d6d3e:	4620      	mov	r0, r4
    }
   d6d40:	b002      	add	sp, #8
   d6d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6d46:	4718      	bx	r3
    }
   d6d48:	b002      	add	sp, #8
   d6d4a:	bd10      	pop	{r4, pc}

000d6d4c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6d4c:	6803      	ldr	r3, [r0, #0]
   d6d4e:	689b      	ldr	r3, [r3, #8]
   d6d50:	4718      	bx	r3

000d6d52 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d6d52:	b508      	push	{r3, lr}
  return write(str);
   d6d54:	f7ff ffe8 	bl	d6d28 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d6d58:	bd08      	pop	{r3, pc}

000d6d5a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d6d5a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6d5c:	210d      	movs	r1, #13
{
   d6d5e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6d60:	f7ff fff4 	bl	d6d4c <_ZN5Print5printEc>
  n += print('\n');
   d6d64:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6d66:	4604      	mov	r4, r0
  n += print('\n');
   d6d68:	4628      	mov	r0, r5
   d6d6a:	f7ff ffef 	bl	d6d4c <_ZN5Print5printEc>
  return n;
}
   d6d6e:	4420      	add	r0, r4
   d6d70:	bd38      	pop	{r3, r4, r5, pc}

000d6d72 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6d72:	b538      	push	{r3, r4, r5, lr}
   d6d74:	4605      	mov	r5, r0
  return write(str);
   d6d76:	f7ff ffd7 	bl	d6d28 <_ZN5Print5writeEPKc>
   d6d7a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6d7c:	4628      	mov	r0, r5
   d6d7e:	f7ff ffec 	bl	d6d5a <_ZN5Print7printlnEv>
  return n;
}
   d6d82:	4420      	add	r0, r4
   d6d84:	bd38      	pop	{r3, r4, r5, pc}

000d6d86 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d86:	b530      	push	{r4, r5, lr}
   d6d88:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6d8a:	2300      	movs	r3, #0
   d6d8c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d90:	2a01      	cmp	r2, #1
   d6d92:	bf98      	it	ls
   d6d94:	220a      	movls	r2, #10
   d6d96:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6d98:	460d      	mov	r5, r1
   d6d9a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6d9e:	fb01 5312 	mls	r3, r1, r2, r5
   d6da2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6da6:	2b09      	cmp	r3, #9
   d6da8:	bf94      	ite	ls
   d6daa:	3330      	addls	r3, #48	; 0x30
   d6dac:	3337      	addhi	r3, #55	; 0x37
   d6dae:	b2db      	uxtb	r3, r3
  } while(n);
   d6db0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6db2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6db6:	d9ef      	bls.n	d6d98 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6db8:	4621      	mov	r1, r4
   d6dba:	f7ff ffb5 	bl	d6d28 <_ZN5Print5writeEPKc>
}
   d6dbe:	b00b      	add	sp, #44	; 0x2c
   d6dc0:	bd30      	pop	{r4, r5, pc}

000d6dc2 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6dc2:	b510      	push	{r4, lr}
  if (0 == max) {
   d6dc4:	4604      	mov	r4, r0
   d6dc6:	b128      	cbz	r0, d6dd4 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d6dc8:	f002 fd48 	bl	d985c <rand>
   d6dcc:	fb90 f3f4 	sdiv	r3, r0, r4
   d6dd0:	fb03 0414 	mls	r4, r3, r4, r0
}
   d6dd4:	4620      	mov	r0, r4
   d6dd6:	bd10      	pop	{r4, pc}

000d6dd8 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6dd8:	4288      	cmp	r0, r1
{
   d6dda:	b510      	push	{r4, lr}
   d6ddc:	4604      	mov	r4, r0
  if (min >= max) {
   d6dde:	da03      	bge.n	d6de8 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d6de0:	1a08      	subs	r0, r1, r0
   d6de2:	f7ff ffee 	bl	d6dc2 <_Z6randomi>
   d6de6:	4404      	add	r4, r0
}
   d6de8:	4620      	mov	r0, r4
   d6dea:	bd10      	pop	{r4, pc}

000d6dec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6dec:	b510      	push	{r4, lr}
   d6dee:	4604      	mov	r4, r0
   d6df0:	f7ff faee 	bl	d63d0 <_ZNSt14_Function_baseD1Ev>
   d6df4:	4620      	mov	r0, r4
   d6df6:	bd10      	pop	{r4, pc}

000d6df8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6df8:	4803      	ldr	r0, [pc, #12]	; (d6e08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6dfa:	4a04      	ldr	r2, [pc, #16]	; (d6e0c <_GLOBAL__sub_I_RGB+0x14>)
   d6dfc:	4904      	ldr	r1, [pc, #16]	; (d6e10 <_GLOBAL__sub_I_RGB+0x18>)
   d6dfe:	2300      	movs	r3, #0
   d6e00:	6083      	str	r3, [r0, #8]
   d6e02:	f000 be7b 	b.w	d7afc <__aeabi_atexit>
   d6e06:	bf00      	nop
   d6e08:	2003e620 	.word	0x2003e620
   d6e0c:	2003e420 	.word	0x2003e420
   d6e10:	000d6ded 	.word	0x000d6ded

000d6e14 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6e14:	b510      	push	{r4, lr}
   d6e16:	4604      	mov	r4, r0
   d6e18:	4608      	mov	r0, r1
{
    _spi = spi;
   d6e1a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6e1c:	f7ff f912 	bl	d6044 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6e20:	2300      	movs	r3, #0
   d6e22:	6063      	str	r3, [r4, #4]
}
   d6e24:	4620      	mov	r0, r4
   d6e26:	bd10      	pop	{r4, pc}

000d6e28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6e28:	b510      	push	{r4, lr}
   d6e2a:	4604      	mov	r4, r0
{
	free(buffer);
   d6e2c:	6800      	ldr	r0, [r0, #0]
   d6e2e:	f7ff fa4f 	bl	d62d0 <free>
}
   d6e32:	4620      	mov	r0, r4
   d6e34:	bd10      	pop	{r4, pc}

000d6e36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6e36:	b510      	push	{r4, lr}
   d6e38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6e3a:	6800      	ldr	r0, [r0, #0]
   d6e3c:	b108      	cbz	r0, d6e42 <_ZN6String10invalidateEv+0xc>
   d6e3e:	f7ff fa47 	bl	d62d0 <free>
	buffer = NULL;
   d6e42:	2300      	movs	r3, #0
	capacity = len = 0;
   d6e44:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6e48:	6023      	str	r3, [r4, #0]
}
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6e4c:	b538      	push	{r3, r4, r5, lr}
   d6e4e:	4604      	mov	r4, r0
   d6e50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6e52:	6800      	ldr	r0, [r0, #0]
   d6e54:	3101      	adds	r1, #1
   d6e56:	f7ff fa43 	bl	d62e0 <realloc>
	if (newbuffer) {
   d6e5a:	b110      	cbz	r0, d6e62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6e5c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6e60:	2001      	movs	r0, #1
	}
	return 0;
}
   d6e62:	bd38      	pop	{r3, r4, r5, pc}

000d6e64 <_ZN6String7reserveEj>:
{
   d6e64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6e66:	6803      	ldr	r3, [r0, #0]
{
   d6e68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6e6a:	b123      	cbz	r3, d6e76 <_ZN6String7reserveEj+0x12>
   d6e6c:	6843      	ldr	r3, [r0, #4]
   d6e6e:	428b      	cmp	r3, r1
   d6e70:	d301      	bcc.n	d6e76 <_ZN6String7reserveEj+0x12>
   d6e72:	2001      	movs	r0, #1
}
   d6e74:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6e76:	4620      	mov	r0, r4
   d6e78:	f7ff ffe8 	bl	d6e4c <_ZN6String12changeBufferEj>
   d6e7c:	2800      	cmp	r0, #0
   d6e7e:	d0f9      	beq.n	d6e74 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6e80:	68a3      	ldr	r3, [r4, #8]
   d6e82:	2b00      	cmp	r3, #0
   d6e84:	d1f5      	bne.n	d6e72 <_ZN6String7reserveEj+0xe>
   d6e86:	6822      	ldr	r2, [r4, #0]
   d6e88:	7013      	strb	r3, [r2, #0]
   d6e8a:	e7f2      	b.n	d6e72 <_ZN6String7reserveEj+0xe>

000d6e8c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6e8e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6e90:	4611      	mov	r1, r2
   d6e92:	9201      	str	r2, [sp, #4]
{
   d6e94:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6e96:	f7ff ffe5 	bl	d6e64 <_ZN6String7reserveEj>
   d6e9a:	9a01      	ldr	r2, [sp, #4]
   d6e9c:	b928      	cbnz	r0, d6eaa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6e9e:	4620      	mov	r0, r4
   d6ea0:	f7ff ffc9 	bl	d6e36 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	b003      	add	sp, #12
   d6ea8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6eaa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6eac:	4629      	mov	r1, r5
   d6eae:	6820      	ldr	r0, [r4, #0]
   d6eb0:	f002 fc9a 	bl	d97e8 <memcpy>
	buffer[len] = 0;
   d6eb4:	6822      	ldr	r2, [r4, #0]
   d6eb6:	68a3      	ldr	r3, [r4, #8]
   d6eb8:	2100      	movs	r1, #0
   d6eba:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6ebc:	e7f2      	b.n	d6ea4 <_ZN6String4copyEPKcj+0x18>

000d6ebe <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6ebe:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6ec0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6ec2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6ec6:	4604      	mov	r4, r0
	len = 0;
   d6ec8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6eca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6ecc:	b141      	cbz	r1, d6ee0 <_ZN6StringC1EPKc+0x22>
   d6ece:	4608      	mov	r0, r1
   d6ed0:	9101      	str	r1, [sp, #4]
   d6ed2:	f002 fd1c 	bl	d990e <strlen>
   d6ed6:	9901      	ldr	r1, [sp, #4]
   d6ed8:	4602      	mov	r2, r0
   d6eda:	4620      	mov	r0, r4
   d6edc:	f7ff ffd6 	bl	d6e8c <_ZN6String4copyEPKcj>
}
   d6ee0:	4620      	mov	r0, r4
   d6ee2:	b002      	add	sp, #8
   d6ee4:	bd10      	pop	{r4, pc}

000d6ee6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6ee6:	b538      	push	{r3, r4, r5, lr}
   d6ee8:	4605      	mov	r5, r0
	if (buffer) {
   d6eea:	6800      	ldr	r0, [r0, #0]
{
   d6eec:	460c      	mov	r4, r1
	if (buffer) {
   d6eee:	b168      	cbz	r0, d6f0c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d6ef0:	686a      	ldr	r2, [r5, #4]
   d6ef2:	688b      	ldr	r3, [r1, #8]
   d6ef4:	429a      	cmp	r2, r3
   d6ef6:	d307      	bcc.n	d6f08 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6ef8:	6809      	ldr	r1, [r1, #0]
   d6efa:	f002 fce3 	bl	d98c4 <strcpy>
			len = rhs.len;
   d6efe:	68a3      	ldr	r3, [r4, #8]
   d6f00:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6f02:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6f04:	60a3      	str	r3, [r4, #8]
}
   d6f06:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6f08:	f7ff f9e2 	bl	d62d0 <free>
	buffer = rhs.buffer;
   d6f0c:	6823      	ldr	r3, [r4, #0]
   d6f0e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6f10:	6863      	ldr	r3, [r4, #4]
   d6f12:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6f14:	68a3      	ldr	r3, [r4, #8]
   d6f16:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6f18:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6f1a:	e9c4 3300 	strd	r3, r3, [r4]
   d6f1e:	e7f1      	b.n	d6f04 <_ZN6String4moveERS_+0x1e>

000d6f20 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6f20:	4288      	cmp	r0, r1
{
   d6f22:	b510      	push	{r4, lr}
   d6f24:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6f26:	d005      	beq.n	d6f34 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6f28:	680b      	ldr	r3, [r1, #0]
   d6f2a:	b12b      	cbz	r3, d6f38 <_ZN6StringaSERKS_+0x18>
   d6f2c:	688a      	ldr	r2, [r1, #8]
   d6f2e:	4619      	mov	r1, r3
   d6f30:	f7ff ffac 	bl	d6e8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6f34:	4620      	mov	r0, r4
   d6f36:	bd10      	pop	{r4, pc}
	else invalidate();
   d6f38:	f7ff ff7d 	bl	d6e36 <_ZN6String10invalidateEv>
   d6f3c:	e7fa      	b.n	d6f34 <_ZN6StringaSERKS_+0x14>

000d6f3e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6f3e:	b510      	push	{r4, lr}
	buffer = NULL;
   d6f40:	2300      	movs	r3, #0
String::String(const String &value)
   d6f42:	4604      	mov	r4, r0
	capacity = 0;
   d6f44:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6f48:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f4a:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6f4c:	f7ff ffe8 	bl	d6f20 <_ZN6StringaSERKS_>
}
   d6f50:	4620      	mov	r0, r4
   d6f52:	bd10      	pop	{r4, pc}

000d6f54 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6f54:	4288      	cmp	r0, r1
{
   d6f56:	b510      	push	{r4, lr}
   d6f58:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6f5a:	d001      	beq.n	d6f60 <_ZN6StringaSEOS_+0xc>
   d6f5c:	f7ff ffc3 	bl	d6ee6 <_ZN6String4moveERS_>
	return *this;
}
   d6f60:	4620      	mov	r0, r4
   d6f62:	bd10      	pop	{r4, pc}

000d6f64 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6f64:	b513      	push	{r0, r1, r4, lr}
   d6f66:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6f68:	b159      	cbz	r1, d6f82 <_ZN6StringaSEPKc+0x1e>
   d6f6a:	4608      	mov	r0, r1
   d6f6c:	9101      	str	r1, [sp, #4]
   d6f6e:	f002 fcce 	bl	d990e <strlen>
   d6f72:	9901      	ldr	r1, [sp, #4]
   d6f74:	4602      	mov	r2, r0
   d6f76:	4620      	mov	r0, r4
   d6f78:	f7ff ff88 	bl	d6e8c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6f7c:	4620      	mov	r0, r4
   d6f7e:	b002      	add	sp, #8
   d6f80:	bd10      	pop	{r4, pc}
	else invalidate();
   d6f82:	f7ff ff58 	bl	d6e36 <_ZN6String10invalidateEv>
   d6f86:	e7f9      	b.n	d6f7c <_ZN6StringaSEPKc+0x18>

000d6f88 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6f88:	b510      	push	{r4, lr}
   d6f8a:	4604      	mov	r4, r0
   d6f8c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6f8e:	2300      	movs	r3, #0
	capacity = 0;
   d6f90:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6f94:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6f96:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6f98:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6f9a:	a901      	add	r1, sp, #4
   d6f9c:	f000 fac6 	bl	d752c <itoa>
	*this = buf;
   d6fa0:	a901      	add	r1, sp, #4
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	f7ff ffde 	bl	d6f64 <_ZN6StringaSEPKc>
}
   d6fa8:	4620      	mov	r0, r4
   d6faa:	b00a      	add	sp, #40	; 0x28
   d6fac:	bd10      	pop	{r4, pc}

000d6fae <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6fae:	b570      	push	{r4, r5, r6, lr}
   d6fb0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6fb2:	460e      	mov	r6, r1
   d6fb4:	b909      	cbnz	r1, d6fba <_ZN6String6concatEPKcj+0xc>
   d6fb6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6fb8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6fba:	b16a      	cbz	r2, d6fd8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d6fbc:	6884      	ldr	r4, [r0, #8]
   d6fbe:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d6fc0:	4621      	mov	r1, r4
   d6fc2:	f7ff ff4f 	bl	d6e64 <_ZN6String7reserveEj>
   d6fc6:	2800      	cmp	r0, #0
   d6fc8:	d0f5      	beq.n	d6fb6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6fca:	6828      	ldr	r0, [r5, #0]
   d6fcc:	68ab      	ldr	r3, [r5, #8]
   d6fce:	4631      	mov	r1, r6
   d6fd0:	4418      	add	r0, r3
   d6fd2:	f002 fc77 	bl	d98c4 <strcpy>
	len = newlen;
   d6fd6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d6fd8:	2001      	movs	r0, #1
   d6fda:	e7ed      	b.n	d6fb8 <_ZN6String6concatEPKcj+0xa>

000d6fdc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6fdc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6fde:	2300      	movs	r3, #0
	buf[0] = c;
   d6fe0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d6fe4:	2201      	movs	r2, #1
   d6fe6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d6fe8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6fec:	f7ff ffdf 	bl	d6fae <_ZN6String6concatEPKcj>
}
   d6ff0:	b003      	add	sp, #12
   d6ff2:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ff6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6ff6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6ff8:	688a      	ldr	r2, [r1, #8]
   d6ffa:	6809      	ldr	r1, [r1, #0]
{
   d6ffc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6ffe:	f7ff ffd6 	bl	d6fae <_ZN6String6concatEPKcj>
   d7002:	b910      	cbnz	r0, d700a <_ZplRK15StringSumHelperRK6String+0x14>
   d7004:	4620      	mov	r0, r4
   d7006:	f7ff ff16 	bl	d6e36 <_ZN6String10invalidateEv>
	return a;
}
   d700a:	4620      	mov	r0, r4
   d700c:	bd10      	pop	{r4, pc}

000d700e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d700e:	b513      	push	{r0, r1, r4, lr}
   d7010:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7012:	b929      	cbnz	r1, d7020 <_ZplRK15StringSumHelperPKc+0x12>
   d7014:	4620      	mov	r0, r4
   d7016:	f7ff ff0e 	bl	d6e36 <_ZN6String10invalidateEv>
	return a;
}
   d701a:	4620      	mov	r0, r4
   d701c:	b002      	add	sp, #8
   d701e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7020:	4608      	mov	r0, r1
   d7022:	9101      	str	r1, [sp, #4]
   d7024:	f002 fc73 	bl	d990e <strlen>
   d7028:	9901      	ldr	r1, [sp, #4]
   d702a:	4602      	mov	r2, r0
   d702c:	4620      	mov	r0, r4
   d702e:	f7ff ffbe 	bl	d6fae <_ZN6String6concatEPKcj>
   d7032:	2800      	cmp	r0, #0
   d7034:	d0ee      	beq.n	d7014 <_ZplRK15StringSumHelperPKc+0x6>
   d7036:	e7f0      	b.n	d701a <_ZplRK15StringSumHelperPKc+0xc>

000d7038 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   d7038:	b510      	push	{r4, lr}
   d703a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   d703c:	f7ff ffce 	bl	d6fdc <_ZN6String6concatEc>
   d7040:	b910      	cbnz	r0, d7048 <_ZplRK15StringSumHelperc+0x10>
   d7042:	4620      	mov	r0, r4
   d7044:	f7ff fef7 	bl	d6e36 <_ZN6String10invalidateEv>
	return a;
}
   d7048:	4620      	mov	r0, r4
   d704a:	bd10      	pop	{r4, pc}

000d704c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d704c:	b40e      	push	{r1, r2, r3}
   d704e:	b570      	push	{r4, r5, r6, lr}
   d7050:	b087      	sub	sp, #28
   d7052:	ad0b      	add	r5, sp, #44	; 0x2c
   d7054:	4604      	mov	r4, r0
   d7056:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d705a:	9201      	str	r2, [sp, #4]
   d705c:	462b      	mov	r3, r5
   d705e:	2105      	movs	r1, #5
   d7060:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d7062:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7064:	f7ff f944 	bl	d62f0 <vsnprintf>
    va_end(marker);

    String result;
   d7068:	490b      	ldr	r1, [pc, #44]	; (d7098 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d706a:	4606      	mov	r6, r0
    String result;
   d706c:	4620      	mov	r0, r4
   d706e:	f7ff ff26 	bl	d6ebe <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d7072:	4631      	mov	r1, r6
   d7074:	4620      	mov	r0, r4
   d7076:	f7ff fef5 	bl	d6e64 <_ZN6String7reserveEj>
    if (result.buffer) {
   d707a:	6820      	ldr	r0, [r4, #0]
   d707c:	b130      	cbz	r0, d708c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d707e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d7080:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7082:	462b      	mov	r3, r5
   d7084:	1c71      	adds	r1, r6, #1
   d7086:	f7ff f933 	bl	d62f0 <vsnprintf>
        va_end(marker);
        result.len = n;
   d708a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d708c:	4620      	mov	r0, r4
   d708e:	b007      	add	sp, #28
   d7090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7094:	b003      	add	sp, #12
   d7096:	4770      	bx	lr
   d7098:	000d9b50 	.word	0x000d9b50

000d709c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d709c:	b510      	push	{r4, lr}
   d709e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d70a0:	6800      	ldr	r0, [r0, #0]
   d70a2:	b118      	cbz	r0, d70ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d70a4:	f7ff f914 	bl	d62d0 <free>
            wakeupSource_ = nullptr;
   d70a8:	2300      	movs	r3, #0
   d70aa:	6023      	str	r3, [r4, #0]
        }
    }
   d70ac:	bd10      	pop	{r4, pc}

000d70ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d70ae:	b510      	push	{r4, lr}
   d70b0:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d70b2:	f7ff fff3 	bl	d709c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d70b6:	4620      	mov	r0, r4
   d70b8:	bd10      	pop	{r4, pc}

000d70ba <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d70ba:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d70bc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d70c0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d70c2:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d70c4:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d70c6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d70ca:	f8c0 2006 	str.w	r2, [r0, #6]
   d70ce:	889b      	ldrh	r3, [r3, #4]
   d70d0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d70d2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d70d4:	f7ff ffe2 	bl	d709c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d70d8:	682b      	ldr	r3, [r5, #0]
   d70da:	b113      	cbz	r3, d70e2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d70dc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d70de:	2300      	movs	r3, #0
   d70e0:	602b      	str	r3, [r5, #0]
    }
   d70e2:	4620      	mov	r0, r4
   d70e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d70e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d70e8:	b538      	push	{r3, r4, r5, lr}
   d70ea:	460c      	mov	r4, r1
   d70ec:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d70ee:	f7ff ffd5 	bl	d709c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d70f2:	b144      	cbz	r4, d7106 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d70f4:	8820      	ldrh	r0, [r4, #0]
   d70f6:	f7ff f8e3 	bl	d62c0 <malloc>
   d70fa:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d70fc:	b128      	cbz	r0, d710a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d70fe:	8822      	ldrh	r2, [r4, #0]
   d7100:	4621      	mov	r1, r4
   d7102:	f002 fb71 	bl	d97e8 <memcpy>
        return SYSTEM_ERROR_NONE;
   d7106:	2000      	movs	r0, #0
    }
   d7108:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d710a:	4801      	ldr	r0, [pc, #4]	; (d7110 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d710c:	e7fc      	b.n	d7108 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d710e:	bf00      	nop
   d7110:	fffffefc 	.word	0xfffffefc

000d7114 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7114:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7116:	4d2d      	ldr	r5, [pc, #180]	; (d71cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7118:	7d0b      	ldrb	r3, [r1, #20]
   d711a:	4604      	mov	r4, r0
   d711c:	b08b      	sub	sp, #44	; 0x2c
   d711e:	4608      	mov	r0, r1
   d7120:	1daf      	adds	r7, r5, #6
   d7122:	2b00      	cmp	r3, #0
   d7124:	d038      	beq.n	d7198 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7126:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7128:	791b      	ldrb	r3, [r3, #4]
   d712a:	2b00      	cmp	r3, #0
   d712c:	d034      	beq.n	d7198 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d712e:	2200      	movs	r2, #0
    SleepResult() {}
   d7130:	4b27      	ldr	r3, [pc, #156]	; (d71d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7132:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7134:	a902      	add	r1, sp, #8
   d7136:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7138:	9202      	str	r2, [sp, #8]
   d713a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d713e:	f88d 200e 	strb.w	r2, [sp, #14]
   d7142:	f7ff f84b 	bl	d61dc <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d7146:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d714a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d714e:	b200      	sxth	r0, r0
   d7150:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7154:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7158:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d715a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d715c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d715e:	4628      	mov	r0, r5
   d7160:	f7ff ffc2 	bl	d70e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7164:	a802      	add	r0, sp, #8
   d7166:	f7ff ff99 	bl	d709c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d716a:	2300      	movs	r3, #0
   d716c:	6023      	str	r3, [r4, #0]
   d716e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d7170:	71a3      	strb	r3, [r4, #6]
   d7172:	8123      	strh	r3, [r4, #8]
   d7174:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7178:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d717a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d717e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7180:	683b      	ldr	r3, [r7, #0]
   d7182:	f8c4 3006 	str.w	r3, [r4, #6]
   d7186:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7188:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d718a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d718c:	4620      	mov	r0, r4
   d718e:	f7ff ffab 	bl	d70e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d7192:	4620      	mov	r0, r4
   d7194:	b00b      	add	sp, #44	; 0x2c
   d7196:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d7198:	2600      	movs	r6, #0
   d719a:	2320      	movs	r3, #32
   d719c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d71a0:	4b0c      	ldr	r3, [pc, #48]	; (d71d4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d71a2:	9300      	str	r3, [sp, #0]
   d71a4:	490c      	ldr	r1, [pc, #48]	; (d71d8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d71a6:	4633      	mov	r3, r6
   d71a8:	aa02      	add	r2, sp, #8
   d71aa:	2032      	movs	r0, #50	; 0x32
   d71ac:	f7fe ffda 	bl	d6164 <log_message>
    SleepResult() {}
   d71b0:	4b07      	ldr	r3, [pc, #28]	; (d71d0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d71b2:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d71b4:	a902      	add	r1, sp, #8
        error_ = error;
   d71b6:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d71ba:	4804      	ldr	r0, [pc, #16]	; (d71cc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d71bc:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d71be:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d71c2:	f8ad 300c 	strh.w	r3, [sp, #12]
   d71c6:	f7ff ff78 	bl	d70ba <_ZN17SystemSleepResultaSEOS_>
   d71ca:	e7cb      	b.n	d7164 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d71cc:	2003e630 	.word	0x2003e630
   d71d0:	ffff0000 	.word	0xffff0000
   d71d4:	000d9d03 	.word	0x000d9d03
   d71d8:	000d9cfc 	.word	0x000d9cfc

000d71dc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d71dc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d71de:	4b09      	ldr	r3, [pc, #36]	; (d7204 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d71e0:	4c09      	ldr	r4, [pc, #36]	; (d7208 <_GLOBAL__sub_I_System+0x2c>)
   d71e2:	2202      	movs	r2, #2
   d71e4:	2000      	movs	r0, #0
   d71e6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d71e8:	4b08      	ldr	r3, [pc, #32]	; (d720c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d71ea:	6020      	str	r0, [r4, #0]
   d71ec:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d71ee:	71a0      	strb	r0, [r4, #6]
   d71f0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d71f2:	f7fe ffbf 	bl	d6174 <set_system_mode>
SystemClass System;
   d71f6:	4620      	mov	r0, r4
   d71f8:	4a05      	ldr	r2, [pc, #20]	; (d7210 <_GLOBAL__sub_I_System+0x34>)
   d71fa:	4906      	ldr	r1, [pc, #24]	; (d7214 <_GLOBAL__sub_I_System+0x38>)
   d71fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7200:	f000 bc7c 	b.w	d7afc <__aeabi_atexit>
   d7204:	2003e63c 	.word	0x2003e63c
   d7208:	2003e630 	.word	0x2003e630
   d720c:	ffff0000 	.word	0xffff0000
   d7210:	2003e420 	.word	0x2003e420
   d7214:	000d70af 	.word	0x000d70af

000d7218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7218:	4b02      	ldr	r3, [pc, #8]	; (d7224 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d721a:	681a      	ldr	r2, [r3, #0]
   d721c:	4b02      	ldr	r3, [pc, #8]	; (d7228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d721e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7220:	4770      	bx	lr
   d7222:	bf00      	nop
   d7224:	2003e3b4 	.word	0x2003e3b4
   d7228:	2003e640 	.word	0x2003e640

000d722c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d722c:	4770      	bx	lr

000d722e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d722e:	7441      	strb	r1, [r0, #17]
}
   d7230:	4770      	bx	lr

000d7232 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7232:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7234:	7c00      	ldrb	r0, [r0, #16]
   d7236:	f7fe ff4d 	bl	d60d4 <hal_usart_available_data_for_write>
}
   d723a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d723e:	bd08      	pop	{r3, pc}

000d7240 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7240:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7242:	7c00      	ldrb	r0, [r0, #16]
   d7244:	f7fe ff1e 	bl	d6084 <hal_usart_available>
}
   d7248:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d724c:	bd08      	pop	{r3, pc}

000d724e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d724e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7250:	7c00      	ldrb	r0, [r0, #16]
   d7252:	f7fe ff27 	bl	d60a4 <hal_usart_peek>
}
   d7256:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d725a:	bd08      	pop	{r3, pc}

000d725c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d725c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d725e:	7c00      	ldrb	r0, [r0, #16]
   d7260:	f7fe ff18 	bl	d6094 <hal_usart_read>
}
   d7264:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7268:	bd08      	pop	{r3, pc}

000d726a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d726a:	7c00      	ldrb	r0, [r0, #16]
   d726c:	f7fe bf22 	b.w	d60b4 <hal_usart_flush>

000d7270 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7270:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7272:	7c45      	ldrb	r5, [r0, #17]
{
   d7274:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7276:	b12d      	cbz	r5, d7284 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7278:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d727a:	b003      	add	sp, #12
   d727c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7280:	f7fe bef8 	b.w	d6074 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7284:	7c00      	ldrb	r0, [r0, #16]
   d7286:	9101      	str	r1, [sp, #4]
   d7288:	f7fe ff24 	bl	d60d4 <hal_usart_available_data_for_write>
   d728c:	2800      	cmp	r0, #0
   d728e:	9901      	ldr	r1, [sp, #4]
   d7290:	dcf2      	bgt.n	d7278 <_ZN11USARTSerial5writeEh+0x8>
}
   d7292:	4628      	mov	r0, r5
   d7294:	b003      	add	sp, #12
   d7296:	bd30      	pop	{r4, r5, pc}

000d7298 <_ZN11USARTSerialD0Ev>:
   d7298:	b510      	push	{r4, lr}
   d729a:	2114      	movs	r1, #20
   d729c:	4604      	mov	r4, r0
   d729e:	f000 fc32 	bl	d7b06 <_ZdlPvj>
   d72a2:	4620      	mov	r0, r4
   d72a4:	bd10      	pop	{r4, pc}
	...

000d72a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d72a8:	b510      	push	{r4, lr}
   d72aa:	f04f 0c00 	mov.w	ip, #0
   d72ae:	4604      	mov	r4, r0
   d72b0:	4608      	mov	r0, r1
   d72b2:	4611      	mov	r1, r2
   d72b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d72b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d72bc:	4a04      	ldr	r2, [pc, #16]	; (d72d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d72be:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d72c0:	2201      	movs	r2, #1
  _serial = serial;
   d72c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d72c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d72c6:	461a      	mov	r2, r3
   d72c8:	f7fe fecc 	bl	d6064 <hal_usart_init>
}
   d72cc:	4620      	mov	r0, r4
   d72ce:	bd10      	pop	{r4, pc}
   d72d0:	000d9d50 	.word	0x000d9d50

000d72d4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d72d4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d72d6:	4c0e      	ldr	r4, [pc, #56]	; (d7310 <_Z22__fetch_global_Serial1v+0x3c>)
   d72d8:	7821      	ldrb	r1, [r4, #0]
   d72da:	f3bf 8f5b 	dmb	ish
   d72de:	f011 0101 	ands.w	r1, r1, #1
   d72e2:	d112      	bne.n	d730a <_Z22__fetch_global_Serial1v+0x36>
   d72e4:	4620      	mov	r0, r4
   d72e6:	9101      	str	r1, [sp, #4]
   d72e8:	f7fc fedb 	bl	d40a2 <__cxa_guard_acquire>
   d72ec:	9901      	ldr	r1, [sp, #4]
   d72ee:	b160      	cbz	r0, d730a <_Z22__fetch_global_Serial1v+0x36>
   d72f0:	4a08      	ldr	r2, [pc, #32]	; (d7314 <_Z22__fetch_global_Serial1v+0x40>)
   d72f2:	4b09      	ldr	r3, [pc, #36]	; (d7318 <_Z22__fetch_global_Serial1v+0x44>)
   d72f4:	4809      	ldr	r0, [pc, #36]	; (d731c <_Z22__fetch_global_Serial1v+0x48>)
   d72f6:	f7ff ffd7 	bl	d72a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d72fa:	4620      	mov	r0, r4
   d72fc:	f7fc fed6 	bl	d40ac <__cxa_guard_release>
   d7300:	4a07      	ldr	r2, [pc, #28]	; (d7320 <_Z22__fetch_global_Serial1v+0x4c>)
   d7302:	4908      	ldr	r1, [pc, #32]	; (d7324 <_Z22__fetch_global_Serial1v+0x50>)
   d7304:	4805      	ldr	r0, [pc, #20]	; (d731c <_Z22__fetch_global_Serial1v+0x48>)
   d7306:	f000 fbf9 	bl	d7afc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d730a:	4804      	ldr	r0, [pc, #16]	; (d731c <_Z22__fetch_global_Serial1v+0x48>)
   d730c:	b002      	add	sp, #8
   d730e:	bd10      	pop	{r4, pc}
   d7310:	2003e644 	.word	0x2003e644
   d7314:	2003e648 	.word	0x2003e648
   d7318:	2003e6cc 	.word	0x2003e6cc
   d731c:	2003e750 	.word	0x2003e750
   d7320:	2003e420 	.word	0x2003e420
   d7324:	000d722d 	.word	0x000d722d

000d7328 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7328:	7441      	strb	r1, [r0, #17]
}
   d732a:	4770      	bx	lr

000d732c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d732c:	4770      	bx	lr

000d732e <_ZN9USBSerial4readEv>:
{
   d732e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7330:	2100      	movs	r1, #0
   d7332:	7c00      	ldrb	r0, [r0, #16]
   d7334:	f7fe fef6 	bl	d6124 <HAL_USB_USART_Receive_Data>
}
   d7338:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d733c:	bd08      	pop	{r3, pc}

000d733e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d733e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7340:	2101      	movs	r1, #1
   d7342:	7c00      	ldrb	r0, [r0, #16]
   d7344:	f7fe feee 	bl	d6124 <HAL_USB_USART_Receive_Data>
}
   d7348:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d734c:	bd08      	pop	{r3, pc}

000d734e <_ZN9USBSerial17availableForWriteEv>:
{
   d734e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7350:	7c00      	ldrb	r0, [r0, #16]
   d7352:	f7fe fedf 	bl	d6114 <HAL_USB_USART_Available_Data_For_Write>
}
   d7356:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d735a:	bd08      	pop	{r3, pc}

000d735c <_ZN9USBSerial9availableEv>:
{
   d735c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d735e:	7c00      	ldrb	r0, [r0, #16]
   d7360:	f7fe fed0 	bl	d6104 <HAL_USB_USART_Available_Data>
}
   d7364:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7368:	bd08      	pop	{r3, pc}

000d736a <_ZN9USBSerial5writeEh>:
{
   d736a:	b513      	push	{r0, r1, r4, lr}
   d736c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d736e:	7c00      	ldrb	r0, [r0, #16]
{
   d7370:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7372:	f7fe fecf 	bl	d6114 <HAL_USB_USART_Available_Data_For_Write>
   d7376:	2800      	cmp	r0, #0
   d7378:	9901      	ldr	r1, [sp, #4]
   d737a:	dc01      	bgt.n	d7380 <_ZN9USBSerial5writeEh+0x16>
   d737c:	7c60      	ldrb	r0, [r4, #17]
   d737e:	b120      	cbz	r0, d738a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7380:	7c20      	ldrb	r0, [r4, #16]
   d7382:	f7fe fed7 	bl	d6134 <HAL_USB_USART_Send_Data>
   d7386:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d738a:	b002      	add	sp, #8
   d738c:	bd10      	pop	{r4, pc}

000d738e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d738e:	7c00      	ldrb	r0, [r0, #16]
   d7390:	f7fe bed8 	b.w	d6144 <HAL_USB_USART_Flush_Data>

000d7394 <_ZN9USBSerialD0Ev>:
   d7394:	b510      	push	{r4, lr}
   d7396:	2114      	movs	r1, #20
   d7398:	4604      	mov	r4, r0
   d739a:	f000 fbb4 	bl	d7b06 <_ZdlPvj>
   d739e:	4620      	mov	r0, r4
   d73a0:	bd10      	pop	{r4, pc}
	...

000d73a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d73a4:	b510      	push	{r4, lr}
   d73a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d73aa:	4604      	mov	r4, r0
   d73ac:	4608      	mov	r0, r1
   d73ae:	2100      	movs	r1, #0
   d73b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d73b4:	4b04      	ldr	r3, [pc, #16]	; (d73c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d73b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d73b8:	2301      	movs	r3, #1
  _serial = serial;
   d73ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d73bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d73be:	4611      	mov	r1, r2
   d73c0:	f7fe fe90 	bl	d60e4 <HAL_USB_USART_Init>
}
   d73c4:	4620      	mov	r0, r4
   d73c6:	bd10      	pop	{r4, pc}
   d73c8:	000d9d80 	.word	0x000d9d80

000d73cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d73cc:	7c00      	ldrb	r0, [r0, #16]
   d73ce:	2200      	movs	r2, #0
   d73d0:	f7fe be90 	b.w	d60f4 <HAL_USB_USART_Begin>

000d73d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d73d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d73d6:	2214      	movs	r2, #20
{
   d73d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d73da:	2100      	movs	r1, #0
   d73dc:	f002 fa12 	bl	d9804 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d73e0:	4620      	mov	r0, r4
   d73e2:	bd10      	pop	{r4, pc}

000d73e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d73e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73e6:	4c10      	ldr	r4, [pc, #64]	; (d7428 <_Z16_fetch_usbserialv+0x44>)
{
   d73e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d73ea:	a803      	add	r0, sp, #12
   d73ec:	f7ff fff2 	bl	d73d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d73f0:	7821      	ldrb	r1, [r4, #0]
   d73f2:	f3bf 8f5b 	dmb	ish
   d73f6:	f011 0101 	ands.w	r1, r1, #1
   d73fa:	d111      	bne.n	d7420 <_Z16_fetch_usbserialv+0x3c>
   d73fc:	4620      	mov	r0, r4
   d73fe:	9101      	str	r1, [sp, #4]
   d7400:	f7fc fe4f 	bl	d40a2 <__cxa_guard_acquire>
   d7404:	9901      	ldr	r1, [sp, #4]
   d7406:	b158      	cbz	r0, d7420 <_Z16_fetch_usbserialv+0x3c>
   d7408:	aa03      	add	r2, sp, #12
   d740a:	4808      	ldr	r0, [pc, #32]	; (d742c <_Z16_fetch_usbserialv+0x48>)
   d740c:	f7ff ffca 	bl	d73a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7410:	4620      	mov	r0, r4
   d7412:	f7fc fe4b 	bl	d40ac <__cxa_guard_release>
   d7416:	4a06      	ldr	r2, [pc, #24]	; (d7430 <_Z16_fetch_usbserialv+0x4c>)
   d7418:	4906      	ldr	r1, [pc, #24]	; (d7434 <_Z16_fetch_usbserialv+0x50>)
   d741a:	4804      	ldr	r0, [pc, #16]	; (d742c <_Z16_fetch_usbserialv+0x48>)
   d741c:	f000 fb6e 	bl	d7afc <__aeabi_atexit>
	return _usbserial;
}
   d7420:	4802      	ldr	r0, [pc, #8]	; (d742c <_Z16_fetch_usbserialv+0x48>)
   d7422:	b008      	add	sp, #32
   d7424:	bd10      	pop	{r4, pc}
   d7426:	bf00      	nop
   d7428:	2003e764 	.word	0x2003e764
   d742c:	2003e768 	.word	0x2003e768
   d7430:	2003e420 	.word	0x2003e420
   d7434:	000d732d 	.word	0x000d732d

000d7438 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7438:	2200      	movs	r2, #0
   d743a:	6840      	ldr	r0, [r0, #4]
   d743c:	4611      	mov	r1, r2
   d743e:	f7fe bf07 	b.w	d6250 <network_ready>

000d7442 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7442:	2200      	movs	r2, #0
   d7444:	6840      	ldr	r0, [r0, #4]
   d7446:	4611      	mov	r1, r2
   d7448:	f7fe bf22 	b.w	d6290 <network_listening>

000d744c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d744c:	2200      	movs	r2, #0
   d744e:	6840      	ldr	r0, [r0, #4]
   d7450:	4611      	mov	r1, r2
   d7452:	f7fe bf2d 	b.w	d62b0 <network_get_listen_timeout>

000d7456 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7456:	6840      	ldr	r0, [r0, #4]
   d7458:	2200      	movs	r2, #0
   d745a:	f7fe bf21 	b.w	d62a0 <network_set_listen_timeout>

000d745e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d745e:	6840      	ldr	r0, [r0, #4]
   d7460:	2200      	movs	r2, #0
   d7462:	f081 0101 	eor.w	r1, r1, #1
   d7466:	f7fe bf0b 	b.w	d6280 <network_listen>

000d746a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d746a:	2300      	movs	r3, #0
   d746c:	6840      	ldr	r0, [r0, #4]
   d746e:	461a      	mov	r2, r3
   d7470:	4619      	mov	r1, r3
   d7472:	f7fe befd 	b.w	d6270 <network_off>

000d7476 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7476:	2300      	movs	r3, #0
   d7478:	6840      	ldr	r0, [r0, #4]
   d747a:	461a      	mov	r2, r3
   d747c:	4619      	mov	r1, r3
   d747e:	f7fe beef 	b.w	d6260 <network_on>

000d7482 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7482:	2200      	movs	r2, #0
   d7484:	6840      	ldr	r0, [r0, #4]
   d7486:	4611      	mov	r1, r2
   d7488:	f7fe bed2 	b.w	d6230 <network_connecting>

000d748c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d748c:	6840      	ldr	r0, [r0, #4]
   d748e:	2200      	movs	r2, #0
   d7490:	2102      	movs	r1, #2
   d7492:	f7fe bed5 	b.w	d6240 <network_disconnect>

000d7496 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7496:	2300      	movs	r3, #0
   d7498:	6840      	ldr	r0, [r0, #4]
   d749a:	461a      	mov	r2, r3
   d749c:	f7fe bec0 	b.w	d6220 <network_connect>

000d74a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d74a0:	4b02      	ldr	r3, [pc, #8]	; (d74ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d74a2:	2204      	movs	r2, #4
   d74a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d74a6:	4a02      	ldr	r2, [pc, #8]	; (d74b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d74a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d74aa:	4770      	bx	lr
   d74ac:	2003e77c 	.word	0x2003e77c
   d74b0:	000d9db0 	.word	0x000d9db0

000d74b4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d74b4:	b510      	push	{r4, lr}
   d74b6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d74b8:	f002 fa29 	bl	d990e <strlen>
   d74bc:	3801      	subs	r0, #1
   d74be:	1823      	adds	r3, r4, r0
   d74c0:	4620      	mov	r0, r4
	while(i<j){
   d74c2:	4283      	cmp	r3, r0
   d74c4:	d906      	bls.n	d74d4 <_Z11str_reversePc+0x20>
		c = *i;
   d74c6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d74c8:	7819      	ldrb	r1, [r3, #0]
   d74ca:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d74ce:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d74d2:	e7f6      	b.n	d74c2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d74d4:	bd10      	pop	{r4, pc}

000d74d6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d74d6:	b570      	push	{r4, r5, r6, lr}
   d74d8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d74da:	1e91      	subs	r1, r2, #2
   d74dc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d74de:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d74e0:	d822      	bhi.n	d7528 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d74e2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d74e4:	b16d      	cbz	r5, d7502 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d74e6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d74ea:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d74ee:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d74f0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d74f2:	bf94      	ite	ls
   d74f4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d74f6:	3157      	addhi	r1, #87	; 0x57
   d74f8:	b2c9      	uxtb	r1, r1
   d74fa:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d74fe:	4635      	mov	r5, r6
	while(a){
   d7500:	e7f0      	b.n	d74e4 <ultoa+0xe>
   d7502:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d7504:	4423      	add	r3, r4
            *ptr++ = '0';
   d7506:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d7508:	4293      	cmp	r3, r2
   d750a:	d902      	bls.n	d7512 <ultoa+0x3c>
            *ptr++ = '0';
   d750c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d7510:	e7fa      	b.n	d7508 <ultoa+0x32>
   d7512:	1a1a      	subs	r2, r3, r0
   d7514:	4283      	cmp	r3, r0
   d7516:	bf38      	it	cc
   d7518:	2200      	movcc	r2, #0

	*ptr = '\0';
   d751a:	2300      	movs	r3, #0
   d751c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d751e:	4620      	mov	r0, r4
   d7520:	f7ff ffc8 	bl	d74b4 <_Z11str_reversePc>
	return buffer;
   d7524:	4620      	mov	r0, r4
}
   d7526:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7528:	2000      	movs	r0, #0
   d752a:	e7fc      	b.n	d7526 <ultoa+0x50>

000d752c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d752c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d752e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7530:	460c      	mov	r4, r1
   d7532:	4615      	mov	r5, r2
	if(a<0){
   d7534:	da0e      	bge.n	d7554 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d753a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d753e:	bf14      	ite	ne
   d7540:	4258      	negne	r0, r3
   d7542:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d7544:	2301      	movs	r3, #1
		*buffer = '-';
   d7546:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d7548:	462a      	mov	r2, r5
   d754a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d754c:	f7ff ffc3 	bl	d74d6 <ultoa>
	}
	return buffer;
}
   d7550:	4620      	mov	r0, r4
   d7552:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d7554:	2301      	movs	r3, #1
   d7556:	e7f9      	b.n	d754c <itoa+0x20>

000d7558 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7558:	4b01      	ldr	r3, [pc, #4]	; (d7560 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d755a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d755c:	4770      	bx	lr
   d755e:	bf00      	nop
   d7560:	2003e3bc 	.word	0x2003e3bc

000d7564 <serialEventRun>:
{
   d7564:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7566:	4b0b      	ldr	r3, [pc, #44]	; (d7594 <serialEventRun+0x30>)
   d7568:	b143      	cbz	r3, d757c <serialEventRun+0x18>
   d756a:	f7ff ff3b 	bl	d73e4 <_Z16_fetch_usbserialv>
   d756e:	6803      	ldr	r3, [r0, #0]
   d7570:	691b      	ldr	r3, [r3, #16]
   d7572:	4798      	blx	r3
   d7574:	2800      	cmp	r0, #0
   d7576:	dd01      	ble.n	d757c <serialEventRun+0x18>
        serialEvent();
   d7578:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d757c:	4b06      	ldr	r3, [pc, #24]	; (d7598 <serialEventRun+0x34>)
   d757e:	b143      	cbz	r3, d7592 <serialEventRun+0x2e>
   d7580:	f7ff fea8 	bl	d72d4 <_Z22__fetch_global_Serial1v>
   d7584:	6803      	ldr	r3, [r0, #0]
   d7586:	691b      	ldr	r3, [r3, #16]
   d7588:	4798      	blx	r3
   d758a:	2800      	cmp	r0, #0
   d758c:	dd01      	ble.n	d7592 <serialEventRun+0x2e>
        serialEvent1();
   d758e:	f3af 8000 	nop.w
}
   d7592:	bd08      	pop	{r3, pc}
	...

000d759c <_post_loop>:
{
   d759c:	b508      	push	{r3, lr}
	serialEventRun();
   d759e:	f7ff ffe1 	bl	d7564 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d75a2:	f7fe fc8d 	bl	d5ec0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d75a6:	4b01      	ldr	r3, [pc, #4]	; (d75ac <_post_loop+0x10>)
   d75a8:	6018      	str	r0, [r3, #0]
}
   d75aa:	bd08      	pop	{r3, pc}
   d75ac:	2003e798 	.word	0x2003e798

000d75b0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d75b0:	4802      	ldr	r0, [pc, #8]	; (d75bc <_Z33system_initialize_user_backup_ramv+0xc>)
   d75b2:	4a03      	ldr	r2, [pc, #12]	; (d75c0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d75b4:	4903      	ldr	r1, [pc, #12]	; (d75c4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d75b6:	1a12      	subs	r2, r2, r0
   d75b8:	f002 b916 	b.w	d97e8 <memcpy>
   d75bc:	2003f400 	.word	0x2003f400
   d75c0:	2003f404 	.word	0x2003f404
   d75c4:	000d9e20 	.word	0x000d9e20

000d75c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d75c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d75ca:	2300      	movs	r3, #0
   d75cc:	9300      	str	r3, [sp, #0]
   d75ce:	461a      	mov	r2, r3
   d75d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d75d4:	f7fe fdf8 	bl	d61c8 <system_ctrl_set_result>
}
   d75d8:	b003      	add	sp, #12
   d75da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d75e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d75e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d75e2:	8843      	ldrh	r3, [r0, #2]
   d75e4:	2b0a      	cmp	r3, #10
   d75e6:	d008      	beq.n	d75fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d75e8:	2b50      	cmp	r3, #80	; 0x50
   d75ea:	d10b      	bne.n	d7604 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d75ec:	4b09      	ldr	r3, [pc, #36]	; (d7614 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d75ee:	681b      	ldr	r3, [r3, #0]
   d75f0:	b14b      	cbz	r3, d7606 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d75f2:	b003      	add	sp, #12
   d75f4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d75f8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d75fa:	f7ff ffe5 	bl	d75c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d75fe:	b003      	add	sp, #12
   d7600:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7604:	2300      	movs	r3, #0
   d7606:	9300      	str	r3, [sp, #0]
   d7608:	461a      	mov	r2, r3
   d760a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d760e:	f7fe fddb 	bl	d61c8 <system_ctrl_set_result>
}
   d7612:	e7f4      	b.n	d75fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7614:	2003e788 	.word	0x2003e788

000d7618 <module_user_init_hook>:
{
   d7618:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d761a:	4c12      	ldr	r4, [pc, #72]	; (d7664 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d761c:	4812      	ldr	r0, [pc, #72]	; (d7668 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d761e:	4d13      	ldr	r5, [pc, #76]	; (d766c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7620:	2100      	movs	r1, #0
   d7622:	f7fe fe85 	bl	d6330 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7626:	6823      	ldr	r3, [r4, #0]
   d7628:	42ab      	cmp	r3, r5
   d762a:	4b11      	ldr	r3, [pc, #68]	; (d7670 <module_user_init_hook+0x58>)
   d762c:	bf0c      	ite	eq
   d762e:	2201      	moveq	r2, #1
   d7630:	2200      	movne	r2, #0
   d7632:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7634:	d002      	beq.n	d763c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7636:	f7ff ffbb 	bl	d75b0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d763a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d763c:	f7fe fc28 	bl	d5e90 <HAL_RNG_GetRandomNumber>
   d7640:	4604      	mov	r4, r0
    srand(seed);
   d7642:	f002 f8e7 	bl	d9814 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7646:	4b0b      	ldr	r3, [pc, #44]	; (d7674 <module_user_init_hook+0x5c>)
   d7648:	b113      	cbz	r3, d7650 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d764a:	4620      	mov	r0, r4
   d764c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7650:	2100      	movs	r1, #0
   d7652:	4808      	ldr	r0, [pc, #32]	; (d7674 <module_user_init_hook+0x5c>)
   d7654:	f7fe fddc 	bl	d6210 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d765c:	4806      	ldr	r0, [pc, #24]	; (d7678 <module_user_init_hook+0x60>)
   d765e:	2100      	movs	r1, #0
   d7660:	f7fe bda8 	b.w	d61b4 <system_ctrl_set_app_request_handler>
   d7664:	2003f400 	.word	0x2003f400
   d7668:	000d7559 	.word	0x000d7559
   d766c:	9a271c1e 	.word	0x9a271c1e
   d7670:	2003e784 	.word	0x2003e784
   d7674:	00000000 	.word	0x00000000
   d7678:	000d75e1 	.word	0x000d75e1

000d767c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d767c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d767e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7680:	d902      	bls.n	d7688 <pinAvailable+0xc>
    return false;
   d7682:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7684:	b002      	add	sp, #8
   d7686:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7688:	f1a0 030b 	sub.w	r3, r0, #11
   d768c:	2b02      	cmp	r3, #2
   d768e:	d81a      	bhi.n	d76c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7690:	4c17      	ldr	r4, [pc, #92]	; (d76f0 <pinAvailable+0x74>)
   d7692:	7821      	ldrb	r1, [r4, #0]
   d7694:	f3bf 8f5b 	dmb	ish
   d7698:	f011 0101 	ands.w	r1, r1, #1
   d769c:	d10b      	bne.n	d76b6 <pinAvailable+0x3a>
   d769e:	4620      	mov	r0, r4
   d76a0:	9101      	str	r1, [sp, #4]
   d76a2:	f7fc fcfe 	bl	d40a2 <__cxa_guard_acquire>
   d76a6:	9901      	ldr	r1, [sp, #4]
   d76a8:	b128      	cbz	r0, d76b6 <pinAvailable+0x3a>
   d76aa:	4812      	ldr	r0, [pc, #72]	; (d76f4 <pinAvailable+0x78>)
   d76ac:	f7ff fbb2 	bl	d6e14 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d76b0:	4620      	mov	r0, r4
   d76b2:	f7fc fcfb 	bl	d40ac <__cxa_guard_release>
   d76b6:	4b0f      	ldr	r3, [pc, #60]	; (d76f4 <pinAvailable+0x78>)
   d76b8:	7818      	ldrb	r0, [r3, #0]
   d76ba:	f7fe fccb 	bl	d6054 <hal_spi_is_enabled>
   d76be:	2800      	cmp	r0, #0
   d76c0:	d1df      	bne.n	d7682 <pinAvailable+0x6>
  return true; // 'pin' is available
   d76c2:	2001      	movs	r0, #1
   d76c4:	e7de      	b.n	d7684 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d76c6:	2801      	cmp	r0, #1
   d76c8:	d809      	bhi.n	d76de <pinAvailable+0x62>
   d76ca:	f000 f881 	bl	d77d0 <_Z19__fetch_global_Wirev>
   d76ce:	2100      	movs	r1, #0
   d76d0:	7c00      	ldrb	r0, [r0, #16]
   d76d2:	f7fe fc87 	bl	d5fe4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d76d6:	f080 0001 	eor.w	r0, r0, #1
   d76da:	b2c0      	uxtb	r0, r0
   d76dc:	e7d2      	b.n	d7684 <pinAvailable+0x8>
   d76de:	3809      	subs	r0, #9
   d76e0:	2801      	cmp	r0, #1
   d76e2:	d8ee      	bhi.n	d76c2 <pinAvailable+0x46>
   d76e4:	f7ff fdf6 	bl	d72d4 <_Z22__fetch_global_Serial1v>
   d76e8:	7c00      	ldrb	r0, [r0, #16]
   d76ea:	f7fe fceb 	bl	d60c4 <hal_usart_is_enabled>
   d76ee:	e7f2      	b.n	d76d6 <pinAvailable+0x5a>
   d76f0:	2003e78c 	.word	0x2003e78c
   d76f4:	2003e790 	.word	0x2003e790

000d76f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d76f8:	2823      	cmp	r0, #35	; 0x23
{
   d76fa:	b538      	push	{r3, r4, r5, lr}
   d76fc:	4604      	mov	r4, r0
   d76fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7700:	d80a      	bhi.n	d7718 <pinMode+0x20>
   d7702:	29ff      	cmp	r1, #255	; 0xff
   d7704:	d008      	beq.n	d7718 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7706:	f7ff ffb9 	bl	d767c <pinAvailable>
   d770a:	b128      	cbz	r0, d7718 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d770c:	4629      	mov	r1, r5
   d770e:	4620      	mov	r0, r4
}
   d7710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7714:	f7fe bbec 	b.w	d5ef0 <HAL_Pin_Mode>
}
   d7718:	bd38      	pop	{r3, r4, r5, pc}

000d771a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d771a:	b538      	push	{r3, r4, r5, lr}
   d771c:	4604      	mov	r4, r0
   d771e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7720:	f7fe fbee 	bl	d5f00 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7724:	28ff      	cmp	r0, #255	; 0xff
   d7726:	d010      	beq.n	d774a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7728:	2806      	cmp	r0, #6
   d772a:	d804      	bhi.n	d7736 <digitalWrite+0x1c>
   d772c:	234d      	movs	r3, #77	; 0x4d
   d772e:	fa23 f000 	lsr.w	r0, r3, r0
   d7732:	07c3      	lsls	r3, r0, #31
   d7734:	d409      	bmi.n	d774a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7736:	4620      	mov	r0, r4
   d7738:	f7ff ffa0 	bl	d767c <pinAvailable>
   d773c:	b128      	cbz	r0, d774a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d773e:	4629      	mov	r1, r5
   d7740:	4620      	mov	r0, r4
}
   d7742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7746:	f7fe bbe3 	b.w	d5f10 <HAL_GPIO_Write>
}
   d774a:	bd38      	pop	{r3, r4, r5, pc}

000d774c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d774c:	b510      	push	{r4, lr}
   d774e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7750:	f7fe fbd6 	bl	d5f00 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7754:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7756:	b2db      	uxtb	r3, r3
   d7758:	2b01      	cmp	r3, #1
   d775a:	d908      	bls.n	d776e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d775c:	4620      	mov	r0, r4
   d775e:	f7ff ff8d 	bl	d767c <pinAvailable>
   d7762:	b120      	cbz	r0, d776e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7764:	4620      	mov	r0, r4
}
   d7766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d776a:	f7fe bbd9 	b.w	d5f20 <HAL_GPIO_Read>
}
   d776e:	2000      	movs	r0, #0
   d7770:	bd10      	pop	{r4, pc}

000d7772 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7772:	280d      	cmp	r0, #13
{
   d7774:	b510      	push	{r4, lr}
   d7776:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7778:	bf9c      	itt	ls
   d777a:	340e      	addls	r4, #14
   d777c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d777e:	4620      	mov	r0, r4
   d7780:	f7ff ff7c 	bl	d767c <pinAvailable>
   d7784:	b150      	cbz	r0, d779c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7786:	2103      	movs	r1, #3
   d7788:	4620      	mov	r0, r4
   d778a:	f7fe fba9 	bl	d5ee0 <HAL_Validate_Pin_Function>
   d778e:	2803      	cmp	r0, #3
   d7790:	d104      	bne.n	d779c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7792:	4620      	mov	r0, r4
}
   d7794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7798:	f7fe bbca 	b.w	d5f30 <hal_adc_read>
}
   d779c:	2000      	movs	r0, #0
   d779e:	bd10      	pop	{r4, pc}

000d77a0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d77a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d77a2:	2300      	movs	r3, #0
   d77a4:	2520      	movs	r5, #32
   d77a6:	8043      	strh	r3, [r0, #2]
   d77a8:	2314      	movs	r3, #20
{
   d77aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d77ac:	8003      	strh	r3, [r0, #0]
   d77ae:	6085      	str	r5, [r0, #8]
   d77b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d77b2:	4906      	ldr	r1, [pc, #24]	; (d77cc <_Z17acquireWireBufferv+0x2c>)
   d77b4:	4628      	mov	r0, r5
   d77b6:	f000 f9aa 	bl	d7b0e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d77ba:	4904      	ldr	r1, [pc, #16]	; (d77cc <_Z17acquireWireBufferv+0x2c>)
	};
   d77bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d77be:	4628      	mov	r0, r5
   d77c0:	f000 f9a5 	bl	d7b0e <_ZnajRKSt9nothrow_t>
	};
   d77c4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d77c6:	4620      	mov	r0, r4
   d77c8:	bd38      	pop	{r3, r4, r5, pc}
   d77ca:	bf00      	nop
   d77cc:	000d9ddc 	.word	0x000d9ddc

000d77d0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d77d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d77d2:	4d0f      	ldr	r5, [pc, #60]	; (d7810 <_Z19__fetch_global_Wirev+0x40>)
   d77d4:	7829      	ldrb	r1, [r5, #0]
   d77d6:	f3bf 8f5b 	dmb	ish
   d77da:	f011 0401 	ands.w	r4, r1, #1
{
   d77de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d77e0:	d113      	bne.n	d780a <_Z19__fetch_global_Wirev+0x3a>
   d77e2:	4628      	mov	r0, r5
   d77e4:	f7fc fc5d 	bl	d40a2 <__cxa_guard_acquire>
   d77e8:	b178      	cbz	r0, d780a <_Z19__fetch_global_Wirev+0x3a>
   d77ea:	a801      	add	r0, sp, #4
   d77ec:	f7ff ffd8 	bl	d77a0 <_Z17acquireWireBufferv>
   d77f0:	aa01      	add	r2, sp, #4
   d77f2:	4621      	mov	r1, r4
   d77f4:	4807      	ldr	r0, [pc, #28]	; (d7814 <_Z19__fetch_global_Wirev+0x44>)
   d77f6:	f7ff f8ff 	bl	d69f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d77fa:	4628      	mov	r0, r5
   d77fc:	f7fc fc56 	bl	d40ac <__cxa_guard_release>
   d7800:	4a05      	ldr	r2, [pc, #20]	; (d7818 <_Z19__fetch_global_Wirev+0x48>)
   d7802:	4906      	ldr	r1, [pc, #24]	; (d781c <_Z19__fetch_global_Wirev+0x4c>)
   d7804:	4803      	ldr	r0, [pc, #12]	; (d7814 <_Z19__fetch_global_Wirev+0x44>)
   d7806:	f000 f979 	bl	d7afc <__aeabi_atexit>
	return wire;
}
   d780a:	4802      	ldr	r0, [pc, #8]	; (d7814 <_Z19__fetch_global_Wirev+0x44>)
   d780c:	b007      	add	sp, #28
   d780e:	bd30      	pop	{r4, r5, pc}
   d7810:	2003e79c 	.word	0x2003e79c
   d7814:	2003e7a0 	.word	0x2003e7a0
   d7818:	2003e420 	.word	0x2003e420
   d781c:	000d69a1 	.word	0x000d69a1

000d7820 <irq_handler>:
}

static void irq_handler(NRF_TIMER_Type        * p_reg,
                        timer_control_block_t * p_cb,
                        uint8_t                 channel_count)
{
   d7820:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7824:	2400      	movs	r4, #0
   d7826:	4606      	mov	r6, r0
   d7828:	460f      	mov	r7, r1
   d782a:	4690      	mov	r8, r2
   d782c:	f500 75a0 	add.w	r5, r0, #320	; 0x140
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
}

__STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
   d7830:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7834:	46a2      	mov	sl, r4
    return (nrf_timer_event_t)
   d7836:	00a0      	lsls	r0, r4, #2
   d7838:	f500 73a0 	add.w	r3, r0, #320	; 0x140
   d783c:	b298      	uxth	r0, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   d783e:	682b      	ldr	r3, [r5, #0]
    for (i = 0; i < channel_count; ++i)
    {
        nrf_timer_event_t event = nrf_timer_compare_event_get(i);
        nrf_timer_int_mask_t int_mask = nrf_timer_compare_int_get(i);

        if (nrf_timer_event_check(p_reg, event) &&
   d7840:	b16b      	cbz	r3, d785e <irq_handler+0x3e>
    return (bool)(p_reg->INTENSET & timer_int);
   d7842:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    return (nrf_timer_int_mask_t)
   d7846:	fa09 f204 	lsl.w	r2, r9, r4
   d784a:	421a      	tst	r2, r3
   d784c:	d007      	beq.n	d785e <irq_handler+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d784e:	f8c5 a000 	str.w	sl, [r5]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7852:	682b      	ldr	r3, [r5, #0]
   d7854:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7856:	9b01      	ldr	r3, [sp, #4]
            nrf_timer_int_enable_check(p_reg, int_mask))
        {
            nrf_timer_event_clear(p_reg, event);
            NRFX_LOG_DEBUG("Compare event, channel: %d.", i);
            p_cb->handler(event, p_cb->context);
   d7858:	e9d7 3100 	ldrd	r3, r1, [r7]
   d785c:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
   d785e:	3401      	adds	r4, #1
   d7860:	45a0      	cmp	r8, r4
   d7862:	f105 0504 	add.w	r5, r5, #4
   d7866:	d1e6      	bne.n	d7836 <irq_handler+0x16>
        }
    }
}
   d7868:	b002      	add	sp, #8
   d786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d7870 <nrfx_timer_init>:
{
   d7870:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7874:	4b57      	ldr	r3, [pc, #348]	; (d79d4 <nrfx_timer_init+0x164>)
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   d7876:	7907      	ldrb	r7, [r0, #4]
{
   d7878:	4616      	mov	r6, r2
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d787a:	6802      	ldr	r2, [r0, #0]
   d787c:	429a      	cmp	r2, r3
{
   d787e:	4604      	mov	r4, r0
   d7880:	460d      	mov	r5, r1
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7882:	d104      	bne.n	d788e <nrfx_timer_init+0x1e>
   d7884:	4a54      	ldr	r2, [pc, #336]	; (d79d8 <nrfx_timer_init+0x168>)
   d7886:	2100      	movs	r1, #0
   d7888:	200a      	movs	r0, #10
   d788a:	f7fe fc63 	bl	d6154 <panic_>
    NRFX_ASSERT(p_config);
   d788e:	b925      	cbnz	r5, d789a <nrfx_timer_init+0x2a>
   d7890:	4a51      	ldr	r2, [pc, #324]	; (d79d8 <nrfx_timer_init+0x168>)
   d7892:	4629      	mov	r1, r5
   d7894:	200a      	movs	r0, #10
   d7896:	f7fe fc5d 	bl	d6154 <panic_>
    NRFX_ASSERT(timer_event_handler);
   d789a:	b926      	cbnz	r6, d78a6 <nrfx_timer_init+0x36>
   d789c:	4a4e      	ldr	r2, [pc, #312]	; (d79d8 <nrfx_timer_init+0x168>)
   d789e:	4631      	mov	r1, r6
   d78a0:	200a      	movs	r0, #10
   d78a2:	f7fe fc57 	bl	d6154 <panic_>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   d78a6:	4a4d      	ldr	r2, [pc, #308]	; (d79dc <nrfx_timer_init+0x16c>)
   d78a8:	230c      	movs	r3, #12
   d78aa:	fb03 2307 	mla	r3, r3, r7, r2
   d78ae:	4690      	mov	r8, r2
   d78b0:	7a1b      	ldrb	r3, [r3, #8]
   d78b2:	2b00      	cmp	r3, #0
   d78b4:	f040 808c 	bne.w	d79d0 <nrfx_timer_init+0x160>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   d78b8:	6823      	ldr	r3, [r4, #0]
   d78ba:	4a46      	ldr	r2, [pc, #280]	; (d79d4 <nrfx_timer_init+0x164>)
   d78bc:	4293      	cmp	r3, r2
   d78be:	d00f      	beq.n	d78e0 <nrfx_timer_init+0x70>
   d78c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d78c4:	4293      	cmp	r3, r2
   d78c6:	d00b      	beq.n	d78e0 <nrfx_timer_init+0x70>
   d78c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d78cc:	4293      	cmp	r3, r2
   d78ce:	d007      	beq.n	d78e0 <nrfx_timer_init+0x70>
   d78d0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   d78d4:	4293      	cmp	r3, r2
   d78d6:	d003      	beq.n	d78e0 <nrfx_timer_init+0x70>
   d78d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d78dc:	4293      	cmp	r3, r2
   d78de:	d102      	bne.n	d78e6 <nrfx_timer_init+0x76>
   d78e0:	78ab      	ldrb	r3, [r5, #2]
   d78e2:	2b03      	cmp	r3, #3
   d78e4:	d904      	bls.n	d78f0 <nrfx_timer_init+0x80>
   d78e6:	4a3c      	ldr	r2, [pc, #240]	; (d79d8 <nrfx_timer_init+0x168>)
   d78e8:	2100      	movs	r1, #0
   d78ea:	200a      	movs	r0, #10
   d78ec:	f7fe fc32 	bl	d6154 <panic_>
    p_cb->handler = timer_event_handler;
   d78f0:	230c      	movs	r3, #12
   d78f2:	437b      	muls	r3, r7
   d78f4:	eb08 0203 	add.w	r2, r8, r3
   d78f8:	f848 6003 	str.w	r6, [r8, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d78fc:	2100      	movs	r1, #0
    p_cb->context = p_config->p_context;
   d78fe:	686b      	ldr	r3, [r5, #4]
   d7900:	6053      	str	r3, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7902:	460e      	mov	r6, r1
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7904:	7960      	ldrb	r0, [r4, #5]
   d7906:	6822      	ldr	r2, [r4, #0]
   d7908:	b2cb      	uxtb	r3, r1
   d790a:	4298      	cmp	r0, r3
   d790c:	d857      	bhi.n	d79be <nrfx_timer_init+0x14e>
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
   d790e:	78ee      	ldrb	r6, [r5, #3]
#define NRFX_IRQ_PRIORITY_SET(irq_number, priority) \
    _NRFX_IRQ_PRIORITY_SET(irq_number, priority)
static inline void _NRFX_IRQ_PRIORITY_SET(IRQn_Type irq_number,
                                          uint8_t   priority)
{
    NRFX_ASSERT(INTERRUPT_PRIORITY_IS_VALID(priority));
   d7910:	1eb3      	subs	r3, r6, #2
   d7912:	2b01      	cmp	r3, #1
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   d7914:	ea4f 3912 	mov.w	r9, r2, lsr #12
   d7918:	f342 3a07 	sbfx	sl, r2, #12, #8
   d791c:	d907      	bls.n	d792e <nrfx_timer_init+0xbe>
   d791e:	1f73      	subs	r3, r6, #5
   d7920:	2b02      	cmp	r3, #2
   d7922:	d904      	bls.n	d792e <nrfx_timer_init+0xbe>
   d7924:	4a2c      	ldr	r2, [pc, #176]	; (d79d8 <nrfx_timer_init+0x168>)
   d7926:	2100      	movs	r1, #0
   d7928:	200a      	movs	r0, #10
   d792a:	f7fe fc13 	bl	d6154 <panic_>
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   d792e:	f1ba 0f00 	cmp.w	sl, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7932:	bfac      	ite	ge
   d7934:	f10a 4360 	addge.w	r3, sl, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7938:	4b29      	ldrlt	r3, [pc, #164]	; (d79e0 <nrfx_timer_init+0x170>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d793a:	482a      	ldr	r0, [pc, #168]	; (d79e4 <nrfx_timer_init+0x174>)
   d793c:	ea4f 1646 	mov.w	r6, r6, lsl #5
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7940:	bfb8      	it	lt
   d7942:	f009 090f 	andlt.w	r9, r9, #15
   d7946:	b2f6      	uxtb	r6, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7948:	bfaa      	itet	ge
   d794a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d794e:	f803 6009 	strblt.w	r6, [r3, r9]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7952:	f883 6300 	strbge.w	r6, [r3, #768]	; 0x300
   d7956:	6823      	ldr	r3, [r4, #0]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d7958:	f343 3107 	sbfx	r1, r3, #12, #8
   d795c:	0949      	lsrs	r1, r1, #5
   d795e:	2201      	movs	r2, #1
   d7960:	f3c3 3304 	ubfx	r3, r3, #12, #5
   d7964:	fa02 f303 	lsl.w	r3, r2, r3
   d7968:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   d796c:	6820      	ldr	r0, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d796e:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7970:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d7974:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7978:	f021 0103 	bic.w	r1, r1, #3
   d797c:	430b      	orrs	r3, r1
   d797e:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   d7982:	6820      	ldr	r0, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d7984:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d7986:	f8d0 1508 	ldr.w	r1, [r0, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d798a:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d798e:	f021 0103 	bic.w	r1, r1, #3
   d7992:	430b      	orrs	r3, r1
   d7994:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
   d7998:	6820      	ldr	r0, [r4, #0]
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d799a:	782b      	ldrb	r3, [r5, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d799c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d79a0:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d79a4:	f021 010f 	bic.w	r1, r1, #15
   d79a8:	430b      	orrs	r3, r1
   d79aa:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d79ae:	230c      	movs	r3, #12
   d79b0:	fb03 8707 	mla	r7, r3, r7, r8
    return err_code;
   d79b4:	2000      	movs	r0, #0
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d79b6:	723a      	strb	r2, [r7, #8]
}
   d79b8:	b002      	add	sp, #8
   d79ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (nrf_timer_event_t)
   d79be:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d79c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   d79c4:	3101      	adds	r1, #1
   d79c6:	50d6      	str	r6, [r2, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d79c8:	58d3      	ldr	r3, [r2, r3]
   d79ca:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d79cc:	9b01      	ldr	r3, [sp, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d79ce:	e799      	b.n	d7904 <nrfx_timer_init+0x94>
        return err_code;
   d79d0:	2008      	movs	r0, #8
   d79d2:	e7f1      	b.n	d79b8 <nrfx_timer_init+0x148>
   d79d4:	40008000 	.word	0x40008000
   d79d8:	000d5ea1 	.word	0x000d5ea1
   d79dc:	2003e7b4 	.word	0x2003e7b4
   d79e0:	e000ed14 	.word	0xe000ed14
   d79e4:	e000e100 	.word	0xe000e100

000d79e8 <nrfx_timer_enable>:
{
   d79e8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d79ea:	4d0c      	ldr	r5, [pc, #48]	; (d7a1c <nrfx_timer_enable+0x34>)
   d79ec:	7902      	ldrb	r2, [r0, #4]
   d79ee:	210c      	movs	r1, #12
   d79f0:	fb01 5202 	mla	r2, r1, r2, r5
{
   d79f4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d79f6:	7a12      	ldrb	r2, [r2, #8]
   d79f8:	2a01      	cmp	r2, #1
   d79fa:	d004      	beq.n	d7a06 <nrfx_timer_enable+0x1e>
   d79fc:	4a08      	ldr	r2, [pc, #32]	; (d7a20 <nrfx_timer_enable+0x38>)
   d79fe:	2100      	movs	r1, #0
   d7a00:	200a      	movs	r0, #10
   d7a02:	f7fe fba7 	bl	d6154 <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   d7a06:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   d7a08:	2201      	movs	r2, #1
   d7a0a:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   d7a0c:	7923      	ldrb	r3, [r4, #4]
   d7a0e:	220c      	movs	r2, #12
   d7a10:	fb02 5303 	mla	r3, r2, r3, r5
   d7a14:	2202      	movs	r2, #2
   d7a16:	721a      	strb	r2, [r3, #8]
}
   d7a18:	bd38      	pop	{r3, r4, r5, pc}
   d7a1a:	bf00      	nop
   d7a1c:	2003e7b4 	.word	0x2003e7b4
   d7a20:	000d5ea1 	.word	0x000d5ea1

000d7a24 <nrfx_timer_disable>:
{
   d7a24:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7a26:	4d0a      	ldr	r5, [pc, #40]	; (d7a50 <nrfx_timer_disable+0x2c>)
   d7a28:	7902      	ldrb	r2, [r0, #4]
   d7a2a:	210c      	movs	r1, #12
   d7a2c:	fb01 5202 	mla	r2, r1, r2, r5
{
   d7a30:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7a32:	7a11      	ldrb	r1, [r2, #8]
   d7a34:	b919      	cbnz	r1, d7a3e <nrfx_timer_disable+0x1a>
   d7a36:	4a07      	ldr	r2, [pc, #28]	; (d7a54 <nrfx_timer_disable+0x30>)
   d7a38:	200a      	movs	r0, #10
   d7a3a:	f7fe fb8b 	bl	d6154 <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   d7a3e:	6823      	ldr	r3, [r4, #0]
   d7a40:	2201      	movs	r2, #1
   d7a42:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   d7a44:	7923      	ldrb	r3, [r4, #4]
   d7a46:	210c      	movs	r1, #12
   d7a48:	fb01 5303 	mla	r3, r1, r3, r5
   d7a4c:	721a      	strb	r2, [r3, #8]
}
   d7a4e:	bd38      	pop	{r3, r4, r5, pc}
   d7a50:	2003e7b4 	.word	0x2003e7b4
   d7a54:	000d5ea1 	.word	0x000d5ea1

000d7a58 <nrfx_timer_clear>:
{
   d7a58:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7a5a:	4a08      	ldr	r2, [pc, #32]	; (d7a7c <nrfx_timer_clear+0x24>)
   d7a5c:	7903      	ldrb	r3, [r0, #4]
   d7a5e:	210c      	movs	r1, #12
   d7a60:	fb01 2303 	mla	r3, r1, r3, r2
{
   d7a64:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7a66:	7a19      	ldrb	r1, [r3, #8]
   d7a68:	b919      	cbnz	r1, d7a72 <nrfx_timer_clear+0x1a>
   d7a6a:	4a05      	ldr	r2, [pc, #20]	; (d7a80 <nrfx_timer_clear+0x28>)
   d7a6c:	200a      	movs	r0, #10
   d7a6e:	f7fe fb71 	bl	d6154 <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   d7a72:	6823      	ldr	r3, [r4, #0]
   d7a74:	2201      	movs	r2, #1
   d7a76:	60da      	str	r2, [r3, #12]
}
   d7a78:	bd10      	pop	{r4, pc}
   d7a7a:	bf00      	nop
   d7a7c:	2003e7b4 	.word	0x2003e7b4
   d7a80:	000d5ea1 	.word	0x000d5ea1

000d7a84 <nrfx_timer_compare>:
{
   d7a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
   d7a86:	f44f 3480 	mov.w	r4, #65536	; 0x10000
   d7a8a:	6805      	ldr	r5, [r0, #0]
   d7a8c:	408c      	lsls	r4, r1
    if (enable_int)
   d7a8e:	b18b      	cbz	r3, d7ab4 <nrfx_timer_compare+0x30>
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
   d7a90:	f101 0350 	add.w	r3, r1, #80	; 0x50
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7a94:	009b      	lsls	r3, r3, #2
   d7a96:	2600      	movs	r6, #0
   d7a98:	50ee      	str	r6, [r5, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7a9a:	58eb      	ldr	r3, [r5, r3]
   d7a9c:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7a9e:	9b01      	ldr	r3, [sp, #4]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
   d7aa0:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = timer_int_mask;
   d7aa2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_write(p_instance->p_reg, cc_channel, cc_value);
   d7aa6:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
   d7aa8:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   d7aac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   d7ab0:	b002      	add	sp, #8
   d7ab2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = timer_int_mask;
   d7ab4:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
   d7ab8:	e7f5      	b.n	d7aa6 <nrfx_timer_compare+0x22>

000d7aba <nrfx_timer_extended_compare>:
{
   d7aba:	b4f0      	push	{r4, r5, r6, r7}
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7abc:	6807      	ldr	r7, [r0, #0]
        (TIMER_SHORTS_COMPARE0_CLEAR_Msk << cc_channel));
   d7abe:	f240 1601 	movw	r6, #257	; 0x101
    p_reg->SHORTS &= ~(timer_shorts_mask);
   d7ac2:	f8d7 5200 	ldr.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7ac6:	408e      	lsls	r6, r1
   d7ac8:	ea25 0506 	bic.w	r5, r5, r6
   d7acc:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_enable(p_instance->p_reg, timer_short_mask);
   d7ad0:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS |= timer_shorts_mask;
   d7ad2:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   d7ad6:	432b      	orrs	r3, r5
   d7ad8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    nrfx_timer_compare(p_instance,
   d7adc:	f89d 3010 	ldrb.w	r3, [sp, #16]
}
   d7ae0:	bcf0      	pop	{r4, r5, r6, r7}
    nrfx_timer_compare(p_instance,
   d7ae2:	f7ff bfcf 	b.w	d7a84 <nrfx_timer_compare>
	...

000d7ae8 <TIMER4_IRQHandler>:
#endif

#if NRFX_CHECK(NRFX_TIMER4_ENABLED)
void nrfx_timer_4_irq_handler(void)
{
    irq_handler(NRF_TIMER4, &m_cb[NRFX_TIMER4_INST_IDX],
   d7ae8:	4902      	ldr	r1, [pc, #8]	; (d7af4 <TIMER4_IRQHandler+0xc>)
   d7aea:	4803      	ldr	r0, [pc, #12]	; (d7af8 <TIMER4_IRQHandler+0x10>)
   d7aec:	2206      	movs	r2, #6
   d7aee:	f7ff be97 	b.w	d7820 <irq_handler>
   d7af2:	bf00      	nop
   d7af4:	2003e7e4 	.word	0x2003e7e4
   d7af8:	4001b000 	.word	0x4001b000

000d7afc <__aeabi_atexit>:
   d7afc:	460b      	mov	r3, r1
   d7afe:	4601      	mov	r1, r0
   d7b00:	4618      	mov	r0, r3
   d7b02:	f001 be63 	b.w	d97cc <__cxa_atexit>

000d7b06 <_ZdlPvj>:
   d7b06:	f7fc baca 	b.w	d409e <_ZdlPv>

000d7b0a <_ZnwjRKSt9nothrow_t>:
   d7b0a:	f7fc bac4 	b.w	d4096 <_Znwj>

000d7b0e <_ZnajRKSt9nothrow_t>:
   d7b0e:	f7fc bac4 	b.w	d409a <_Znaj>

000d7b12 <_ZSt25__throw_bad_function_callv>:
   d7b12:	b508      	push	{r3, lr}
   d7b14:	f7fe fbf4 	bl	d6300 <abort>

000d7b18 <pow>:
   d7b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7b1c:	ed2d 8b02 	vpush	{d8}
   d7b20:	b08d      	sub	sp, #52	; 0x34
   d7b22:	ec57 6b10 	vmov	r6, r7, d0
   d7b26:	ec55 4b11 	vmov	r4, r5, d1
   d7b2a:	f000 f9ad 	bl	d7e88 <__ieee754_pow>
   d7b2e:	4bae      	ldr	r3, [pc, #696]	; (d7de8 <pow+0x2d0>)
   d7b30:	eeb0 8a40 	vmov.f32	s16, s0
   d7b34:	eef0 8a60 	vmov.f32	s17, s1
   d7b38:	f993 9000 	ldrsb.w	r9, [r3]
   d7b3c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d7b40:	d037      	beq.n	d7bb2 <pow+0x9a>
   d7b42:	4622      	mov	r2, r4
   d7b44:	462b      	mov	r3, r5
   d7b46:	4620      	mov	r0, r4
   d7b48:	4629      	mov	r1, r5
   d7b4a:	f001 fdd9 	bl	d9700 <__aeabi_dcmpun>
   d7b4e:	4683      	mov	fp, r0
   d7b50:	bb78      	cbnz	r0, d7bb2 <pow+0x9a>
   d7b52:	4632      	mov	r2, r6
   d7b54:	463b      	mov	r3, r7
   d7b56:	4630      	mov	r0, r6
   d7b58:	4639      	mov	r1, r7
   d7b5a:	f001 fdd1 	bl	d9700 <__aeabi_dcmpun>
   d7b5e:	4680      	mov	r8, r0
   d7b60:	2800      	cmp	r0, #0
   d7b62:	f040 8093 	bne.w	d7c8c <pow+0x174>
   d7b66:	f04f 0a00 	mov.w	sl, #0
   d7b6a:	f04f 0b00 	mov.w	fp, #0
   d7b6e:	4630      	mov	r0, r6
   d7b70:	4639      	mov	r1, r7
   d7b72:	4652      	mov	r2, sl
   d7b74:	465b      	mov	r3, fp
   d7b76:	f001 fd91 	bl	d969c <__aeabi_dcmpeq>
   d7b7a:	b318      	cbz	r0, d7bc4 <pow+0xac>
   d7b7c:	4652      	mov	r2, sl
   d7b7e:	465b      	mov	r3, fp
   d7b80:	4620      	mov	r0, r4
   d7b82:	4629      	mov	r1, r5
   d7b84:	f001 fd8a 	bl	d969c <__aeabi_dcmpeq>
   d7b88:	9000      	str	r0, [sp, #0]
   d7b8a:	2800      	cmp	r0, #0
   d7b8c:	d057      	beq.n	d7c3e <pow+0x126>
   d7b8e:	4b97      	ldr	r3, [pc, #604]	; (d7dec <pow+0x2d4>)
   d7b90:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7b94:	2201      	movs	r2, #1
   d7b96:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7b9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7b9e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7ba2:	9202      	str	r2, [sp, #8]
   d7ba4:	9303      	str	r3, [sp, #12]
   d7ba6:	f1b9 0f00 	cmp.w	r9, #0
   d7baa:	f000 8089 	beq.w	d7cc0 <pow+0x1a8>
   d7bae:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d7dd8 <pow+0x2c0>
   d7bb2:	eeb0 0a48 	vmov.f32	s0, s16
   d7bb6:	eef0 0a68 	vmov.f32	s1, s17
   d7bba:	b00d      	add	sp, #52	; 0x34
   d7bbc:	ecbd 8b02 	vpop	{d8}
   d7bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7bc4:	eeb0 0a48 	vmov.f32	s0, s16
   d7bc8:	eef0 0a68 	vmov.f32	s1, s17
   d7bcc:	f001 f804 	bl	d8bd8 <finite>
   d7bd0:	4680      	mov	r8, r0
   d7bd2:	2800      	cmp	r0, #0
   d7bd4:	f000 8082 	beq.w	d7cdc <pow+0x1c4>
   d7bd8:	f04f 0800 	mov.w	r8, #0
   d7bdc:	f04f 0900 	mov.w	r9, #0
   d7be0:	ec51 0b18 	vmov	r0, r1, d8
   d7be4:	4642      	mov	r2, r8
   d7be6:	464b      	mov	r3, r9
   d7be8:	f001 fd58 	bl	d969c <__aeabi_dcmpeq>
   d7bec:	2800      	cmp	r0, #0
   d7bee:	d0e0      	beq.n	d7bb2 <pow+0x9a>
   d7bf0:	ec47 6b10 	vmov	d0, r6, r7
   d7bf4:	f000 fff0 	bl	d8bd8 <finite>
   d7bf8:	2800      	cmp	r0, #0
   d7bfa:	d0da      	beq.n	d7bb2 <pow+0x9a>
   d7bfc:	ec45 4b10 	vmov	d0, r4, r5
   d7c00:	f000 ffea 	bl	d8bd8 <finite>
   d7c04:	2800      	cmp	r0, #0
   d7c06:	d0d4      	beq.n	d7bb2 <pow+0x9a>
   d7c08:	4b77      	ldr	r3, [pc, #476]	; (d7de8 <pow+0x2d0>)
   d7c0a:	4a78      	ldr	r2, [pc, #480]	; (d7dec <pow+0x2d4>)
   d7c0c:	f993 3000 	ldrsb.w	r3, [r3]
   d7c10:	9203      	str	r2, [sp, #12]
   d7c12:	2104      	movs	r1, #4
   d7c14:	2200      	movs	r2, #0
   d7c16:	2b02      	cmp	r3, #2
   d7c18:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7c1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7c20:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7c24:	9102      	str	r1, [sp, #8]
   d7c26:	920a      	str	r2, [sp, #40]	; 0x28
   d7c28:	d004      	beq.n	d7c34 <pow+0x11c>
   d7c2a:	a802      	add	r0, sp, #8
   d7c2c:	f000 ffe0 	bl	d8bf0 <matherr>
   d7c30:	2800      	cmp	r0, #0
   d7c32:	d14a      	bne.n	d7cca <pow+0x1b2>
   d7c34:	f7fe fb74 	bl	d6320 <__errno>
   d7c38:	2322      	movs	r3, #34	; 0x22
   d7c3a:	6003      	str	r3, [r0, #0]
   d7c3c:	e045      	b.n	d7cca <pow+0x1b2>
   d7c3e:	ec45 4b10 	vmov	d0, r4, r5
   d7c42:	f000 ffc9 	bl	d8bd8 <finite>
   d7c46:	2800      	cmp	r0, #0
   d7c48:	d0b3      	beq.n	d7bb2 <pow+0x9a>
   d7c4a:	4652      	mov	r2, sl
   d7c4c:	465b      	mov	r3, fp
   d7c4e:	4620      	mov	r0, r4
   d7c50:	4629      	mov	r1, r5
   d7c52:	f001 fd2d 	bl	d96b0 <__aeabi_dcmplt>
   d7c56:	2800      	cmp	r0, #0
   d7c58:	d0ab      	beq.n	d7bb2 <pow+0x9a>
   d7c5a:	4b63      	ldr	r3, [pc, #396]	; (d7de8 <pow+0x2d0>)
   d7c5c:	9900      	ldr	r1, [sp, #0]
   d7c5e:	4a63      	ldr	r2, [pc, #396]	; (d7dec <pow+0x2d4>)
   d7c60:	f993 3000 	ldrsb.w	r3, [r3]
   d7c64:	910a      	str	r1, [sp, #40]	; 0x28
   d7c66:	2101      	movs	r1, #1
   d7c68:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7c6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7c70:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7c74:	2b00      	cmp	r3, #0
   d7c76:	d16f      	bne.n	d7d58 <pow+0x240>
   d7c78:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7c7c:	a802      	add	r0, sp, #8
   d7c7e:	f000 ffb7 	bl	d8bf0 <matherr>
   d7c82:	2800      	cmp	r0, #0
   d7c84:	d06e      	beq.n	d7d64 <pow+0x24c>
   d7c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7c88:	b32b      	cbz	r3, d7cd6 <pow+0x1be>
   d7c8a:	e020      	b.n	d7cce <pow+0x1b6>
   d7c8c:	2200      	movs	r2, #0
   d7c8e:	2300      	movs	r3, #0
   d7c90:	4620      	mov	r0, r4
   d7c92:	4629      	mov	r1, r5
   d7c94:	f001 fd02 	bl	d969c <__aeabi_dcmpeq>
   d7c98:	2800      	cmp	r0, #0
   d7c9a:	d08a      	beq.n	d7bb2 <pow+0x9a>
   d7c9c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d7dd8 <pow+0x2c0>
   d7ca0:	4b52      	ldr	r3, [pc, #328]	; (d7dec <pow+0x2d4>)
   d7ca2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7ca6:	2201      	movs	r2, #1
   d7ca8:	f1b9 0f02 	cmp.w	r9, #2
   d7cac:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7cb0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7cb4:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7cb8:	9202      	str	r2, [sp, #8]
   d7cba:	9303      	str	r3, [sp, #12]
   d7cbc:	f43f af79 	beq.w	d7bb2 <pow+0x9a>
   d7cc0:	a802      	add	r0, sp, #8
   d7cc2:	f000 ff95 	bl	d8bf0 <matherr>
   d7cc6:	2800      	cmp	r0, #0
   d7cc8:	d051      	beq.n	d7d6e <pow+0x256>
   d7cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ccc:	b11b      	cbz	r3, d7cd6 <pow+0x1be>
   d7cce:	f7fe fb27 	bl	d6320 <__errno>
   d7cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7cd4:	6003      	str	r3, [r0, #0]
   d7cd6:	ed9d 8b08 	vldr	d8, [sp, #32]
   d7cda:	e76a      	b.n	d7bb2 <pow+0x9a>
   d7cdc:	ec47 6b10 	vmov	d0, r6, r7
   d7ce0:	f000 ff7a 	bl	d8bd8 <finite>
   d7ce4:	2800      	cmp	r0, #0
   d7ce6:	f43f af77 	beq.w	d7bd8 <pow+0xc0>
   d7cea:	ec45 4b10 	vmov	d0, r4, r5
   d7cee:	f000 ff73 	bl	d8bd8 <finite>
   d7cf2:	2800      	cmp	r0, #0
   d7cf4:	f43f af70 	beq.w	d7bd8 <pow+0xc0>
   d7cf8:	ec53 2b18 	vmov	r2, r3, d8
   d7cfc:	ee18 0a10 	vmov	r0, s16
   d7d00:	4619      	mov	r1, r3
   d7d02:	f001 fcfd 	bl	d9700 <__aeabi_dcmpun>
   d7d06:	4b38      	ldr	r3, [pc, #224]	; (d7de8 <pow+0x2d0>)
   d7d08:	2800      	cmp	r0, #0
   d7d0a:	f040 8096 	bne.w	d7e3a <pow+0x322>
   d7d0e:	f993 8000 	ldrsb.w	r8, [r3]
   d7d12:	900a      	str	r0, [sp, #40]	; 0x28
   d7d14:	2303      	movs	r3, #3
   d7d16:	9302      	str	r3, [sp, #8]
   d7d18:	4b34      	ldr	r3, [pc, #208]	; (d7dec <pow+0x2d4>)
   d7d1a:	9303      	str	r3, [sp, #12]
   d7d1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7d20:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7d24:	f1b8 0f00 	cmp.w	r8, #0
   d7d28:	d126      	bne.n	d7d78 <pow+0x260>
   d7d2a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d7dfc <pow+0x2e4>
   d7d2e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7d32:	4652      	mov	r2, sl
   d7d34:	465b      	mov	r3, fp
   d7d36:	4630      	mov	r0, r6
   d7d38:	4639      	mov	r1, r7
   d7d3a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7d3e:	f001 fcb7 	bl	d96b0 <__aeabi_dcmplt>
   d7d42:	bb48      	cbnz	r0, d7d98 <pow+0x280>
   d7d44:	a802      	add	r0, sp, #8
   d7d46:	f000 ff53 	bl	d8bf0 <matherr>
   d7d4a:	2800      	cmp	r0, #0
   d7d4c:	d19b      	bne.n	d7c86 <pow+0x16e>
   d7d4e:	f7fe fae7 	bl	d6320 <__errno>
   d7d52:	2322      	movs	r3, #34	; 0x22
   d7d54:	6003      	str	r3, [r0, #0]
   d7d56:	e796      	b.n	d7c86 <pow+0x16e>
   d7d58:	4925      	ldr	r1, [pc, #148]	; (d7df0 <pow+0x2d8>)
   d7d5a:	2000      	movs	r0, #0
   d7d5c:	2b02      	cmp	r3, #2
   d7d5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d7d62:	d18b      	bne.n	d7c7c <pow+0x164>
   d7d64:	f7fe fadc 	bl	d6320 <__errno>
   d7d68:	2321      	movs	r3, #33	; 0x21
   d7d6a:	6003      	str	r3, [r0, #0]
   d7d6c:	e78b      	b.n	d7c86 <pow+0x16e>
   d7d6e:	f7fe fad7 	bl	d6320 <__errno>
   d7d72:	2321      	movs	r3, #33	; 0x21
   d7d74:	6003      	str	r3, [r0, #0]
   d7d76:	e7a8      	b.n	d7cca <pow+0x1b2>
   d7d78:	ed9f 7b19 	vldr	d7, [pc, #100]	; d7de0 <pow+0x2c8>
   d7d7c:	4652      	mov	r2, sl
   d7d7e:	465b      	mov	r3, fp
   d7d80:	4630      	mov	r0, r6
   d7d82:	4639      	mov	r1, r7
   d7d84:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7d88:	f001 fc92 	bl	d96b0 <__aeabi_dcmplt>
   d7d8c:	2800      	cmp	r0, #0
   d7d8e:	d137      	bne.n	d7e00 <pow+0x2e8>
   d7d90:	f1b8 0f02 	cmp.w	r8, #2
   d7d94:	d0db      	beq.n	d7d4e <pow+0x236>
   d7d96:	e7d5      	b.n	d7d44 <pow+0x22c>
   d7d98:	4b16      	ldr	r3, [pc, #88]	; (d7df4 <pow+0x2dc>)
   d7d9a:	2200      	movs	r2, #0
   d7d9c:	4620      	mov	r0, r4
   d7d9e:	4629      	mov	r1, r5
   d7da0:	f001 fa14 	bl	d91cc <__aeabi_dmul>
   d7da4:	4602      	mov	r2, r0
   d7da6:	460b      	mov	r3, r1
   d7da8:	ec43 2b10 	vmov	d0, r2, r3
   d7dac:	e9cd 2300 	strd	r2, r3, [sp]
   d7db0:	f000 ff2a 	bl	d8c08 <rint>
   d7db4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7db8:	ec51 0b10 	vmov	r0, r1, d0
   d7dbc:	f001 fc6e 	bl	d969c <__aeabi_dcmpeq>
   d7dc0:	2800      	cmp	r0, #0
   d7dc2:	d136      	bne.n	d7e32 <pow+0x31a>
   d7dc4:	4b0c      	ldr	r3, [pc, #48]	; (d7df8 <pow+0x2e0>)
   d7dc6:	4908      	ldr	r1, [pc, #32]	; (d7de8 <pow+0x2d0>)
   d7dc8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7dcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7dd0:	f991 8000 	ldrsb.w	r8, [r1]
   d7dd4:	e7dc      	b.n	d7d90 <pow+0x278>
   d7dd6:	bf00      	nop
   d7dd8:	00000000 	.word	0x00000000
   d7ddc:	3ff00000 	.word	0x3ff00000
   d7de0:	00000000 	.word	0x00000000
   d7de4:	7ff00000 	.word	0x7ff00000
   d7de8:	2003e3b8 	.word	0x2003e3b8
   d7dec:	000d9de0 	.word	0x000d9de0
   d7df0:	fff00000 	.word	0xfff00000
   d7df4:	3fe00000 	.word	0x3fe00000
   d7df8:	c7efffff 	.word	0xc7efffff
   d7dfc:	47efffff 	.word	0x47efffff
   d7e00:	4b1c      	ldr	r3, [pc, #112]	; (d7e74 <pow+0x35c>)
   d7e02:	2200      	movs	r2, #0
   d7e04:	4620      	mov	r0, r4
   d7e06:	4629      	mov	r1, r5
   d7e08:	f001 f9e0 	bl	d91cc <__aeabi_dmul>
   d7e0c:	4602      	mov	r2, r0
   d7e0e:	460b      	mov	r3, r1
   d7e10:	ec43 2b10 	vmov	d0, r2, r3
   d7e14:	e9cd 2300 	strd	r2, r3, [sp]
   d7e18:	f000 fef6 	bl	d8c08 <rint>
   d7e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7e20:	ec51 0b10 	vmov	r0, r1, d0
   d7e24:	f001 fc3a 	bl	d969c <__aeabi_dcmpeq>
   d7e28:	b918      	cbnz	r0, d7e32 <pow+0x31a>
   d7e2a:	4b13      	ldr	r3, [pc, #76]	; (d7e78 <pow+0x360>)
   d7e2c:	2200      	movs	r2, #0
   d7e2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7e32:	4b12      	ldr	r3, [pc, #72]	; (d7e7c <pow+0x364>)
   d7e34:	f993 8000 	ldrsb.w	r8, [r3]
   d7e38:	e7aa      	b.n	d7d90 <pow+0x278>
   d7e3a:	f993 9000 	ldrsb.w	r9, [r3]
   d7e3e:	4b10      	ldr	r3, [pc, #64]	; (d7e80 <pow+0x368>)
   d7e40:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7e44:	2201      	movs	r2, #1
   d7e46:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d7e52:	f1b9 0f00 	cmp.w	r9, #0
   d7e56:	f43f af0f 	beq.w	d7c78 <pow+0x160>
   d7e5a:	4652      	mov	r2, sl
   d7e5c:	465b      	mov	r3, fp
   d7e5e:	4650      	mov	r0, sl
   d7e60:	4659      	mov	r1, fp
   d7e62:	f001 fadd 	bl	d9420 <__aeabi_ddiv>
   d7e66:	f1b9 0f02 	cmp.w	r9, #2
   d7e6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d7e6e:	f43f af79 	beq.w	d7d64 <pow+0x24c>
   d7e72:	e703      	b.n	d7c7c <pow+0x164>
   d7e74:	3fe00000 	.word	0x3fe00000
   d7e78:	fff00000 	.word	0xfff00000
   d7e7c:	2003e3b8 	.word	0x2003e3b8
   d7e80:	000d9de0 	.word	0x000d9de0
   d7e84:	00000000 	.word	0x00000000

000d7e88 <__ieee754_pow>:
   d7e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e8c:	ec57 6b11 	vmov	r6, r7, d1
   d7e90:	ed2d 8b0a 	vpush	{d8-d12}
   d7e94:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d7e98:	ea5a 0206 	orrs.w	r2, sl, r6
   d7e9c:	b089      	sub	sp, #36	; 0x24
   d7e9e:	d03d      	beq.n	d7f1c <__ieee754_pow+0x94>
   d7ea0:	ec55 4b10 	vmov	r4, r5, d0
   d7ea4:	4976      	ldr	r1, [pc, #472]	; (d8080 <__ieee754_pow+0x1f8>)
   d7ea6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d7eaa:	4588      	cmp	r8, r1
   d7eac:	ee10 2a10 	vmov	r2, s0
   d7eb0:	46a9      	mov	r9, r5
   d7eb2:	dc2c      	bgt.n	d7f0e <__ieee754_pow+0x86>
   d7eb4:	ee11 3a10 	vmov	r3, s2
   d7eb8:	46bb      	mov	fp, r7
   d7eba:	d03a      	beq.n	d7f32 <__ieee754_pow+0xaa>
   d7ebc:	458a      	cmp	sl, r1
   d7ebe:	dc26      	bgt.n	d7f0e <__ieee754_pow+0x86>
   d7ec0:	496f      	ldr	r1, [pc, #444]	; (d8080 <__ieee754_pow+0x1f8>)
   d7ec2:	458a      	cmp	sl, r1
   d7ec4:	d021      	beq.n	d7f0a <__ieee754_pow+0x82>
   d7ec6:	f1b9 0f00 	cmp.w	r9, #0
   d7eca:	db3d      	blt.n	d7f48 <__ieee754_pow+0xc0>
   d7ecc:	2100      	movs	r1, #0
   d7ece:	9103      	str	r1, [sp, #12]
   d7ed0:	2b00      	cmp	r3, #0
   d7ed2:	d155      	bne.n	d7f80 <__ieee754_pow+0xf8>
   d7ed4:	4b6a      	ldr	r3, [pc, #424]	; (d8080 <__ieee754_pow+0x1f8>)
   d7ed6:	459a      	cmp	sl, r3
   d7ed8:	f000 80a8 	beq.w	d802c <__ieee754_pow+0x1a4>
   d7edc:	4b69      	ldr	r3, [pc, #420]	; (d8084 <__ieee754_pow+0x1fc>)
   d7ede:	459a      	cmp	sl, r3
   d7ee0:	f000 80b6 	beq.w	d8050 <__ieee754_pow+0x1c8>
   d7ee4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d7ee8:	f000 8501 	beq.w	d88ee <__ieee754_pow+0xa66>
   d7eec:	4b66      	ldr	r3, [pc, #408]	; (d8088 <__ieee754_pow+0x200>)
   d7eee:	459b      	cmp	fp, r3
   d7ef0:	d146      	bne.n	d7f80 <__ieee754_pow+0xf8>
   d7ef2:	f1b9 0f00 	cmp.w	r9, #0
   d7ef6:	db43      	blt.n	d7f80 <__ieee754_pow+0xf8>
   d7ef8:	ec45 4b10 	vmov	d0, r4, r5
   d7efc:	b009      	add	sp, #36	; 0x24
   d7efe:	ecbd 8b0a 	vpop	{d8-d12}
   d7f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f06:	f000 bd99 	b.w	d8a3c <__ieee754_sqrt>
   d7f0a:	2b00      	cmp	r3, #0
   d7f0c:	d0db      	beq.n	d7ec6 <__ieee754_pow+0x3e>
   d7f0e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d7f12:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7f16:	ea58 0302 	orrs.w	r3, r8, r2
   d7f1a:	d10d      	bne.n	d7f38 <__ieee754_pow+0xb0>
   d7f1c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8070 <__ieee754_pow+0x1e8>
   d7f20:	ed8d 7b00 	vstr	d7, [sp]
   d7f24:	ed9d 0b00 	vldr	d0, [sp]
   d7f28:	b009      	add	sp, #36	; 0x24
   d7f2a:	ecbd 8b0a 	vpop	{d8-d12}
   d7f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f32:	b90c      	cbnz	r4, d7f38 <__ieee754_pow+0xb0>
   d7f34:	45c2      	cmp	sl, r8
   d7f36:	ddc3      	ble.n	d7ec0 <__ieee754_pow+0x38>
   d7f38:	4854      	ldr	r0, [pc, #336]	; (d808c <__ieee754_pow+0x204>)
   d7f3a:	b009      	add	sp, #36	; 0x24
   d7f3c:	ecbd 8b0a 	vpop	{d8-d12}
   d7f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7f44:	f000 be58 	b.w	d8bf8 <nan>
   d7f48:	4951      	ldr	r1, [pc, #324]	; (d8090 <__ieee754_pow+0x208>)
   d7f4a:	458a      	cmp	sl, r1
   d7f4c:	f300 8087 	bgt.w	d805e <__ieee754_pow+0x1d6>
   d7f50:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d7f54:	458a      	cmp	sl, r1
   d7f56:	dd0f      	ble.n	d7f78 <__ieee754_pow+0xf0>
   d7f58:	ea4f 512a 	mov.w	r1, sl, asr #20
   d7f5c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d7f60:	2914      	cmp	r1, #20
   d7f62:	f340 84ce 	ble.w	d8902 <__ieee754_pow+0xa7a>
   d7f66:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d7f6a:	fa23 f001 	lsr.w	r0, r3, r1
   d7f6e:	fa00 f101 	lsl.w	r1, r0, r1
   d7f72:	4299      	cmp	r1, r3
   d7f74:	f000 8520 	beq.w	d89b8 <__ieee754_pow+0xb30>
   d7f78:	2100      	movs	r1, #0
   d7f7a:	9103      	str	r1, [sp, #12]
   d7f7c:	2b00      	cmp	r3, #0
   d7f7e:	d0ad      	beq.n	d7edc <__ieee754_pow+0x54>
   d7f80:	ec45 4b10 	vmov	d0, r4, r5
   d7f84:	9206      	str	r2, [sp, #24]
   d7f86:	f000 fe1d 	bl	d8bc4 <fabs>
   d7f8a:	9a06      	ldr	r2, [sp, #24]
   d7f8c:	ed8d 0b00 	vstr	d0, [sp]
   d7f90:	bb5a      	cbnz	r2, d7fea <__ieee754_pow+0x162>
   d7f92:	f1b8 0f00 	cmp.w	r8, #0
   d7f96:	d004      	beq.n	d7fa2 <__ieee754_pow+0x11a>
   d7f98:	4b3a      	ldr	r3, [pc, #232]	; (d8084 <__ieee754_pow+0x1fc>)
   d7f9a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d7f9e:	429a      	cmp	r2, r3
   d7fa0:	d123      	bne.n	d7fea <__ieee754_pow+0x162>
   d7fa2:	f1bb 0f00 	cmp.w	fp, #0
   d7fa6:	da07      	bge.n	d7fb8 <__ieee754_pow+0x130>
   d7fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7fac:	4935      	ldr	r1, [pc, #212]	; (d8084 <__ieee754_pow+0x1fc>)
   d7fae:	2000      	movs	r0, #0
   d7fb0:	f001 fa36 	bl	d9420 <__aeabi_ddiv>
   d7fb4:	e9cd 0100 	strd	r0, r1, [sp]
   d7fb8:	f1b9 0f00 	cmp.w	r9, #0
   d7fbc:	dab2      	bge.n	d7f24 <__ieee754_pow+0x9c>
   d7fbe:	9b03      	ldr	r3, [sp, #12]
   d7fc0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d7fc4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d7fc8:	ea58 0303 	orrs.w	r3, r8, r3
   d7fcc:	f040 84be 	bne.w	d894c <__ieee754_pow+0xac4>
   d7fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7fd4:	4610      	mov	r0, r2
   d7fd6:	4619      	mov	r1, r3
   d7fd8:	f000 ff40 	bl	d8e5c <__aeabi_dsub>
   d7fdc:	4602      	mov	r2, r0
   d7fde:	460b      	mov	r3, r1
   d7fe0:	f001 fa1e 	bl	d9420 <__aeabi_ddiv>
   d7fe4:	e9cd 0100 	strd	r0, r1, [sp]
   d7fe8:	e79c      	b.n	d7f24 <__ieee754_pow+0x9c>
   d7fea:	9a03      	ldr	r2, [sp, #12]
   d7fec:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d7ff0:	3b01      	subs	r3, #1
   d7ff2:	9306      	str	r3, [sp, #24]
   d7ff4:	4313      	orrs	r3, r2
   d7ff6:	d035      	beq.n	d8064 <__ieee754_pow+0x1dc>
   d7ff8:	4b26      	ldr	r3, [pc, #152]	; (d8094 <__ieee754_pow+0x20c>)
   d7ffa:	459a      	cmp	sl, r3
   d7ffc:	dd4e      	ble.n	d809c <__ieee754_pow+0x214>
   d7ffe:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8002:	459a      	cmp	sl, r3
   d8004:	4b24      	ldr	r3, [pc, #144]	; (d8098 <__ieee754_pow+0x210>)
   d8006:	f340 83ed 	ble.w	d87e4 <__ieee754_pow+0x95c>
   d800a:	4598      	cmp	r8, r3
   d800c:	f340 836b 	ble.w	d86e6 <__ieee754_pow+0x85e>
   d8010:	f1bb 0f00 	cmp.w	fp, #0
   d8014:	f340 836b 	ble.w	d86ee <__ieee754_pow+0x866>
   d8018:	a317      	add	r3, pc, #92	; (adr r3, d8078 <__ieee754_pow+0x1f0>)
   d801a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d801e:	4610      	mov	r0, r2
   d8020:	4619      	mov	r1, r3
   d8022:	f001 f8d3 	bl	d91cc <__aeabi_dmul>
   d8026:	e9cd 0100 	strd	r0, r1, [sp]
   d802a:	e77b      	b.n	d7f24 <__ieee754_pow+0x9c>
   d802c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8030:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8034:	4313      	orrs	r3, r2
   d8036:	f43f af71 	beq.w	d7f1c <__ieee754_pow+0x94>
   d803a:	4b17      	ldr	r3, [pc, #92]	; (d8098 <__ieee754_pow+0x210>)
   d803c:	4598      	cmp	r8, r3
   d803e:	f340 8388 	ble.w	d8752 <__ieee754_pow+0x8ca>
   d8042:	f1bb 0f00 	cmp.w	fp, #0
   d8046:	f2c0 8352 	blt.w	d86ee <__ieee754_pow+0x866>
   d804a:	e9cd 6700 	strd	r6, r7, [sp]
   d804e:	e769      	b.n	d7f24 <__ieee754_pow+0x9c>
   d8050:	f1bb 0f00 	cmp.w	fp, #0
   d8054:	f2c0 8441 	blt.w	d88da <__ieee754_pow+0xa52>
   d8058:	e9cd 4500 	strd	r4, r5, [sp]
   d805c:	e762      	b.n	d7f24 <__ieee754_pow+0x9c>
   d805e:	2102      	movs	r1, #2
   d8060:	9103      	str	r1, [sp, #12]
   d8062:	e735      	b.n	d7ed0 <__ieee754_pow+0x48>
   d8064:	4622      	mov	r2, r4
   d8066:	462b      	mov	r3, r5
   d8068:	e7b4      	b.n	d7fd4 <__ieee754_pow+0x14c>
   d806a:	bf00      	nop
   d806c:	f3af 8000 	nop.w
   d8070:	00000000 	.word	0x00000000
   d8074:	3ff00000 	.word	0x3ff00000
   d8078:	8800759c 	.word	0x8800759c
   d807c:	7e37e43c 	.word	0x7e37e43c
   d8080:	7ff00000 	.word	0x7ff00000
   d8084:	3ff00000 	.word	0x3ff00000
   d8088:	3fe00000 	.word	0x3fe00000
   d808c:	000d9de4 	.word	0x000d9de4
   d8090:	433fffff 	.word	0x433fffff
   d8094:	41e00000 	.word	0x41e00000
   d8098:	3fefffff 	.word	0x3fefffff
   d809c:	4be4      	ldr	r3, [pc, #912]	; (d8430 <__ieee754_pow+0x5a8>)
   d809e:	ea09 0303 	and.w	r3, r9, r3
   d80a2:	2b00      	cmp	r3, #0
   d80a4:	f040 8416 	bne.w	d88d4 <__ieee754_pow+0xa4c>
   d80a8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d80ac:	4be1      	ldr	r3, [pc, #900]	; (d8434 <__ieee754_pow+0x5ac>)
   d80ae:	2200      	movs	r2, #0
   d80b0:	f001 f88c 	bl	d91cc <__aeabi_dmul>
   d80b4:	e9cd 0100 	strd	r0, r1, [sp]
   d80b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d80bc:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d80c0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d80c4:	49dc      	ldr	r1, [pc, #880]	; (d8438 <__ieee754_pow+0x5b0>)
   d80c6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d80ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d80ce:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d80d2:	1818      	adds	r0, r3, r0
   d80d4:	428a      	cmp	r2, r1
   d80d6:	9007      	str	r0, [sp, #28]
   d80d8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d80dc:	f340 83e9 	ble.w	d88b2 <__ieee754_pow+0xa2a>
   d80e0:	4bd6      	ldr	r3, [pc, #856]	; (d843c <__ieee754_pow+0x5b4>)
   d80e2:	429a      	cmp	r2, r3
   d80e4:	f340 843e 	ble.w	d8964 <__ieee754_pow+0xadc>
   d80e8:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d83d8 <__ieee754_pow+0x550>
   d80ec:	eeb0 ba47 	vmov.f32	s22, s14
   d80f0:	eef0 ba67 	vmov.f32	s23, s15
   d80f4:	eeb0 ca47 	vmov.f32	s24, s14
   d80f8:	eef0 ca67 	vmov.f32	s25, s15
   d80fc:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d83e0 <__ieee754_pow+0x558>
   d8100:	3001      	adds	r0, #1
   d8102:	ec54 3b17 	vmov	r3, r4, d7
   d8106:	9007      	str	r0, [sp, #28]
   d8108:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d810c:	f04f 0900 	mov.w	r9, #0
   d8110:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8114:	ec44 3b18 	vmov	d8, r3, r4
   d8118:	461a      	mov	r2, r3
   d811a:	4650      	mov	r0, sl
   d811c:	4623      	mov	r3, r4
   d811e:	4641      	mov	r1, r8
   d8120:	f000 fe9c 	bl	d8e5c <__aeabi_dsub>
   d8124:	ec53 2b18 	vmov	r2, r3, d8
   d8128:	4604      	mov	r4, r0
   d812a:	460d      	mov	r5, r1
   d812c:	4650      	mov	r0, sl
   d812e:	4641      	mov	r1, r8
   d8130:	f000 fe96 	bl	d8e60 <__adddf3>
   d8134:	4602      	mov	r2, r0
   d8136:	460b      	mov	r3, r1
   d8138:	2000      	movs	r0, #0
   d813a:	49c1      	ldr	r1, [pc, #772]	; (d8440 <__ieee754_pow+0x5b8>)
   d813c:	f001 f970 	bl	d9420 <__aeabi_ddiv>
   d8140:	ec45 4b1a 	vmov	d10, r4, r5
   d8144:	ec41 0b19 	vmov	d9, r0, r1
   d8148:	ec51 0b1a 	vmov	r0, r1, d10
   d814c:	ec53 2b19 	vmov	r2, r3, d9
   d8150:	f001 f83c 	bl	d91cc <__aeabi_dmul>
   d8154:	46c3      	mov	fp, r8
   d8156:	ea4f 0868 	mov.w	r8, r8, asr #1
   d815a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d815e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d8162:	eb03 0509 	add.w	r5, r3, r9
   d8166:	460a      	mov	r2, r1
   d8168:	2300      	movs	r3, #0
   d816a:	4601      	mov	r1, r0
   d816c:	e9cd 1200 	strd	r1, r2, [sp]
   d8170:	9300      	str	r3, [sp, #0]
   d8172:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8176:	2400      	movs	r4, #0
   d8178:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d817c:	462b      	mov	r3, r5
   d817e:	4622      	mov	r2, r4
   d8180:	4640      	mov	r0, r8
   d8182:	4649      	mov	r1, r9
   d8184:	f001 f822 	bl	d91cc <__aeabi_dmul>
   d8188:	4602      	mov	r2, r0
   d818a:	460b      	mov	r3, r1
   d818c:	ec51 0b1a 	vmov	r0, r1, d10
   d8190:	f000 fe64 	bl	d8e5c <__aeabi_dsub>
   d8194:	ec41 0b17 	vmov	d7, r0, r1
   d8198:	ec53 2b18 	vmov	r2, r3, d8
   d819c:	4620      	mov	r0, r4
   d819e:	4629      	mov	r1, r5
   d81a0:	ec55 4b17 	vmov	r4, r5, d7
   d81a4:	f000 fe5a 	bl	d8e5c <__aeabi_dsub>
   d81a8:	4602      	mov	r2, r0
   d81aa:	460b      	mov	r3, r1
   d81ac:	4650      	mov	r0, sl
   d81ae:	4659      	mov	r1, fp
   d81b0:	f000 fe54 	bl	d8e5c <__aeabi_dsub>
   d81b4:	4642      	mov	r2, r8
   d81b6:	464b      	mov	r3, r9
   d81b8:	f001 f808 	bl	d91cc <__aeabi_dmul>
   d81bc:	4602      	mov	r2, r0
   d81be:	460b      	mov	r3, r1
   d81c0:	4620      	mov	r0, r4
   d81c2:	4629      	mov	r1, r5
   d81c4:	f000 fe4a 	bl	d8e5c <__aeabi_dsub>
   d81c8:	ec53 2b19 	vmov	r2, r3, d9
   d81cc:	f000 fffe 	bl	d91cc <__aeabi_dmul>
   d81d0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d81d4:	4604      	mov	r4, r0
   d81d6:	460d      	mov	r5, r1
   d81d8:	4652      	mov	r2, sl
   d81da:	465b      	mov	r3, fp
   d81dc:	4650      	mov	r0, sl
   d81de:	4659      	mov	r1, fp
   d81e0:	f000 fff4 	bl	d91cc <__aeabi_dmul>
   d81e4:	a380      	add	r3, pc, #512	; (adr r3, d83e8 <__ieee754_pow+0x560>)
   d81e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81ea:	ec45 4b1a 	vmov	d10, r4, r5
   d81ee:	4604      	mov	r4, r0
   d81f0:	460d      	mov	r5, r1
   d81f2:	f000 ffeb 	bl	d91cc <__aeabi_dmul>
   d81f6:	a37e      	add	r3, pc, #504	; (adr r3, d83f0 <__ieee754_pow+0x568>)
   d81f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81fc:	f000 fe30 	bl	d8e60 <__adddf3>
   d8200:	4622      	mov	r2, r4
   d8202:	462b      	mov	r3, r5
   d8204:	f000 ffe2 	bl	d91cc <__aeabi_dmul>
   d8208:	a37b      	add	r3, pc, #492	; (adr r3, d83f8 <__ieee754_pow+0x570>)
   d820a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d820e:	f000 fe27 	bl	d8e60 <__adddf3>
   d8212:	4622      	mov	r2, r4
   d8214:	462b      	mov	r3, r5
   d8216:	f000 ffd9 	bl	d91cc <__aeabi_dmul>
   d821a:	a379      	add	r3, pc, #484	; (adr r3, d8400 <__ieee754_pow+0x578>)
   d821c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8220:	f000 fe1e 	bl	d8e60 <__adddf3>
   d8224:	4622      	mov	r2, r4
   d8226:	462b      	mov	r3, r5
   d8228:	f000 ffd0 	bl	d91cc <__aeabi_dmul>
   d822c:	a376      	add	r3, pc, #472	; (adr r3, d8408 <__ieee754_pow+0x580>)
   d822e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8232:	f000 fe15 	bl	d8e60 <__adddf3>
   d8236:	4622      	mov	r2, r4
   d8238:	462b      	mov	r3, r5
   d823a:	f000 ffc7 	bl	d91cc <__aeabi_dmul>
   d823e:	a374      	add	r3, pc, #464	; (adr r3, d8410 <__ieee754_pow+0x588>)
   d8240:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8244:	f000 fe0c 	bl	d8e60 <__adddf3>
   d8248:	4622      	mov	r2, r4
   d824a:	462b      	mov	r3, r5
   d824c:	4604      	mov	r4, r0
   d824e:	460d      	mov	r5, r1
   d8250:	4610      	mov	r0, r2
   d8252:	4619      	mov	r1, r3
   d8254:	f000 ffba 	bl	d91cc <__aeabi_dmul>
   d8258:	4602      	mov	r2, r0
   d825a:	460b      	mov	r3, r1
   d825c:	4620      	mov	r0, r4
   d825e:	4629      	mov	r1, r5
   d8260:	f000 ffb4 	bl	d91cc <__aeabi_dmul>
   d8264:	4642      	mov	r2, r8
   d8266:	4604      	mov	r4, r0
   d8268:	460d      	mov	r5, r1
   d826a:	464b      	mov	r3, r9
   d826c:	4650      	mov	r0, sl
   d826e:	4659      	mov	r1, fp
   d8270:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d8274:	f000 fdf4 	bl	d8e60 <__adddf3>
   d8278:	ec53 2b1a 	vmov	r2, r3, d10
   d827c:	f000 ffa6 	bl	d91cc <__aeabi_dmul>
   d8280:	4622      	mov	r2, r4
   d8282:	462b      	mov	r3, r5
   d8284:	f000 fdec 	bl	d8e60 <__adddf3>
   d8288:	4642      	mov	r2, r8
   d828a:	4604      	mov	r4, r0
   d828c:	460d      	mov	r5, r1
   d828e:	464b      	mov	r3, r9
   d8290:	4640      	mov	r0, r8
   d8292:	4649      	mov	r1, r9
   d8294:	f000 ff9a 	bl	d91cc <__aeabi_dmul>
   d8298:	ec45 4b19 	vmov	d9, r4, r5
   d829c:	4b69      	ldr	r3, [pc, #420]	; (d8444 <__ieee754_pow+0x5bc>)
   d829e:	2200      	movs	r2, #0
   d82a0:	4682      	mov	sl, r0
   d82a2:	468b      	mov	fp, r1
   d82a4:	f000 fddc 	bl	d8e60 <__adddf3>
   d82a8:	ec53 2b19 	vmov	r2, r3, d9
   d82ac:	f000 fdd8 	bl	d8e60 <__adddf3>
   d82b0:	9c00      	ldr	r4, [sp, #0]
   d82b2:	460d      	mov	r5, r1
   d82b4:	4622      	mov	r2, r4
   d82b6:	462b      	mov	r3, r5
   d82b8:	4640      	mov	r0, r8
   d82ba:	4649      	mov	r1, r9
   d82bc:	f000 ff86 	bl	d91cc <__aeabi_dmul>
   d82c0:	4b60      	ldr	r3, [pc, #384]	; (d8444 <__ieee754_pow+0x5bc>)
   d82c2:	4680      	mov	r8, r0
   d82c4:	4689      	mov	r9, r1
   d82c6:	2200      	movs	r2, #0
   d82c8:	4620      	mov	r0, r4
   d82ca:	4629      	mov	r1, r5
   d82cc:	f000 fdc6 	bl	d8e5c <__aeabi_dsub>
   d82d0:	4652      	mov	r2, sl
   d82d2:	465b      	mov	r3, fp
   d82d4:	f000 fdc2 	bl	d8e5c <__aeabi_dsub>
   d82d8:	4602      	mov	r2, r0
   d82da:	460b      	mov	r3, r1
   d82dc:	ec51 0b19 	vmov	r0, r1, d9
   d82e0:	f000 fdbc 	bl	d8e5c <__aeabi_dsub>
   d82e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d82e8:	f000 ff70 	bl	d91cc <__aeabi_dmul>
   d82ec:	ec49 8b18 	vmov	d8, r8, r9
   d82f0:	4622      	mov	r2, r4
   d82f2:	4680      	mov	r8, r0
   d82f4:	4689      	mov	r9, r1
   d82f6:	462b      	mov	r3, r5
   d82f8:	ec51 0b1a 	vmov	r0, r1, d10
   d82fc:	f000 ff66 	bl	d91cc <__aeabi_dmul>
   d8300:	4602      	mov	r2, r0
   d8302:	460b      	mov	r3, r1
   d8304:	4640      	mov	r0, r8
   d8306:	4649      	mov	r1, r9
   d8308:	f000 fdaa 	bl	d8e60 <__adddf3>
   d830c:	4682      	mov	sl, r0
   d830e:	468b      	mov	fp, r1
   d8310:	4652      	mov	r2, sl
   d8312:	465b      	mov	r3, fp
   d8314:	ec51 0b18 	vmov	r0, r1, d8
   d8318:	f000 fda2 	bl	d8e60 <__adddf3>
   d831c:	9c00      	ldr	r4, [sp, #0]
   d831e:	a33e      	add	r3, pc, #248	; (adr r3, d8418 <__ieee754_pow+0x590>)
   d8320:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8324:	4620      	mov	r0, r4
   d8326:	460d      	mov	r5, r1
   d8328:	f000 ff50 	bl	d91cc <__aeabi_dmul>
   d832c:	ec53 2b18 	vmov	r2, r3, d8
   d8330:	4680      	mov	r8, r0
   d8332:	4689      	mov	r9, r1
   d8334:	4620      	mov	r0, r4
   d8336:	4629      	mov	r1, r5
   d8338:	f000 fd90 	bl	d8e5c <__aeabi_dsub>
   d833c:	4602      	mov	r2, r0
   d833e:	460b      	mov	r3, r1
   d8340:	4650      	mov	r0, sl
   d8342:	4659      	mov	r1, fp
   d8344:	f000 fd8a 	bl	d8e5c <__aeabi_dsub>
   d8348:	a335      	add	r3, pc, #212	; (adr r3, d8420 <__ieee754_pow+0x598>)
   d834a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d834e:	f000 ff3d 	bl	d91cc <__aeabi_dmul>
   d8352:	ec49 8b19 	vmov	d9, r8, r9
   d8356:	a334      	add	r3, pc, #208	; (adr r3, d8428 <__ieee754_pow+0x5a0>)
   d8358:	e9d3 2300 	ldrd	r2, r3, [r3]
   d835c:	4680      	mov	r8, r0
   d835e:	4689      	mov	r9, r1
   d8360:	4620      	mov	r0, r4
   d8362:	4629      	mov	r1, r5
   d8364:	f000 ff32 	bl	d91cc <__aeabi_dmul>
   d8368:	4602      	mov	r2, r0
   d836a:	460b      	mov	r3, r1
   d836c:	4640      	mov	r0, r8
   d836e:	4649      	mov	r1, r9
   d8370:	f000 fd76 	bl	d8e60 <__adddf3>
   d8374:	ec53 2b1c 	vmov	r2, r3, d12
   d8378:	f000 fd72 	bl	d8e60 <__adddf3>
   d837c:	4682      	mov	sl, r0
   d837e:	9807      	ldr	r0, [sp, #28]
   d8380:	468b      	mov	fp, r1
   d8382:	f000 feb9 	bl	d90f8 <__aeabi_i2d>
   d8386:	4652      	mov	r2, sl
   d8388:	4680      	mov	r8, r0
   d838a:	4689      	mov	r9, r1
   d838c:	465b      	mov	r3, fp
   d838e:	ec51 0b19 	vmov	r0, r1, d9
   d8392:	f000 fd65 	bl	d8e60 <__adddf3>
   d8396:	ec53 2b1b 	vmov	r2, r3, d11
   d839a:	f000 fd61 	bl	d8e60 <__adddf3>
   d839e:	4642      	mov	r2, r8
   d83a0:	464b      	mov	r3, r9
   d83a2:	f000 fd5d 	bl	d8e60 <__adddf3>
   d83a6:	9c00      	ldr	r4, [sp, #0]
   d83a8:	4642      	mov	r2, r8
   d83aa:	464b      	mov	r3, r9
   d83ac:	4620      	mov	r0, r4
   d83ae:	460d      	mov	r5, r1
   d83b0:	f000 fd54 	bl	d8e5c <__aeabi_dsub>
   d83b4:	ec53 2b1b 	vmov	r2, r3, d11
   d83b8:	f000 fd50 	bl	d8e5c <__aeabi_dsub>
   d83bc:	ec53 2b19 	vmov	r2, r3, d9
   d83c0:	f000 fd4c 	bl	d8e5c <__aeabi_dsub>
   d83c4:	4602      	mov	r2, r0
   d83c6:	460b      	mov	r3, r1
   d83c8:	4650      	mov	r0, sl
   d83ca:	4659      	mov	r1, fp
   d83cc:	f000 fd46 	bl	d8e5c <__aeabi_dsub>
   d83d0:	4682      	mov	sl, r0
   d83d2:	468b      	mov	fp, r1
   d83d4:	e038      	b.n	d8448 <__ieee754_pow+0x5c0>
   d83d6:	bf00      	nop
	...
   d83e4:	3ff00000 	.word	0x3ff00000
   d83e8:	4a454eef 	.word	0x4a454eef
   d83ec:	3fca7e28 	.word	0x3fca7e28
   d83f0:	93c9db65 	.word	0x93c9db65
   d83f4:	3fcd864a 	.word	0x3fcd864a
   d83f8:	a91d4101 	.word	0xa91d4101
   d83fc:	3fd17460 	.word	0x3fd17460
   d8400:	518f264d 	.word	0x518f264d
   d8404:	3fd55555 	.word	0x3fd55555
   d8408:	db6fabff 	.word	0xdb6fabff
   d840c:	3fdb6db6 	.word	0x3fdb6db6
   d8410:	33333303 	.word	0x33333303
   d8414:	3fe33333 	.word	0x3fe33333
   d8418:	e0000000 	.word	0xe0000000
   d841c:	3feec709 	.word	0x3feec709
   d8420:	dc3a03fd 	.word	0xdc3a03fd
   d8424:	3feec709 	.word	0x3feec709
   d8428:	145b01f5 	.word	0x145b01f5
   d842c:	be3e2fe0 	.word	0xbe3e2fe0
   d8430:	7ff00000 	.word	0x7ff00000
   d8434:	43400000 	.word	0x43400000
   d8438:	0003988e 	.word	0x0003988e
   d843c:	000bb679 	.word	0x000bb679
   d8440:	3ff00000 	.word	0x3ff00000
   d8444:	40080000 	.word	0x40080000
   d8448:	9b03      	ldr	r3, [sp, #12]
   d844a:	9a06      	ldr	r2, [sp, #24]
   d844c:	3b01      	subs	r3, #1
   d844e:	4313      	orrs	r3, r2
   d8450:	f040 8178 	bne.w	d8744 <__ieee754_pow+0x8bc>
   d8454:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d8768 <__ieee754_pow+0x8e0>
   d8458:	eeb0 9a47 	vmov.f32	s18, s14
   d845c:	eef0 9a67 	vmov.f32	s19, s15
   d8460:	2300      	movs	r3, #0
   d8462:	e9cd 6700 	strd	r6, r7, [sp]
   d8466:	9300      	str	r3, [sp, #0]
   d8468:	e9dd 8900 	ldrd	r8, r9, [sp]
   d846c:	4630      	mov	r0, r6
   d846e:	4642      	mov	r2, r8
   d8470:	4639      	mov	r1, r7
   d8472:	464b      	mov	r3, r9
   d8474:	f000 fcf2 	bl	d8e5c <__aeabi_dsub>
   d8478:	4622      	mov	r2, r4
   d847a:	462b      	mov	r3, r5
   d847c:	f000 fea6 	bl	d91cc <__aeabi_dmul>
   d8480:	4632      	mov	r2, r6
   d8482:	463b      	mov	r3, r7
   d8484:	4606      	mov	r6, r0
   d8486:	460f      	mov	r7, r1
   d8488:	4650      	mov	r0, sl
   d848a:	4659      	mov	r1, fp
   d848c:	f000 fe9e 	bl	d91cc <__aeabi_dmul>
   d8490:	4602      	mov	r2, r0
   d8492:	460b      	mov	r3, r1
   d8494:	4630      	mov	r0, r6
   d8496:	4639      	mov	r1, r7
   d8498:	f000 fce2 	bl	d8e60 <__adddf3>
   d849c:	4642      	mov	r2, r8
   d849e:	4682      	mov	sl, r0
   d84a0:	468b      	mov	fp, r1
   d84a2:	464b      	mov	r3, r9
   d84a4:	4620      	mov	r0, r4
   d84a6:	4629      	mov	r1, r5
   d84a8:	f000 fe90 	bl	d91cc <__aeabi_dmul>
   d84ac:	4606      	mov	r6, r0
   d84ae:	460f      	mov	r7, r1
   d84b0:	463b      	mov	r3, r7
   d84b2:	4650      	mov	r0, sl
   d84b4:	4659      	mov	r1, fp
   d84b6:	4632      	mov	r2, r6
   d84b8:	f000 fcd2 	bl	d8e60 <__adddf3>
   d84bc:	4bc4      	ldr	r3, [pc, #784]	; (d87d0 <__ieee754_pow+0x948>)
   d84be:	4299      	cmp	r1, r3
   d84c0:	4604      	mov	r4, r0
   d84c2:	460d      	mov	r5, r1
   d84c4:	4688      	mov	r8, r1
   d84c6:	f340 8117 	ble.w	d86f8 <__ieee754_pow+0x870>
   d84ca:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d84ce:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d84d2:	4303      	orrs	r3, r0
   d84d4:	f040 822a 	bne.w	d892c <__ieee754_pow+0xaa4>
   d84d8:	a3a5      	add	r3, pc, #660	; (adr r3, d8770 <__ieee754_pow+0x8e8>)
   d84da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d84de:	4650      	mov	r0, sl
   d84e0:	4659      	mov	r1, fp
   d84e2:	f000 fcbd 	bl	d8e60 <__adddf3>
   d84e6:	4632      	mov	r2, r6
   d84e8:	ec41 0b18 	vmov	d8, r0, r1
   d84ec:	463b      	mov	r3, r7
   d84ee:	4620      	mov	r0, r4
   d84f0:	4629      	mov	r1, r5
   d84f2:	f000 fcb3 	bl	d8e5c <__aeabi_dsub>
   d84f6:	4602      	mov	r2, r0
   d84f8:	460b      	mov	r3, r1
   d84fa:	ec51 0b18 	vmov	r0, r1, d8
   d84fe:	f001 f8f5 	bl	d96ec <__aeabi_dcmpgt>
   d8502:	2800      	cmp	r0, #0
   d8504:	f040 8212 	bne.w	d892c <__ieee754_pow+0xaa4>
   d8508:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d850c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8510:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8514:	fa42 f303 	asr.w	r3, r2, r3
   d8518:	4443      	add	r3, r8
   d851a:	49ae      	ldr	r1, [pc, #696]	; (d87d4 <__ieee754_pow+0x94c>)
   d851c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8520:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8524:	fa41 fc02 	asr.w	ip, r1, r2
   d8528:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d852c:	ea23 010c 	bic.w	r1, r3, ip
   d8530:	f1c2 0414 	rsb	r4, r2, #20
   d8534:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d8538:	f1b8 0f00 	cmp.w	r8, #0
   d853c:	460b      	mov	r3, r1
   d853e:	fa45 f104 	asr.w	r1, r5, r4
   d8542:	9103      	str	r1, [sp, #12]
   d8544:	f04f 0000 	mov.w	r0, #0
   d8548:	bfb8      	it	lt
   d854a:	4249      	neglt	r1, r1
   d854c:	4602      	mov	r2, r0
   d854e:	bfb8      	it	lt
   d8550:	9103      	strlt	r1, [sp, #12]
   d8552:	4630      	mov	r0, r6
   d8554:	4639      	mov	r1, r7
   d8556:	f000 fc81 	bl	d8e5c <__aeabi_dsub>
   d855a:	4606      	mov	r6, r0
   d855c:	460f      	mov	r7, r1
   d855e:	463b      	mov	r3, r7
   d8560:	4650      	mov	r0, sl
   d8562:	4659      	mov	r1, fp
   d8564:	4632      	mov	r2, r6
   d8566:	f000 fc7b 	bl	d8e60 <__adddf3>
   d856a:	9b03      	ldr	r3, [sp, #12]
   d856c:	051b      	lsls	r3, r3, #20
   d856e:	9300      	str	r3, [sp, #0]
   d8570:	460d      	mov	r5, r1
   d8572:	2400      	movs	r4, #0
   d8574:	a380      	add	r3, pc, #512	; (adr r3, d8778 <__ieee754_pow+0x8f0>)
   d8576:	e9d3 2300 	ldrd	r2, r3, [r3]
   d857a:	4620      	mov	r0, r4
   d857c:	4629      	mov	r1, r5
   d857e:	f000 fe25 	bl	d91cc <__aeabi_dmul>
   d8582:	4632      	mov	r2, r6
   d8584:	4680      	mov	r8, r0
   d8586:	4689      	mov	r9, r1
   d8588:	463b      	mov	r3, r7
   d858a:	4620      	mov	r0, r4
   d858c:	4629      	mov	r1, r5
   d858e:	f000 fc65 	bl	d8e5c <__aeabi_dsub>
   d8592:	4602      	mov	r2, r0
   d8594:	460b      	mov	r3, r1
   d8596:	4650      	mov	r0, sl
   d8598:	4659      	mov	r1, fp
   d859a:	f000 fc5f 	bl	d8e5c <__aeabi_dsub>
   d859e:	a378      	add	r3, pc, #480	; (adr r3, d8780 <__ieee754_pow+0x8f8>)
   d85a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d85a4:	f000 fe12 	bl	d91cc <__aeabi_dmul>
   d85a8:	a377      	add	r3, pc, #476	; (adr r3, d8788 <__ieee754_pow+0x900>)
   d85aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d85ae:	4606      	mov	r6, r0
   d85b0:	460f      	mov	r7, r1
   d85b2:	4620      	mov	r0, r4
   d85b4:	4629      	mov	r1, r5
   d85b6:	f000 fe09 	bl	d91cc <__aeabi_dmul>
   d85ba:	4602      	mov	r2, r0
   d85bc:	460b      	mov	r3, r1
   d85be:	4630      	mov	r0, r6
   d85c0:	4639      	mov	r1, r7
   d85c2:	f000 fc4d 	bl	d8e60 <__adddf3>
   d85c6:	4606      	mov	r6, r0
   d85c8:	460f      	mov	r7, r1
   d85ca:	4632      	mov	r2, r6
   d85cc:	463b      	mov	r3, r7
   d85ce:	4640      	mov	r0, r8
   d85d0:	4649      	mov	r1, r9
   d85d2:	f000 fc45 	bl	d8e60 <__adddf3>
   d85d6:	4642      	mov	r2, r8
   d85d8:	464b      	mov	r3, r9
   d85da:	4604      	mov	r4, r0
   d85dc:	460d      	mov	r5, r1
   d85de:	f000 fc3d 	bl	d8e5c <__aeabi_dsub>
   d85e2:	4602      	mov	r2, r0
   d85e4:	460b      	mov	r3, r1
   d85e6:	4630      	mov	r0, r6
   d85e8:	4639      	mov	r1, r7
   d85ea:	f000 fc37 	bl	d8e5c <__aeabi_dsub>
   d85ee:	4622      	mov	r2, r4
   d85f0:	4682      	mov	sl, r0
   d85f2:	468b      	mov	fp, r1
   d85f4:	462b      	mov	r3, r5
   d85f6:	4620      	mov	r0, r4
   d85f8:	4629      	mov	r1, r5
   d85fa:	f000 fde7 	bl	d91cc <__aeabi_dmul>
   d85fe:	a364      	add	r3, pc, #400	; (adr r3, d8790 <__ieee754_pow+0x908>)
   d8600:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8604:	4606      	mov	r6, r0
   d8606:	460f      	mov	r7, r1
   d8608:	f000 fde0 	bl	d91cc <__aeabi_dmul>
   d860c:	a362      	add	r3, pc, #392	; (adr r3, d8798 <__ieee754_pow+0x910>)
   d860e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8612:	f000 fc23 	bl	d8e5c <__aeabi_dsub>
   d8616:	4632      	mov	r2, r6
   d8618:	463b      	mov	r3, r7
   d861a:	f000 fdd7 	bl	d91cc <__aeabi_dmul>
   d861e:	a360      	add	r3, pc, #384	; (adr r3, d87a0 <__ieee754_pow+0x918>)
   d8620:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8624:	f000 fc1c 	bl	d8e60 <__adddf3>
   d8628:	4632      	mov	r2, r6
   d862a:	463b      	mov	r3, r7
   d862c:	f000 fdce 	bl	d91cc <__aeabi_dmul>
   d8630:	a35d      	add	r3, pc, #372	; (adr r3, d87a8 <__ieee754_pow+0x920>)
   d8632:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8636:	f000 fc11 	bl	d8e5c <__aeabi_dsub>
   d863a:	4632      	mov	r2, r6
   d863c:	463b      	mov	r3, r7
   d863e:	f000 fdc5 	bl	d91cc <__aeabi_dmul>
   d8642:	a35b      	add	r3, pc, #364	; (adr r3, d87b0 <__ieee754_pow+0x928>)
   d8644:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8648:	f000 fc0a 	bl	d8e60 <__adddf3>
   d864c:	4632      	mov	r2, r6
   d864e:	463b      	mov	r3, r7
   d8650:	f000 fdbc 	bl	d91cc <__aeabi_dmul>
   d8654:	4602      	mov	r2, r0
   d8656:	460b      	mov	r3, r1
   d8658:	4620      	mov	r0, r4
   d865a:	4629      	mov	r1, r5
   d865c:	f000 fbfe 	bl	d8e5c <__aeabi_dsub>
   d8660:	4606      	mov	r6, r0
   d8662:	460f      	mov	r7, r1
   d8664:	4632      	mov	r2, r6
   d8666:	463b      	mov	r3, r7
   d8668:	4620      	mov	r0, r4
   d866a:	4629      	mov	r1, r5
   d866c:	f000 fdae 	bl	d91cc <__aeabi_dmul>
   d8670:	2200      	movs	r2, #0
   d8672:	4680      	mov	r8, r0
   d8674:	4689      	mov	r9, r1
   d8676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d867a:	4630      	mov	r0, r6
   d867c:	4639      	mov	r1, r7
   d867e:	f000 fbed 	bl	d8e5c <__aeabi_dsub>
   d8682:	4602      	mov	r2, r0
   d8684:	460b      	mov	r3, r1
   d8686:	4640      	mov	r0, r8
   d8688:	4649      	mov	r1, r9
   d868a:	f000 fec9 	bl	d9420 <__aeabi_ddiv>
   d868e:	4652      	mov	r2, sl
   d8690:	4606      	mov	r6, r0
   d8692:	460f      	mov	r7, r1
   d8694:	465b      	mov	r3, fp
   d8696:	4620      	mov	r0, r4
   d8698:	4629      	mov	r1, r5
   d869a:	f000 fd97 	bl	d91cc <__aeabi_dmul>
   d869e:	4652      	mov	r2, sl
   d86a0:	465b      	mov	r3, fp
   d86a2:	f000 fbdd 	bl	d8e60 <__adddf3>
   d86a6:	4602      	mov	r2, r0
   d86a8:	460b      	mov	r3, r1
   d86aa:	4630      	mov	r0, r6
   d86ac:	4639      	mov	r1, r7
   d86ae:	f000 fbd5 	bl	d8e5c <__aeabi_dsub>
   d86b2:	4622      	mov	r2, r4
   d86b4:	462b      	mov	r3, r5
   d86b6:	f000 fbd1 	bl	d8e5c <__aeabi_dsub>
   d86ba:	4602      	mov	r2, r0
   d86bc:	460b      	mov	r3, r1
   d86be:	2000      	movs	r0, #0
   d86c0:	4945      	ldr	r1, [pc, #276]	; (d87d8 <__ieee754_pow+0x950>)
   d86c2:	f000 fbcb 	bl	d8e5c <__aeabi_dsub>
   d86c6:	460b      	mov	r3, r1
   d86c8:	9900      	ldr	r1, [sp, #0]
   d86ca:	4419      	add	r1, r3
   d86cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d86d0:	4602      	mov	r2, r0
   d86d2:	f2c0 8169 	blt.w	d89a8 <__ieee754_pow+0xb20>
   d86d6:	4610      	mov	r0, r2
   d86d8:	ec53 2b19 	vmov	r2, r3, d9
   d86dc:	f000 fd76 	bl	d91cc <__aeabi_dmul>
   d86e0:	e9cd 0100 	strd	r0, r1, [sp]
   d86e4:	e41e      	b.n	d7f24 <__ieee754_pow+0x9c>
   d86e6:	f1bb 0f00 	cmp.w	fp, #0
   d86ea:	f6ff ac95 	blt.w	d8018 <__ieee754_pow+0x190>
   d86ee:	ed9f 7b32 	vldr	d7, [pc, #200]	; d87b8 <__ieee754_pow+0x930>
   d86f2:	ed8d 7b00 	vstr	d7, [sp]
   d86f6:	e415      	b.n	d7f24 <__ieee754_pow+0x9c>
   d86f8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d87e0 <__ieee754_pow+0x958>
   d86fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8700:	4563      	cmp	r3, ip
   d8702:	f340 810b 	ble.w	d891c <__ieee754_pow+0xa94>
   d8706:	4b35      	ldr	r3, [pc, #212]	; (d87dc <__ieee754_pow+0x954>)
   d8708:	440b      	add	r3, r1
   d870a:	4303      	orrs	r3, r0
   d870c:	d10a      	bne.n	d8724 <__ieee754_pow+0x89c>
   d870e:	4632      	mov	r2, r6
   d8710:	463b      	mov	r3, r7
   d8712:	f000 fba3 	bl	d8e5c <__aeabi_dsub>
   d8716:	4652      	mov	r2, sl
   d8718:	465b      	mov	r3, fp
   d871a:	f000 ffdd 	bl	d96d8 <__aeabi_dcmpge>
   d871e:	2800      	cmp	r0, #0
   d8720:	f43f aef2 	beq.w	d8508 <__ieee754_pow+0x680>
   d8724:	a326      	add	r3, pc, #152	; (adr r3, d87c0 <__ieee754_pow+0x938>)
   d8726:	e9d3 2300 	ldrd	r2, r3, [r3]
   d872a:	ec51 0b19 	vmov	r0, r1, d9
   d872e:	f000 fd4d 	bl	d91cc <__aeabi_dmul>
   d8732:	a323      	add	r3, pc, #140	; (adr r3, d87c0 <__ieee754_pow+0x938>)
   d8734:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8738:	f000 fd48 	bl	d91cc <__aeabi_dmul>
   d873c:	e9cd 0100 	strd	r0, r1, [sp]
   d8740:	f7ff bbf0 	b.w	d7f24 <__ieee754_pow+0x9c>
   d8744:	ed9f 7b20 	vldr	d7, [pc, #128]	; d87c8 <__ieee754_pow+0x940>
   d8748:	eeb0 9a47 	vmov.f32	s18, s14
   d874c:	eef0 9a67 	vmov.f32	s19, s15
   d8750:	e686      	b.n	d8460 <__ieee754_pow+0x5d8>
   d8752:	f1bb 0f00 	cmp.w	fp, #0
   d8756:	daca      	bge.n	d86ee <__ieee754_pow+0x866>
   d8758:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d875c:	9600      	str	r6, [sp, #0]
   d875e:	9301      	str	r3, [sp, #4]
   d8760:	f7ff bbe0 	b.w	d7f24 <__ieee754_pow+0x9c>
   d8764:	f3af 8000 	nop.w
   d8768:	00000000 	.word	0x00000000
   d876c:	bff00000 	.word	0xbff00000
   d8770:	652b82fe 	.word	0x652b82fe
   d8774:	3c971547 	.word	0x3c971547
   d8778:	00000000 	.word	0x00000000
   d877c:	3fe62e43 	.word	0x3fe62e43
   d8780:	fefa39ef 	.word	0xfefa39ef
   d8784:	3fe62e42 	.word	0x3fe62e42
   d8788:	0ca86c39 	.word	0x0ca86c39
   d878c:	be205c61 	.word	0xbe205c61
   d8790:	72bea4d0 	.word	0x72bea4d0
   d8794:	3e663769 	.word	0x3e663769
   d8798:	c5d26bf1 	.word	0xc5d26bf1
   d879c:	3ebbbd41 	.word	0x3ebbbd41
   d87a0:	af25de2c 	.word	0xaf25de2c
   d87a4:	3f11566a 	.word	0x3f11566a
   d87a8:	16bebd93 	.word	0x16bebd93
   d87ac:	3f66c16c 	.word	0x3f66c16c
   d87b0:	5555553e 	.word	0x5555553e
   d87b4:	3fc55555 	.word	0x3fc55555
	...
   d87c0:	c2f8f359 	.word	0xc2f8f359
   d87c4:	01a56e1f 	.word	0x01a56e1f
   d87c8:	00000000 	.word	0x00000000
   d87cc:	3ff00000 	.word	0x3ff00000
   d87d0:	408fffff 	.word	0x408fffff
   d87d4:	000fffff 	.word	0x000fffff
   d87d8:	3ff00000 	.word	0x3ff00000
   d87dc:	3f6f3400 	.word	0x3f6f3400
   d87e0:	4090cbff 	.word	0x4090cbff
   d87e4:	4598      	cmp	r8, r3
   d87e6:	f6ff af7e 	blt.w	d86e6 <__ieee754_pow+0x85e>
   d87ea:	4b91      	ldr	r3, [pc, #580]	; (d8a30 <__ieee754_pow+0xba8>)
   d87ec:	4598      	cmp	r8, r3
   d87ee:	f73f ac0f 	bgt.w	d8010 <__ieee754_pow+0x188>
   d87f2:	4b8f      	ldr	r3, [pc, #572]	; (d8a30 <__ieee754_pow+0xba8>)
   d87f4:	2200      	movs	r2, #0
   d87f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d87fa:	f000 fb2f 	bl	d8e5c <__aeabi_dsub>
   d87fe:	a378      	add	r3, pc, #480	; (adr r3, d89e0 <__ieee754_pow+0xb58>)
   d8800:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8804:	4604      	mov	r4, r0
   d8806:	460d      	mov	r5, r1
   d8808:	f000 fce0 	bl	d91cc <__aeabi_dmul>
   d880c:	a376      	add	r3, pc, #472	; (adr r3, d89e8 <__ieee754_pow+0xb60>)
   d880e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8812:	4682      	mov	sl, r0
   d8814:	468b      	mov	fp, r1
   d8816:	4620      	mov	r0, r4
   d8818:	4629      	mov	r1, r5
   d881a:	f000 fcd7 	bl	d91cc <__aeabi_dmul>
   d881e:	4b85      	ldr	r3, [pc, #532]	; (d8a34 <__ieee754_pow+0xbac>)
   d8820:	4680      	mov	r8, r0
   d8822:	4689      	mov	r9, r1
   d8824:	2200      	movs	r2, #0
   d8826:	4620      	mov	r0, r4
   d8828:	4629      	mov	r1, r5
   d882a:	f000 fccf 	bl	d91cc <__aeabi_dmul>
   d882e:	4602      	mov	r2, r0
   d8830:	460b      	mov	r3, r1
   d8832:	a16f      	add	r1, pc, #444	; (adr r1, d89f0 <__ieee754_pow+0xb68>)
   d8834:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8838:	f000 fb10 	bl	d8e5c <__aeabi_dsub>
   d883c:	4622      	mov	r2, r4
   d883e:	462b      	mov	r3, r5
   d8840:	f000 fcc4 	bl	d91cc <__aeabi_dmul>
   d8844:	4602      	mov	r2, r0
   d8846:	460b      	mov	r3, r1
   d8848:	2000      	movs	r0, #0
   d884a:	497b      	ldr	r1, [pc, #492]	; (d8a38 <__ieee754_pow+0xbb0>)
   d884c:	f000 fb06 	bl	d8e5c <__aeabi_dsub>
   d8850:	4622      	mov	r2, r4
   d8852:	462b      	mov	r3, r5
   d8854:	4604      	mov	r4, r0
   d8856:	460d      	mov	r5, r1
   d8858:	4610      	mov	r0, r2
   d885a:	4619      	mov	r1, r3
   d885c:	f000 fcb6 	bl	d91cc <__aeabi_dmul>
   d8860:	4602      	mov	r2, r0
   d8862:	460b      	mov	r3, r1
   d8864:	4620      	mov	r0, r4
   d8866:	4629      	mov	r1, r5
   d8868:	f000 fcb0 	bl	d91cc <__aeabi_dmul>
   d886c:	a362      	add	r3, pc, #392	; (adr r3, d89f8 <__ieee754_pow+0xb70>)
   d886e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8872:	f000 fcab 	bl	d91cc <__aeabi_dmul>
   d8876:	4602      	mov	r2, r0
   d8878:	460b      	mov	r3, r1
   d887a:	4640      	mov	r0, r8
   d887c:	4649      	mov	r1, r9
   d887e:	f000 faed 	bl	d8e5c <__aeabi_dsub>
   d8882:	4680      	mov	r8, r0
   d8884:	4689      	mov	r9, r1
   d8886:	4650      	mov	r0, sl
   d8888:	4659      	mov	r1, fp
   d888a:	4642      	mov	r2, r8
   d888c:	464b      	mov	r3, r9
   d888e:	f000 fae7 	bl	d8e60 <__adddf3>
   d8892:	2400      	movs	r4, #0
   d8894:	4652      	mov	r2, sl
   d8896:	465b      	mov	r3, fp
   d8898:	4620      	mov	r0, r4
   d889a:	460d      	mov	r5, r1
   d889c:	f000 fade 	bl	d8e5c <__aeabi_dsub>
   d88a0:	4602      	mov	r2, r0
   d88a2:	460b      	mov	r3, r1
   d88a4:	4640      	mov	r0, r8
   d88a6:	4649      	mov	r1, r9
   d88a8:	f000 fad8 	bl	d8e5c <__aeabi_dsub>
   d88ac:	4682      	mov	sl, r0
   d88ae:	468b      	mov	fp, r1
   d88b0:	e5ca      	b.n	d8448 <__ieee754_pow+0x5c0>
   d88b2:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8a00 <__ieee754_pow+0xb78>
   d88b6:	eeb0 ba47 	vmov.f32	s22, s14
   d88ba:	eef0 ba67 	vmov.f32	s23, s15
   d88be:	eeb0 ca47 	vmov.f32	s24, s14
   d88c2:	eef0 ca67 	vmov.f32	s25, s15
   d88c6:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8a08 <__ieee754_pow+0xb80>
   d88ca:	f04f 0900 	mov.w	r9, #0
   d88ce:	ec54 3b17 	vmov	r3, r4, d7
   d88d2:	e41d      	b.n	d8110 <__ieee754_pow+0x288>
   d88d4:	2000      	movs	r0, #0
   d88d6:	f7ff bbf3 	b.w	d80c0 <__ieee754_pow+0x238>
   d88da:	4955      	ldr	r1, [pc, #340]	; (d8a30 <__ieee754_pow+0xba8>)
   d88dc:	4622      	mov	r2, r4
   d88de:	462b      	mov	r3, r5
   d88e0:	2000      	movs	r0, #0
   d88e2:	f000 fd9d 	bl	d9420 <__aeabi_ddiv>
   d88e6:	e9cd 0100 	strd	r0, r1, [sp]
   d88ea:	f7ff bb1b 	b.w	d7f24 <__ieee754_pow+0x9c>
   d88ee:	4622      	mov	r2, r4
   d88f0:	462b      	mov	r3, r5
   d88f2:	4620      	mov	r0, r4
   d88f4:	4629      	mov	r1, r5
   d88f6:	f000 fc69 	bl	d91cc <__aeabi_dmul>
   d88fa:	e9cd 0100 	strd	r0, r1, [sp]
   d88fe:	f7ff bb11 	b.w	d7f24 <__ieee754_pow+0x9c>
   d8902:	2b00      	cmp	r3, #0
   d8904:	d142      	bne.n	d898c <__ieee754_pow+0xb04>
   d8906:	f1c1 0114 	rsb	r1, r1, #20
   d890a:	fa4a f001 	asr.w	r0, sl, r1
   d890e:	fa00 f101 	lsl.w	r1, r0, r1
   d8912:	4551      	cmp	r1, sl
   d8914:	d05a      	beq.n	d89cc <__ieee754_pow+0xb44>
   d8916:	9303      	str	r3, [sp, #12]
   d8918:	f7ff bae0 	b.w	d7edc <__ieee754_pow+0x54>
   d891c:	4a46      	ldr	r2, [pc, #280]	; (d8a38 <__ieee754_pow+0xbb0>)
   d891e:	4293      	cmp	r3, r2
   d8920:	dc5b      	bgt.n	d89da <__ieee754_pow+0xb52>
   d8922:	e9dd 1200 	ldrd	r1, r2, [sp]
   d8926:	9100      	str	r1, [sp, #0]
   d8928:	9103      	str	r1, [sp, #12]
   d892a:	e622      	b.n	d8572 <__ieee754_pow+0x6ea>
   d892c:	a338      	add	r3, pc, #224	; (adr r3, d8a10 <__ieee754_pow+0xb88>)
   d892e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8932:	ec51 0b19 	vmov	r0, r1, d9
   d8936:	f000 fc49 	bl	d91cc <__aeabi_dmul>
   d893a:	a335      	add	r3, pc, #212	; (adr r3, d8a10 <__ieee754_pow+0xb88>)
   d893c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8940:	f000 fc44 	bl	d91cc <__aeabi_dmul>
   d8944:	e9cd 0100 	strd	r0, r1, [sp]
   d8948:	f7ff baec 	b.w	d7f24 <__ieee754_pow+0x9c>
   d894c:	9b03      	ldr	r3, [sp, #12]
   d894e:	2b01      	cmp	r3, #1
   d8950:	f47f aae8 	bne.w	d7f24 <__ieee754_pow+0x9c>
   d8954:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8958:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d895c:	e9cd 2300 	strd	r2, r3, [sp]
   d8960:	f7ff bae0 	b.w	d7f24 <__ieee754_pow+0x9c>
   d8964:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d8a18 <__ieee754_pow+0xb90>
   d8968:	eeb0 ba47 	vmov.f32	s22, s14
   d896c:	eef0 ba67 	vmov.f32	s23, s15
   d8970:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d8a20 <__ieee754_pow+0xb98>
   d8974:	eeb0 ca47 	vmov.f32	s24, s14
   d8978:	eef0 ca67 	vmov.f32	s25, s15
   d897c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d8a28 <__ieee754_pow+0xba0>
   d8980:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d8984:	ec54 3b17 	vmov	r3, r4, d7
   d8988:	f7ff bbc2 	b.w	d8110 <__ieee754_pow+0x288>
   d898c:	ec45 4b10 	vmov	d0, r4, r5
   d8990:	9203      	str	r2, [sp, #12]
   d8992:	f000 f917 	bl	d8bc4 <fabs>
   d8996:	9a03      	ldr	r2, [sp, #12]
   d8998:	ed8d 0b00 	vstr	d0, [sp]
   d899c:	2a00      	cmp	r2, #0
   d899e:	f47f ab61 	bne.w	d8064 <__ieee754_pow+0x1dc>
   d89a2:	9203      	str	r2, [sp, #12]
   d89a4:	f7ff baf5 	b.w	d7f92 <__ieee754_pow+0x10a>
   d89a8:	9803      	ldr	r0, [sp, #12]
   d89aa:	ec43 2b10 	vmov	d0, r2, r3
   d89ae:	f000 f9bf 	bl	d8d30 <scalbn>
   d89b2:	ec51 0b10 	vmov	r0, r1, d0
   d89b6:	e68f      	b.n	d86d8 <__ieee754_pow+0x850>
   d89b8:	f000 0001 	and.w	r0, r0, #1
   d89bc:	f1c0 0102 	rsb	r1, r0, #2
   d89c0:	9103      	str	r1, [sp, #12]
   d89c2:	2b00      	cmp	r3, #0
   d89c4:	f43f aa8a 	beq.w	d7edc <__ieee754_pow+0x54>
   d89c8:	f7ff bada 	b.w	d7f80 <__ieee754_pow+0xf8>
   d89cc:	f000 0001 	and.w	r0, r0, #1
   d89d0:	f1c0 0302 	rsb	r3, r0, #2
   d89d4:	9303      	str	r3, [sp, #12]
   d89d6:	f7ff ba81 	b.w	d7edc <__ieee754_pow+0x54>
   d89da:	151b      	asrs	r3, r3, #20
   d89dc:	e596      	b.n	d850c <__ieee754_pow+0x684>
   d89de:	bf00      	nop
   d89e0:	60000000 	.word	0x60000000
   d89e4:	3ff71547 	.word	0x3ff71547
   d89e8:	f85ddf44 	.word	0xf85ddf44
   d89ec:	3e54ae0b 	.word	0x3e54ae0b
   d89f0:	55555555 	.word	0x55555555
   d89f4:	3fd55555 	.word	0x3fd55555
   d89f8:	652b82fe 	.word	0x652b82fe
   d89fc:	3ff71547 	.word	0x3ff71547
	...
   d8a0c:	3ff00000 	.word	0x3ff00000
   d8a10:	8800759c 	.word	0x8800759c
   d8a14:	7e37e43c 	.word	0x7e37e43c
   d8a18:	40000000 	.word	0x40000000
   d8a1c:	3fe2b803 	.word	0x3fe2b803
   d8a20:	43cfd006 	.word	0x43cfd006
   d8a24:	3e4cfdeb 	.word	0x3e4cfdeb
   d8a28:	00000000 	.word	0x00000000
   d8a2c:	3ff80000 	.word	0x3ff80000
   d8a30:	3ff00000 	.word	0x3ff00000
   d8a34:	3fd00000 	.word	0x3fd00000
   d8a38:	3fe00000 	.word	0x3fe00000

000d8a3c <__ieee754_sqrt>:
   d8a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8a40:	4a5f      	ldr	r2, [pc, #380]	; (d8bc0 <__ieee754_sqrt+0x184>)
   d8a42:	ec57 6b10 	vmov	r6, r7, d0
   d8a46:	43ba      	bics	r2, r7
   d8a48:	f000 8098 	beq.w	d8b7c <__ieee754_sqrt+0x140>
   d8a4c:	2f00      	cmp	r7, #0
   d8a4e:	ee10 4a10 	vmov	r4, s0
   d8a52:	463b      	mov	r3, r7
   d8a54:	dd4e      	ble.n	d8af4 <__ieee754_sqrt+0xb8>
   d8a56:	1539      	asrs	r1, r7, #20
   d8a58:	d05b      	beq.n	d8b12 <__ieee754_sqrt+0xd6>
   d8a5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8a5e:	07ca      	lsls	r2, r1, #31
   d8a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8a64:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8a68:	d403      	bmi.n	d8a72 <__ieee754_sqrt+0x36>
   d8a6a:	005b      	lsls	r3, r3, #1
   d8a6c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8a70:	0064      	lsls	r4, r4, #1
   d8a72:	0fe2      	lsrs	r2, r4, #31
   d8a74:	f04f 0c00 	mov.w	ip, #0
   d8a78:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8a7c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8a80:	0064      	lsls	r4, r4, #1
   d8a82:	4666      	mov	r6, ip
   d8a84:	2516      	movs	r5, #22
   d8a86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8a8a:	18b1      	adds	r1, r6, r2
   d8a8c:	4299      	cmp	r1, r3
   d8a8e:	dc02      	bgt.n	d8a96 <__ieee754_sqrt+0x5a>
   d8a90:	1a5b      	subs	r3, r3, r1
   d8a92:	188e      	adds	r6, r1, r2
   d8a94:	4494      	add	ip, r2
   d8a96:	005b      	lsls	r3, r3, #1
   d8a98:	3d01      	subs	r5, #1
   d8a9a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8a9e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8aa2:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8aa6:	d1f0      	bne.n	d8a8a <__ieee754_sqrt+0x4e>
   d8aa8:	462f      	mov	r7, r5
   d8aaa:	2020      	movs	r0, #32
   d8aac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8ab0:	e009      	b.n	d8ac6 <__ieee754_sqrt+0x8a>
   d8ab2:	d03e      	beq.n	d8b32 <__ieee754_sqrt+0xf6>
   d8ab4:	0fe1      	lsrs	r1, r4, #31
   d8ab6:	3801      	subs	r0, #1
   d8ab8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8abc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8ac0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8ac4:	d03e      	beq.n	d8b44 <__ieee754_sqrt+0x108>
   d8ac6:	42b3      	cmp	r3, r6
   d8ac8:	eb02 0105 	add.w	r1, r2, r5
   d8acc:	ddf1      	ble.n	d8ab2 <__ieee754_sqrt+0x76>
   d8ace:	2900      	cmp	r1, #0
   d8ad0:	eb01 0502 	add.w	r5, r1, r2
   d8ad4:	db09      	blt.n	d8aea <__ieee754_sqrt+0xae>
   d8ad6:	46b0      	mov	r8, r6
   d8ad8:	1b9b      	subs	r3, r3, r6
   d8ada:	42a1      	cmp	r1, r4
   d8adc:	bf88      	it	hi
   d8ade:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8ae2:	1a64      	subs	r4, r4, r1
   d8ae4:	4417      	add	r7, r2
   d8ae6:	4646      	mov	r6, r8
   d8ae8:	e7e4      	b.n	d8ab4 <__ieee754_sqrt+0x78>
   d8aea:	2d00      	cmp	r5, #0
   d8aec:	dbf3      	blt.n	d8ad6 <__ieee754_sqrt+0x9a>
   d8aee:	f106 0801 	add.w	r8, r6, #1
   d8af2:	e7f1      	b.n	d8ad8 <__ieee754_sqrt+0x9c>
   d8af4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8af8:	4332      	orrs	r2, r6
   d8afa:	d036      	beq.n	d8b6a <__ieee754_sqrt+0x12e>
   d8afc:	2f00      	cmp	r7, #0
   d8afe:	d14d      	bne.n	d8b9c <__ieee754_sqrt+0x160>
   d8b00:	4639      	mov	r1, r7
   d8b02:	0ae2      	lsrs	r2, r4, #11
   d8b04:	3915      	subs	r1, #21
   d8b06:	0564      	lsls	r4, r4, #21
   d8b08:	4613      	mov	r3, r2
   d8b0a:	2a00      	cmp	r2, #0
   d8b0c:	d0f9      	beq.n	d8b02 <__ieee754_sqrt+0xc6>
   d8b0e:	02d7      	lsls	r7, r2, #11
   d8b10:	d451      	bmi.n	d8bb6 <__ieee754_sqrt+0x17a>
   d8b12:	2000      	movs	r0, #0
   d8b14:	005b      	lsls	r3, r3, #1
   d8b16:	02de      	lsls	r6, r3, #11
   d8b18:	4605      	mov	r5, r0
   d8b1a:	f100 0001 	add.w	r0, r0, #1
   d8b1e:	d5f9      	bpl.n	d8b14 <__ieee754_sqrt+0xd8>
   d8b20:	461a      	mov	r2, r3
   d8b22:	4623      	mov	r3, r4
   d8b24:	4084      	lsls	r4, r0
   d8b26:	f1c0 0020 	rsb	r0, r0, #32
   d8b2a:	40c3      	lsrs	r3, r0
   d8b2c:	4313      	orrs	r3, r2
   d8b2e:	1b49      	subs	r1, r1, r5
   d8b30:	e793      	b.n	d8a5a <__ieee754_sqrt+0x1e>
   d8b32:	42a1      	cmp	r1, r4
   d8b34:	d8be      	bhi.n	d8ab4 <__ieee754_sqrt+0x78>
   d8b36:	2900      	cmp	r1, #0
   d8b38:	eb01 0502 	add.w	r5, r1, r2
   d8b3c:	dbd5      	blt.n	d8aea <__ieee754_sqrt+0xae>
   d8b3e:	4698      	mov	r8, r3
   d8b40:	2300      	movs	r3, #0
   d8b42:	e7ce      	b.n	d8ae2 <__ieee754_sqrt+0xa6>
   d8b44:	4323      	orrs	r3, r4
   d8b46:	d112      	bne.n	d8b6e <__ieee754_sqrt+0x132>
   d8b48:	0878      	lsrs	r0, r7, #1
   d8b4a:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8b4e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8b52:	f01c 0f01 	tst.w	ip, #1
   d8b56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8b5a:	bf18      	it	ne
   d8b5c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8b60:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8b64:	4602      	mov	r2, r0
   d8b66:	ec43 2b10 	vmov	d0, r2, r3
   d8b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b6e:	1c7b      	adds	r3, r7, #1
   d8b70:	bf16      	itet	ne
   d8b72:	1c78      	addne	r0, r7, #1
   d8b74:	f10c 0c01 	addeq.w	ip, ip, #1
   d8b78:	0840      	lsrne	r0, r0, #1
   d8b7a:	e7e6      	b.n	d8b4a <__ieee754_sqrt+0x10e>
   d8b7c:	ee10 2a10 	vmov	r2, s0
   d8b80:	ee10 0a10 	vmov	r0, s0
   d8b84:	463b      	mov	r3, r7
   d8b86:	4639      	mov	r1, r7
   d8b88:	f000 fb20 	bl	d91cc <__aeabi_dmul>
   d8b8c:	4632      	mov	r2, r6
   d8b8e:	463b      	mov	r3, r7
   d8b90:	f000 f966 	bl	d8e60 <__adddf3>
   d8b94:	ec41 0b10 	vmov	d0, r0, r1
   d8b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b9c:	ee10 2a10 	vmov	r2, s0
   d8ba0:	4630      	mov	r0, r6
   d8ba2:	4639      	mov	r1, r7
   d8ba4:	f000 f95a 	bl	d8e5c <__aeabi_dsub>
   d8ba8:	4602      	mov	r2, r0
   d8baa:	460b      	mov	r3, r1
   d8bac:	f000 fc38 	bl	d9420 <__aeabi_ddiv>
   d8bb0:	ec41 0b10 	vmov	d0, r0, r1
   d8bb4:	e7d9      	b.n	d8b6a <__ieee754_sqrt+0x12e>
   d8bb6:	4623      	mov	r3, r4
   d8bb8:	2020      	movs	r0, #32
   d8bba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8bbe:	e7b4      	b.n	d8b2a <__ieee754_sqrt+0xee>
   d8bc0:	7ff00000 	.word	0x7ff00000

000d8bc4 <fabs>:
   d8bc4:	ec51 0b10 	vmov	r0, r1, d0
   d8bc8:	ee10 2a10 	vmov	r2, s0
   d8bcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8bd0:	ec43 2b10 	vmov	d0, r2, r3
   d8bd4:	4770      	bx	lr
   d8bd6:	bf00      	nop

000d8bd8 <finite>:
   d8bd8:	b082      	sub	sp, #8
   d8bda:	ed8d 0b00 	vstr	d0, [sp]
   d8bde:	9801      	ldr	r0, [sp, #4]
   d8be0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8be4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8be8:	0fc0      	lsrs	r0, r0, #31
   d8bea:	b002      	add	sp, #8
   d8bec:	4770      	bx	lr
   d8bee:	bf00      	nop

000d8bf0 <matherr>:
   d8bf0:	2000      	movs	r0, #0
   d8bf2:	4770      	bx	lr
   d8bf4:	0000      	movs	r0, r0
	...

000d8bf8 <nan>:
   d8bf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8c00 <nan+0x8>
   d8bfc:	4770      	bx	lr
   d8bfe:	bf00      	nop
   d8c00:	00000000 	.word	0x00000000
   d8c04:	7ff80000 	.word	0x7ff80000

000d8c08 <rint>:
   d8c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8c0a:	ec53 2b10 	vmov	r2, r3, d0
   d8c0e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8c12:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8c16:	2813      	cmp	r0, #19
   d8c18:	ee10 5a10 	vmov	r5, s0
   d8c1c:	b083      	sub	sp, #12
   d8c1e:	4619      	mov	r1, r3
   d8c20:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8c24:	dc31      	bgt.n	d8c8a <rint+0x82>
   d8c26:	2800      	cmp	r0, #0
   d8c28:	db4c      	blt.n	d8cc4 <rint+0xbc>
   d8c2a:	4e3e      	ldr	r6, [pc, #248]	; (d8d24 <rint+0x11c>)
   d8c2c:	4106      	asrs	r6, r0
   d8c2e:	ea03 0706 	and.w	r7, r3, r6
   d8c32:	4317      	orrs	r7, r2
   d8c34:	d02e      	beq.n	d8c94 <rint+0x8c>
   d8c36:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d8c3a:	431d      	orrs	r5, r3
   d8c3c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8c40:	d00c      	beq.n	d8c5c <rint+0x54>
   d8c42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8c46:	2813      	cmp	r0, #19
   d8c48:	ea21 0606 	bic.w	r6, r1, r6
   d8c4c:	fa43 f100 	asr.w	r1, r3, r0
   d8c50:	ea41 0106 	orr.w	r1, r1, r6
   d8c54:	bf0c      	ite	eq
   d8c56:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8c5a:	2500      	movne	r5, #0
   d8c5c:	4832      	ldr	r0, [pc, #200]	; (d8d28 <rint+0x120>)
   d8c5e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8c62:	462a      	mov	r2, r5
   d8c64:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8c68:	460b      	mov	r3, r1
   d8c6a:	4620      	mov	r0, r4
   d8c6c:	4629      	mov	r1, r5
   d8c6e:	f000 f8f7 	bl	d8e60 <__adddf3>
   d8c72:	e9cd 0100 	strd	r0, r1, [sp]
   d8c76:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8c7a:	4622      	mov	r2, r4
   d8c7c:	462b      	mov	r3, r5
   d8c7e:	f000 f8ed 	bl	d8e5c <__aeabi_dsub>
   d8c82:	ec41 0b10 	vmov	d0, r0, r1
   d8c86:	b003      	add	sp, #12
   d8c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8c8a:	2833      	cmp	r0, #51	; 0x33
   d8c8c:	dd06      	ble.n	d8c9c <rint+0x94>
   d8c8e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8c92:	d040      	beq.n	d8d16 <rint+0x10e>
   d8c94:	ec43 2b10 	vmov	d0, r2, r3
   d8c98:	b003      	add	sp, #12
   d8c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8c9c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ca4:	40f0      	lsrs	r0, r6
   d8ca6:	4202      	tst	r2, r0
   d8ca8:	d0f4      	beq.n	d8c94 <rint+0x8c>
   d8caa:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d8cae:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8cb2:	d0d3      	beq.n	d8c5c <rint+0x54>
   d8cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d8cb8:	ea25 0503 	bic.w	r5, r5, r3
   d8cbc:	fa42 f606 	asr.w	r6, r2, r6
   d8cc0:	4335      	orrs	r5, r6
   d8cc2:	e7cb      	b.n	d8c5c <rint+0x54>
   d8cc4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8cc8:	4310      	orrs	r0, r2
   d8cca:	d0e3      	beq.n	d8c94 <rint+0x8c>
   d8ccc:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8cd0:	4310      	orrs	r0, r2
   d8cd2:	4245      	negs	r5, r0
   d8cd4:	4305      	orrs	r5, r0
   d8cd6:	4814      	ldr	r0, [pc, #80]	; (d8d28 <rint+0x120>)
   d8cd8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8cdc:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8ce0:	0c59      	lsrs	r1, r3, #17
   d8ce2:	0b2d      	lsrs	r5, r5, #12
   d8ce4:	0449      	lsls	r1, r1, #17
   d8ce6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d8cea:	ea45 0301 	orr.w	r3, r5, r1
   d8cee:	4630      	mov	r0, r6
   d8cf0:	4639      	mov	r1, r7
   d8cf2:	f000 f8b5 	bl	d8e60 <__adddf3>
   d8cf6:	e9cd 0100 	strd	r0, r1, [sp]
   d8cfa:	463b      	mov	r3, r7
   d8cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8d00:	4632      	mov	r2, r6
   d8d02:	f000 f8ab 	bl	d8e5c <__aeabi_dsub>
   d8d06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8d0a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8d0e:	ec41 0b10 	vmov	d0, r0, r1
   d8d12:	b003      	add	sp, #12
   d8d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8d16:	ee10 0a10 	vmov	r0, s0
   d8d1a:	f000 f8a1 	bl	d8e60 <__adddf3>
   d8d1e:	ec41 0b10 	vmov	d0, r0, r1
   d8d22:	e7b9      	b.n	d8c98 <rint+0x90>
   d8d24:	000fffff 	.word	0x000fffff
   d8d28:	000d9de8 	.word	0x000d9de8
   d8d2c:	00000000 	.word	0x00000000

000d8d30 <scalbn>:
   d8d30:	b538      	push	{r3, r4, r5, lr}
   d8d32:	ec53 2b10 	vmov	r2, r3, d0
   d8d36:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d8d3a:	461c      	mov	r4, r3
   d8d3c:	4605      	mov	r5, r0
   d8d3e:	bb81      	cbnz	r1, d8da2 <scalbn+0x72>
   d8d40:	ee10 1a10 	vmov	r1, s0
   d8d44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8d48:	4321      	orrs	r1, r4
   d8d4a:	d029      	beq.n	d8da0 <scalbn+0x70>
   d8d4c:	4619      	mov	r1, r3
   d8d4e:	2200      	movs	r2, #0
   d8d50:	4b3d      	ldr	r3, [pc, #244]	; (d8e48 <scalbn+0x118>)
   d8d52:	4c3e      	ldr	r4, [pc, #248]	; (d8e4c <scalbn+0x11c>)
   d8d54:	ee10 0a10 	vmov	r0, s0
   d8d58:	f000 fa38 	bl	d91cc <__aeabi_dmul>
   d8d5c:	42a5      	cmp	r5, r4
   d8d5e:	4602      	mov	r2, r0
   d8d60:	460b      	mov	r3, r1
   d8d62:	db16      	blt.n	d8d92 <scalbn+0x62>
   d8d64:	460c      	mov	r4, r1
   d8d66:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d8d6a:	3936      	subs	r1, #54	; 0x36
   d8d6c:	4429      	add	r1, r5
   d8d6e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d8d72:	4281      	cmp	r1, r0
   d8d74:	dc21      	bgt.n	d8dba <scalbn+0x8a>
   d8d76:	2900      	cmp	r1, #0
   d8d78:	dc47      	bgt.n	d8e0a <scalbn+0xda>
   d8d7a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d8d7e:	da34      	bge.n	d8dea <scalbn+0xba>
   d8d80:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8d84:	428d      	cmp	r5, r1
   d8d86:	dc18      	bgt.n	d8dba <scalbn+0x8a>
   d8d88:	2b00      	cmp	r3, #0
   d8d8a:	a127      	add	r1, pc, #156	; (adr r1, d8e28 <scalbn+0xf8>)
   d8d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8d90:	db44      	blt.n	d8e1c <scalbn+0xec>
   d8d92:	a325      	add	r3, pc, #148	; (adr r3, d8e28 <scalbn+0xf8>)
   d8d94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d98:	f000 fa18 	bl	d91cc <__aeabi_dmul>
   d8d9c:	ec41 0b10 	vmov	d0, r0, r1
   d8da0:	bd38      	pop	{r3, r4, r5, pc}
   d8da2:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8da6:	4281      	cmp	r1, r0
   d8da8:	d1e0      	bne.n	d8d6c <scalbn+0x3c>
   d8daa:	ee10 0a10 	vmov	r0, s0
   d8dae:	4619      	mov	r1, r3
   d8db0:	f000 f856 	bl	d8e60 <__adddf3>
   d8db4:	ec41 0b10 	vmov	d0, r0, r1
   d8db8:	bd38      	pop	{r3, r4, r5, pc}
   d8dba:	2b00      	cmp	r3, #0
   d8dbc:	a11c      	add	r1, pc, #112	; (adr r1, d8e30 <scalbn+0x100>)
   d8dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8dc2:	db07      	blt.n	d8dd4 <scalbn+0xa4>
   d8dc4:	a31a      	add	r3, pc, #104	; (adr r3, d8e30 <scalbn+0x100>)
   d8dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8dca:	f000 f9ff 	bl	d91cc <__aeabi_dmul>
   d8dce:	ec41 0b10 	vmov	d0, r0, r1
   d8dd2:	bd38      	pop	{r3, r4, r5, pc}
   d8dd4:	a118      	add	r1, pc, #96	; (adr r1, d8e38 <scalbn+0x108>)
   d8dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8dda:	a315      	add	r3, pc, #84	; (adr r3, d8e30 <scalbn+0x100>)
   d8ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8de0:	f000 f9f4 	bl	d91cc <__aeabi_dmul>
   d8de4:	ec41 0b10 	vmov	d0, r0, r1
   d8de8:	e7f3      	b.n	d8dd2 <scalbn+0xa2>
   d8dea:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8dee:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8df2:	3136      	adds	r1, #54	; 0x36
   d8df4:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8df8:	4610      	mov	r0, r2
   d8dfa:	4619      	mov	r1, r3
   d8dfc:	2200      	movs	r2, #0
   d8dfe:	4b14      	ldr	r3, [pc, #80]	; (d8e50 <scalbn+0x120>)
   d8e00:	f000 f9e4 	bl	d91cc <__aeabi_dmul>
   d8e04:	ec41 0b10 	vmov	d0, r0, r1
   d8e08:	bd38      	pop	{r3, r4, r5, pc}
   d8e0a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8e0e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8e12:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8e16:	ec43 2b10 	vmov	d0, r2, r3
   d8e1a:	bd38      	pop	{r3, r4, r5, pc}
   d8e1c:	a108      	add	r1, pc, #32	; (adr r1, d8e40 <scalbn+0x110>)
   d8e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8e22:	e7b6      	b.n	d8d92 <scalbn+0x62>
   d8e24:	f3af 8000 	nop.w
   d8e28:	c2f8f359 	.word	0xc2f8f359
   d8e2c:	01a56e1f 	.word	0x01a56e1f
   d8e30:	8800759c 	.word	0x8800759c
   d8e34:	7e37e43c 	.word	0x7e37e43c
   d8e38:	8800759c 	.word	0x8800759c
   d8e3c:	fe37e43c 	.word	0xfe37e43c
   d8e40:	c2f8f359 	.word	0xc2f8f359
   d8e44:	81a56e1f 	.word	0x81a56e1f
   d8e48:	43500000 	.word	0x43500000
   d8e4c:	ffff3cb0 	.word	0xffff3cb0
   d8e50:	3c900000 	.word	0x3c900000

000d8e54 <__aeabi_drsub>:
   d8e54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8e58:	e002      	b.n	d8e60 <__adddf3>
   d8e5a:	bf00      	nop

000d8e5c <__aeabi_dsub>:
   d8e5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8e60 <__adddf3>:
   d8e60:	b530      	push	{r4, r5, lr}
   d8e62:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8e66:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8e6a:	ea94 0f05 	teq	r4, r5
   d8e6e:	bf08      	it	eq
   d8e70:	ea90 0f02 	teqeq	r0, r2
   d8e74:	bf1f      	itttt	ne
   d8e76:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8e7a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8e7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8e82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8e86:	f000 80e2 	beq.w	d904e <__adddf3+0x1ee>
   d8e8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8e8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8e92:	bfb8      	it	lt
   d8e94:	426d      	neglt	r5, r5
   d8e96:	dd0c      	ble.n	d8eb2 <__adddf3+0x52>
   d8e98:	442c      	add	r4, r5
   d8e9a:	ea80 0202 	eor.w	r2, r0, r2
   d8e9e:	ea81 0303 	eor.w	r3, r1, r3
   d8ea2:	ea82 0000 	eor.w	r0, r2, r0
   d8ea6:	ea83 0101 	eor.w	r1, r3, r1
   d8eaa:	ea80 0202 	eor.w	r2, r0, r2
   d8eae:	ea81 0303 	eor.w	r3, r1, r3
   d8eb2:	2d36      	cmp	r5, #54	; 0x36
   d8eb4:	bf88      	it	hi
   d8eb6:	bd30      	pophi	{r4, r5, pc}
   d8eb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8ebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8ec0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8ec4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8ec8:	d002      	beq.n	d8ed0 <__adddf3+0x70>
   d8eca:	4240      	negs	r0, r0
   d8ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8ed0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8ed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8ed8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8edc:	d002      	beq.n	d8ee4 <__adddf3+0x84>
   d8ede:	4252      	negs	r2, r2
   d8ee0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ee4:	ea94 0f05 	teq	r4, r5
   d8ee8:	f000 80a7 	beq.w	d903a <__adddf3+0x1da>
   d8eec:	f1a4 0401 	sub.w	r4, r4, #1
   d8ef0:	f1d5 0e20 	rsbs	lr, r5, #32
   d8ef4:	db0d      	blt.n	d8f12 <__adddf3+0xb2>
   d8ef6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8efa:	fa22 f205 	lsr.w	r2, r2, r5
   d8efe:	1880      	adds	r0, r0, r2
   d8f00:	f141 0100 	adc.w	r1, r1, #0
   d8f04:	fa03 f20e 	lsl.w	r2, r3, lr
   d8f08:	1880      	adds	r0, r0, r2
   d8f0a:	fa43 f305 	asr.w	r3, r3, r5
   d8f0e:	4159      	adcs	r1, r3
   d8f10:	e00e      	b.n	d8f30 <__adddf3+0xd0>
   d8f12:	f1a5 0520 	sub.w	r5, r5, #32
   d8f16:	f10e 0e20 	add.w	lr, lr, #32
   d8f1a:	2a01      	cmp	r2, #1
   d8f1c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8f20:	bf28      	it	cs
   d8f22:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8f26:	fa43 f305 	asr.w	r3, r3, r5
   d8f2a:	18c0      	adds	r0, r0, r3
   d8f2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8f30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8f34:	d507      	bpl.n	d8f46 <__adddf3+0xe6>
   d8f36:	f04f 0e00 	mov.w	lr, #0
   d8f3a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8f3e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8f42:	eb6e 0101 	sbc.w	r1, lr, r1
   d8f46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8f4a:	d31b      	bcc.n	d8f84 <__adddf3+0x124>
   d8f4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8f50:	d30c      	bcc.n	d8f6c <__adddf3+0x10c>
   d8f52:	0849      	lsrs	r1, r1, #1
   d8f54:	ea5f 0030 	movs.w	r0, r0, rrx
   d8f58:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8f5c:	f104 0401 	add.w	r4, r4, #1
   d8f60:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8f64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8f68:	f080 809a 	bcs.w	d90a0 <__adddf3+0x240>
   d8f6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8f70:	bf08      	it	eq
   d8f72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8f76:	f150 0000 	adcs.w	r0, r0, #0
   d8f7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f7e:	ea41 0105 	orr.w	r1, r1, r5
   d8f82:	bd30      	pop	{r4, r5, pc}
   d8f84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8f88:	4140      	adcs	r0, r0
   d8f8a:	eb41 0101 	adc.w	r1, r1, r1
   d8f8e:	3c01      	subs	r4, #1
   d8f90:	bf28      	it	cs
   d8f92:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8f96:	d2e9      	bcs.n	d8f6c <__adddf3+0x10c>
   d8f98:	f091 0f00 	teq	r1, #0
   d8f9c:	bf04      	itt	eq
   d8f9e:	4601      	moveq	r1, r0
   d8fa0:	2000      	moveq	r0, #0
   d8fa2:	fab1 f381 	clz	r3, r1
   d8fa6:	bf08      	it	eq
   d8fa8:	3320      	addeq	r3, #32
   d8faa:	f1a3 030b 	sub.w	r3, r3, #11
   d8fae:	f1b3 0220 	subs.w	r2, r3, #32
   d8fb2:	da0c      	bge.n	d8fce <__adddf3+0x16e>
   d8fb4:	320c      	adds	r2, #12
   d8fb6:	dd08      	ble.n	d8fca <__adddf3+0x16a>
   d8fb8:	f102 0c14 	add.w	ip, r2, #20
   d8fbc:	f1c2 020c 	rsb	r2, r2, #12
   d8fc0:	fa01 f00c 	lsl.w	r0, r1, ip
   d8fc4:	fa21 f102 	lsr.w	r1, r1, r2
   d8fc8:	e00c      	b.n	d8fe4 <__adddf3+0x184>
   d8fca:	f102 0214 	add.w	r2, r2, #20
   d8fce:	bfd8      	it	le
   d8fd0:	f1c2 0c20 	rsble	ip, r2, #32
   d8fd4:	fa01 f102 	lsl.w	r1, r1, r2
   d8fd8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8fdc:	bfdc      	itt	le
   d8fde:	ea41 010c 	orrle.w	r1, r1, ip
   d8fe2:	4090      	lslle	r0, r2
   d8fe4:	1ae4      	subs	r4, r4, r3
   d8fe6:	bfa2      	ittt	ge
   d8fe8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8fec:	4329      	orrge	r1, r5
   d8fee:	bd30      	popge	{r4, r5, pc}
   d8ff0:	ea6f 0404 	mvn.w	r4, r4
   d8ff4:	3c1f      	subs	r4, #31
   d8ff6:	da1c      	bge.n	d9032 <__adddf3+0x1d2>
   d8ff8:	340c      	adds	r4, #12
   d8ffa:	dc0e      	bgt.n	d901a <__adddf3+0x1ba>
   d8ffc:	f104 0414 	add.w	r4, r4, #20
   d9000:	f1c4 0220 	rsb	r2, r4, #32
   d9004:	fa20 f004 	lsr.w	r0, r0, r4
   d9008:	fa01 f302 	lsl.w	r3, r1, r2
   d900c:	ea40 0003 	orr.w	r0, r0, r3
   d9010:	fa21 f304 	lsr.w	r3, r1, r4
   d9014:	ea45 0103 	orr.w	r1, r5, r3
   d9018:	bd30      	pop	{r4, r5, pc}
   d901a:	f1c4 040c 	rsb	r4, r4, #12
   d901e:	f1c4 0220 	rsb	r2, r4, #32
   d9022:	fa20 f002 	lsr.w	r0, r0, r2
   d9026:	fa01 f304 	lsl.w	r3, r1, r4
   d902a:	ea40 0003 	orr.w	r0, r0, r3
   d902e:	4629      	mov	r1, r5
   d9030:	bd30      	pop	{r4, r5, pc}
   d9032:	fa21 f004 	lsr.w	r0, r1, r4
   d9036:	4629      	mov	r1, r5
   d9038:	bd30      	pop	{r4, r5, pc}
   d903a:	f094 0f00 	teq	r4, #0
   d903e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9042:	bf06      	itte	eq
   d9044:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9048:	3401      	addeq	r4, #1
   d904a:	3d01      	subne	r5, #1
   d904c:	e74e      	b.n	d8eec <__adddf3+0x8c>
   d904e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9052:	bf18      	it	ne
   d9054:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9058:	d029      	beq.n	d90ae <__adddf3+0x24e>
   d905a:	ea94 0f05 	teq	r4, r5
   d905e:	bf08      	it	eq
   d9060:	ea90 0f02 	teqeq	r0, r2
   d9064:	d005      	beq.n	d9072 <__adddf3+0x212>
   d9066:	ea54 0c00 	orrs.w	ip, r4, r0
   d906a:	bf04      	itt	eq
   d906c:	4619      	moveq	r1, r3
   d906e:	4610      	moveq	r0, r2
   d9070:	bd30      	pop	{r4, r5, pc}
   d9072:	ea91 0f03 	teq	r1, r3
   d9076:	bf1e      	ittt	ne
   d9078:	2100      	movne	r1, #0
   d907a:	2000      	movne	r0, #0
   d907c:	bd30      	popne	{r4, r5, pc}
   d907e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9082:	d105      	bne.n	d9090 <__adddf3+0x230>
   d9084:	0040      	lsls	r0, r0, #1
   d9086:	4149      	adcs	r1, r1
   d9088:	bf28      	it	cs
   d908a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d908e:	bd30      	pop	{r4, r5, pc}
   d9090:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9094:	bf3c      	itt	cc
   d9096:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d909a:	bd30      	popcc	{r4, r5, pc}
   d909c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d90a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d90a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d90a8:	f04f 0000 	mov.w	r0, #0
   d90ac:	bd30      	pop	{r4, r5, pc}
   d90ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d90b2:	bf1a      	itte	ne
   d90b4:	4619      	movne	r1, r3
   d90b6:	4610      	movne	r0, r2
   d90b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d90bc:	bf1c      	itt	ne
   d90be:	460b      	movne	r3, r1
   d90c0:	4602      	movne	r2, r0
   d90c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d90c6:	bf06      	itte	eq
   d90c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d90cc:	ea91 0f03 	teqeq	r1, r3
   d90d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d90d4:	bd30      	pop	{r4, r5, pc}
   d90d6:	bf00      	nop

000d90d8 <__aeabi_ui2d>:
   d90d8:	f090 0f00 	teq	r0, #0
   d90dc:	bf04      	itt	eq
   d90de:	2100      	moveq	r1, #0
   d90e0:	4770      	bxeq	lr
   d90e2:	b530      	push	{r4, r5, lr}
   d90e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d90e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d90ec:	f04f 0500 	mov.w	r5, #0
   d90f0:	f04f 0100 	mov.w	r1, #0
   d90f4:	e750      	b.n	d8f98 <__adddf3+0x138>
   d90f6:	bf00      	nop

000d90f8 <__aeabi_i2d>:
   d90f8:	f090 0f00 	teq	r0, #0
   d90fc:	bf04      	itt	eq
   d90fe:	2100      	moveq	r1, #0
   d9100:	4770      	bxeq	lr
   d9102:	b530      	push	{r4, r5, lr}
   d9104:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9108:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d910c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9110:	bf48      	it	mi
   d9112:	4240      	negmi	r0, r0
   d9114:	f04f 0100 	mov.w	r1, #0
   d9118:	e73e      	b.n	d8f98 <__adddf3+0x138>
   d911a:	bf00      	nop

000d911c <__aeabi_f2d>:
   d911c:	0042      	lsls	r2, r0, #1
   d911e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9122:	ea4f 0131 	mov.w	r1, r1, rrx
   d9126:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d912a:	bf1f      	itttt	ne
   d912c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9130:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9134:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9138:	4770      	bxne	lr
   d913a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d913e:	bf08      	it	eq
   d9140:	4770      	bxeq	lr
   d9142:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9146:	bf04      	itt	eq
   d9148:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d914c:	4770      	bxeq	lr
   d914e:	b530      	push	{r4, r5, lr}
   d9150:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d915c:	e71c      	b.n	d8f98 <__adddf3+0x138>
   d915e:	bf00      	nop

000d9160 <__aeabi_ul2d>:
   d9160:	ea50 0201 	orrs.w	r2, r0, r1
   d9164:	bf08      	it	eq
   d9166:	4770      	bxeq	lr
   d9168:	b530      	push	{r4, r5, lr}
   d916a:	f04f 0500 	mov.w	r5, #0
   d916e:	e00a      	b.n	d9186 <__aeabi_l2d+0x16>

000d9170 <__aeabi_l2d>:
   d9170:	ea50 0201 	orrs.w	r2, r0, r1
   d9174:	bf08      	it	eq
   d9176:	4770      	bxeq	lr
   d9178:	b530      	push	{r4, r5, lr}
   d917a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d917e:	d502      	bpl.n	d9186 <__aeabi_l2d+0x16>
   d9180:	4240      	negs	r0, r0
   d9182:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9186:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d918a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d918e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9192:	f43f aed8 	beq.w	d8f46 <__adddf3+0xe6>
   d9196:	f04f 0203 	mov.w	r2, #3
   d919a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d919e:	bf18      	it	ne
   d91a0:	3203      	addne	r2, #3
   d91a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d91a6:	bf18      	it	ne
   d91a8:	3203      	addne	r2, #3
   d91aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d91ae:	f1c2 0320 	rsb	r3, r2, #32
   d91b2:	fa00 fc03 	lsl.w	ip, r0, r3
   d91b6:	fa20 f002 	lsr.w	r0, r0, r2
   d91ba:	fa01 fe03 	lsl.w	lr, r1, r3
   d91be:	ea40 000e 	orr.w	r0, r0, lr
   d91c2:	fa21 f102 	lsr.w	r1, r1, r2
   d91c6:	4414      	add	r4, r2
   d91c8:	e6bd      	b.n	d8f46 <__adddf3+0xe6>
   d91ca:	bf00      	nop

000d91cc <__aeabi_dmul>:
   d91cc:	b570      	push	{r4, r5, r6, lr}
   d91ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d91d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d91d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d91da:	bf1d      	ittte	ne
   d91dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d91e0:	ea94 0f0c 	teqne	r4, ip
   d91e4:	ea95 0f0c 	teqne	r5, ip
   d91e8:	f000 f8de 	bleq	d93a8 <__aeabi_dmul+0x1dc>
   d91ec:	442c      	add	r4, r5
   d91ee:	ea81 0603 	eor.w	r6, r1, r3
   d91f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d91f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d91fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d91fe:	bf18      	it	ne
   d9200:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9204:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d920c:	d038      	beq.n	d9280 <__aeabi_dmul+0xb4>
   d920e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9212:	f04f 0500 	mov.w	r5, #0
   d9216:	fbe1 e502 	umlal	lr, r5, r1, r2
   d921a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d921e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9222:	f04f 0600 	mov.w	r6, #0
   d9226:	fbe1 5603 	umlal	r5, r6, r1, r3
   d922a:	f09c 0f00 	teq	ip, #0
   d922e:	bf18      	it	ne
   d9230:	f04e 0e01 	orrne.w	lr, lr, #1
   d9234:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9238:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d923c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9240:	d204      	bcs.n	d924c <__aeabi_dmul+0x80>
   d9242:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9246:	416d      	adcs	r5, r5
   d9248:	eb46 0606 	adc.w	r6, r6, r6
   d924c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9250:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9254:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9258:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d925c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9260:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9264:	bf88      	it	hi
   d9266:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d926a:	d81e      	bhi.n	d92aa <__aeabi_dmul+0xde>
   d926c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9270:	bf08      	it	eq
   d9272:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9276:	f150 0000 	adcs.w	r0, r0, #0
   d927a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d927e:	bd70      	pop	{r4, r5, r6, pc}
   d9280:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9284:	ea46 0101 	orr.w	r1, r6, r1
   d9288:	ea40 0002 	orr.w	r0, r0, r2
   d928c:	ea81 0103 	eor.w	r1, r1, r3
   d9290:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9294:	bfc2      	ittt	gt
   d9296:	ebd4 050c 	rsbsgt	r5, r4, ip
   d929a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d929e:	bd70      	popgt	{r4, r5, r6, pc}
   d92a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d92a4:	f04f 0e00 	mov.w	lr, #0
   d92a8:	3c01      	subs	r4, #1
   d92aa:	f300 80ab 	bgt.w	d9404 <__aeabi_dmul+0x238>
   d92ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d92b2:	bfde      	ittt	le
   d92b4:	2000      	movle	r0, #0
   d92b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d92ba:	bd70      	pople	{r4, r5, r6, pc}
   d92bc:	f1c4 0400 	rsb	r4, r4, #0
   d92c0:	3c20      	subs	r4, #32
   d92c2:	da35      	bge.n	d9330 <__aeabi_dmul+0x164>
   d92c4:	340c      	adds	r4, #12
   d92c6:	dc1b      	bgt.n	d9300 <__aeabi_dmul+0x134>
   d92c8:	f104 0414 	add.w	r4, r4, #20
   d92cc:	f1c4 0520 	rsb	r5, r4, #32
   d92d0:	fa00 f305 	lsl.w	r3, r0, r5
   d92d4:	fa20 f004 	lsr.w	r0, r0, r4
   d92d8:	fa01 f205 	lsl.w	r2, r1, r5
   d92dc:	ea40 0002 	orr.w	r0, r0, r2
   d92e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d92e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d92e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d92ec:	fa21 f604 	lsr.w	r6, r1, r4
   d92f0:	eb42 0106 	adc.w	r1, r2, r6
   d92f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d92f8:	bf08      	it	eq
   d92fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d92fe:	bd70      	pop	{r4, r5, r6, pc}
   d9300:	f1c4 040c 	rsb	r4, r4, #12
   d9304:	f1c4 0520 	rsb	r5, r4, #32
   d9308:	fa00 f304 	lsl.w	r3, r0, r4
   d930c:	fa20 f005 	lsr.w	r0, r0, r5
   d9310:	fa01 f204 	lsl.w	r2, r1, r4
   d9314:	ea40 0002 	orr.w	r0, r0, r2
   d9318:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d931c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9320:	f141 0100 	adc.w	r1, r1, #0
   d9324:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9328:	bf08      	it	eq
   d932a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d932e:	bd70      	pop	{r4, r5, r6, pc}
   d9330:	f1c4 0520 	rsb	r5, r4, #32
   d9334:	fa00 f205 	lsl.w	r2, r0, r5
   d9338:	ea4e 0e02 	orr.w	lr, lr, r2
   d933c:	fa20 f304 	lsr.w	r3, r0, r4
   d9340:	fa01 f205 	lsl.w	r2, r1, r5
   d9344:	ea43 0302 	orr.w	r3, r3, r2
   d9348:	fa21 f004 	lsr.w	r0, r1, r4
   d934c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9350:	fa21 f204 	lsr.w	r2, r1, r4
   d9354:	ea20 0002 	bic.w	r0, r0, r2
   d9358:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d935c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9360:	bf08      	it	eq
   d9362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9366:	bd70      	pop	{r4, r5, r6, pc}
   d9368:	f094 0f00 	teq	r4, #0
   d936c:	d10f      	bne.n	d938e <__aeabi_dmul+0x1c2>
   d936e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9372:	0040      	lsls	r0, r0, #1
   d9374:	eb41 0101 	adc.w	r1, r1, r1
   d9378:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d937c:	bf08      	it	eq
   d937e:	3c01      	subeq	r4, #1
   d9380:	d0f7      	beq.n	d9372 <__aeabi_dmul+0x1a6>
   d9382:	ea41 0106 	orr.w	r1, r1, r6
   d9386:	f095 0f00 	teq	r5, #0
   d938a:	bf18      	it	ne
   d938c:	4770      	bxne	lr
   d938e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9392:	0052      	lsls	r2, r2, #1
   d9394:	eb43 0303 	adc.w	r3, r3, r3
   d9398:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d939c:	bf08      	it	eq
   d939e:	3d01      	subeq	r5, #1
   d93a0:	d0f7      	beq.n	d9392 <__aeabi_dmul+0x1c6>
   d93a2:	ea43 0306 	orr.w	r3, r3, r6
   d93a6:	4770      	bx	lr
   d93a8:	ea94 0f0c 	teq	r4, ip
   d93ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d93b0:	bf18      	it	ne
   d93b2:	ea95 0f0c 	teqne	r5, ip
   d93b6:	d00c      	beq.n	d93d2 <__aeabi_dmul+0x206>
   d93b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d93bc:	bf18      	it	ne
   d93be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d93c2:	d1d1      	bne.n	d9368 <__aeabi_dmul+0x19c>
   d93c4:	ea81 0103 	eor.w	r1, r1, r3
   d93c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d93cc:	f04f 0000 	mov.w	r0, #0
   d93d0:	bd70      	pop	{r4, r5, r6, pc}
   d93d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d93d6:	bf06      	itte	eq
   d93d8:	4610      	moveq	r0, r2
   d93da:	4619      	moveq	r1, r3
   d93dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d93e0:	d019      	beq.n	d9416 <__aeabi_dmul+0x24a>
   d93e2:	ea94 0f0c 	teq	r4, ip
   d93e6:	d102      	bne.n	d93ee <__aeabi_dmul+0x222>
   d93e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d93ec:	d113      	bne.n	d9416 <__aeabi_dmul+0x24a>
   d93ee:	ea95 0f0c 	teq	r5, ip
   d93f2:	d105      	bne.n	d9400 <__aeabi_dmul+0x234>
   d93f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d93f8:	bf1c      	itt	ne
   d93fa:	4610      	movne	r0, r2
   d93fc:	4619      	movne	r1, r3
   d93fe:	d10a      	bne.n	d9416 <__aeabi_dmul+0x24a>
   d9400:	ea81 0103 	eor.w	r1, r1, r3
   d9404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9408:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d940c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9410:	f04f 0000 	mov.w	r0, #0
   d9414:	bd70      	pop	{r4, r5, r6, pc}
   d9416:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d941a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d941e:	bd70      	pop	{r4, r5, r6, pc}

000d9420 <__aeabi_ddiv>:
   d9420:	b570      	push	{r4, r5, r6, lr}
   d9422:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9426:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d942a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d942e:	bf1d      	ittte	ne
   d9430:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9434:	ea94 0f0c 	teqne	r4, ip
   d9438:	ea95 0f0c 	teqne	r5, ip
   d943c:	f000 f8a7 	bleq	d958e <__aeabi_ddiv+0x16e>
   d9440:	eba4 0405 	sub.w	r4, r4, r5
   d9444:	ea81 0e03 	eor.w	lr, r1, r3
   d9448:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d944c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9450:	f000 8088 	beq.w	d9564 <__aeabi_ddiv+0x144>
   d9454:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9458:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d945c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9460:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9464:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9468:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d946c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9470:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9474:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9478:	429d      	cmp	r5, r3
   d947a:	bf08      	it	eq
   d947c:	4296      	cmpeq	r6, r2
   d947e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9482:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9486:	d202      	bcs.n	d948e <__aeabi_ddiv+0x6e>
   d9488:	085b      	lsrs	r3, r3, #1
   d948a:	ea4f 0232 	mov.w	r2, r2, rrx
   d948e:	1ab6      	subs	r6, r6, r2
   d9490:	eb65 0503 	sbc.w	r5, r5, r3
   d9494:	085b      	lsrs	r3, r3, #1
   d9496:	ea4f 0232 	mov.w	r2, r2, rrx
   d949a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d949e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d94a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d94a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d94aa:	bf22      	ittt	cs
   d94ac:	1ab6      	subcs	r6, r6, r2
   d94ae:	4675      	movcs	r5, lr
   d94b0:	ea40 000c 	orrcs.w	r0, r0, ip
   d94b4:	085b      	lsrs	r3, r3, #1
   d94b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d94ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d94be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d94c2:	bf22      	ittt	cs
   d94c4:	1ab6      	subcs	r6, r6, r2
   d94c6:	4675      	movcs	r5, lr
   d94c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d94cc:	085b      	lsrs	r3, r3, #1
   d94ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d94d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d94d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d94da:	bf22      	ittt	cs
   d94dc:	1ab6      	subcs	r6, r6, r2
   d94de:	4675      	movcs	r5, lr
   d94e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d94e4:	085b      	lsrs	r3, r3, #1
   d94e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d94ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d94ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d94f2:	bf22      	ittt	cs
   d94f4:	1ab6      	subcs	r6, r6, r2
   d94f6:	4675      	movcs	r5, lr
   d94f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d94fc:	ea55 0e06 	orrs.w	lr, r5, r6
   d9500:	d018      	beq.n	d9534 <__aeabi_ddiv+0x114>
   d9502:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9506:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d950a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d950e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9512:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9516:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d951a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d951e:	d1c0      	bne.n	d94a2 <__aeabi_ddiv+0x82>
   d9520:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9524:	d10b      	bne.n	d953e <__aeabi_ddiv+0x11e>
   d9526:	ea41 0100 	orr.w	r1, r1, r0
   d952a:	f04f 0000 	mov.w	r0, #0
   d952e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9532:	e7b6      	b.n	d94a2 <__aeabi_ddiv+0x82>
   d9534:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9538:	bf04      	itt	eq
   d953a:	4301      	orreq	r1, r0
   d953c:	2000      	moveq	r0, #0
   d953e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9542:	bf88      	it	hi
   d9544:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9548:	f63f aeaf 	bhi.w	d92aa <__aeabi_dmul+0xde>
   d954c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9550:	bf04      	itt	eq
   d9552:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9556:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d955a:	f150 0000 	adcs.w	r0, r0, #0
   d955e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9562:	bd70      	pop	{r4, r5, r6, pc}
   d9564:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9568:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d956c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9570:	bfc2      	ittt	gt
   d9572:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9576:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d957a:	bd70      	popgt	{r4, r5, r6, pc}
   d957c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9580:	f04f 0e00 	mov.w	lr, #0
   d9584:	3c01      	subs	r4, #1
   d9586:	e690      	b.n	d92aa <__aeabi_dmul+0xde>
   d9588:	ea45 0e06 	orr.w	lr, r5, r6
   d958c:	e68d      	b.n	d92aa <__aeabi_dmul+0xde>
   d958e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9592:	ea94 0f0c 	teq	r4, ip
   d9596:	bf08      	it	eq
   d9598:	ea95 0f0c 	teqeq	r5, ip
   d959c:	f43f af3b 	beq.w	d9416 <__aeabi_dmul+0x24a>
   d95a0:	ea94 0f0c 	teq	r4, ip
   d95a4:	d10a      	bne.n	d95bc <__aeabi_ddiv+0x19c>
   d95a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d95aa:	f47f af34 	bne.w	d9416 <__aeabi_dmul+0x24a>
   d95ae:	ea95 0f0c 	teq	r5, ip
   d95b2:	f47f af25 	bne.w	d9400 <__aeabi_dmul+0x234>
   d95b6:	4610      	mov	r0, r2
   d95b8:	4619      	mov	r1, r3
   d95ba:	e72c      	b.n	d9416 <__aeabi_dmul+0x24a>
   d95bc:	ea95 0f0c 	teq	r5, ip
   d95c0:	d106      	bne.n	d95d0 <__aeabi_ddiv+0x1b0>
   d95c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d95c6:	f43f aefd 	beq.w	d93c4 <__aeabi_dmul+0x1f8>
   d95ca:	4610      	mov	r0, r2
   d95cc:	4619      	mov	r1, r3
   d95ce:	e722      	b.n	d9416 <__aeabi_dmul+0x24a>
   d95d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d95d4:	bf18      	it	ne
   d95d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d95da:	f47f aec5 	bne.w	d9368 <__aeabi_dmul+0x19c>
   d95de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d95e2:	f47f af0d 	bne.w	d9400 <__aeabi_dmul+0x234>
   d95e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d95ea:	f47f aeeb 	bne.w	d93c4 <__aeabi_dmul+0x1f8>
   d95ee:	e712      	b.n	d9416 <__aeabi_dmul+0x24a>

000d95f0 <__gedf2>:
   d95f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d95f4:	e006      	b.n	d9604 <__cmpdf2+0x4>
   d95f6:	bf00      	nop

000d95f8 <__ledf2>:
   d95f8:	f04f 0c01 	mov.w	ip, #1
   d95fc:	e002      	b.n	d9604 <__cmpdf2+0x4>
   d95fe:	bf00      	nop

000d9600 <__cmpdf2>:
   d9600:	f04f 0c01 	mov.w	ip, #1
   d9604:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9608:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d960c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9610:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9614:	bf18      	it	ne
   d9616:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d961a:	d01b      	beq.n	d9654 <__cmpdf2+0x54>
   d961c:	b001      	add	sp, #4
   d961e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9622:	bf0c      	ite	eq
   d9624:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9628:	ea91 0f03 	teqne	r1, r3
   d962c:	bf02      	ittt	eq
   d962e:	ea90 0f02 	teqeq	r0, r2
   d9632:	2000      	moveq	r0, #0
   d9634:	4770      	bxeq	lr
   d9636:	f110 0f00 	cmn.w	r0, #0
   d963a:	ea91 0f03 	teq	r1, r3
   d963e:	bf58      	it	pl
   d9640:	4299      	cmppl	r1, r3
   d9642:	bf08      	it	eq
   d9644:	4290      	cmpeq	r0, r2
   d9646:	bf2c      	ite	cs
   d9648:	17d8      	asrcs	r0, r3, #31
   d964a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d964e:	f040 0001 	orr.w	r0, r0, #1
   d9652:	4770      	bx	lr
   d9654:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9658:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d965c:	d102      	bne.n	d9664 <__cmpdf2+0x64>
   d965e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9662:	d107      	bne.n	d9674 <__cmpdf2+0x74>
   d9664:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9668:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d966c:	d1d6      	bne.n	d961c <__cmpdf2+0x1c>
   d966e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9672:	d0d3      	beq.n	d961c <__cmpdf2+0x1c>
   d9674:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9678:	4770      	bx	lr
   d967a:	bf00      	nop

000d967c <__aeabi_cdrcmple>:
   d967c:	4684      	mov	ip, r0
   d967e:	4610      	mov	r0, r2
   d9680:	4662      	mov	r2, ip
   d9682:	468c      	mov	ip, r1
   d9684:	4619      	mov	r1, r3
   d9686:	4663      	mov	r3, ip
   d9688:	e000      	b.n	d968c <__aeabi_cdcmpeq>
   d968a:	bf00      	nop

000d968c <__aeabi_cdcmpeq>:
   d968c:	b501      	push	{r0, lr}
   d968e:	f7ff ffb7 	bl	d9600 <__cmpdf2>
   d9692:	2800      	cmp	r0, #0
   d9694:	bf48      	it	mi
   d9696:	f110 0f00 	cmnmi.w	r0, #0
   d969a:	bd01      	pop	{r0, pc}

000d969c <__aeabi_dcmpeq>:
   d969c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96a0:	f7ff fff4 	bl	d968c <__aeabi_cdcmpeq>
   d96a4:	bf0c      	ite	eq
   d96a6:	2001      	moveq	r0, #1
   d96a8:	2000      	movne	r0, #0
   d96aa:	f85d fb08 	ldr.w	pc, [sp], #8
   d96ae:	bf00      	nop

000d96b0 <__aeabi_dcmplt>:
   d96b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96b4:	f7ff ffea 	bl	d968c <__aeabi_cdcmpeq>
   d96b8:	bf34      	ite	cc
   d96ba:	2001      	movcc	r0, #1
   d96bc:	2000      	movcs	r0, #0
   d96be:	f85d fb08 	ldr.w	pc, [sp], #8
   d96c2:	bf00      	nop

000d96c4 <__aeabi_dcmple>:
   d96c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96c8:	f7ff ffe0 	bl	d968c <__aeabi_cdcmpeq>
   d96cc:	bf94      	ite	ls
   d96ce:	2001      	movls	r0, #1
   d96d0:	2000      	movhi	r0, #0
   d96d2:	f85d fb08 	ldr.w	pc, [sp], #8
   d96d6:	bf00      	nop

000d96d8 <__aeabi_dcmpge>:
   d96d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96dc:	f7ff ffce 	bl	d967c <__aeabi_cdrcmple>
   d96e0:	bf94      	ite	ls
   d96e2:	2001      	movls	r0, #1
   d96e4:	2000      	movhi	r0, #0
   d96e6:	f85d fb08 	ldr.w	pc, [sp], #8
   d96ea:	bf00      	nop

000d96ec <__aeabi_dcmpgt>:
   d96ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d96f0:	f7ff ffc4 	bl	d967c <__aeabi_cdrcmple>
   d96f4:	bf34      	ite	cc
   d96f6:	2001      	movcc	r0, #1
   d96f8:	2000      	movcs	r0, #0
   d96fa:	f85d fb08 	ldr.w	pc, [sp], #8
   d96fe:	bf00      	nop

000d9700 <__aeabi_dcmpun>:
   d9700:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9704:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9708:	d102      	bne.n	d9710 <__aeabi_dcmpun+0x10>
   d970a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d970e:	d10a      	bne.n	d9726 <__aeabi_dcmpun+0x26>
   d9710:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9718:	d102      	bne.n	d9720 <__aeabi_dcmpun+0x20>
   d971a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d971e:	d102      	bne.n	d9726 <__aeabi_dcmpun+0x26>
   d9720:	f04f 0000 	mov.w	r0, #0
   d9724:	4770      	bx	lr
   d9726:	f04f 0001 	mov.w	r0, #1
   d972a:	4770      	bx	lr

000d972c <__aeabi_d2f>:
   d972c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9730:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9734:	bf24      	itt	cs
   d9736:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d973a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d973e:	d90d      	bls.n	d975c <__aeabi_d2f+0x30>
   d9740:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9744:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9748:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d974c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9750:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9754:	bf08      	it	eq
   d9756:	f020 0001 	biceq.w	r0, r0, #1
   d975a:	4770      	bx	lr
   d975c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9760:	d121      	bne.n	d97a6 <__aeabi_d2f+0x7a>
   d9762:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9766:	bfbc      	itt	lt
   d9768:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d976c:	4770      	bxlt	lr
   d976e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9772:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9776:	f1c2 0218 	rsb	r2, r2, #24
   d977a:	f1c2 0c20 	rsb	ip, r2, #32
   d977e:	fa10 f30c 	lsls.w	r3, r0, ip
   d9782:	fa20 f002 	lsr.w	r0, r0, r2
   d9786:	bf18      	it	ne
   d9788:	f040 0001 	orrne.w	r0, r0, #1
   d978c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9790:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9794:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9798:	ea40 000c 	orr.w	r0, r0, ip
   d979c:	fa23 f302 	lsr.w	r3, r3, r2
   d97a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d97a4:	e7cc      	b.n	d9740 <__aeabi_d2f+0x14>
   d97a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d97aa:	d107      	bne.n	d97bc <__aeabi_d2f+0x90>
   d97ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d97b0:	bf1e      	ittt	ne
   d97b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d97b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d97ba:	4770      	bxne	lr
   d97bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d97c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d97c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d97c8:	4770      	bx	lr
   d97ca:	bf00      	nop

000d97cc <__cxa_atexit>:
   d97cc:	b510      	push	{r4, lr}
   d97ce:	4c05      	ldr	r4, [pc, #20]	; (d97e4 <__cxa_atexit+0x18>)
   d97d0:	4613      	mov	r3, r2
   d97d2:	b12c      	cbz	r4, d97e0 <__cxa_atexit+0x14>
   d97d4:	460a      	mov	r2, r1
   d97d6:	4601      	mov	r1, r0
   d97d8:	2002      	movs	r0, #2
   d97da:	f3af 8000 	nop.w
   d97de:	bd10      	pop	{r4, pc}
   d97e0:	4620      	mov	r0, r4
   d97e2:	e7fc      	b.n	d97de <__cxa_atexit+0x12>
   d97e4:	00000000 	.word	0x00000000

000d97e8 <memcpy>:
   d97e8:	440a      	add	r2, r1
   d97ea:	4291      	cmp	r1, r2
   d97ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d97f0:	d100      	bne.n	d97f4 <memcpy+0xc>
   d97f2:	4770      	bx	lr
   d97f4:	b510      	push	{r4, lr}
   d97f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d97fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d97fe:	4291      	cmp	r1, r2
   d9800:	d1f9      	bne.n	d97f6 <memcpy+0xe>
   d9802:	bd10      	pop	{r4, pc}

000d9804 <memset>:
   d9804:	4402      	add	r2, r0
   d9806:	4603      	mov	r3, r0
   d9808:	4293      	cmp	r3, r2
   d980a:	d100      	bne.n	d980e <memset+0xa>
   d980c:	4770      	bx	lr
   d980e:	f803 1b01 	strb.w	r1, [r3], #1
   d9812:	e7f9      	b.n	d9808 <memset+0x4>

000d9814 <srand>:
   d9814:	b538      	push	{r3, r4, r5, lr}
   d9816:	4b0d      	ldr	r3, [pc, #52]	; (d984c <srand+0x38>)
   d9818:	681d      	ldr	r5, [r3, #0]
   d981a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d981c:	4604      	mov	r4, r0
   d981e:	b97b      	cbnz	r3, d9840 <srand+0x2c>
   d9820:	2018      	movs	r0, #24
   d9822:	f7fc fd4d 	bl	d62c0 <malloc>
   d9826:	4a0a      	ldr	r2, [pc, #40]	; (d9850 <srand+0x3c>)
   d9828:	4b0a      	ldr	r3, [pc, #40]	; (d9854 <srand+0x40>)
   d982a:	63a8      	str	r0, [r5, #56]	; 0x38
   d982c:	e9c0 2300 	strd	r2, r3, [r0]
   d9830:	4b09      	ldr	r3, [pc, #36]	; (d9858 <srand+0x44>)
   d9832:	6083      	str	r3, [r0, #8]
   d9834:	230b      	movs	r3, #11
   d9836:	8183      	strh	r3, [r0, #12]
   d9838:	2201      	movs	r2, #1
   d983a:	2300      	movs	r3, #0
   d983c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9840:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9842:	2200      	movs	r2, #0
   d9844:	611c      	str	r4, [r3, #16]
   d9846:	615a      	str	r2, [r3, #20]
   d9848:	bd38      	pop	{r3, r4, r5, pc}
   d984a:	bf00      	nop
   d984c:	2003e3bc 	.word	0x2003e3bc
   d9850:	abcd330e 	.word	0xabcd330e
   d9854:	e66d1234 	.word	0xe66d1234
   d9858:	0005deec 	.word	0x0005deec

000d985c <rand>:
   d985c:	4b13      	ldr	r3, [pc, #76]	; (d98ac <rand+0x50>)
   d985e:	b510      	push	{r4, lr}
   d9860:	681c      	ldr	r4, [r3, #0]
   d9862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9864:	b97b      	cbnz	r3, d9886 <rand+0x2a>
   d9866:	2018      	movs	r0, #24
   d9868:	f7fc fd2a 	bl	d62c0 <malloc>
   d986c:	4a10      	ldr	r2, [pc, #64]	; (d98b0 <rand+0x54>)
   d986e:	4b11      	ldr	r3, [pc, #68]	; (d98b4 <rand+0x58>)
   d9870:	63a0      	str	r0, [r4, #56]	; 0x38
   d9872:	e9c0 2300 	strd	r2, r3, [r0]
   d9876:	4b10      	ldr	r3, [pc, #64]	; (d98b8 <rand+0x5c>)
   d9878:	6083      	str	r3, [r0, #8]
   d987a:	230b      	movs	r3, #11
   d987c:	8183      	strh	r3, [r0, #12]
   d987e:	2201      	movs	r2, #1
   d9880:	2300      	movs	r3, #0
   d9882:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9886:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9888:	480c      	ldr	r0, [pc, #48]	; (d98bc <rand+0x60>)
   d988a:	690a      	ldr	r2, [r1, #16]
   d988c:	694b      	ldr	r3, [r1, #20]
   d988e:	4c0c      	ldr	r4, [pc, #48]	; (d98c0 <rand+0x64>)
   d9890:	4350      	muls	r0, r2
   d9892:	fb04 0003 	mla	r0, r4, r3, r0
   d9896:	fba2 3404 	umull	r3, r4, r2, r4
   d989a:	1c5a      	adds	r2, r3, #1
   d989c:	4404      	add	r4, r0
   d989e:	f144 0000 	adc.w	r0, r4, #0
   d98a2:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d98a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d98aa:	bd10      	pop	{r4, pc}
   d98ac:	2003e3bc 	.word	0x2003e3bc
   d98b0:	abcd330e 	.word	0xabcd330e
   d98b4:	e66d1234 	.word	0xe66d1234
   d98b8:	0005deec 	.word	0x0005deec
   d98bc:	5851f42d 	.word	0x5851f42d
   d98c0:	4c957f2d 	.word	0x4c957f2d

000d98c4 <strcpy>:
   d98c4:	4603      	mov	r3, r0
   d98c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d98ca:	f803 2b01 	strb.w	r2, [r3], #1
   d98ce:	2a00      	cmp	r2, #0
   d98d0:	d1f9      	bne.n	d98c6 <strcpy+0x2>
   d98d2:	4770      	bx	lr

000d98d4 <strdup>:
   d98d4:	4b02      	ldr	r3, [pc, #8]	; (d98e0 <strdup+0xc>)
   d98d6:	4601      	mov	r1, r0
   d98d8:	6818      	ldr	r0, [r3, #0]
   d98da:	f000 b803 	b.w	d98e4 <_strdup_r>
   d98de:	bf00      	nop
   d98e0:	2003e3bc 	.word	0x2003e3bc

000d98e4 <_strdup_r>:
   d98e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d98e6:	4604      	mov	r4, r0
   d98e8:	4608      	mov	r0, r1
   d98ea:	460d      	mov	r5, r1
   d98ec:	f000 f80f 	bl	d990e <strlen>
   d98f0:	1c42      	adds	r2, r0, #1
   d98f2:	4611      	mov	r1, r2
   d98f4:	4620      	mov	r0, r4
   d98f6:	9201      	str	r2, [sp, #4]
   d98f8:	f7fc fd0a 	bl	d6310 <_malloc_r>
   d98fc:	4604      	mov	r4, r0
   d98fe:	b118      	cbz	r0, d9908 <_strdup_r+0x24>
   d9900:	9a01      	ldr	r2, [sp, #4]
   d9902:	4629      	mov	r1, r5
   d9904:	f7ff ff70 	bl	d97e8 <memcpy>
   d9908:	4620      	mov	r0, r4
   d990a:	b003      	add	sp, #12
   d990c:	bd30      	pop	{r4, r5, pc}

000d990e <strlen>:
   d990e:	4603      	mov	r3, r0
   d9910:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9914:	2a00      	cmp	r2, #0
   d9916:	d1fb      	bne.n	d9910 <strlen+0x2>
   d9918:	1a18      	subs	r0, r3, r0
   d991a:	3801      	subs	r0, #1
   d991c:	4770      	bx	lr

000d991e <link_code_end>:
	...

000d9920 <dynalib_user>:
   d9920:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9930:	0000 0000 207b 4122 4354 2231 203a 6425     ....{ "ATC1": %d
   d9940:	202c 4122 5054 2231 203a 6425 202c 4122     , "ATP1": %d, "A
   d9950:	4354 2232 203a 6425 202c 4122 5054 2232     TC2": %d, "ATP2"
   d9960:	203a 6425 202c 4122 5346 2252 203a 6425     : %d, "AFSR": %d
   d9970:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9980:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9990:	2020 2c20 2220 4141 6363 2258 203a 6425        , "AAccX": %d
   d99a0:	202c 4122 6341 5963 3a22 2520 2c64 2220     , "AAccY": %d, "
   d99b0:	4141 6363 225a 203a 6425 202c 4122 7947     AAccZ": %d, "AGy
   d99c0:	5872 3a22 2520 2c64 2220 4741 7279 2259     rX": %d, "AGyrY"
   d99d0:	203a 6425 2020 2020 2020 2020 2020 2020     : %d            
   d99e0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d99f0:	2020 2020 2020 2c20 2220 4741 7279 225a            , "AGyrZ"
   d9a00:	203a 6425 202c 4122 5442 3a22 2520 2c64     : %d, "ABT": %d,
   d9a10:	2220 4d41 6369 3a22 2520 2c64 2220 544d      "AMic": %d, "MT
   d9a20:	3150 3a22 2520 2064 2020 2020 2020 2020     P1": %d         
   d9a30:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9a40:	2020 2020 2020 2020 2020 202c 4d22 5054               , "MTP
   d9a50:	2232 203a 6425 202c 4d22 6341 5863 3a22     2": %d, "MAccX":
   d9a60:	2520 2c64 2220 414d 6363 2259 203a 6425      %d, "MAccY": %d
   d9a70:	202c 4d22 6341 5a63 3a22 2520 2c64 2220     , "MAccZ": %d, "
   d9a80:	474d 7279 2258 203a 6425 2020 2020 2020     MGyrX": %d      
   d9a90:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9aa0:	2020 2020 2020 2020 2020 2020 2c20 2220                  , "
   d9ab0:	474d 7279 2259 203a 6425 202c 4d22 7947     MGyrY": %d, "MGy
   d9ac0:	5a72 3a22 2520 2c64 2220 5248 3a22 2520     rZ": %d, "HR": %
   d9ad0:	2c64 2220 5248 2256 203a 2e25 6631 2020     d, "HRV": %.1f  
   d9ae0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9af0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9b00:	2c20 2220 6142 7474 3a22 2520 312e 2c66      , "Batt": %.1f,
   d9b10:	2220 464d 5253 3a22 2520 2c64 2220 4d4d      "MFSR": %d, "MM
   d9b20:	6369 3a22 2520 7d64 4900 696e 6974 6c61     ic": %d}.Initial
   d9b30:	7a69 7461 6f69 206e 666f 7420 6568 7320     ization of the s
   d9b40:	6e65 6f73 2072 6572 7574 6e72 6465 203a     ensor returned: 
   d9b50:	5400 7972 6e69 2067 6761 6961 2e6e 2e2e     .Trying again...
   d9b60:	5300 6d75 616d 7972 6552 6f70 7472 2200     .SummaryReport."
   d9b70:	007d 4445 3141 7b00 2220 4445 3141 3a22     }.EDA1.{ "EDA1":
   d9b80:	2220 5500 6b6e 6f6e 6e77 5320 6174 7574      ".Unknown Statu
   d9b90:	0073 6c41 206c 7369 7720 6c65 2e6c 4700     s.All is well..G
   d9ba0:	6e65 7265 6c61 4520 7272 726f 4e00 746f     eneral Error.Not
   d9bb0:	4920 706d 656c 656d 746e 6465 5000 7261      Implemented.Par
   d9bc0:	6d61 7465 7265 4520 7272 726f 5700 6f72     ameter Error.Wro
   d9bd0:	676e 4920 0044 6e49 6176 696c 2064 6553     ng ID.Invalid Se
   d9be0:	736e 726f 4400 7461 2061 6e55 6564 6672     nsor.Data Underf
   d9bf0:	6f6c 0077 6553 736e 726f 4e20 746f 5320     low.Sensor Not S
   d9c00:	7075 6f70 7472 6465 0000 0000               upported....

000d9c0c <CSWTCH.31>:
   d9c0c:	9b92 000d 9b9f 000d 9bad 000d 9bbd 000d     ................
   d9c1c:	9bcd 000d 9bd6 000d 9be5 000d 9bf4 000d     ................

000d9c2c <_ZTV13ICM_20948_I2C>:
	...
   d9c34:	5e15 000d                                   .^..

000d9c38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9c40:	63b5 000d 63bb 000d 640b 000d 63c9 000d     .c...c...d...c..
   d9c50:	63b7 000d                                   .c..

000d9c54 <_ZTVN5spark13EthernetClassE>:
	...
   d9c5c:	6983 000d 6979 000d 696f 000d 6965 000d     .i..yi..oi..ei..
   d9c6c:	6959 000d 694d 000d 6941 000d 6939 000d     Yi..Mi..Ai..9i..
   d9c7c:	692f 000d 6925 000d 6c15 000d               /i..%i...l..

000d9c88 <_ZTV7TwoWire>:
	...
   d9c90:	69a1 000d 69eb 000d 69c3 000d 69a3 000d     .i...i...i...i..
   d9ca0:	69cb 000d 69d3 000d 69db 000d 69e3 000d     .i...i...i...i..

000d9cb0 <_ZTV9IPAddress>:
	...
   d9cb8:	6ac9 000d 6ab9 000d 6abb 000d 7061 0070     .j...j...j..app.

000d9cc8 <_ZTVN5spark12NetworkClassE>:
	...
   d9cd0:	6bad 000d 6bb7 000d 6bc1 000d 6bcb 000d     .k...k...k...k..
   d9ce0:	6bd5 000d 6be1 000d 6bed 000d 6bf9 000d     .k...k...k...k..
   d9cf0:	6c01 000d 6c0b 000d 6c15 000d 6977 6972     .l...l...l..wiri
   d9d00:	676e 5300 7379 6574 206d 6c73 6565 2070     ng.System sleep 
   d9d10:	6f63 666e 6769 7275 7461 6f69 206e 7369     configuration is
   d9d20:	6920 766e 6c61 6469 002e 5925 252d 2d6d      invalid..%Y-%m-
   d9d30:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d9d40:	7463 6d69 0065 0000                         ctime...

000d9d48 <_ZTV11USARTSerial>:
	...
   d9d50:	722d 000d 7299 000d 7271 000d 6cfd 000d     -r...r..qr...l..
   d9d60:	7241 000d 725d 000d 724f 000d 726b 000d     Ar..]r..Or..kr..
   d9d70:	722f 000d 7233 000d                         /r..3r..

000d9d78 <_ZTV9USBSerial>:
	...
   d9d80:	732d 000d 7395 000d 736b 000d 6cfd 000d     -s...s..ks...l..
   d9d90:	735d 000d 732f 000d 733f 000d 738f 000d     ]s../s..?s...s..
   d9da0:	734f 000d 7329 000d                         Os..)s..

000d9da8 <_ZTVN5spark9WiFiClassE>:
	...
   d9db0:	7497 000d 748d 000d 7483 000d 7439 000d     .t...t...t..9t..
   d9dc0:	7477 000d 746b 000d 745f 000d 7457 000d     wt..kt.._t..Wt..
   d9dd0:	744d 000d 7443 000d 6c15 000d               Mt..Ct...l..

000d9ddc <_ZSt7nothrow>:
   d9ddc:	0000 0000 6f70 0077 0000 0000               ....pow.....

000d9de8 <TWO52>:
   d9de8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000d9df8 <link_const_variable_data_end>:
   d9df8:	000d4ce1 	.word	0x000d4ce1
   d9dfc:	000d5905 	.word	0x000d5905
   d9e00:	000d638d 	.word	0x000d638d
   d9e04:	000d698d 	.word	0x000d698d
   d9e08:	000d6b9d 	.word	0x000d6b9d
   d9e0c:	000d6ce9 	.word	0x000d6ce9
   d9e10:	000d6df9 	.word	0x000d6df9
   d9e14:	000d71dd 	.word	0x000d71dd
   d9e18:	000d7219 	.word	0x000d7219
   d9e1c:	000d74a1 	.word	0x000d74a1
