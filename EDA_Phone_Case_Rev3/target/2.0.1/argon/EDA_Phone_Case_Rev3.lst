
/Users/ethan/Desktop/EDA_Phone_Case_Code_Repo/EDA_Phone_Case_Rev3/target/2.0.1/argon/EDA_Phone_Case_Rev3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006080  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da0a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003e394  000da0a4  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003d0  2003e420  2003e420  0002e420  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000da130  000da130  0002a130  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da158  000da158  0002a158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00182341  00000000  00000000  0002a15c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000199f3  00000000  00000000  001ac49d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00030270  00000000  00000000  001c5e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c78  00000000  00000000  001f6100  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007da0  00000000  00000000  001f8d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d706  00000000  00000000  00200b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000412ae  00000000  00000000  0023e21e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111364  00000000  00000000  0027f4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007da4  00000000  00000000  00390830  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fd11 	bl	d9a58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fd19 	bl	d9a74 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e394 	.word	0x2003e394
   d404c:	000da0a4 	.word	0x000da0a4
   d4050:	2003e420 	.word	0x2003e420
   d4054:	2003e420 	.word	0x2003e420
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fbc9 	bl	d77f8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da078 	.word	0x000da078
   d4080:	000da0a0 	.word	0x000da0a0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 beaa 	b.w	d4ddc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 f819 	bl	d50c0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bb73 	b.w	d777c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b91f 	b.w	d62d8 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b91d 	b.w	d62d8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b923 	b.w	d62e8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <ICM_20948_execute_w>:
	pdev->_serif = s;
	return ICM_20948_Stat_Ok;
}

ICM_20948_Status_e ICM_20948_execute_w(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40b2:	b410      	push	{r4}
   d40b4:	4604      	mov	r4, r0
   d40b6:	4608      	mov	r0, r1
   d40b8:	4611      	mov	r1, r2
   d40ba:	461a      	mov	r2, r3
	if (pdev->_serif->write == NULL)
   d40bc:	6823      	ldr	r3, [r4, #0]
   d40be:	681c      	ldr	r4, [r3, #0]
   d40c0:	b124      	cbz	r4, d40cc <ICM_20948_execute_w+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40c2:	46a4      	mov	ip, r4
   d40c4:	689b      	ldr	r3, [r3, #8]
}
   d40c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->write)(regaddr, pdata, len, pdev->_serif->user);
   d40ca:	4760      	bx	ip
}
   d40cc:	2002      	movs	r0, #2
   d40ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40d2:	4770      	bx	lr

000d40d4 <ICM_20948_execute_r>:

ICM_20948_Status_e ICM_20948_execute_r(ICM_20948_Device_t *pdev, uint8_t regaddr, uint8_t *pdata, uint32_t len)
{
   d40d4:	b410      	push	{r4}
   d40d6:	4604      	mov	r4, r0
   d40d8:	4608      	mov	r0, r1
   d40da:	4611      	mov	r1, r2
   d40dc:	461a      	mov	r2, r3
	if (pdev->_serif->read == NULL)
   d40de:	6823      	ldr	r3, [r4, #0]
   d40e0:	685c      	ldr	r4, [r3, #4]
   d40e2:	b124      	cbz	r4, d40ee <ICM_20948_execute_r+0x1a>
	{
		return ICM_20948_Stat_NotImpl;
	}
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40e4:	46a4      	mov	ip, r4
   d40e6:	689b      	ldr	r3, [r3, #8]
}
   d40e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	return (*pdev->_serif->read)(regaddr, pdata, len, pdev->_serif->user);
   d40ec:	4760      	bx	ip
}
   d40ee:	2002      	movs	r0, #2
   d40f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   d40f4:	4770      	bx	lr

000d40f6 <ICM_20948_set_bank>:
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
}

ICM_20948_Status_e ICM_20948_set_bank(ICM_20948_Device_t *pdev, uint8_t bank)
{
	if (bank > 3)
   d40f6:	2903      	cmp	r1, #3
{
   d40f8:	b507      	push	{r0, r1, r2, lr}
	if (bank > 3)
   d40fa:	d80b      	bhi.n	d4114 <ICM_20948_set_bank+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}						   // Only 4 possible banks
	bank = (bank << 4) & 0x30; // bits 5:4 of REG_BANK_SEL
   d40fc:	0109      	lsls	r1, r1, #4
   d40fe:	f88d 1007 	strb.w	r1, [sp, #7]
	return ICM_20948_execute_w(pdev, REG_BANK_SEL, &bank, 1);
   d4102:	2301      	movs	r3, #1
   d4104:	f10d 0207 	add.w	r2, sp, #7
   d4108:	217f      	movs	r1, #127	; 0x7f
   d410a:	f7ff ffd2 	bl	d40b2 <ICM_20948_execute_w>
}
   d410e:	b003      	add	sp, #12
   d4110:	f85d fb04 	ldr.w	pc, [sp], #4
		return ICM_20948_Stat_ParamErr;
   d4114:	2003      	movs	r0, #3
   d4116:	e7fa      	b.n	d410e <ICM_20948_set_bank+0x18>

000d4118 <ICM_20948_i2c_master_slv4_txn>:
{
   d4118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d411c:	b085      	sub	sp, #20
   d411e:	461d      	mov	r5, r3
   d4120:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
   d4124:	f88d 2006 	strb.w	r2, [sp, #6]
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4128:	2e00      	cmp	r6, #0
   d412a:	bf14      	ite	ne
   d412c:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
   d4130:	2300      	moveq	r3, #0
   d4132:	4319      	orrs	r1, r3
{
   d4134:	4604      	mov	r4, r0
	addr = (((Rw) ? 0x80 : 0x00) | addr);
   d4136:	f88d 1007 	strb.w	r1, [sp, #7]
	retval = ICM_20948_set_bank(pdev, 3);
   d413a:	2103      	movs	r1, #3
   d413c:	f7ff ffdb 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_ADDR, (uint8_t *)&addr, 1);
   d4140:	2301      	movs	r3, #1
   d4142:	f10d 0207 	add.w	r2, sp, #7
   d4146:	2113      	movs	r1, #19
   d4148:	4620      	mov	r0, r4
   d414a:	f7ff ffb2 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d414e:	2800      	cmp	r0, #0
   d4150:	d168      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	retval = ICM_20948_set_bank(pdev, 3);
   d4152:	2103      	movs	r1, #3
   d4154:	4620      	mov	r0, r4
   d4156:	f7ff ffce 	bl	d40f6 <ICM_20948_set_bank>
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_REG, (uint8_t *)&reg, 1);
   d415a:	2301      	movs	r3, #1
   d415c:	f10d 0206 	add.w	r2, sp, #6
   d4160:	2114      	movs	r1, #20
   d4162:	4620      	mov	r0, r4
   d4164:	f7ff ffa5 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d4168:	2800      	cmp	r0, #0
   d416a:	d15b      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
	ctrl.REG_DIS = !send_reg_addr;
   d416c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	while (nByte < len)
   d4170:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	ctrl.REG_DIS = !send_reg_addr;
   d4174:	f082 0201 	eor.w	r2, r2, #1
	ctrl.DLY = 0;
   d4178:	0152      	lsls	r2, r2, #5
   d417a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   d417e:	f88d 2008 	strb.w	r2, [sp, #8]
	while (nByte < len)
   d4182:	4607      	mov	r7, r0
   d4184:	fa1f f989 	uxth.w	r9, r9
   d4188:	b2bb      	uxth	r3, r7
   d418a:	4599      	cmp	r9, r3
   d418c:	d94a      	bls.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		if (!Rw)
   d418e:	2e00      	cmp	r6, #0
   d4190:	d03c      	beq.n	d420c <ICM_20948_i2c_master_slv4_txn+0xf4>
		retval = ICM_20948_set_bank(pdev, 3);
   d4192:	2103      	movs	r1, #3
   d4194:	4620      	mov	r0, r4
   d4196:	f7ff ffae 	bl	d40f6 <ICM_20948_set_bank>
		retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLV4_CTRL_t));
   d419a:	2301      	movs	r3, #1
   d419c:	aa02      	add	r2, sp, #8
   d419e:	2115      	movs	r1, #21
   d41a0:	4620      	mov	r0, r4
   d41a2:	f7ff ff86 	bl	d40b2 <ICM_20948_execute_w>
		if (retval != ICM_20948_Stat_Ok)
   d41a6:	2800      	cmp	r0, #0
   d41a8:	d13c      	bne.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>
		uint32_t count = 0;
   d41aa:	4680      	mov	r8, r0
			retval = ICM_20948_set_bank(pdev, 0);
   d41ac:	2100      	movs	r1, #0
   d41ae:	4620      	mov	r0, r4
   d41b0:	f7ff ffa1 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB0_REG_I2C_MST_STATUS, (uint8_t *)&i2c_mst_status, 1);
   d41b4:	2301      	movs	r3, #1
   d41b6:	aa03      	add	r2, sp, #12
   d41b8:	2117      	movs	r1, #23
   d41ba:	4620      	mov	r0, r4
   d41bc:	f7ff ff8a 	bl	d40d4 <ICM_20948_execute_r>
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
			slave4Done |= (count >= max_cycles);
   d41c4:	f240 31e7 	movw	r1, #999	; 0x3e7
			slave4Done = (i2c_mst_status.I2C_SLV4_DONE /*| (millis() > tsTimeout) */); //Avoid forever-loops
   d41c8:	461a      	mov	r2, r3
   d41ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
   d41ce:	4588      	cmp	r8, r1
   d41d0:	bf88      	it	hi
   d41d2:	f043 0301 	orrhi.w	r3, r3, #1
		while (!slave4Done)
   d41d6:	07db      	lsls	r3, r3, #31
			count++;
   d41d8:	f108 0801 	add.w	r8, r8, #1
		while (!slave4Done)
   d41dc:	d5e6      	bpl.n	d41ac <ICM_20948_i2c_master_slv4_txn+0x94>
		txn_failed = (i2c_mst_status.I2C_SLV4_NACK /*| (millis() > tsTimeout) */);
   d41de:	f3c2 1300 	ubfx	r3, r2, #4, #1
		if (txn_failed)
   d41e2:	4588      	cmp	r8, r1
   d41e4:	bf94      	ite	ls
   d41e6:	4698      	movls	r8, r3
   d41e8:	f043 0801 	orrhi.w	r8, r3, #1
   d41ec:	f018 0f01 	tst.w	r8, #1
   d41f0:	d11b      	bne.n	d422a <ICM_20948_i2c_master_slv4_txn+0x112>
		if (Rw)
   d41f2:	b14e      	cbz	r6, d4208 <ICM_20948_i2c_master_slv4_txn+0xf0>
			retval = ICM_20948_set_bank(pdev, 3);
   d41f4:	2103      	movs	r1, #3
   d41f6:	4620      	mov	r0, r4
   d41f8:	f7ff ff7d 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_SLV4_DI, &data[nByte], 1);
   d41fc:	2301      	movs	r3, #1
   d41fe:	19ea      	adds	r2, r5, r7
   d4200:	2117      	movs	r1, #23
   d4202:	4620      	mov	r0, r4
   d4204:	f7ff ff66 	bl	d40d4 <ICM_20948_execute_r>
		nByte++;
   d4208:	3701      	adds	r7, #1
   d420a:	e7bd      	b.n	d4188 <ICM_20948_i2c_master_slv4_txn+0x70>
			retval = ICM_20948_set_bank(pdev, 3);
   d420c:	2103      	movs	r1, #3
   d420e:	4620      	mov	r0, r4
   d4210:	f7ff ff71 	bl	d40f6 <ICM_20948_set_bank>
			retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_SLV4_DO, (uint8_t *)&(data[nByte]), 1);
   d4214:	2301      	movs	r3, #1
   d4216:	19ea      	adds	r2, r5, r7
   d4218:	2116      	movs	r1, #22
   d421a:	4620      	mov	r0, r4
   d421c:	f7ff ff49 	bl	d40b2 <ICM_20948_execute_w>
			if (retval != ICM_20948_Stat_Ok)
   d4220:	2800      	cmp	r0, #0
   d4222:	d0b6      	beq.n	d4192 <ICM_20948_i2c_master_slv4_txn+0x7a>
}
   d4224:	b005      	add	sp, #20
   d4226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ICM_20948_Stat_Err;
   d422a:	2001      	movs	r0, #1
   d422c:	e7fa      	b.n	d4224 <ICM_20948_i2c_master_slv4_txn+0x10c>

000d422e <ICM_20948_i2c_master_single_w>:
{
   d422e:	b530      	push	{r4, r5, lr}
   d4230:	b085      	sub	sp, #20
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, false, true);
   d4232:	2401      	movs	r4, #1
   d4234:	2500      	movs	r5, #0
   d4236:	e9cd 5401 	strd	r5, r4, [sp, #4]
   d423a:	9400      	str	r4, [sp, #0]
   d423c:	f7ff ff6c 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4240:	b005      	add	sp, #20
   d4242:	bd30      	pop	{r4, r5, pc}

000d4244 <ICM_20948_i2c_master_single_r>:
{
   d4244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return ICM_20948_i2c_master_slv4_txn(pdev, addr, reg, data, 1, true, true);
   d4246:	2401      	movs	r4, #1
   d4248:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d424c:	9400      	str	r4, [sp, #0]
   d424e:	f7ff ff63 	bl	d4118 <ICM_20948_i2c_master_slv4_txn>
}
   d4252:	b004      	add	sp, #16
   d4254:	bd10      	pop	{r4, pc}

000d4256 <ICM_20948_sw_reset>:

ICM_20948_Status_e ICM_20948_sw_reset(ICM_20948_Device_t *pdev)
{
   d4256:	b513      	push	{r0, r1, r4, lr}
   d4258:	4604      	mov	r4, r0
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d425a:	2100      	movs	r1, #0
   d425c:	f7ff ff4b 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4260:	2301      	movs	r3, #1
   d4262:	aa01      	add	r2, sp, #4
   d4264:	2106      	movs	r1, #6
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff34 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d426c:	b958      	cbnz	r0, d4286 <ICM_20948_sw_reset+0x30>
	{
		return retval;
	}

	reg.DEVICE_RESET = 1;
   d426e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4276:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d427a:	aa01      	add	r2, sp, #4
   d427c:	2301      	movs	r3, #1
   d427e:	2106      	movs	r1, #6
   d4280:	4620      	mov	r0, r4
   d4282:	f7ff ff16 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d4286:	b002      	add	sp, #8
   d4288:	bd10      	pop	{r4, pc}

000d428a <ICM_20948_sleep>:

ICM_20948_Status_e ICM_20948_sleep(ICM_20948_Device_t *pdev, bool on)
{
   d428a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d428c:	4604      	mov	r4, r0
   d428e:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4290:	2100      	movs	r1, #0
   d4292:	f7ff ff30 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d4296:	2301      	movs	r3, #1
   d4298:	aa01      	add	r2, sp, #4
   d429a:	2106      	movs	r1, #6
   d429c:	4620      	mov	r0, r4
   d429e:	f7ff ff19 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42a2:	b958      	cbnz	r0, d42bc <ICM_20948_sleep+0x32>
	{
		return retval;
	}

	if (on)
   d42a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42a8:	f365 1386 	bfi	r3, r5, #6, #1
   d42ac:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.SLEEP = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42b0:	aa01      	add	r2, sp, #4
   d42b2:	2301      	movs	r3, #1
   d42b4:	2106      	movs	r1, #6
   d42b6:	4620      	mov	r0, r4
   d42b8:	f7ff fefb 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42bc:	b003      	add	sp, #12
   d42be:	bd30      	pop	{r4, r5, pc}

000d42c0 <ICM_20948_low_power>:

ICM_20948_Status_e ICM_20948_low_power(ICM_20948_Device_t *pdev, bool on)
{
   d42c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42c2:	4604      	mov	r4, r0
   d42c4:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_PWR_MGMT_1_t reg;

	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42c6:	2100      	movs	r1, #0
   d42c8:	f7ff ff15 	bl	d40f6 <ICM_20948_set_bank>

	retval = ICM_20948_execute_r(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42cc:	2301      	movs	r3, #1
   d42ce:	aa01      	add	r2, sp, #4
   d42d0:	2106      	movs	r1, #6
   d42d2:	4620      	mov	r0, r4
   d42d4:	f7ff fefe 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d42d8:	b958      	cbnz	r0, d42f2 <ICM_20948_low_power+0x32>
	{
		return retval;
	}

	if (on)
   d42da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d42de:	f365 1345 	bfi	r3, r5, #5, #1
   d42e2:	f88d 3004 	strb.w	r3, [sp, #4]
	else
	{
		reg.LP_EN = 0;
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_PWR_MGMT_1, (uint8_t *)&reg, sizeof(ICM_20948_PWR_MGMT_1_t));
   d42e6:	aa01      	add	r2, sp, #4
   d42e8:	2301      	movs	r3, #1
   d42ea:	2106      	movs	r1, #6
   d42ec:	4620      	mov	r0, r4
   d42ee:	f7ff fee0 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d42f2:	b003      	add	sp, #12
   d42f4:	bd30      	pop	{r4, r5, pc}

000d42f6 <ICM_20948_get_who_am_i>:
	}
	return retval;
}

ICM_20948_Status_e ICM_20948_get_who_am_i(ICM_20948_Device_t *pdev, uint8_t *whoami)
{
   d42f6:	b570      	push	{r4, r5, r6, lr}
   d42f8:	4605      	mov	r5, r0
	if (whoami == NULL)
   d42fa:	460c      	mov	r4, r1
   d42fc:	b151      	cbz	r1, d4314 <ICM_20948_get_who_am_i+0x1e>
	{
		return ICM_20948_Stat_ParamErr;
	}
	ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d42fe:	2100      	movs	r1, #0
   d4300:	f7ff fef9 	bl	d40f6 <ICM_20948_set_bank>
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d4304:	4622      	mov	r2, r4
   d4306:	4628      	mov	r0, r5
   d4308:	2301      	movs	r3, #1
}
   d430a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return ICM_20948_execute_r(pdev, AGB0_REG_WHO_AM_I, whoami, 1);
   d430e:	2100      	movs	r1, #0
   d4310:	f7ff bee0 	b.w	d40d4 <ICM_20948_execute_r>
}
   d4314:	2003      	movs	r0, #3
   d4316:	bd70      	pop	{r4, r5, r6, pc}

000d4318 <ICM_20948_check_id>:

ICM_20948_Status_e ICM_20948_check_id(ICM_20948_Device_t *pdev)
{
   d4318:	b507      	push	{r0, r1, r2, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	uint8_t whoami = 0x00;
   d431a:	2300      	movs	r3, #0
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d431c:	f10d 0107 	add.w	r1, sp, #7
	uint8_t whoami = 0x00;
   d4320:	f88d 3007 	strb.w	r3, [sp, #7]
	retval = ICM_20948_get_who_am_i(pdev, &whoami);
   d4324:	f7ff ffe7 	bl	d42f6 <ICM_20948_get_who_am_i>
	if (retval != ICM_20948_Stat_Ok)
   d4328:	b920      	cbnz	r0, d4334 <ICM_20948_check_id+0x1c>
	{
		return retval;
	}
	if (whoami != ICM_20948_WHOAMI)
   d432a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d432e:	2bea      	cmp	r3, #234	; 0xea
	{
		return ICM_20948_Stat_WrongID;
   d4330:	bf18      	it	ne
   d4332:	2004      	movne	r0, #4
	}
	return retval;
}
   d4334:	b003      	add	sp, #12
   d4336:	f85d fb04 	ldr.w	pc, [sp], #4

000d433a <ICM_20948_set_sample_mode>:
ICM_20948_Status_e ICM_20948_set_sample_mode(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_LP_CONFIG_CYCLE_e mode)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	ICM_20948_LP_CONFIG_t reg;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d433a:	f011 0f13 	tst.w	r1, #19
{
   d433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4340:	4606      	mov	r6, r0
   d4342:	460c      	mov	r4, r1
   d4344:	4615      	mov	r5, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr | ICM_20948_Internal_Mst)))
   d4346:	d02a      	beq.n	d439e <ICM_20948_set_sample_mode+0x64>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	retval = ICM_20948_set_bank(pdev, 0); // Must be in the right bank
   d4348:	2100      	movs	r1, #0
   d434a:	f7ff fed4 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d434e:	bb20      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d4350:	2301      	movs	r3, #1
   d4352:	aa01      	add	r2, sp, #4
   d4354:	2105      	movs	r1, #5
   d4356:	4630      	mov	r0, r6
   d4358:	f7ff febc 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d435c:	b9e8      	cbnz	r0, d439a <ICM_20948_set_sample_mode+0x60>
	{
		return retval;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d435e:	07e1      	lsls	r1, r4, #31
	{
		reg.ACCEL_CYCLE = mode;
   d4360:	bf42      	ittt	mi
   d4362:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4366:	f365 1345 	bfimi	r3, r5, #5, #1
   d436a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	} // Set all desired sensors to this setting
	if (sensors & ICM_20948_Internal_Gyr)
   d436e:	07a2      	lsls	r2, r4, #30
	{
		reg.GYRO_CYCLE = mode;
   d4370:	bf42      	ittt	mi
   d4372:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4376:	f365 1304 	bfimi	r3, r5, #4, #1
   d437a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}
	if (sensors & ICM_20948_Internal_Mst)
   d437e:	06e3      	lsls	r3, r4, #27
	{
		reg.I2C_MST_CYCLE = mode;
   d4380:	bf42      	ittt	mi
   d4382:	f89d 3004 	ldrbmi.w	r3, [sp, #4]
   d4386:	f365 1386 	bfimi	r3, r5, #6, #1
   d438a:	f88d 3004 	strbmi.w	r3, [sp, #4]
	}

	retval = ICM_20948_execute_w(pdev, AGB0_REG_LP_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_LP_CONFIG_t));
   d438e:	aa01      	add	r2, sp, #4
   d4390:	2301      	movs	r3, #1
   d4392:	2105      	movs	r1, #5
   d4394:	4630      	mov	r0, r6
   d4396:	f7ff fe8c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d439a:	b002      	add	sp, #8
   d439c:	bd70      	pop	{r4, r5, r6, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d439e:	2007      	movs	r0, #7
   d43a0:	e7fb      	b.n	d439a <ICM_20948_set_sample_mode+0x60>

000d43a2 <ICM_20948_set_full_scale>:

ICM_20948_Status_e ICM_20948_set_full_scale(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_fss_t fss)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43a2:	f011 0f03 	tst.w	r1, #3
{
   d43a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d43aa:	4606      	mov	r6, r0
   d43ac:	4688      	mov	r8, r1
   d43ae:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d43b0:	d041      	beq.n	d4436 <ICM_20948_set_full_scale+0x94>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d43b2:	f011 0401 	ands.w	r4, r1, #1
   d43b6:	d019      	beq.n	d43ec <ICM_20948_set_full_scale+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43b8:	2102      	movs	r1, #2
   d43ba:	f7ff fe9c 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43be:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43c0:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43c2:	aa01      	add	r2, sp, #4
   d43c4:	2114      	movs	r1, #20
   d43c6:	4630      	mov	r0, r6
   d43c8:	f7ff fe84 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_FS_SEL = fss.a;
   d43cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d0:	4328      	orrs	r0, r5
		reg.ACCEL_FS_SEL = fss.a;
   d43d2:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43d6:	b2c4      	uxtb	r4, r0
		reg.ACCEL_FS_SEL = fss.a;
   d43d8:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d43dc:	aa01      	add	r2, sp, #4
   d43de:	2301      	movs	r3, #1
   d43e0:	2114      	movs	r1, #20
   d43e2:	4630      	mov	r0, r6
   d43e4:	f7ff fe65 	bl	d40b2 <ICM_20948_execute_w>
   d43e8:	4304      	orrs	r4, r0
   d43ea:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d43ec:	f018 0f02 	tst.w	r8, #2
   d43f0:	d01d      	beq.n	d442e <ICM_20948_set_full_scale+0x8c>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43f2:	2102      	movs	r1, #2
   d43f4:	4630      	mov	r0, r6
   d43f6:	f7ff fe7e 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d43fa:	2301      	movs	r3, #1
   d43fc:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d43fe:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4400:	aa01      	add	r2, sp, #4
   d4402:	4630      	mov	r0, r6
   d4404:	f7ff fe66 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_FS_SEL = fss.g;
   d4408:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d440c:	f3c7 0781 	ubfx	r7, r7, #2, #2
   d4410:	f367 0342 	bfi	r3, r7, #1, #2
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4414:	4328      	orrs	r0, r5
		reg.GYRO_FS_SEL = fss.g;
   d4416:	f88d 3004 	strb.w	r3, [sp, #4]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441a:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441c:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d441e:	aa01      	add	r2, sp, #4
   d4420:	4619      	mov	r1, r3
   d4422:	4630      	mov	r0, r6
   d4424:	f7ff fe45 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4428:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d442a:	4304      	orrs	r4, r0
   d442c:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d442e:	4620      	mov	r0, r4
   d4430:	b002      	add	sp, #8
   d4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4436:	2407      	movs	r4, #7
   d4438:	e7f9      	b.n	d442e <ICM_20948_set_full_scale+0x8c>

000d443a <ICM_20948_set_dlpf_cfg>:

ICM_20948_Status_e ICM_20948_set_dlpf_cfg(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, ICM_20948_dlpcfg_t cfg)
{
   d443a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d443c:	b085      	sub	sp, #20
   d443e:	4606      	mov	r6, r0
   d4440:	f8ad 2004 	strh.w	r2, [sp, #4]
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4444:	078a      	lsls	r2, r1, #30
{
   d4446:	460f      	mov	r7, r1
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d4448:	d042      	beq.n	d44d0 <ICM_20948_set_dlpf_cfg+0x96>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d444a:	f011 0401 	ands.w	r4, r1, #1
   d444e:	d01c      	beq.n	d448a <ICM_20948_set_dlpf_cfg+0x50>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4450:	2102      	movs	r1, #2
   d4452:	f7ff fe50 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4456:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4458:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d445a:	aa03      	add	r2, sp, #12
   d445c:	2114      	movs	r1, #20
   d445e:	4630      	mov	r0, r6
   d4460:	f7ff fe38 	bl	d40d4 <ICM_20948_execute_r>
		reg.ACCEL_DLPFCFG = cfg.a;
   d4464:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4468:	f89d 2004 	ldrb.w	r2, [sp, #4]
   d446c:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4470:	4305      	orrs	r5, r0
		reg.ACCEL_DLPFCFG = cfg.a;
   d4472:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4476:	aa03      	add	r2, sp, #12
   d4478:	2301      	movs	r3, #1
   d447a:	2114      	movs	r1, #20
   d447c:	4630      	mov	r0, r6
   d447e:	f7ff fe18 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4482:	b2ed      	uxtb	r5, r5
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d4484:	ea45 0400 	orr.w	r4, r5, r0
   d4488:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d448a:	07bb      	lsls	r3, r7, #30
   d448c:	d51d      	bpl.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d448e:	2102      	movs	r1, #2
   d4490:	4630      	mov	r0, r6
   d4492:	f7ff fe30 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4496:	2301      	movs	r3, #1
   d4498:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d449a:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d449c:	aa03      	add	r2, sp, #12
   d449e:	4630      	mov	r0, r6
   d44a0:	f7ff fe18 	bl	d40d4 <ICM_20948_execute_r>
		reg.GYRO_DLPFCFG = cfg.g;
   d44a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d44a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d44ac:	f362 03c5 	bfi	r3, r2, #3, #3
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b0:	4328      	orrs	r0, r5
		reg.GYRO_DLPFCFG = cfg.g;
   d44b2:	f88d 300c 	strb.w	r3, [sp, #12]
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b6:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44b8:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44ba:	aa03      	add	r2, sp, #12
   d44bc:	4619      	mov	r1, r3
   d44be:	4630      	mov	r0, r6
   d44c0:	f7ff fdf7 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c4:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d44c6:	4304      	orrs	r4, r0
   d44c8:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d44ca:	4620      	mov	r0, r4
   d44cc:	b005      	add	sp, #20
   d44ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d44d0:	2407      	movs	r4, #7
   d44d2:	e7fa      	b.n	d44ca <ICM_20948_set_dlpf_cfg+0x90>

000d44d4 <ICM_20948_enable_dlpf>:

ICM_20948_Status_e ICM_20948_enable_dlpf(ICM_20948_Device_t *pdev, ICM_20948_InternalSensorID_bm sensors, bool enable)
{
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44d4:	f011 0f03 	tst.w	r1, #3
{
   d44d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44dc:	4606      	mov	r6, r0
   d44de:	4688      	mov	r8, r1
   d44e0:	4617      	mov	r7, r2
	if (!(sensors & (ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr)))
   d44e2:	d03f      	beq.n	d4564 <ICM_20948_enable_dlpf+0x90>
	{
		return ICM_20948_Stat_SensorNotSupported;
	}

	if (sensors & ICM_20948_Internal_Acc)
   d44e4:	f011 0401 	ands.w	r4, r1, #1
   d44e8:	d019      	beq.n	d451e <ICM_20948_enable_dlpf+0x4a>
	{
		ICM_20948_ACCEL_CONFIG_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44ea:	2102      	movs	r1, #2
   d44ec:	f7ff fe03 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f0:	2301      	movs	r3, #1
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d44f2:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d44f4:	aa01      	add	r2, sp, #4
   d44f6:	2114      	movs	r1, #20
   d44f8:	4630      	mov	r0, r6
   d44fa:	f7ff fdeb 	bl	d40d4 <ICM_20948_execute_r>
   d44fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4502:	4328      	orrs	r0, r5
   d4504:	f367 0300 	bfi	r3, r7, #0, #1
   d4508:	b2c4      	uxtb	r4, r0
		if (enable)
   d450a:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.ACCEL_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_ACCEL_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_ACCEL_CONFIG_t));
   d450e:	aa01      	add	r2, sp, #4
   d4510:	2301      	movs	r3, #1
   d4512:	2114      	movs	r1, #20
   d4514:	4630      	mov	r0, r6
   d4516:	f7ff fdcc 	bl	d40b2 <ICM_20948_execute_w>
   d451a:	4304      	orrs	r4, r0
   d451c:	b2e4      	uxtb	r4, r4
	}
	if (sensors & ICM_20948_Internal_Gyr)
   d451e:	f018 0f02 	tst.w	r8, #2
   d4522:	d01b      	beq.n	d455c <ICM_20948_enable_dlpf+0x88>
	{
		ICM_20948_GYRO_CONFIG_1_t reg;
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4524:	2102      	movs	r1, #2
   d4526:	4630      	mov	r0, r6
   d4528:	f7ff fde5 	bl	d40f6 <ICM_20948_set_bank>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d452c:	2301      	movs	r3, #1
   d452e:	4619      	mov	r1, r3
		retval |= ICM_20948_set_bank(pdev, 2); // Must be in the right bank
   d4530:	4605      	mov	r5, r0
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4532:	aa01      	add	r2, sp, #4
   d4534:	4630      	mov	r0, r6
   d4536:	f7ff fdcd 	bl	d40d4 <ICM_20948_execute_r>
   d453a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d453e:	f367 0300 	bfi	r3, r7, #0, #1
   d4542:	4328      	orrs	r0, r5
   d4544:	f88d 3004 	strb.w	r3, [sp, #4]
		}
		else
		{
			reg.GYRO_FCHOICE = 0;
		}
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4548:	2301      	movs	r3, #1
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454a:	4304      	orrs	r4, r0
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d454c:	aa01      	add	r2, sp, #4
   d454e:	4619      	mov	r1, r3
   d4550:	4630      	mov	r0, r6
   d4552:	f7ff fdae 	bl	d40b2 <ICM_20948_execute_w>
		retval |= ICM_20948_execute_r(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4556:	b2e4      	uxtb	r4, r4
		retval |= ICM_20948_execute_w(pdev, AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&reg, sizeof(ICM_20948_GYRO_CONFIG_1_t));
   d4558:	4304      	orrs	r4, r0
   d455a:	b2e4      	uxtb	r4, r4
	}
	return retval;
}
   d455c:	4620      	mov	r0, r4
   d455e:	b002      	add	sp, #8
   d4560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_SensorNotSupported;
   d4564:	2407      	movs	r4, #7
   d4566:	e7f9      	b.n	d455c <ICM_20948_enable_dlpf+0x88>

000d4568 <ICM_20948_i2c_master_passthrough>:
	return retval;
}

// Interface Things
ICM_20948_Status_e ICM_20948_i2c_master_passthrough(ICM_20948_Device_t *pdev, bool passthrough)
{
   d4568:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d456a:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_INT_PIN_CFG_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d456c:	2100      	movs	r1, #0
{
   d456e:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d4570:	f7ff fdc1 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4574:	b990      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4576:	2301      	movs	r3, #1
   d4578:	aa01      	add	r2, sp, #4
   d457a:	210f      	movs	r1, #15
   d457c:	4620      	mov	r0, r4
   d457e:	f7ff fda9 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4582:	b958      	cbnz	r0, d459c <ICM_20948_i2c_master_passthrough+0x34>
	{
		return retval;
	}
	reg.BYPASS_EN = passthrough;
   d4584:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4588:	f365 0341 	bfi	r3, r5, #1, #1
   d458c:	f88d 3004 	strb.w	r3, [sp, #4]
	retval = ICM_20948_execute_w(pdev, AGB0_REG_INT_PIN_CONFIG, (uint8_t *)&reg, sizeof(ICM_20948_INT_PIN_CFG_t));
   d4590:	aa01      	add	r2, sp, #4
   d4592:	2301      	movs	r3, #1
   d4594:	210f      	movs	r1, #15
   d4596:	4620      	mov	r0, r4
   d4598:	f7ff fd8b 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d459c:	b003      	add	sp, #12
   d459e:	bd30      	pop	{r4, r5, pc}

000d45a0 <ICM_20948_i2c_master_enable>:

ICM_20948_Status_e ICM_20948_i2c_master_enable(ICM_20948_Device_t *pdev, bool enable)
{
   d45a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45a2:	460d      	mov	r5, r1
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	// Disable BYPASS_EN
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a4:	2100      	movs	r1, #0
{
   d45a6:	4604      	mov	r4, r0
	retval = ICM_20948_i2c_master_passthrough(pdev, false);
   d45a8:	f7ff ffde 	bl	d4568 <ICM_20948_i2c_master_passthrough>
	if (retval != ICM_20948_Stat_Ok)
   d45ac:	bb90      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_I2C_MST_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 3);
   d45ae:	2103      	movs	r1, #3
   d45b0:	4620      	mov	r0, r4
   d45b2:	f7ff fda0 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45b6:	bb68      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45b8:	2301      	movs	r3, #1
   d45ba:	466a      	mov	r2, sp
   d45bc:	4619      	mov	r1, r3
   d45be:	4620      	mov	r0, r4
   d45c0:	f7ff fd88 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45c4:	bb30      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	ctrl.I2C_MST_CLK = 0x07; // corresponds to 345.6 kHz, good for up to 400 kHz
   d45c6:	f89d 3000 	ldrb.w	r3, [sp]
   d45ca:	f023 031f 	bic.w	r3, r3, #31
   d45ce:	f043 0317 	orr.w	r3, r3, #23
   d45d2:	f88d 3000 	strb.w	r3, [sp]
	ctrl.I2C_MST_P_NSR = 1;
	retval = ICM_20948_execute_w(pdev, AGB3_REG_I2C_MST_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_MST_CTRL_t));
   d45d6:	2301      	movs	r3, #1
   d45d8:	466a      	mov	r2, sp
   d45da:	4619      	mov	r1, r3
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff fd68 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d45e2:	b9b8      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}

	ICM_20948_USER_CTRL_t reg;
	retval = ICM_20948_set_bank(pdev, 0);
   d45e4:	4601      	mov	r1, r0
   d45e6:	4620      	mov	r0, r4
   d45e8:	f7ff fd85 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d45ec:	b990      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d45ee:	2301      	movs	r3, #1
   d45f0:	aa01      	add	r2, sp, #4
   d45f2:	2103      	movs	r1, #3
   d45f4:	4620      	mov	r0, r4
   d45f6:	f7ff fd6d 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d45fa:	b958      	cbnz	r0, d4614 <ICM_20948_i2c_master_enable+0x74>
	{
		return retval;
	}
	if (enable)
   d45fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4600:	f365 1345 	bfi	r3, r5, #5, #1
   d4604:	f88d 3004 	strb.w	r3, [sp, #4]
	}
	else
	{
		reg.I2C_MST_EN = 0;
	}
	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&reg, sizeof(ICM_20948_USER_CTRL_t));
   d4608:	aa01      	add	r2, sp, #4
   d460a:	2301      	movs	r3, #1
   d460c:	2103      	movs	r1, #3
   d460e:	4620      	mov	r0, r4
   d4610:	f7ff fd4f 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d4614:	b003      	add	sp, #12
   d4616:	bd30      	pop	{r4, r5, pc}

000d4618 <ICM_20948_i2c_master_reset>:

ICM_20948_Status_e ICM_20948_i2c_master_reset(ICM_20948_Device_t *pdev)
{
   d4618:	b513      	push	{r0, r1, r4, lr}
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;

	ICM_20948_USER_CTRL_t ctrl;
	retval = ICM_20948_set_bank(pdev, 0);
   d461a:	2100      	movs	r1, #0
{
   d461c:	4604      	mov	r4, r0
	retval = ICM_20948_set_bank(pdev, 0);
   d461e:	f7ff fd6a 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4622:	b990      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	retval = ICM_20948_execute_r(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d4624:	2301      	movs	r3, #1
   d4626:	aa01      	add	r2, sp, #4
   d4628:	2103      	movs	r1, #3
   d462a:	4620      	mov	r0, r4
   d462c:	f7ff fd52 	bl	d40d4 <ICM_20948_execute_r>
	if (retval != ICM_20948_Stat_Ok)
   d4630:	b958      	cbnz	r0, d464a <ICM_20948_i2c_master_reset+0x32>
	{
		return retval;
	}

	ctrl.I2C_MST_RST = 1; //Reset!
   d4632:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4636:	f043 0302 	orr.w	r3, r3, #2
   d463a:	f88d 3004 	strb.w	r3, [sp, #4]

	retval = ICM_20948_execute_w(pdev, AGB0_REG_USER_CTRL, (uint8_t *)&ctrl, sizeof(ICM_20948_USER_CTRL_t));
   d463e:	aa01      	add	r2, sp, #4
   d4640:	2301      	movs	r3, #1
   d4642:	2103      	movs	r1, #3
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff fd34 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
	{
		return retval;
	}
	return retval;
}
   d464a:	b002      	add	sp, #8
   d464c:	bd10      	pop	{r4, pc}

000d464e <ICM_20948_i2c_master_configure_slave>:

ICM_20948_Status_e ICM_20948_i2c_master_configure_slave(ICM_20948_Device_t *pdev, uint8_t slave, uint8_t addr, uint8_t reg, uint8_t len, bool Rw, bool enable, bool data_only, bool grp, bool swap)
{
   d464e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4652:	2903      	cmp	r1, #3
   d4654:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   d4658:	4605      	mov	r5, r0
   d465a:	460c      	mov	r4, r1
   d465c:	4617      	mov	r7, r2
   d465e:	461e      	mov	r6, r3
   d4660:	d847      	bhi.n	d46f2 <ICM_20948_i2c_master_configure_slave+0xa4>
		break;
	default:
		return ICM_20948_Stat_ParamErr;
	}

	retval = ICM_20948_set_bank(pdev, 3);
   d4662:	2103      	movs	r1, #3
   d4664:	f7ff fd47 	bl	d40f6 <ICM_20948_set_bank>
	if (retval != ICM_20948_Stat_Ok)
   d4668:	2800      	cmp	r0, #0
   d466a:	d13f      	bne.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set the slave address and the Rw flag
	ICM_20948_I2C_SLVX_ADDR_t address;
	address.ID = addr;
   d466c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4670:	f367 0306 	bfi	r3, r7, #0, #7
   d4674:	f88d 3004 	strb.w	r3, [sp, #4]
	if (Rw)
   d4678:	f1b8 0f00 	cmp.w	r8, #0
   d467c:	d004      	beq.n	d4688 <ICM_20948_i2c_master_configure_slave+0x3a>
	{
		address.RNW = 1;
   d467e:	b2db      	uxtb	r3, r3
   d4680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   d4684:	f88d 3004 	strb.w	r3, [sp, #4]
   d4688:	00a4      	lsls	r4, r4, #2
   d468a:	b2e4      	uxtb	r4, r4
	}
	retval = ICM_20948_execute_w(pdev, slv_addr_reg, (uint8_t *)&address, sizeof(ICM_20948_I2C_SLVX_ADDR_t));
   d468c:	1ce1      	adds	r1, r4, #3
   d468e:	2301      	movs	r3, #1
   d4690:	aa01      	add	r2, sp, #4
   d4692:	b2c9      	uxtb	r1, r1
   d4694:	4628      	mov	r0, r5
   d4696:	f7ff fd0c 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d469a:	bb38      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
	}

	// Set the slave sub-address (reg)
	ICM_20948_I2C_SLVX_REG_t subaddress;
	subaddress.REG = reg;
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d469c:	1d21      	adds	r1, r4, #4
   d469e:	2301      	movs	r3, #1
   d46a0:	aa02      	add	r2, sp, #8
   d46a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   d46a6:	4628      	mov	r0, r5
	subaddress.REG = reg;
   d46a8:	f88d 6008 	strb.w	r6, [sp, #8]
	retval = ICM_20948_execute_w(pdev, slv_reg_reg, (uint8_t *)&subaddress, sizeof(ICM_20948_I2C_SLVX_REG_t));
   d46ac:	f7ff fd01 	bl	d40b2 <ICM_20948_execute_w>
	if (retval != ICM_20948_Stat_Ok)
   d46b0:	b9e0      	cbnz	r0, d46ec <ICM_20948_i2c_master_configure_slave+0x9e>
		return retval;
	}

	// Set up the control info
	ICM_20948_I2C_SLVX_CTRL_t ctrl;
	ctrl.LENG = len;
   d46b2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d46b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   d46ba:	f003 030f 	and.w	r3, r3, #15
   d46be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   d46c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   d46c6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d46ca:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
   d46ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   d46d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	ctrl.EN = enable;
	ctrl.REG_DIS = data_only;
	ctrl.GRP = grp;
	ctrl.BYTE_SW = swap;
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46d6:	1d61      	adds	r1, r4, #5
	ctrl.LENG = len;
   d46d8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   d46dc:	f88d 300c 	strb.w	r3, [sp, #12]
	retval = ICM_20948_execute_w(pdev, slv_ctrl_reg, (uint8_t *)&ctrl, sizeof(ICM_20948_I2C_SLVX_CTRL_t));
   d46e0:	aa03      	add	r2, sp, #12
   d46e2:	2301      	movs	r3, #1
   d46e4:	b2c9      	uxtb	r1, r1
   d46e6:	4628      	mov	r0, r5
   d46e8:	f7ff fce3 	bl	d40b2 <ICM_20948_execute_w>
	{
		return retval;
	}

	return retval;
}
   d46ec:	b004      	add	sp, #16
   d46ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d46f2:	2003      	movs	r0, #3
   d46f4:	e7fa      	b.n	d46ec <ICM_20948_i2c_master_configure_slave+0x9e>

000d46f6 <ICM_20948_get_agmt>:

// Higher Level
ICM_20948_Status_e ICM_20948_get_agmt(ICM_20948_Device_t *pdev, ICM_20948_AGMT_t *pagmt)
{
   d46f6:	e92d 41d0 	stmdb	sp!, {r4, r6, r7, r8, lr}
   d46fa:	4680      	mov	r8, r0
   d46fc:	b08b      	sub	sp, #44	; 0x2c
	if (pagmt == NULL)
   d46fe:	460f      	mov	r7, r1
   d4700:	2900      	cmp	r1, #0
   d4702:	f000 808f 	beq.w	d4824 <ICM_20948_get_agmt+0x12e>
	ICM_20948_Status_e retval = ICM_20948_Stat_Ok;
	const uint8_t numbytes = 14 + 9; //Read Accel, gyro, temp, and 9 bytes of mag
	uint8_t buff[numbytes];

	// Get readings
	retval |= ICM_20948_set_bank(pdev, 0);
   d4706:	2100      	movs	r1, #0
   d4708:	f7ff fcf5 	bl	d40f6 <ICM_20948_set_bank>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d470c:	2317      	movs	r3, #23
	retval |= ICM_20948_set_bank(pdev, 0);
   d470e:	4606      	mov	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d4710:	aa04      	add	r2, sp, #16
   d4712:	212d      	movs	r1, #45	; 0x2d
   d4714:	4640      	mov	r0, r8
   d4716:	f7ff fcdd 	bl	d40d4 <ICM_20948_execute_r>

	pagmt->acc.axes.x = ((buff[0] << 8) | (buff[1] & 0xFF));
   d471a:	f89d 2010 	ldrb.w	r2, [sp, #16]
   d471e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   d4722:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4726:	803b      	strh	r3, [r7, #0]
	pagmt->acc.axes.y = ((buff[2] << 8) | (buff[3] & 0xFF));
   d4728:	f89d 2012 	ldrb.w	r2, [sp, #18]
   d472c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   d4730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4734:	807b      	strh	r3, [r7, #2]
	pagmt->acc.axes.z = ((buff[4] << 8) | (buff[5] & 0xFF));
   d4736:	f89d 2014 	ldrb.w	r2, [sp, #20]
   d473a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   d473e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4742:	80bb      	strh	r3, [r7, #4]

	pagmt->gyr.axes.x = ((buff[6] << 8) | (buff[7] & 0xFF));
   d4744:	f89d 2016 	ldrb.w	r2, [sp, #22]
   d4748:	f89d 3017 	ldrb.w	r3, [sp, #23]
   d474c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4750:	80fb      	strh	r3, [r7, #6]
	pagmt->gyr.axes.y = ((buff[8] << 8) | (buff[9] & 0xFF));
   d4752:	f89d 2018 	ldrb.w	r2, [sp, #24]
   d4756:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d475a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d475e:	813b      	strh	r3, [r7, #8]
	pagmt->gyr.axes.z = ((buff[10] << 8) | (buff[11] & 0xFF));
   d4760:	f89d 201a 	ldrb.w	r2, [sp, #26]
   d4764:	f89d 301b 	ldrb.w	r3, [sp, #27]
   d4768:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d476c:	817b      	strh	r3, [r7, #10]

	pagmt->tmp.val = ((buff[12] << 8) | (buff[13] & 0xFF));
   d476e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   d4772:	f89d 301d 	ldrb.w	r3, [sp, #29]
   d4776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d477a:	827b      	strh	r3, [r7, #18]

	pagmt->magStat1 = buff[14];
   d477c:	f89d 301e 	ldrb.w	r3, [sp, #30]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4780:	f89d 2020 	ldrb.w	r2, [sp, #32]
	pagmt->magStat1 = buff[14];
   d4784:	757b      	strb	r3, [r7, #21]
	pagmt->mag.axes.x = ((buff[16] << 8) | (buff[15] & 0xFF)); //Mag data is read little endian
   d4786:	f89d 301f 	ldrb.w	r3, [sp, #31]
   d478a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d478e:	81bb      	strh	r3, [r7, #12]
	pagmt->mag.axes.y = ((buff[18] << 8) | (buff[17] & 0xFF));
   d4790:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   d4794:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   d4798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d479c:	81fb      	strh	r3, [r7, #14]
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d479e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   d47a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   d47a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47aa:	4330      	orrs	r0, r6
	pagmt->mag.axes.z = ((buff[20] << 8) | (buff[19] & 0xFF));
   d47ac:	823b      	strh	r3, [r7, #16]
	pagmt->magStat2 = buff[22];
   d47ae:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   d47b2:	75bb      	strb	r3, [r7, #22]
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB0_REG_ACCEL_XOUT_H, buff, numbytes);
   d47b4:	b2c4      	uxtb	r4, r0

	// Get settings to be able to compute scaled values
	retval |= ICM_20948_set_bank(pdev, 2);
   d47b6:	2102      	movs	r1, #2
   d47b8:	4640      	mov	r0, r8
   d47ba:	f7ff fc9c 	bl	d40f6 <ICM_20948_set_bank>
   d47be:	4320      	orrs	r0, r4
   d47c0:	b2c6      	uxtb	r6, r0
	ICM_20948_ACCEL_CONFIG_t acfg;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47c2:	2301      	movs	r3, #1
   d47c4:	aa01      	add	r2, sp, #4
   d47c6:	2114      	movs	r1, #20
   d47c8:	4640      	mov	r0, r8
   d47ca:	f7ff fc83 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d47d2:	7d3a      	ldrb	r2, [r7, #20]
   d47d4:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d47d8:	f363 0201 	bfi	r2, r3, #0, #2
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG, (uint8_t *)&acfg, 1 * sizeof(acfg));
   d47dc:	4330      	orrs	r0, r6
   d47de:	b2c6      	uxtb	r6, r0
	pagmt->fss.a = acfg.ACCEL_FS_SEL; // Worth noting that without explicitly setting the FS range of the accelerometer it was showing the register value for +/- 2g but the reported values were actually scaled to the +/- 16g range
   d47e0:	753a      	strb	r2, [r7, #20]
									  // Wait a minute... now it seems like this problem actually comes from the digital low-pass filter. When enabled the value is 1/8 what it should be...
	retval |= ICM_20948_set_bank(pdev, 2);
   d47e2:	2102      	movs	r1, #2
   d47e4:	4640      	mov	r0, r8
   d47e6:	f7ff fc86 	bl	d40f6 <ICM_20948_set_bank>
	ICM_20948_GYRO_CONFIG_1_t gcfg1;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47ea:	2301      	movs	r3, #1
   d47ec:	4619      	mov	r1, r3
	retval |= ICM_20948_set_bank(pdev, 2);
   d47ee:	4306      	orrs	r6, r0
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d47f0:	aa02      	add	r2, sp, #8
   d47f2:	4640      	mov	r0, r8
   d47f4:	f7ff fc6e 	bl	d40d4 <ICM_20948_execute_r>
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d47f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d47fc:	7d3a      	ldrb	r2, [r7, #20]
   d47fe:	f3c3 0341 	ubfx	r3, r3, #1, #2
   d4802:	f363 0283 	bfi	r2, r3, #2, #2
	retval |= ICM_20948_set_bank(pdev, 2);
   d4806:	b2f4      	uxtb	r4, r6
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4808:	4304      	orrs	r4, r0
	pagmt->fss.g = gcfg1.GYRO_FS_SEL;
   d480a:	753a      	strb	r2, [r7, #20]
	ICM_20948_ACCEL_CONFIG_2_t acfg2;
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d480c:	2301      	movs	r3, #1
   d480e:	aa03      	add	r2, sp, #12
   d4810:	2115      	movs	r1, #21
   d4812:	4640      	mov	r0, r8
   d4814:	f7ff fc5e 	bl	d40d4 <ICM_20948_execute_r>
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_GYRO_CONFIG_1, (uint8_t *)&gcfg1, 1 * sizeof(gcfg1));
   d4818:	b2e4      	uxtb	r4, r4
	retval |= ICM_20948_execute_r(pdev, (uint8_t)AGB2_REG_ACCEL_CONFIG_2, (uint8_t *)&acfg2, 1 * sizeof(acfg2));
   d481a:	4320      	orrs	r0, r4
   d481c:	b2c0      	uxtb	r0, r0

	return retval;
}
   d481e:	b00b      	add	sp, #44	; 0x2c
   d4820:	e8bd 81d0 	ldmia.w	sp!, {r4, r6, r7, r8, pc}
		return ICM_20948_Stat_ParamErr;
   d4824:	2003      	movs	r0, #3
   d4826:	e7fa      	b.n	d481e <ICM_20948_get_agmt+0x128>

000d4828 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4828:	2000      	movs	r0, #0
   d482a:	f001 bb5d 	b.w	d5ee8 <hal_timer_millis>
	...

000d4830 <_Z21PulseSensorAmped_dataii>:
   //Serial.println((System.millis() - loopTimer));
}


void PulseSensorAmped_data(int BPM, int IBI){  //This is clunky.  Could clean up later
  pulse = BPM;
   d4830:	4b01      	ldr	r3, [pc, #4]	; (d4838 <_Z21PulseSensorAmped_dataii+0x8>)
   d4832:	6018      	str	r0, [r3, #0]
}
   d4834:	4770      	bx	lr
   d4836:	bf00      	nop
   d4838:	2003e558 	.word	0x2003e558
   d483c:	00000000 	.word	0x00000000

000d4840 <_Z12calculateHRVi>:


void calculateHRV(int IBI){
   d4840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4842:	ed2d 8b02 	vpush	{d8}
  float avg_ibi = 0;
  float ibi_stdev = 0;

  /*  Add the latest IBI to the buffer */
  ibi_buffer[ibiBufferCounter] = IBI;
   d4846:	4a32      	ldr	r2, [pc, #200]	; (d4910 <_Z12calculateHRVi+0xd0>)
   d4848:	4932      	ldr	r1, [pc, #200]	; (d4914 <_Z12calculateHRVi+0xd4>)
   d484a:	7813      	ldrb	r3, [r2, #0]
   d484c:	4d31      	ldr	r5, [pc, #196]	; (d4914 <_Z12calculateHRVi+0xd4>)
   d484e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  ibiBufferCounter++;
   d4852:	3301      	adds	r3, #1
   d4854:	b2db      	uxtb	r3, r3
  if (ibiBufferCounter >= IBI_BUFFER_SIZE){
   d4856:	2b07      	cmp	r3, #7
    ibiBufferCounter = 0;
   d4858:	bf88      	it	hi
   d485a:	2300      	movhi	r3, #0
  float avg_ibi = 0;
   d485c:	eddf 8a2e 	vldr	s17, [pc, #184]	; d4918 <_Z12calculateHRVi+0xd8>
    ibiBufferCounter = 0;
   d4860:	7013      	strb	r3, [r2, #0]
void calculateHRV(int IBI){
   d4862:	4629      	mov	r1, r5
  }

  /*  Compute the Standard Deviation  */
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4864:	2200      	movs	r2, #0
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4866:	f851 3b04 	ldr.w	r3, [r1], #4
   d486a:	08db      	lsrs	r3, r3, #3
   d486c:	ee07 3a90 	vmov	s15, r3
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4870:	3201      	adds	r2, #1
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d4876:	2a08      	cmp	r2, #8
    avg_ibi += ibi_buffer[i]/IBI_BUFFER_SIZE;
   d4878:	ee78 8aa7 	vadd.f32	s17, s17, s15
  for (int i=0;i<IBI_BUFFER_SIZE;i++){
   d487c:	d1f3      	bne.n	d4866 <_Z12calculateHRVi+0x26>
  float ibi_stdev = 0;
   d487e:	ed9f 8a26 	vldr	s16, [pc, #152]	; d4918 <_Z12calculateHRVi+0xd8>
  }
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d4882:	2400      	movs	r4, #0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d4884:	ecf5 7a01 	vldmia	r5!, {s15}
   d4888:	eef8 7a67 	vcvt.f32.u32	s15, s15
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d488c:	3401      	adds	r4, #1
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   d488e:	ee77 7ae8 	vsub.f32	s15, s15, s17
   d4892:	ee17 0a90 	vmov	r0, s15
   d4896:	f004 fd31 	bl	d92fc <__aeabi_f2d>
   d489a:	4602      	mov	r2, r0
   d489c:	460b      	mov	r3, r1
   d489e:	f004 fd85 	bl	d93ac <__aeabi_dmul>
   d48a2:	4606      	mov	r6, r0
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48a4:	ee18 0a10 	vmov	r0, s16
   d48a8:	460f      	mov	r7, r1
   d48aa:	f004 fd27 	bl	d92fc <__aeabi_f2d>
   d48ae:	4602      	mov	r2, r0
   d48b0:	460b      	mov	r3, r1
   d48b2:	4630      	mov	r0, r6
   d48b4:	4639      	mov	r1, r7
   d48b6:	f004 fbc3 	bl	d9040 <__adddf3>
   d48ba:	f005 f86f 	bl	d999c <__aeabi_d2f>
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48be:	2c08      	cmp	r4, #8
    ibi_stdev += pow((ibi_buffer[j] - avg_ibi), 2);
   d48c0:	ee08 0a10 	vmov	s16, r0
  for (int j=0;j<IBI_BUFFER_SIZE;j++){
   d48c4:	d1de      	bne.n	d4884 <_Z12calculateHRVi+0x44>
   d48c6:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   d48ca:	ee68 7a27 	vmul.f32	s15, s16, s15
  }
  ibi_stdev /= IBI_BUFFER_SIZE;
  ibi_stdev = pow(ibi_stdev, 0.5);

  hrv = ibi_stdev;
   d48ce:	4c13      	ldr	r4, [pc, #76]	; (d491c <_Z12calculateHRVi+0xdc>)
   d48d0:	ee17 0a90 	vmov	r0, s15
   d48d4:	f004 fd12 	bl	d92fc <__aeabi_f2d>
   d48d8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; d4908 <_Z12calculateHRVi+0xc8>
   d48dc:	ec41 0b10 	vmov	d0, r0, r1
   d48e0:	f003 fa0a 	bl	d7cf8 <pow>
   d48e4:	ec51 0b10 	vmov	r0, r1, d0
  ibi_stdev = pow(ibi_stdev, 0.5);
   d48e8:	f005 f858 	bl	d999c <__aeabi_d2f>
   d48ec:	6020      	str	r0, [r4, #0]

  Serial.println(hrv);
   d48ee:	f002 fe69 	bl	d75c4 <_Z16_fetch_usbserialv>
}
   d48f2:	ecbd 8b02 	vpop	{d8}
  Serial.println(hrv);
   d48f6:	ed94 0a00 	vldr	s0, [r4]
   d48fa:	2102      	movs	r1, #2
}
   d48fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.println(hrv);
   d4900:	f002 bb3f 	b.w	d6f82 <_ZN5Print7printlnEfi>
   d4904:	f3af 8000 	nop.w
   d4908:	00000000 	.word	0x00000000
   d490c:	3fe00000 	.word	0x3fe00000
   d4910:	2003e4f4 	.word	0x2003e4f4
   d4914:	2003e4f8 	.word	0x2003e4f8
   d4918:	00000000 	.word	0x00000000
   d491c:	2003e4f0 	.word	0x2003e4f0

000d4920 <_Z21PulseSensorAmped_lostv>:


void PulseSensorAmped_lost(void) {
  //Serial.println("Pulse Lost");
}
   d4920:	4770      	bx	lr
   d4922:	0000      	movs	r0, r0
   d4924:	0000      	movs	r0, r0
	...

000d4928 <_Z20computeSummaryReportv>:


void computeSummaryReport(){
   d4928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d492c:	4b7c      	ldr	r3, [pc, #496]	; (d4b20 <_Z20computeSummaryReportv+0x1f8>)
  avg_tc2 = avg_tc2 / (baseReadCounter - 1);
   d492e:	f8df 9268 	ldr.w	r9, [pc, #616]	; d4b98 <_Z20computeSummaryReportv+0x270>
  avg_accx = avg_accx / (baseReadCounter - 1);
   d4932:	4f7c      	ldr	r7, [pc, #496]	; (d4b24 <_Z20computeSummaryReportv+0x1fc>)
  avg_accy = avg_accy / (baseReadCounter - 1);
   d4934:	f8df 8264 	ldr.w	r8, [pc, #612]	; d4b9c <_Z20computeSummaryReportv+0x274>
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d4938:	497b      	ldr	r1, [pc, #492]	; (d4b28 <_Z20computeSummaryReportv+0x200>)
  avg_accz = avg_accz / (baseReadCounter - 1);
   d493a:	487c      	ldr	r0, [pc, #496]	; (d4b2c <_Z20computeSummaryReportv+0x204>)
  avg_gyrx = avg_gyrx / (baseReadCounter - 1);
   d493c:	4c7c      	ldr	r4, [pc, #496]	; (d4b30 <_Z20computeSummaryReportv+0x208>)
  avg_gyry = avg_gyry / (baseReadCounter - 1);
   d493e:	4d7d      	ldr	r5, [pc, #500]	; (d4b34 <_Z20computeSummaryReportv+0x20c>)
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	680a      	ldr	r2, [r1, #0]
  avg_gyrz = avg_gyrz / (baseReadCounter - 1);
  avg_brdtemp = avg_brdtemp / (baseReadCounter - 1);
  avg_mic = avg_mic / (baseReadCounter - 1);
   d4944:	4e7c      	ldr	r6, [pc, #496]	; (d4b38 <_Z20computeSummaryReportv+0x210>)
  avg_tp1 = avg_tp1 / (tp1ReadCounter - 1);
  avg_tp2 = avg_tp2 / (tp2ReadCounter - 1);
   d4946:	f8df a258 	ldr.w	sl, [pc, #600]	; d4ba0 <_Z20computeSummaryReportv+0x278>
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d494a:	f8df b258 	ldr.w	fp, [pc, #600]	; d4ba4 <_Z20computeSummaryReportv+0x27c>
  avg_tc1 = avg_tc1 / (baseReadCounter - 1);
   d494e:	3b01      	subs	r3, #1
   d4950:	fb92 f2f3 	sdiv	r2, r2, r3
   d4954:	600a      	str	r2, [r1, #0]
  avg_tc2 = avg_tc2 / (baseReadCounter - 1);
   d4956:	f8d9 2000 	ldr.w	r2, [r9]
   d495a:	fb92 f2f3 	sdiv	r2, r2, r3
   d495e:	f8c9 2000 	str.w	r2, [r9]
  avg_accx = avg_accx / (baseReadCounter - 1);
   d4962:	683a      	ldr	r2, [r7, #0]
   d4964:	fb92 f2f3 	sdiv	r2, r2, r3
   d4968:	603a      	str	r2, [r7, #0]
  avg_accy = avg_accy / (baseReadCounter - 1);
   d496a:	f8d8 2000 	ldr.w	r2, [r8]
   d496e:	fb92 f2f3 	sdiv	r2, r2, r3
   d4972:	f8c8 2000 	str.w	r2, [r8]
  avg_accz = avg_accz / (baseReadCounter - 1);
   d4976:	6802      	ldr	r2, [r0, #0]
   d4978:	fb92 f2f3 	sdiv	r2, r2, r3
   d497c:	6002      	str	r2, [r0, #0]
  avg_gyrx = avg_gyrx / (baseReadCounter - 1);
   d497e:	6822      	ldr	r2, [r4, #0]
   d4980:	fb92 f2f3 	sdiv	r2, r2, r3
   d4984:	6022      	str	r2, [r4, #0]
  avg_gyry = avg_gyry / (baseReadCounter - 1);
   d4986:	682a      	ldr	r2, [r5, #0]
  avg_gyrz = avg_gyrz / (baseReadCounter - 1);
   d4988:	4c6c      	ldr	r4, [pc, #432]	; (d4b3c <_Z20computeSummaryReportv+0x214>)
  avg_gyry = avg_gyry / (baseReadCounter - 1);
   d498a:	fb92 f2f3 	sdiv	r2, r2, r3
   d498e:	602a      	str	r2, [r5, #0]
  avg_brdtemp = avg_brdtemp / (baseReadCounter - 1);
   d4990:	4d6b      	ldr	r5, [pc, #428]	; (d4b40 <_Z20computeSummaryReportv+0x218>)
  avg_gyrz = avg_gyrz / (baseReadCounter - 1);
   d4992:	6822      	ldr	r2, [r4, #0]
   d4994:	fb92 f2f3 	sdiv	r2, r2, r3
   d4998:	6022      	str	r2, [r4, #0]
  avg_brdtemp = avg_brdtemp / (baseReadCounter - 1);
   d499a:	682a      	ldr	r2, [r5, #0]
   d499c:	fb92 f2f3 	sdiv	r2, r2, r3
   d49a0:	602a      	str	r2, [r5, #0]
  avg_mic = avg_mic / (baseReadCounter - 1);
   d49a2:	6832      	ldr	r2, [r6, #0]
   d49a4:	fb92 f3f3 	sdiv	r3, r2, r3
   d49a8:	6033      	str	r3, [r6, #0]
  avg_tp1 = avg_tp1 / (tp1ReadCounter - 1);
   d49aa:	4b66      	ldr	r3, [pc, #408]	; (d4b44 <_Z20computeSummaryReportv+0x21c>)
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d49ac:	4866      	ldr	r0, [pc, #408]	; (d4b48 <_Z20computeSummaryReportv+0x220>)
  avg_tp1 = avg_tp1 / (tp1ReadCounter - 1);
   d49ae:	681b      	ldr	r3, [r3, #0]
   d49b0:	1e5a      	subs	r2, r3, #1
   d49b2:	4b66      	ldr	r3, [pc, #408]	; (d4b4c <_Z20computeSummaryReportv+0x224>)
   d49b4:	4619      	mov	r1, r3
   d49b6:	681b      	ldr	r3, [r3, #0]
   d49b8:	fb93 f3f2 	sdiv	r3, r3, r2
   d49bc:	600b      	str	r3, [r1, #0]
  avg_tp2 = avg_tp2 / (tp2ReadCounter - 1);
   d49be:	4b64      	ldr	r3, [pc, #400]	; (d4b50 <_Z20computeSummaryReportv+0x228>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	1e5a      	subs	r2, r3, #1
   d49c4:	f8da 3000 	ldr.w	r3, [sl]
   d49c8:	fb93 f3f2 	sdiv	r3, r3, r2
   d49cc:	f8ca 3000 	str.w	r3, [sl]
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d49d0:	6803      	ldr	r3, [r0, #0]
void computeSummaryReport(){
   d49d2:	b09f      	sub	sp, #124	; 0x7c

  float voltage = analogRead(BATT) * 0.0011224;
   d49d4:	2021      	movs	r0, #33	; 0x21
  avg_fsr = avg_fsr / (fsrReadCounter - 1);
   d49d6:	1e5a      	subs	r2, r3, #1
   d49d8:	f8db 3000 	ldr.w	r3, [fp]
   d49dc:	fb93 f3f2 	sdiv	r3, r3, r2
   d49e0:	f8cb 3000 	str.w	r3, [fp]
  float voltage = analogRead(BATT) * 0.0011224;
   d49e4:	f002 ffb5 	bl	d7952 <analogRead>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;

  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d49e8:	4b5a      	ldr	r3, [pc, #360]	; (d4b54 <_Z20computeSummaryReportv+0x22c>)
   d49ea:	681b      	ldr	r3, [r3, #0]
   d49ec:	9319      	str	r3, [sp, #100]	; 0x64
   d49ee:	4b5a      	ldr	r3, [pc, #360]	; (d4b58 <_Z20computeSummaryReportv+0x230>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	9318      	str	r3, [sp, #96]	; 0x60
  float voltage = analogRead(BATT) * 0.0011224;
   d49f4:	f004 fc70 	bl	d92d8 <__aeabi_i2d>
   d49f8:	a347      	add	r3, pc, #284	; (adr r3, d4b18 <_Z20computeSummaryReportv+0x1f0>)
   d49fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49fe:	f004 fcd5 	bl	d93ac <__aeabi_dmul>
   d4a02:	f004 ffcb 	bl	d999c <__aeabi_d2f>
  float batt_perc = ((voltage - 3.0) / 1.125) * 100.0;
   d4a06:	f004 fc79 	bl	d92fc <__aeabi_f2d>
   d4a0a:	4b54      	ldr	r3, [pc, #336]	; (d4b5c <_Z20computeSummaryReportv+0x234>)
   d4a0c:	2200      	movs	r2, #0
   d4a0e:	f004 fb15 	bl	d903c <__aeabi_dsub>
   d4a12:	4b53      	ldr	r3, [pc, #332]	; (d4b60 <_Z20computeSummaryReportv+0x238>)
   d4a14:	2200      	movs	r2, #0
   d4a16:	f004 fdf3 	bl	d9600 <__aeabi_ddiv>
   d4a1a:	2200      	movs	r2, #0
   d4a1c:	4b51      	ldr	r3, [pc, #324]	; (d4b64 <_Z20computeSummaryReportv+0x23c>)
   d4a1e:	f004 fcc5 	bl	d93ac <__aeabi_dmul>
   d4a22:	f004 ffbb 	bl	d999c <__aeabi_d2f>
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d4a26:	f004 fc69 	bl	d92fc <__aeabi_f2d>
   d4a2a:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   d4a2e:	4b4e      	ldr	r3, [pc, #312]	; (d4b68 <_Z20computeSummaryReportv+0x240>)
   d4a30:	6818      	ldr	r0, [r3, #0]
   d4a32:	f004 fc63 	bl	d92fc <__aeabi_f2d>
   d4a36:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d4a3a:	4b4c      	ldr	r3, [pc, #304]	; (d4b6c <_Z20computeSummaryReportv+0x244>)
   d4a3c:	494c      	ldr	r1, [pc, #304]	; (d4b70 <_Z20computeSummaryReportv+0x248>)
   d4a3e:	681b      	ldr	r3, [r3, #0]
   d4a40:	9313      	str	r3, [sp, #76]	; 0x4c
   d4a42:	680b      	ldr	r3, [r1, #0]
   d4a44:	484b      	ldr	r0, [pc, #300]	; (d4b74 <_Z20computeSummaryReportv+0x24c>)
   d4a46:	9312      	str	r3, [sp, #72]	; 0x48
   d4a48:	6803      	ldr	r3, [r0, #0]
   d4a4a:	9311      	str	r3, [sp, #68]	; 0x44
   d4a4c:	4b4a      	ldr	r3, [pc, #296]	; (d4b78 <_Z20computeSummaryReportv+0x250>)
   d4a4e:	4a4b      	ldr	r2, [pc, #300]	; (d4b7c <_Z20computeSummaryReportv+0x254>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	9310      	str	r3, [sp, #64]	; 0x40
   d4a54:	6813      	ldr	r3, [r2, #0]
   d4a56:	494a      	ldr	r1, [pc, #296]	; (d4b80 <_Z20computeSummaryReportv+0x258>)
   d4a58:	930f      	str	r3, [sp, #60]	; 0x3c
   d4a5a:	680b      	ldr	r3, [r1, #0]
   d4a5c:	4849      	ldr	r0, [pc, #292]	; (d4b84 <_Z20computeSummaryReportv+0x25c>)
   d4a5e:	930e      	str	r3, [sp, #56]	; 0x38
   d4a60:	6803      	ldr	r3, [r0, #0]
   d4a62:	930d      	str	r3, [sp, #52]	; 0x34
   d4a64:	4b48      	ldr	r3, [pc, #288]	; (d4b88 <_Z20computeSummaryReportv+0x260>)
   d4a66:	4a49      	ldr	r2, [pc, #292]	; (d4b8c <_Z20computeSummaryReportv+0x264>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	930c      	str	r3, [sp, #48]	; 0x30
   d4a6c:	6813      	ldr	r3, [r2, #0]
   d4a6e:	930b      	str	r3, [sp, #44]	; 0x2c
   d4a70:	6833      	ldr	r3, [r6, #0]
   d4a72:	930a      	str	r3, [sp, #40]	; 0x28
   d4a74:	682b      	ldr	r3, [r5, #0]
   d4a76:	9309      	str	r3, [sp, #36]	; 0x24
   d4a78:	6823      	ldr	r3, [r4, #0]
   d4a7a:	4d2e      	ldr	r5, [pc, #184]	; (d4b34 <_Z20computeSummaryReportv+0x20c>)
   d4a7c:	9308      	str	r3, [sp, #32]
   d4a7e:	682b      	ldr	r3, [r5, #0]
   d4a80:	4c2b      	ldr	r4, [pc, #172]	; (d4b30 <_Z20computeSummaryReportv+0x208>)
   d4a82:	9307      	str	r3, [sp, #28]
   d4a84:	6823      	ldr	r3, [r4, #0]
   d4a86:	4829      	ldr	r0, [pc, #164]	; (d4b2c <_Z20computeSummaryReportv+0x204>)
   d4a88:	9306      	str	r3, [sp, #24]
   d4a8a:	6803      	ldr	r3, [r0, #0]
   d4a8c:	9305      	str	r3, [sp, #20]
   d4a8e:	f8d8 3000 	ldr.w	r3, [r8]
   d4a92:	9304      	str	r3, [sp, #16]
   d4a94:	683b      	ldr	r3, [r7, #0]
   d4a96:	9303      	str	r3, [sp, #12]
   d4a98:	f8db 3000 	ldr.w	r3, [fp]
   d4a9c:	9302      	str	r3, [sp, #8]
   d4a9e:	f8da 3000 	ldr.w	r3, [sl]
   d4aa2:	9301      	str	r3, [sp, #4]
   d4aa4:	4a29      	ldr	r2, [pc, #164]	; (d4b4c <_Z20computeSummaryReportv+0x224>)
   d4aa6:	f8d9 3000 	ldr.w	r3, [r9]
   d4aaa:	491f      	ldr	r1, [pc, #124]	; (d4b28 <_Z20computeSummaryReportv+0x200>)
   d4aac:	9300      	str	r3, [sp, #0]
   d4aae:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d4ab2:	6813      	ldr	r3, [r2, #0]
   d4ab4:	680a      	ldr	r2, [r1, #0]
   d4ab6:	4936      	ldr	r1, [pc, #216]	; (d4b90 <_Z20computeSummaryReportv+0x268>)
                                  , avg_tc1, avg_tp1, avg_tc2, avg_tp2, avg_fsr, avg_accx, avg_accy, avg_accz, \
                                  avg_gyrx, avg_gyry, avg_gyrz, avg_brdtemp, avg_mic, max_tp1, max_tp2, \
                                  max_accx, max_accy, max_accz, max_gyrx, max_gyry, max_gyrz, pulse, \
                                  hrv, batt_perc, max_fsr, max_mic);

  max_tp1 = 0;
   d4ab8:	4c34      	ldr	r4, [pc, #208]	; (d4b8c <_Z20computeSummaryReportv+0x264>)
  max_tp2 = 0;
   d4aba:	4f33      	ldr	r7, [pc, #204]	; (d4b88 <_Z20computeSummaryReportv+0x260>)
  max_accx = 0;
   d4abc:	4e31      	ldr	r6, [pc, #196]	; (d4b84 <_Z20computeSummaryReportv+0x25c>)
  max_accy = 0;
   d4abe:	4d30      	ldr	r5, [pc, #192]	; (d4b80 <_Z20computeSummaryReportv+0x258>)
  summaryReport = String::format("{ \"ATC1\": %d, \"ATP1\": %d, \"ATC2\": %d, \"ATP2\": %d, \"AFSR\": %d \
   d4ac0:	4660      	mov	r0, ip
   d4ac2:	f002 fbb3 	bl	d722c <_ZN6String6formatEPKcz>
                                  hrv, batt_perc, max_fsr, max_mic);
   d4ac6:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d4aca:	4661      	mov	r1, ip
   d4acc:	4831      	ldr	r0, [pc, #196]	; (d4b94 <_Z20computeSummaryReportv+0x26c>)
   d4ace:	f002 fb31 	bl	d7134 <_ZN6StringaSEOS_>
   d4ad2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
   d4ad6:	4660      	mov	r0, ip
   d4ad8:	f002 fa96 	bl	d7008 <_ZN6StringD1Ev>
  max_gyry = 0;
  max_gyrz = 0;
  max_fsr = 0;
  max_mic = 0;

  baseReadCounter = 0;
   d4adc:	4a10      	ldr	r2, [pc, #64]	; (d4b20 <_Z20computeSummaryReportv+0x1f8>)
  max_mic = 0;
   d4ade:	491d      	ldr	r1, [pc, #116]	; (d4b54 <_Z20computeSummaryReportv+0x22c>)
  tp1ReadCounter = 0;
  tp2ReadCounter = 0;
  fsrReadCounter = 0;
   d4ae0:	4819      	ldr	r0, [pc, #100]	; (d4b48 <_Z20computeSummaryReportv+0x220>)
  max_tp1 = 0;
   d4ae2:	2300      	movs	r3, #0
   d4ae4:	6023      	str	r3, [r4, #0]
  baseReadCounter = 0;
   d4ae6:	6013      	str	r3, [r2, #0]
  max_accz = 0;
   d4ae8:	4c24      	ldr	r4, [pc, #144]	; (d4b7c <_Z20computeSummaryReportv+0x254>)
  tp1ReadCounter = 0;
   d4aea:	4a16      	ldr	r2, [pc, #88]	; (d4b44 <_Z20computeSummaryReportv+0x21c>)
  max_tp2 = 0;
   d4aec:	603b      	str	r3, [r7, #0]
  max_accx = 0;
   d4aee:	6033      	str	r3, [r6, #0]
  max_accy = 0;
   d4af0:	602b      	str	r3, [r5, #0]
  max_accz = 0;
   d4af2:	6023      	str	r3, [r4, #0]
  tp1ReadCounter = 0;
   d4af4:	6013      	str	r3, [r2, #0]
  max_gyrx = 0;
   d4af6:	4f20      	ldr	r7, [pc, #128]	; (d4b78 <_Z20computeSummaryReportv+0x250>)
  max_gyry = 0;
   d4af8:	4e1e      	ldr	r6, [pc, #120]	; (d4b74 <_Z20computeSummaryReportv+0x24c>)
  max_gyrz = 0;
   d4afa:	4d1d      	ldr	r5, [pc, #116]	; (d4b70 <_Z20computeSummaryReportv+0x248>)
  max_fsr = 0;
   d4afc:	4c16      	ldr	r4, [pc, #88]	; (d4b58 <_Z20computeSummaryReportv+0x230>)
  tp2ReadCounter = 0;
   d4afe:	4a14      	ldr	r2, [pc, #80]	; (d4b50 <_Z20computeSummaryReportv+0x228>)
  max_gyrx = 0;
   d4b00:	603b      	str	r3, [r7, #0]
  max_gyry = 0;
   d4b02:	6033      	str	r3, [r6, #0]
  max_gyrz = 0;
   d4b04:	602b      	str	r3, [r5, #0]
  max_fsr = 0;
   d4b06:	6023      	str	r3, [r4, #0]
  max_mic = 0;
   d4b08:	600b      	str	r3, [r1, #0]
  tp2ReadCounter = 0;
   d4b0a:	6013      	str	r3, [r2, #0]
  fsrReadCounter = 0;
   d4b0c:	6003      	str	r3, [r0, #0]
}
   d4b0e:	b01f      	add	sp, #124	; 0x7c
   d4b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b14:	f3af 8000 	nop.w
   d4b18:	d2c10294 	.word	0xd2c10294
   d4b1c:	3f5263af 	.word	0x3f5263af
   d4b20:	2003e394 	.word	0x2003e394
   d4b24:	2003e478 	.word	0x2003e478
   d4b28:	2003e49c 	.word	0x2003e49c
   d4b2c:	2003e480 	.word	0x2003e480
   d4b30:	2003e48c 	.word	0x2003e48c
   d4b34:	2003e490 	.word	0x2003e490
   d4b38:	2003e498 	.word	0x2003e498
   d4b3c:	2003e494 	.word	0x2003e494
   d4b40:	2003e484 	.word	0x2003e484
   d4b44:	2003e3a4 	.word	0x2003e3a4
   d4b48:	2003e39c 	.word	0x2003e39c
   d4b4c:	2003e4a4 	.word	0x2003e4a4
   d4b50:	2003e3a8 	.word	0x2003e3a8
   d4b54:	2003e538 	.word	0x2003e538
   d4b58:	2003e528 	.word	0x2003e528
   d4b5c:	40080000 	.word	0x40080000
   d4b60:	3ff20000 	.word	0x3ff20000
   d4b64:	40590000 	.word	0x40590000
   d4b68:	2003e4f0 	.word	0x2003e4f0
   d4b6c:	2003e558 	.word	0x2003e558
   d4b70:	2003e534 	.word	0x2003e534
   d4b74:	2003e530 	.word	0x2003e530
   d4b78:	2003e52c 	.word	0x2003e52c
   d4b7c:	2003e520 	.word	0x2003e520
   d4b80:	2003e51c 	.word	0x2003e51c
   d4b84:	2003e518 	.word	0x2003e518
   d4b88:	2003e548 	.word	0x2003e548
   d4b8c:	2003e544 	.word	0x2003e544
   d4b90:	000d9ba4 	.word	0x000d9ba4
   d4b94:	2003e570 	.word	0x2003e570
   d4b98:	2003e4a0 	.word	0x2003e4a0
   d4b9c:	2003e47c 	.word	0x2003e47c
   d4ba0:	2003e4a8 	.word	0x2003e4a8
   d4ba4:	2003e488 	.word	0x2003e488

000d4ba8 <_Z17updateSummaryValsPi>:


void updateSummaryVals(int summaryArray[10]){
  avg_tc1 = avg_tc1 + summaryArray[0];
   d4ba8:	4a32      	ldr	r2, [pc, #200]	; (d4c74 <_Z17updateSummaryValsPi+0xcc>)
   d4baa:	6803      	ldr	r3, [r0, #0]
   d4bac:	6811      	ldr	r1, [r2, #0]
   d4bae:	440b      	add	r3, r1
   d4bb0:	6013      	str	r3, [r2, #0]
  if(summaryArray[0] > max_tc1){
   d4bb2:	4b31      	ldr	r3, [pc, #196]	; (d4c78 <_Z17updateSummaryValsPi+0xd0>)
   d4bb4:	6802      	ldr	r2, [r0, #0]
   d4bb6:	6819      	ldr	r1, [r3, #0]
   d4bb8:	428a      	cmp	r2, r1
    max_tc1 = summaryArray[0];
  }
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4bba:	4930      	ldr	r1, [pc, #192]	; (d4c7c <_Z17updateSummaryValsPi+0xd4>)
    max_tc1 = summaryArray[0];
   d4bbc:	bfc8      	it	gt
   d4bbe:	601a      	strgt	r2, [r3, #0]
  avg_tc2 = avg_tc2 + summaryArray[1];
   d4bc0:	680a      	ldr	r2, [r1, #0]
   d4bc2:	6843      	ldr	r3, [r0, #4]
   d4bc4:	441a      	add	r2, r3
   d4bc6:	600a      	str	r2, [r1, #0]
  if(summaryArray[1] > max_tc2){
   d4bc8:	4a2d      	ldr	r2, [pc, #180]	; (d4c80 <_Z17updateSummaryValsPi+0xd8>)
   d4bca:	6811      	ldr	r1, [r2, #0]
   d4bcc:	428b      	cmp	r3, r1
    max_tc2 = summaryArray[1];
  }
  avg_accx = avg_accx + summaryArray[2];
   d4bce:	492d      	ldr	r1, [pc, #180]	; (d4c84 <_Z17updateSummaryValsPi+0xdc>)
    max_tc2 = summaryArray[1];
   d4bd0:	bfc8      	it	gt
   d4bd2:	6013      	strgt	r3, [r2, #0]
  avg_accx = avg_accx + summaryArray[2];
   d4bd4:	680a      	ldr	r2, [r1, #0]
   d4bd6:	6883      	ldr	r3, [r0, #8]
   d4bd8:	441a      	add	r2, r3
   d4bda:	600a      	str	r2, [r1, #0]
  if(summaryArray[2] > max_accx){
   d4bdc:	4a2a      	ldr	r2, [pc, #168]	; (d4c88 <_Z17updateSummaryValsPi+0xe0>)
   d4bde:	6811      	ldr	r1, [r2, #0]
   d4be0:	428b      	cmp	r3, r1
    max_accx = summaryArray[2];
  }
  avg_accy = avg_accy + summaryArray[3];
   d4be2:	492a      	ldr	r1, [pc, #168]	; (d4c8c <_Z17updateSummaryValsPi+0xe4>)
    max_accx = summaryArray[2];
   d4be4:	bfc8      	it	gt
   d4be6:	6013      	strgt	r3, [r2, #0]
  avg_accy = avg_accy + summaryArray[3];
   d4be8:	680a      	ldr	r2, [r1, #0]
   d4bea:	68c3      	ldr	r3, [r0, #12]
   d4bec:	441a      	add	r2, r3
   d4bee:	600a      	str	r2, [r1, #0]
  if(summaryArray[3] > max_accy){
   d4bf0:	4a27      	ldr	r2, [pc, #156]	; (d4c90 <_Z17updateSummaryValsPi+0xe8>)
   d4bf2:	6811      	ldr	r1, [r2, #0]
   d4bf4:	428b      	cmp	r3, r1
    max_accy = summaryArray[3];
  }
  avg_accz = avg_accz + summaryArray[4];
   d4bf6:	4927      	ldr	r1, [pc, #156]	; (d4c94 <_Z17updateSummaryValsPi+0xec>)
    max_accy = summaryArray[3];
   d4bf8:	bfc8      	it	gt
   d4bfa:	6013      	strgt	r3, [r2, #0]
  avg_accz = avg_accz + summaryArray[4];
   d4bfc:	6903      	ldr	r3, [r0, #16]
   d4bfe:	680a      	ldr	r2, [r1, #0]
   d4c00:	441a      	add	r2, r3
   d4c02:	600a      	str	r2, [r1, #0]
  if(summaryArray[4] > max_accz){
   d4c04:	4a24      	ldr	r2, [pc, #144]	; (d4c98 <_Z17updateSummaryValsPi+0xf0>)
   d4c06:	6811      	ldr	r1, [r2, #0]
   d4c08:	428b      	cmp	r3, r1
    max_accz = summaryArray[4];
  }
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4c0a:	4924      	ldr	r1, [pc, #144]	; (d4c9c <_Z17updateSummaryValsPi+0xf4>)
    max_accz = summaryArray[4];
   d4c0c:	bfc8      	it	gt
   d4c0e:	6013      	strgt	r3, [r2, #0]
  avg_gyrx = avg_gyrx + summaryArray[5];
   d4c10:	6943      	ldr	r3, [r0, #20]
   d4c12:	680a      	ldr	r2, [r1, #0]
   d4c14:	441a      	add	r2, r3
   d4c16:	600a      	str	r2, [r1, #0]
  if(summaryArray[5] > max_gyrx){
   d4c18:	4a21      	ldr	r2, [pc, #132]	; (d4ca0 <_Z17updateSummaryValsPi+0xf8>)
   d4c1a:	6811      	ldr	r1, [r2, #0]
   d4c1c:	428b      	cmp	r3, r1
    max_gyrx = summaryArray[5];
  }
  avg_gyry = avg_gyry + summaryArray[6];
   d4c1e:	4921      	ldr	r1, [pc, #132]	; (d4ca4 <_Z17updateSummaryValsPi+0xfc>)
    max_gyrx = summaryArray[5];
   d4c20:	bfc8      	it	gt
   d4c22:	6013      	strgt	r3, [r2, #0]
  avg_gyry = avg_gyry + summaryArray[6];
   d4c24:	6983      	ldr	r3, [r0, #24]
   d4c26:	680a      	ldr	r2, [r1, #0]
   d4c28:	441a      	add	r2, r3
   d4c2a:	600a      	str	r2, [r1, #0]
  if(summaryArray[6] > max_gyry){
   d4c2c:	4a1e      	ldr	r2, [pc, #120]	; (d4ca8 <_Z17updateSummaryValsPi+0x100>)
   d4c2e:	6811      	ldr	r1, [r2, #0]
   d4c30:	428b      	cmp	r3, r1
    max_gyry = summaryArray[6];
  }
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4c32:	491e      	ldr	r1, [pc, #120]	; (d4cac <_Z17updateSummaryValsPi+0x104>)
    max_gyry = summaryArray[6];
   d4c34:	bfc8      	it	gt
   d4c36:	6013      	strgt	r3, [r2, #0]
  avg_gyrz = avg_gyrz + summaryArray[7];
   d4c38:	680a      	ldr	r2, [r1, #0]
   d4c3a:	69c3      	ldr	r3, [r0, #28]
   d4c3c:	441a      	add	r2, r3
   d4c3e:	600a      	str	r2, [r1, #0]
  if(summaryArray[7] > max_gyrz){
   d4c40:	4a1b      	ldr	r2, [pc, #108]	; (d4cb0 <_Z17updateSummaryValsPi+0x108>)
   d4c42:	6811      	ldr	r1, [r2, #0]
   d4c44:	428b      	cmp	r3, r1
    max_gyrz = summaryArray[7];
  }
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4c46:	491b      	ldr	r1, [pc, #108]	; (d4cb4 <_Z17updateSummaryValsPi+0x10c>)
    max_gyrz = summaryArray[7];
   d4c48:	bfc8      	it	gt
   d4c4a:	6013      	strgt	r3, [r2, #0]
  avg_brdtemp = avg_brdtemp + summaryArray[8];
   d4c4c:	6a03      	ldr	r3, [r0, #32]
   d4c4e:	680a      	ldr	r2, [r1, #0]
   d4c50:	441a      	add	r2, r3
   d4c52:	600a      	str	r2, [r1, #0]
  if(summaryArray[8] > max_brdtemp){
   d4c54:	4a18      	ldr	r2, [pc, #96]	; (d4cb8 <_Z17updateSummaryValsPi+0x110>)
   d4c56:	6811      	ldr	r1, [r2, #0]
   d4c58:	428b      	cmp	r3, r1
    max_brdtemp = summaryArray[8];
  }
  avg_mic = avg_mic + summaryArray[9];
   d4c5a:	4918      	ldr	r1, [pc, #96]	; (d4cbc <_Z17updateSummaryValsPi+0x114>)
    max_brdtemp = summaryArray[8];
   d4c5c:	bfc8      	it	gt
   d4c5e:	6013      	strgt	r3, [r2, #0]
  avg_mic = avg_mic + summaryArray[9];
   d4c60:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4c62:	680a      	ldr	r2, [r1, #0]
   d4c64:	441a      	add	r2, r3
   d4c66:	600a      	str	r2, [r1, #0]
  if(summaryArray[9] > max_mic){
   d4c68:	4a15      	ldr	r2, [pc, #84]	; (d4cc0 <_Z17updateSummaryValsPi+0x118>)
   d4c6a:	6811      	ldr	r1, [r2, #0]
   d4c6c:	428b      	cmp	r3, r1
    max_mic = summaryArray[9];
   d4c6e:	bfc8      	it	gt
   d4c70:	6013      	strgt	r3, [r2, #0]
  }
}
   d4c72:	4770      	bx	lr
   d4c74:	2003e49c 	.word	0x2003e49c
   d4c78:	2003e53c 	.word	0x2003e53c
   d4c7c:	2003e4a0 	.word	0x2003e4a0
   d4c80:	2003e540 	.word	0x2003e540
   d4c84:	2003e478 	.word	0x2003e478
   d4c88:	2003e518 	.word	0x2003e518
   d4c8c:	2003e47c 	.word	0x2003e47c
   d4c90:	2003e51c 	.word	0x2003e51c
   d4c94:	2003e480 	.word	0x2003e480
   d4c98:	2003e520 	.word	0x2003e520
   d4c9c:	2003e48c 	.word	0x2003e48c
   d4ca0:	2003e52c 	.word	0x2003e52c
   d4ca4:	2003e490 	.word	0x2003e490
   d4ca8:	2003e530 	.word	0x2003e530
   d4cac:	2003e494 	.word	0x2003e494
   d4cb0:	2003e534 	.word	0x2003e534
   d4cb4:	2003e484 	.word	0x2003e484
   d4cb8:	2003e524 	.word	0x2003e524
   d4cbc:	2003e498 	.word	0x2003e498
   d4cc0:	2003e538 	.word	0x2003e538

000d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4cc4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4cc6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4cc8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4cca:	b17c      	cbz	r4, d4cec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4ccc:	6863      	ldr	r3, [r4, #4]
   d4cce:	3b01      	subs	r3, #1
   d4cd0:	6063      	str	r3, [r4, #4]
   d4cd2:	b95b      	cbnz	r3, d4cec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4cd4:	6823      	ldr	r3, [r4, #0]
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	689b      	ldr	r3, [r3, #8]
   d4cda:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4cdc:	68a3      	ldr	r3, [r4, #8]
   d4cde:	3b01      	subs	r3, #1
   d4ce0:	60a3      	str	r3, [r4, #8]
   d4ce2:	b91b      	cbnz	r3, d4cec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4ce4:	6823      	ldr	r3, [r4, #0]
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	68db      	ldr	r3, [r3, #12]
   d4cea:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4cec:	4628      	mov	r0, r5
   d4cee:	bd38      	pop	{r3, r4, r5, pc}

000d4cf0 <_GLOBAL__sub_I_reportTurnCounter>:

    sleepTimer = System.millis();  //Reset sleep timer

    return; //head back to main
  }
   d4cf0:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4cf2:	4b18      	ldr	r3, [pc, #96]	; (d4d54 <_GLOBAL__sub_I_reportTurnCounter+0x64>)
String eda1Report = "";
   d4cf4:	4d18      	ldr	r5, [pc, #96]	; (d4d58 <_GLOBAL__sub_I_reportTurnCounter+0x68>)
   d4cf6:	4e19      	ldr	r6, [pc, #100]	; (d4d5c <_GLOBAL__sub_I_reportTurnCounter+0x6c>)
   d4cf8:	4c19      	ldr	r4, [pc, #100]	; (d4d60 <_GLOBAL__sub_I_reportTurnCounter+0x70>)
   d4cfa:	2201      	movs	r2, #1
   d4cfc:	701a      	strb	r2, [r3, #0]
   d4cfe:	4629      	mov	r1, r5
   d4d00:	4630      	mov	r0, r6
   d4d02:	f002 f9cc 	bl	d709e <_ZN6StringC1EPKc>
   d4d06:	4630      	mov	r0, r6
String eda2Report = "";
   d4d08:	4e16      	ldr	r6, [pc, #88]	; (d4d64 <_GLOBAL__sub_I_reportTurnCounter+0x74>)
String eda1Report = "";
   d4d0a:	4a17      	ldr	r2, [pc, #92]	; (d4d68 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4d0c:	4621      	mov	r1, r4
   d4d0e:	f002 ffe5 	bl	d7cdc <__aeabi_atexit>
String eda2Report = "";
   d4d12:	4629      	mov	r1, r5
   d4d14:	4630      	mov	r0, r6
   d4d16:	f002 f9c2 	bl	d709e <_ZN6StringC1EPKc>
   d4d1a:	4630      	mov	r0, r6
String summaryReport = "";
   d4d1c:	4e13      	ldr	r6, [pc, #76]	; (d4d6c <_GLOBAL__sub_I_reportTurnCounter+0x7c>)
String eda2Report = "";
   d4d1e:	4a12      	ldr	r2, [pc, #72]	; (d4d68 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4d20:	4621      	mov	r1, r4
   d4d22:	f002 ffdb 	bl	d7cdc <__aeabi_atexit>
String summaryReport = "";
   d4d26:	4629      	mov	r1, r5
   d4d28:	4630      	mov	r0, r6
   d4d2a:	f002 f9b8 	bl	d709e <_ZN6StringC1EPKc>
   d4d2e:	4621      	mov	r1, r4
   d4d30:	4a0d      	ldr	r2, [pc, #52]	; (d4d68 <_GLOBAL__sub_I_reportTurnCounter+0x78>)
   d4d32:	4630      	mov	r0, r6
   d4d34:	f002 ffd2 	bl	d7cdc <__aeabi_atexit>
ICM_20948_I2C ICM;
   d4d38:	480d      	ldr	r0, [pc, #52]	; (d4d70 <_GLOBAL__sub_I_reportTurnCounter+0x80>)
   d4d3a:	f000 ffcd 	bl	d5cd8 <_ZN13ICM_20948_I2CC1Ev>
Adafruit_ADS1115 ads_other(0x48);
   d4d3e:	2148      	movs	r1, #72	; 0x48
   d4d40:	480c      	ldr	r0, [pc, #48]	; (d4d74 <_GLOBAL__sub_I_reportTurnCounter+0x84>)
   d4d42:	f000 fbf8 	bl	d5536 <_ZN16Adafruit_ADS1115C1Eh>
   d4d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
Adafruit_ADS1115 ads_eda(0x49);
   d4d4a:	480b      	ldr	r0, [pc, #44]	; (d4d78 <_GLOBAL__sub_I_reportTurnCounter+0x88>)
   d4d4c:	2149      	movs	r1, #73	; 0x49
   d4d4e:	f000 bbf2 	b.w	d5536 <_ZN16Adafruit_ADS1115C1Eh>
   d4d52:	bf00      	nop
   d4d54:	2003e45c 	.word	0x2003e45c
   d4d58:	000d9dc0 	.word	0x000d9dc0
   d4d5c:	2003e4b4 	.word	0x2003e4b4
   d4d60:	000d7009 	.word	0x000d7009
   d4d64:	2003e4c4 	.word	0x2003e4c4
   d4d68:	2003e420 	.word	0x2003e420
   d4d6c:	2003e570 	.word	0x2003e570
   d4d70:	2003e424 	.word	0x2003e424
   d4d74:	2003e472 	.word	0x2003e472
   d4d78:	2003e46c 	.word	0x2003e46c

000d4d7c <_Z13initializeIMUv>:
void initializeIMU(){
   d4d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ICM.begin( Wire, AD0_VAL );
   d4d7e:	4d14      	ldr	r5, [pc, #80]	; (d4dd0 <_Z13initializeIMUv+0x54>)
    Serial.print( F("Initialization of the sensor returned: ") );
   d4d80:	4e14      	ldr	r6, [pc, #80]	; (d4dd4 <_Z13initializeIMUv+0x58>)
    Serial.println( ICM.statusString() );
   d4d82:	1d2f      	adds	r7, r5, #4
    ICM.begin( Wire, AD0_VAL );
   d4d84:	f002 fe14 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d4d88:	23ff      	movs	r3, #255	; 0xff
   d4d8a:	2200      	movs	r2, #0
   d4d8c:	4601      	mov	r1, r0
   d4d8e:	4810      	ldr	r0, [pc, #64]	; (d4dd0 <_Z13initializeIMUv+0x54>)
   d4d90:	f001 f84c 	bl	d5e2c <_ZN13ICM_20948_I2C5beginER7TwoWirebh>
    Serial.print( F("Initialization of the sensor returned: ") );
   d4d94:	f002 fc16 	bl	d75c4 <_Z16_fetch_usbserialv>
   d4d98:	4631      	mov	r1, r6
   d4d9a:	f001 ffe6 	bl	d6d6a <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println( ICM.statusString() );
   d4d9e:	f002 fc11 	bl	d75c4 <_Z16_fetch_usbserialv>
   d4da2:	2108      	movs	r1, #8
   d4da4:	4604      	mov	r4, r0
   d4da6:	4638      	mov	r0, r7
   d4da8:	f000 ff04 	bl	d5bb4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>
   d4dac:	4601      	mov	r1, r0
   d4dae:	4620      	mov	r0, r4
   d4db0:	f001 ffeb 	bl	d6d8a <_ZN5Print7printlnEPKc>
    if( ICM.status != ICM_20948_Stat_Ok ){
   d4db4:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4db8:	b14b      	cbz	r3, d4dce <_Z13initializeIMUv+0x52>
      Serial.println( "Trying again..." );
   d4dba:	f002 fc03 	bl	d75c4 <_Z16_fetch_usbserialv>
   d4dbe:	4906      	ldr	r1, [pc, #24]	; (d4dd8 <_Z13initializeIMUv+0x5c>)
   d4dc0:	f001 ffe3 	bl	d6d8a <_ZN5Print7printlnEPKc>
      delay(500);
   d4dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4dc8:	f001 fac6 	bl	d6358 <delay>
   d4dcc:	e7da      	b.n	d4d84 <_Z13initializeIMUv+0x8>
}
   d4dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4dd0:	2003e424 	.word	0x2003e424
   d4dd4:	000d9d99 	.word	0x000d9d99
   d4dd8:	000d9dc1 	.word	0x000d9dc1

000d4ddc <setup>:
void setup() {
   d4ddc:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(115200);
   d4dde:	f002 fbf1 	bl	d75c4 <_Z16_fetch_usbserialv>
   d4de2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4de6:	f002 fbe1 	bl	d75ac <_ZN9USBSerial5beginEl>
  Wire.begin();
   d4dea:	f002 fde1 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d4dee:	f001 fe25 	bl	d6a3c <_ZN7TwoWire5beginEv>
  Wire.setClock(400000);  //The IMU is capped at the 400khz level
   d4df2:	f002 fddd 	bl	d79b0 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   d4df6:	493c      	ldr	r1, [pc, #240]	; (d4ee8 <setup+0x10c>)
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d4df8:	4d3c      	ldr	r5, [pc, #240]	; (d4eec <setup+0x110>)
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d4dfa:	4c3d      	ldr	r4, [pc, #244]	; (d4ef0 <setup+0x114>)
   d4dfc:	f001 fe1a 	bl	d6a34 <_ZN7TwoWire8setSpeedEm>
  pinMode(TC1,INPUT);  //Local temp compensation PTC thermistors from the thermopile assemblies
   d4e00:	2100      	movs	r1, #0
   d4e02:	2012      	movs	r0, #18
   d4e04:	f002 fd68 	bl	d78d8 <pinMode>
  pinMode(TC2,INPUT);
   d4e08:	2100      	movs	r1, #0
   d4e0a:	2011      	movs	r0, #17
   d4e0c:	f002 fd64 	bl	d78d8 <pinMode>
  pinMode(alert, INPUT);  //Device turns off when there's no EDA activity
   d4e10:	2100      	movs	r1, #0
   d4e12:	2006      	movs	r0, #6
   d4e14:	f002 fd60 	bl	d78d8 <pinMode>
  pinMode(MIC, INPUT);  //Measure ambient noise level
   d4e18:	2100      	movs	r1, #0
   d4e1a:	2010      	movs	r0, #16
   d4e1c:	f002 fd5c 	bl	d78d8 <pinMode>
  pinMode(eda1_out,OUTPUT);  //To send voltage out into the hand
   d4e20:	2101      	movs	r1, #1
   d4e22:	2005      	movs	r0, #5
   d4e24:	f002 fd58 	bl	d78d8 <pinMode>
  pinMode(eda2_out,OUTPUT);
   d4e28:	2101      	movs	r1, #1
   d4e2a:	2004      	movs	r0, #4
   d4e2c:	f002 fd54 	bl	d78d8 <pinMode>
  pinMode(led_on,OUTPUT);  //To turn the pulse LED on
   d4e30:	2101      	movs	r1, #1
   d4e32:	2013      	movs	r0, #19
   d4e34:	f002 fd50 	bl	d78d8 <pinMode>
  pinMode(slp,OUTPUT);  //To turn off much of the board functionality when not in use
   d4e38:	2101      	movs	r1, #1
   d4e3a:	2008      	movs	r0, #8
   d4e3c:	f002 fd4c 	bl	d78d8 <pinMode>
  pinMode(eda1_depol, OUTPUT); // To depolarize the eda1 electrodes.  Not implemented in Rev3 due to PCB error.
   d4e40:	2101      	movs	r1, #1
   d4e42:	2002      	movs	r0, #2
   d4e44:	f002 fd48 	bl	d78d8 <pinMode>
  pinMode(eda2_depol, OUTPUT);
   d4e48:	2101      	movs	r1, #1
   d4e4a:	2003      	movs	r0, #3
   d4e4c:	f002 fd44 	bl	d78d8 <pinMode>
  digitalWrite(eda1_depol,LOW);  //Not implemented in Rev3 so pull low for safety
   d4e50:	2100      	movs	r1, #0
   d4e52:	2002      	movs	r0, #2
   d4e54:	f002 fd51 	bl	d78fa <digitalWrite>
  digitalWrite(eda2_depol,LOW);
   d4e58:	2100      	movs	r1, #0
   d4e5a:	2003      	movs	r0, #3
   d4e5c:	f002 fd4d 	bl	d78fa <digitalWrite>
  digitalWrite(eda1_out,HIGH);  //On constant for now, later only have this on sometimes to prevent shorts
   d4e60:	2101      	movs	r1, #1
   d4e62:	2005      	movs	r0, #5
   d4e64:	f002 fd49 	bl	d78fa <digitalWrite>
  digitalWrite(eda2_out,HIGH);
   d4e68:	2101      	movs	r1, #1
   d4e6a:	2004      	movs	r0, #4
   d4e6c:	f002 fd45 	bl	d78fa <digitalWrite>
  digitalWrite(slp, HIGH);  //Start with board awake
   d4e70:	2101      	movs	r1, #1
   d4e72:	2008      	movs	r0, #8
   d4e74:	f002 fd41 	bl	d78fa <digitalWrite>
  delay(100);
   d4e78:	2064      	movs	r0, #100	; 0x64
   d4e7a:	f001 fa6d 	bl	d6358 <delay>
  initializeIMU();
   d4e7e:	f7ff ff7d 	bl	d4d7c <_Z13initializeIMUv>
  ads_other.setGain(GAIN_TWOTHIRDS);  //Should be able to put this to one eventually
   d4e82:	2100      	movs	r1, #0
   d4e84:	4628      	mov	r0, r5
   d4e86:	f000 fb64 	bl	d5552 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_eda.setGain(GAIN_ONE);  //No higher than one since the max output of the op amp is the same as Vdd on the ADS1115
   d4e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4e8e:	4620      	mov	r0, r4
   d4e90:	f000 fb5f 	bl	d5552 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
  ads_other.begin();
   d4e94:	4628      	mov	r0, r5
   d4e96:	f000 fb55 	bl	d5544 <_ZN16Adafruit_ADS10155beginEv>
  ads_eda.begin();
   d4e9a:	4620      	mov	r0, r4
   d4e9c:	f000 fb52 	bl	d5544 <_ZN16Adafruit_ADS10155beginEv>
  digitalWrite(led_on,HIGH);  //For now this is on all the time.  Doesn't seem to work well with the library if partially off.
   d4ea0:	2101      	movs	r1, #1
   d4ea2:	2013      	movs	r0, #19
   d4ea4:	f002 fd29 	bl	d78fa <digitalWrite>
  PulseSensorAmped.attach(PULSE_SIGNAL_PIN);
   d4ea8:	210f      	movs	r1, #15
   d4eaa:	4812      	ldr	r0, [pc, #72]	; (d4ef4 <setup+0x118>)
   d4eac:	f000 fc04 	bl	d56b8 <_ZN21PulseSensorAmpedClass6attachEi>
  PulseSensorAmped.start();  //Start reading heart beats
   d4eb0:	4810      	ldr	r0, [pc, #64]	; (d4ef4 <setup+0x118>)
   d4eb2:	f000 fc09 	bl	d56c8 <_ZN21PulseSensorAmpedClass5startEv>
  delay(100);
   d4eb6:	2064      	movs	r0, #100	; 0x64
   d4eb8:	f001 fa4e 	bl	d6358 <delay>
  reportTimer = System.millis();  //Timer to avoid sending reports more than once per second (Particle cap)
   d4ebc:	f7ff fcb4 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4ec0:	4b0d      	ldr	r3, [pc, #52]	; (d4ef8 <setup+0x11c>)
   d4ec2:	e9c3 0100 	strd	r0, r1, [r3]
  edaReadTimer = System.millis();  //Timer to rate limit EDA readings to the Particle publishing size cap (622 bytes)
   d4ec6:	f7ff fcaf 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4eca:	4b0c      	ldr	r3, [pc, #48]	; (d4efc <setup+0x120>)
   d4ecc:	e9c3 0100 	strd	r0, r1, [r3]
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d4ed0:	f000 fffa 	bl	d5ec8 <HAL_Timer_Get_Micro_Seconds>
  otherReadTimer = micros();  //Timer to rate limit the other ADS signals to the max rate of the ADS1115
   d4ed4:	4b0a      	ldr	r3, [pc, #40]	; (d4f00 <setup+0x124>)
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	6018      	str	r0, [r3, #0]
   d4eda:	605a      	str	r2, [r3, #4]
  sleepTimer = System.millis();  //Timer to figure out when the device isn't being used and go to sleep
   d4edc:	f7ff fca4 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4ee0:	4b08      	ldr	r3, [pc, #32]	; (d4f04 <setup+0x128>)
   d4ee2:	e9c3 0100 	strd	r0, r1, [r3]
}
   d4ee6:	bd38      	pop	{r3, r4, r5, pc}
   d4ee8:	00061a80 	.word	0x00061a80
   d4eec:	2003e472 	.word	0x2003e472
   d4ef0:	2003e46c 	.word	0x2003e46c
   d4ef4:	2003e590 	.word	0x2003e590
   d4ef8:	2003e560 	.word	0x2003e560
   d4efc:	2003e4d8 	.word	0x2003e4d8
   d4f00:	2003e550 	.word	0x2003e550
   d4f04:	2003e568 	.word	0x2003e568

000d4f08 <_Z9gotoSleepv>:
void gotoSleep(){
   d4f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f0c:	b08d      	sub	sp, #52	; 0x34
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   d4f0e:	2500      	movs	r5, #0
        : config_(config) {
   d4f10:	ab07      	add	r3, sp, #28
              valid_(true) {
   d4f12:	f04f 0801 	mov.w	r8, #1
        config_.size = sizeof(hal_sleep_config_t);
   d4f16:	f8df 917c 	ldr.w	r9, [pc, #380]	; d5094 <_Z9gotoSleepv+0x18c>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
            }
            // Otherwise, configure this pin as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4f1a:	495d      	ldr	r1, [pc, #372]	; (d5090 <_Z9gotoSleepv+0x188>)
        : config_(config) {
   d4f1c:	9306      	str	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4f1e:	2010      	movs	r0, #16
        config_.wakeup_sources = nullptr;
   d4f20:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
              valid_(true) {
   d4f24:	f8ad 5021 	strh.w	r5, [sp, #33]	; 0x21
   d4f28:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
   d4f2c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
        config_.size = sizeof(hal_sleep_config_t);
   d4f30:	f8cd 901c 	str.w	r9, [sp, #28]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4f34:	f88d 8020 	strb.w	r8, [sp, #32]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   d4f38:	f002 fed7 	bl	d7cea <_ZnwjRKSt9nothrow_t>
   d4f3c:	4604      	mov	r4, r0
   d4f3e:	2800      	cmp	r0, #0
   d4f40:	f000 809b 	beq.w	d507a <_Z9gotoSleepv+0x172>
   d4f44:	2210      	movs	r2, #16
   d4f46:	4629      	mov	r1, r5
   d4f48:	f004 fd94 	bl	d9a74 <memset>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
            wakeupSource->base.next = config_.wakeup_sources;
   d4f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f4e:	60a3      	str	r3, [r4, #8]
            wakeupSource->pin = pin;
   d4f50:	2306      	movs	r3, #6
   d4f52:	81a3      	strh	r3, [r4, #12]
            wakeupSource->mode = mode;
   d4f54:	2302      	movs	r3, #2
   d4f56:	73a3      	strb	r3, [r4, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   d4f58:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4f5c:	f8c4 9000 	str.w	r9, [r4]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   d4f60:	f8a4 8004 	strh.w	r8, [r4, #4]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4f64:	940a      	str	r4, [sp, #40]	; 0x28
        if (valid_) {
   d4f66:	b1e3      	cbz	r3, d4fa2 <_Z9gotoSleepv+0x9a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4f68:	9b06      	ldr	r3, [sp, #24]
   d4f6a:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4f6c:	b12b      	cbz	r3, d4f7a <_Z9gotoSleepv+0x72>
            if (start->type == type) {
   d4f6e:	889a      	ldrh	r2, [r3, #4]
   d4f70:	2a04      	cmp	r2, #4
   d4f72:	f000 8086 	beq.w	d5082 <_Z9gotoSleepv+0x17a>
            start = start->next;
   d4f76:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d4f78:	e7f8      	b.n	d4f6c <_Z9gotoSleepv+0x64>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4f7a:	4945      	ldr	r1, [pc, #276]	; (d5090 <_Z9gotoSleepv+0x188>)
   d4f7c:	2010      	movs	r0, #16
   d4f7e:	f002 feb4 	bl	d7cea <_ZnwjRKSt9nothrow_t>
   d4f82:	4604      	mov	r4, r0
   d4f84:	2800      	cmp	r0, #0
   d4f86:	d078      	beq.n	d507a <_Z9gotoSleepv+0x172>
   d4f88:	2210      	movs	r2, #16
   d4f8a:	2100      	movs	r1, #0
   d4f8c:	f004 fd72 	bl	d9a74 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4f90:	4b40      	ldr	r3, [pc, #256]	; (d5094 <_Z9gotoSleepv+0x18c>)
   d4f92:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4f94:	2304      	movs	r3, #4
   d4f96:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f9a:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   d4f9c:	4b3e      	ldr	r3, [pc, #248]	; (d5098 <_Z9gotoSleepv+0x190>)
   d4f9e:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4fa0:	940a      	str	r4, [sp, #40]	; 0x28
  PulseSensorAmped.stop();  //Stop reading heart beats 
   d4fa2:	483e      	ldr	r0, [pc, #248]	; (d509c <_Z9gotoSleepv+0x194>)
    if((System.millis() - reportTimer) >= 1001){  //If it's safe to do so, shoot off a battery report
   d4fa4:	4c3e      	ldr	r4, [pc, #248]	; (d50a0 <_Z9gotoSleepv+0x198>)
      summaryReport = "";
   d4fa6:	4d3f      	ldr	r5, [pc, #252]	; (d50a4 <_Z9gotoSleepv+0x19c>)
  PulseSensorAmped.stop();  //Stop reading heart beats 
   d4fa8:	f000 fbae 	bl	d5708 <_ZN21PulseSensorAmpedClass4stopEv>
  digitalWrite(slp, LOW);  //Turn most of the board off
   d4fac:	2100      	movs	r1, #0
   d4fae:	2008      	movs	r0, #8
   d4fb0:	f002 fca3 	bl	d78fa <digitalWrite>
  digitalWrite(led_on, LOW);  //Turn the pulse sensor off
   d4fb4:	2100      	movs	r1, #0
   d4fb6:	2013      	movs	r0, #19
   d4fb8:	f002 fc9f 	bl	d78fa <digitalWrite>
  ads_eda.startComparator_SingleEnded(0,100);  //Set up the alert pin to notify when the device is being used
   d4fbc:	483a      	ldr	r0, [pc, #232]	; (d50a8 <_Z9gotoSleepv+0x1a0>)
   d4fbe:	2264      	movs	r2, #100	; 0x64
   d4fc0:	2100      	movs	r1, #0
   d4fc2:	f000 fb0e 	bl	d55e2 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs>
    if((System.millis() - reportTimer) >= 1001){  //If it's safe to do so, shoot off a battery report
   d4fc6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   d4fca:	f04f 0900 	mov.w	r9, #0
    System.sleep(config);  //Put the Argon to sleep
   d4fce:	a803      	add	r0, sp, #12
   d4fd0:	a906      	add	r1, sp, #24
   d4fd2:	f002 f98f 	bl	d72f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4fd6:	9803      	ldr	r0, [sp, #12]
   d4fd8:	b108      	cbz	r0, d4fde <_Z9gotoSleepv+0xd6>
            free(wakeupSource_);
   d4fda:	f001 f985 	bl	d62e8 <free>
    if((System.millis() - reportTimer) >= 1001){  //If it's safe to do so, shoot off a battery report
   d4fde:	f7ff fc23 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4fe2:	e9d4 3200 	ldrd	r3, r2, [r4]
   d4fe6:	1ac6      	subs	r6, r0, r3
   d4fe8:	eb61 0702 	sbc.w	r7, r1, r2
   d4fec:	45b9      	cmp	r9, r7
   d4fee:	bf08      	it	eq
   d4ff0:	45b0      	cmpeq	r8, r6
   d4ff2:	d21a      	bcs.n	d502a <_Z9gotoSleepv+0x122>
      reportTimer = System.millis();
   d4ff4:	f7ff fc18 	bl	d4828 <_ZN11SystemClass6millisEv>
   d4ff8:	e9c4 0100 	strd	r0, r1, [r4]
      computeSummaryReport();
   d4ffc:	f7ff fc94 	bl	d4928 <_Z20computeSummaryReportv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5000:	f001 f902 	bl	d6208 <spark_cloud_flag_connected>
      if(Particle.connected()){
   d5004:	b168      	cbz	r0, d5022 <_Z9gotoSleepv+0x11a>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d5006:	4b29      	ldr	r3, [pc, #164]	; (d50ac <_Z9gotoSleepv+0x1a4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5008:	4a29      	ldr	r2, [pc, #164]	; (d50b0 <_Z9gotoSleepv+0x1a8>)
   d500a:	781b      	ldrb	r3, [r3, #0]
   d500c:	f88d 3000 	strb.w	r3, [sp]
   d5010:	a803      	add	r0, sp, #12
   d5012:	6812      	ldr	r2, [r2, #0]
   d5014:	4927      	ldr	r1, [pc, #156]	; (d50b4 <_Z9gotoSleepv+0x1ac>)
   d5016:	233c      	movs	r3, #60	; 0x3c
   d5018:	f001 fb1a 	bl	d6650 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d501c:	a804      	add	r0, sp, #16
   d501e:	f7ff fe51 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      summaryReport = "";
   d5022:	4823      	ldr	r0, [pc, #140]	; (d50b0 <_Z9gotoSleepv+0x1a8>)
   d5024:	4629      	mov	r1, r5
   d5026:	f002 f88d 	bl	d7144 <_ZN6StringaSEPKc>
    alert_flag = digitalRead(alert);  //Check to see if we're  awake
   d502a:	2006      	movs	r0, #6
   d502c:	f002 fc7e 	bl	d792c <digitalRead>
    if (!alert_flag){  
   d5030:	2800      	cmp	r0, #0
   d5032:	d1cc      	bne.n	d4fce <_Z9gotoSleepv+0xc6>
    digitalWrite(slp, HIGH);  //Turn the board back on
   d5034:	2101      	movs	r1, #1
   d5036:	2008      	movs	r0, #8
   d5038:	f002 fc5f 	bl	d78fa <digitalWrite>
    digitalWrite(led_on, HIGH);  //Turn the pulse sensor back on
   d503c:	2101      	movs	r1, #1
   d503e:	2013      	movs	r0, #19
   d5040:	f002 fc5b 	bl	d78fa <digitalWrite>
    delay(100);  //Let it wake up
   d5044:	2064      	movs	r0, #100	; 0x64
   d5046:	f001 f987 	bl	d6358 <delay>
    initializeIMU();
   d504a:	f7ff fe97 	bl	d4d7c <_Z13initializeIMUv>
    ads_other.begin();
   d504e:	481a      	ldr	r0, [pc, #104]	; (d50b8 <_Z9gotoSleepv+0x1b0>)
   d5050:	f000 fa78 	bl	d5544 <_ZN16Adafruit_ADS10155beginEv>
    ads_eda.begin();
   d5054:	4814      	ldr	r0, [pc, #80]	; (d50a8 <_Z9gotoSleepv+0x1a0>)
   d5056:	f000 fa75 	bl	d5544 <_ZN16Adafruit_ADS10155beginEv>
    PulseSensorAmped.start();  //Start reading heart beats
   d505a:	4810      	ldr	r0, [pc, #64]	; (d509c <_Z9gotoSleepv+0x194>)
   d505c:	f000 fb34 	bl	d56c8 <_ZN21PulseSensorAmpedClass5startEv>
    sleepTimer = System.millis();  //Reset sleep timer
   d5060:	f7ff fbe2 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5064:	4b15      	ldr	r3, [pc, #84]	; (d50bc <_Z9gotoSleepv+0x1b4>)
   d5066:	e9c3 0100 	strd	r0, r1, [r3]
        auto wakeupSource = config_.wakeup_sources;
   d506a:	980a      	ldr	r0, [sp, #40]	; 0x28
        while (wakeupSource) {
   d506c:	b160      	cbz	r0, d5088 <_Z9gotoSleepv+0x180>
            auto next = wakeupSource->next;
   d506e:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d5070:	210c      	movs	r1, #12
   d5072:	f002 fe38 	bl	d7ce6 <_ZdlPvj>
            wakeupSource = next;
   d5076:	4620      	mov	r0, r4
        while (wakeupSource) {
   d5078:	e7f8      	b.n	d506c <_Z9gotoSleepv+0x164>
                valid_ = false;
   d507a:	2300      	movs	r3, #0
   d507c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                return *this;
   d5080:	e78f      	b.n	d4fa2 <_Z9gotoSleepv+0x9a>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d5082:	4a05      	ldr	r2, [pc, #20]	; (d5098 <_Z9gotoSleepv+0x190>)
   d5084:	60da      	str	r2, [r3, #12]
                return *this;
   d5086:	e78c      	b.n	d4fa2 <_Z9gotoSleepv+0x9a>
   d5088:	b00d      	add	sp, #52	; 0x34
   d508a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d508e:	bf00      	nop
   d5090:	000da058 	.word	0x000da058
   d5094:	00030010 	.word	0x00030010
   d5098:	000927c0 	.word	0x000927c0
   d509c:	2003e590 	.word	0x2003e590
   d50a0:	2003e560 	.word	0x2003e560
   d50a4:	000d9dc0 	.word	0x000d9dc0
   d50a8:	2003e46c 	.word	0x2003e46c
   d50ac:	2003e45c 	.word	0x2003e45c
   d50b0:	2003e570 	.word	0x2003e570
   d50b4:	000d9dd1 	.word	0x000d9dd1
   d50b8:	2003e472 	.word	0x2003e472
   d50bc:	2003e568 	.word	0x2003e568

000d50c0 <loop>:
void loop() {
   d50c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50c4:	ed2d 8b02 	vpush	{d8}
  if ((System.millis() - sleepTimer) > 10000){  //Go to sleep after 10s of non-use
   d50c8:	f8df 8378 	ldr.w	r8, [pc, #888]	; d5444 <loop+0x384>
void loop() {
   d50cc:	b093      	sub	sp, #76	; 0x4c
  if ((System.millis() - sleepTimer) > 10000){  //Go to sleep after 10s of non-use
   d50ce:	f7ff fbab 	bl	d4828 <_ZN11SystemClass6millisEv>
   d50d2:	e9d8 3200 	ldrd	r3, r2, [r8]
   d50d6:	ebb0 0a03 	subs.w	sl, r0, r3
   d50da:	eb61 0b02 	sbc.w	fp, r1, r2
   d50de:	2300      	movs	r3, #0
   d50e0:	f242 7210 	movw	r2, #10000	; 0x2710
   d50e4:	455b      	cmp	r3, fp
   d50e6:	bf08      	it	eq
   d50e8:	4552      	cmpeq	r2, sl
   d50ea:	d201      	bcs.n	d50f0 <loop+0x30>
    gotoSleep();
   d50ec:	f7ff ff0c 	bl	d4f08 <_Z9gotoSleepv>
  if((edaTurnCounter == 1) && ((System.millis()-edaReadTimer) >= 20)){
   d50f0:	4bb2      	ldr	r3, [pc, #712]	; (d53bc <loop+0x2fc>)
   d50f2:	781b      	ldrb	r3, [r3, #0]
   d50f4:	2b01      	cmp	r3, #1
   d50f6:	d136      	bne.n	d5166 <loop+0xa6>
   d50f8:	f8df 934c 	ldr.w	r9, [pc, #844]	; d5448 <loop+0x388>
   d50fc:	f7ff fb94 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5100:	e9d9 3200 	ldrd	r3, r2, [r9]
   d5104:	1ac6      	subs	r6, r0, r3
   d5106:	eb61 0702 	sbc.w	r7, r1, r2
   d510a:	2f00      	cmp	r7, #0
   d510c:	bf08      	it	eq
   d510e:	2e14      	cmpeq	r6, #20
   d5110:	d329      	bcc.n	d5166 <loop+0xa6>
    edaReadTimer = System.millis();
   d5112:	f7ff fb89 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5116:	e9c9 0100 	strd	r0, r1, [r9]
    eda1 = ads_eda.readADC_Differential_0_1();
   d511a:	48a9      	ldr	r0, [pc, #676]	; (d53c0 <loop+0x300>)
   d511c:	4ea9      	ldr	r6, [pc, #676]	; (d53c4 <loop+0x304>)
   d511e:	f000 fa43 	bl	d55a8 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5122:	49a9      	ldr	r1, [pc, #676]	; (d53c8 <loop+0x308>)
   d5124:	6030      	str	r0, [r6, #0]
   d5126:	a808      	add	r0, sp, #32
   d5128:	f001 fff9 	bl	d711e <_ZN6StringC1ERKS_>
    eda1Report = eda1Report + String(eda1) + ' '; //EDA1
   d512c:	220a      	movs	r2, #10
   d512e:	6831      	ldr	r1, [r6, #0]
   d5130:	a804      	add	r0, sp, #16
   d5132:	f002 f819 	bl	d7168 <_ZN6StringC1Eih>
   d5136:	a904      	add	r1, sp, #16
   d5138:	a808      	add	r0, sp, #32
   d513a:	f002 f84c 	bl	d71d6 <_ZplRK15StringSumHelperRK6String>
   d513e:	2120      	movs	r1, #32
   d5140:	f002 f86a 	bl	d7218 <_ZplRK15StringSumHelperc>
   d5144:	4601      	mov	r1, r0
   d5146:	48a0      	ldr	r0, [pc, #640]	; (d53c8 <loop+0x308>)
   d5148:	f001 ffda 	bl	d7100 <_ZN6StringaSERKS_>
   d514c:	a804      	add	r0, sp, #16
   d514e:	f001 ff5b 	bl	d7008 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d5152:	a808      	add	r0, sp, #32
   d5154:	f001 ff58 	bl	d7008 <_ZN6StringD1Ev>
    if(eda1 > 100){  //If the device is being held, reset the sleep timer
   d5158:	6833      	ldr	r3, [r6, #0]
   d515a:	2b64      	cmp	r3, #100	; 0x64
   d515c:	dd03      	ble.n	d5166 <loop+0xa6>
      sleepTimer = System.millis();
   d515e:	f7ff fb63 	bl	d4828 <_ZN11SystemClass6millisEv>
   d5162:	e9c8 0100 	strd	r0, r1, [r8]
  tc1 = analogRead(TC1);
   d5166:	2012      	movs	r0, #18
   d5168:	f002 fbf3 	bl	d7952 <analogRead>
   d516c:	4a97      	ldr	r2, [pc, #604]	; (d53cc <loop+0x30c>)
  accx = ICM.accX()*100;
   d516e:	ed9f 8a98 	vldr	s16, [pc, #608]	; d53d0 <loop+0x310>
  tc1 = analogRead(TC1);
   d5172:	6010      	str	r0, [r2, #0]
  tc2 = analogRead(TC2);
   d5174:	2011      	movs	r0, #17
   d5176:	f002 fbec 	bl	d7952 <analogRead>
   d517a:	4b96      	ldr	r3, [pc, #600]	; (d53d4 <loop+0x314>)
  ICM.getAGMT();  // Update IMU Values
   d517c:	4996      	ldr	r1, [pc, #600]	; (d53d8 <loop+0x318>)
  tc2 = analogRead(TC2);
   d517e:	6018      	str	r0, [r3, #0]
  ICM.getAGMT();  // Update IMU Values
   d5180:	a808      	add	r0, sp, #32
   d5182:	f000 fc27 	bl	d59d4 <_ZN9ICM_209487getAGMTEv>
  accx = ICM.accX()*100;
   d5186:	4894      	ldr	r0, [pc, #592]	; (d53d8 <loop+0x318>)
  accy = ICM.accY()*100;
   d5188:	f8df b2c0 	ldr.w	fp, [pc, #704]	; d544c <loop+0x38c>
  accz = ICM.accZ()*100;
   d518c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; d5450 <loop+0x390>
  gyrx = ICM.gyrX()*100;
   d5190:	f8df 92c0 	ldr.w	r9, [pc, #704]	; d5454 <loop+0x394>
  gyry = ICM.gyrY()*100;
   d5194:	f8df 82c0 	ldr.w	r8, [pc, #704]	; d5458 <loop+0x398>
  gyrz = ICM.gyrZ()*100;
   d5198:	4f90      	ldr	r7, [pc, #576]	; (d53dc <loop+0x31c>)
  brdtemp = ICM.temp()*100;
   d519a:	4e91      	ldr	r6, [pc, #580]	; (d53e0 <loop+0x320>)
  accx = ICM.accX()*100;
   d519c:	f000 fc86 	bl	d5aac <_ZN9ICM_209484accXEv>
   d51a0:	ee20 0a08 	vmul.f32	s0, s0, s16
   d51a4:	498f      	ldr	r1, [pc, #572]	; (d53e4 <loop+0x324>)
  accy = ICM.accY()*100;
   d51a6:	488c      	ldr	r0, [pc, #560]	; (d53d8 <loop+0x318>)
  accx = ICM.accX()*100;
   d51a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51ac:	ed81 0a00 	vstr	s0, [r1]
  accy = ICM.accY()*100;
   d51b0:	f000 fc80 	bl	d5ab4 <_ZN9ICM_209484accYEv>
   d51b4:	ee20 0a08 	vmul.f32	s0, s0, s16
  accz = ICM.accZ()*100;
   d51b8:	4887      	ldr	r0, [pc, #540]	; (d53d8 <loop+0x318>)
  accy = ICM.accY()*100;
   d51ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51be:	ed8b 0a00 	vstr	s0, [fp]
  accz = ICM.accZ()*100;
   d51c2:	f000 fc7b 	bl	d5abc <_ZN9ICM_209484accZEv>
   d51c6:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyrx = ICM.gyrX()*100;
   d51ca:	4883      	ldr	r0, [pc, #524]	; (d53d8 <loop+0x318>)
  accz = ICM.accZ()*100;
   d51cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51d0:	ed8a 0a00 	vstr	s0, [sl]
  gyrx = ICM.gyrX()*100;
   d51d4:	f000 fcbe 	bl	d5b54 <_ZN9ICM_209484gyrXEv>
   d51d8:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyry = ICM.gyrY()*100;
   d51dc:	487e      	ldr	r0, [pc, #504]	; (d53d8 <loop+0x318>)
  gyrx = ICM.gyrX()*100;
   d51de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51e2:	ed89 0a00 	vstr	s0, [r9]
  gyry = ICM.gyrY()*100;
   d51e6:	f000 fcb9 	bl	d5b5c <_ZN9ICM_209484gyrYEv>
   d51ea:	ee20 0a08 	vmul.f32	s0, s0, s16
  gyrz = ICM.gyrZ()*100;
   d51ee:	487a      	ldr	r0, [pc, #488]	; (d53d8 <loop+0x318>)
  gyry = ICM.gyrY()*100;
   d51f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d51f4:	ed88 0a00 	vstr	s0, [r8]
  gyrz = ICM.gyrZ()*100;
   d51f8:	f000 fcb4 	bl	d5b64 <_ZN9ICM_209484gyrZEv>
   d51fc:	ee20 0a08 	vmul.f32	s0, s0, s16
  brdtemp = ICM.temp()*100;
   d5200:	4875      	ldr	r0, [pc, #468]	; (d53d8 <loop+0x318>)
  gyrz = ICM.gyrZ()*100;
   d5202:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5206:	ed87 0a00 	vstr	s0, [r7]
  brdtemp = ICM.temp()*100;
   d520a:	f000 fcb1 	bl	d5b70 <_ZN9ICM_209484tempEv>
   d520e:	ee20 0a08 	vmul.f32	s0, s0, s16
  mic = analogRead(MIC);
   d5212:	2010      	movs	r0, #16
  brdtemp = ICM.temp()*100;
   d5214:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5218:	ed86 0a00 	vstr	s0, [r6]
  mic = analogRead(MIC);
   d521c:	f002 fb99 	bl	d7952 <analogRead>
  int summaryArray[10] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp, mic};
   d5220:	4b6c      	ldr	r3, [pc, #432]	; (d53d4 <loop+0x314>)
   d5222:	4970      	ldr	r1, [pc, #448]	; (d53e4 <loop+0x324>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	9309      	str	r3, [sp, #36]	; 0x24
   d5228:	680b      	ldr	r3, [r1, #0]
   d522a:	930a      	str	r3, [sp, #40]	; 0x28
   d522c:	f8db 3000 	ldr.w	r3, [fp]
   d5230:	930b      	str	r3, [sp, #44]	; 0x2c
   d5232:	f8da 3000 	ldr.w	r3, [sl]
   d5236:	930c      	str	r3, [sp, #48]	; 0x30
   d5238:	4a64      	ldr	r2, [pc, #400]	; (d53cc <loop+0x30c>)
   d523a:	f8d9 3000 	ldr.w	r3, [r9]
   d523e:	930d      	str	r3, [sp, #52]	; 0x34
   d5240:	f8d8 3000 	ldr.w	r3, [r8]
   d5244:	6812      	ldr	r2, [r2, #0]
   d5246:	930e      	str	r3, [sp, #56]	; 0x38
   d5248:	683b      	ldr	r3, [r7, #0]
   d524a:	9208      	str	r2, [sp, #32]
   d524c:	930f      	str	r3, [sp, #60]	; 0x3c
  baseReadCounter++;
   d524e:	4a66      	ldr	r2, [pc, #408]	; (d53e8 <loop+0x328>)
  int summaryArray[10] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp, mic};
   d5250:	6833      	ldr	r3, [r6, #0]
  mic = analogRead(MIC);
   d5252:	f8df c208 	ldr.w	ip, [pc, #520]	; d545c <loop+0x39c>
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d5256:	4e65      	ldr	r6, [pc, #404]	; (d53ec <loop+0x32c>)
  mic = analogRead(MIC);
   d5258:	f8cc 0000 	str.w	r0, [ip]
  int summaryArray[10] = {tc1, tc2, accx, accy, accz, gyrx, gyry, gyrz, brdtemp, mic};
   d525c:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
  baseReadCounter++;
   d5260:	6813      	ldr	r3, [r2, #0]
  updateSummaryVals(summaryArray);
   d5262:	a808      	add	r0, sp, #32
  baseReadCounter++;
   d5264:	3301      	adds	r3, #1
   d5266:	6013      	str	r3, [r2, #0]
  updateSummaryVals(summaryArray);
   d5268:	f7ff fc9e 	bl	d4ba8 <_Z17updateSummaryValsPi>
  PulseSensorAmped.process();
   d526c:	4860      	ldr	r0, [pc, #384]	; (d53f0 <loop+0x330>)
   d526e:	f000 fb41 	bl	d58f4 <_ZN21PulseSensorAmpedClass7processEv>
   d5272:	f000 fe29 	bl	d5ec8 <HAL_Timer_Get_Micro_Seconds>
  if((micros() - otherReadTimer) > 1500){  //This is probably superfluous given our current loop time of ~5-10 ms
   d5276:	e9d6 3200 	ldrd	r3, r2, [r6]
   d527a:	1ac4      	subs	r4, r0, r3
   d527c:	eb62 0542 	sbc.w	r5, r2, r2, lsl #1
   d5280:	2300      	movs	r3, #0
   d5282:	f240 52dc 	movw	r2, #1500	; 0x5dc
   d5286:	42ab      	cmp	r3, r5
   d5288:	bf08      	it	eq
   d528a:	42a2      	cmpeq	r2, r4
   d528c:	d220      	bcs.n	d52d0 <loop+0x210>
    switch (readTurnCounter){ //Take turns reading from each line
   d528e:	4c59      	ldr	r4, [pc, #356]	; (d53f4 <loop+0x334>)
   d5290:	f000 fe1a 	bl	d5ec8 <HAL_Timer_Get_Micro_Seconds>
   d5294:	7823      	ldrb	r3, [r4, #0]
    otherReadTimer = micros();
   d5296:	2100      	movs	r1, #0
    switch (readTurnCounter){ //Take turns reading from each line
   d5298:	2b02      	cmp	r3, #2
    otherReadTimer = micros();
   d529a:	e9c6 0100 	strd	r0, r1, [r6]
    switch (readTurnCounter){ //Take turns reading from each line
   d529e:	d03c      	beq.n	d531a <loop+0x25a>
   d52a0:	2b03      	cmp	r3, #3
   d52a2:	d04f      	beq.n	d5344 <loop+0x284>
   d52a4:	2b01      	cmp	r3, #1
   d52a6:	d113      	bne.n	d52d0 <loop+0x210>
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d52a8:	4853      	ldr	r0, [pc, #332]	; (d53f8 <loop+0x338>)
   d52aa:	f000 f954 	bl	d5556 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp1 = avg_tp1 + tp1;
   d52ae:	4a53      	ldr	r2, [pc, #332]	; (d53fc <loop+0x33c>)
        tp1 = ads_other.readADC_SingleEnded(0);  //Thermopile #1
   d52b0:	4b53      	ldr	r3, [pc, #332]	; (d5400 <loop+0x340>)
   d52b2:	6018      	str	r0, [r3, #0]
        avg_tp1 = avg_tp1 + tp1;
   d52b4:	6813      	ldr	r3, [r2, #0]
   d52b6:	4403      	add	r3, r0
   d52b8:	6013      	str	r3, [r2, #0]
        if(tp1 > max_tp1){
   d52ba:	4b52      	ldr	r3, [pc, #328]	; (d5404 <loop+0x344>)
   d52bc:	681a      	ldr	r2, [r3, #0]
   d52be:	4290      	cmp	r0, r2
        tp1ReadCounter++;
   d52c0:	4a51      	ldr	r2, [pc, #324]	; (d5408 <loop+0x348>)
          max_tp1 = tp1;
   d52c2:	bfc8      	it	gt
   d52c4:	6018      	strgt	r0, [r3, #0]
        tp1ReadCounter++;
   d52c6:	6813      	ldr	r3, [r2, #0]
   d52c8:	3301      	adds	r3, #1
   d52ca:	6013      	str	r3, [r2, #0]
        readTurnCounter = 2;
   d52cc:	2302      	movs	r3, #2
        readTurnCounter = 1;
   d52ce:	7023      	strb	r3, [r4, #0]
  if((System.millis() - reportTimer) >= 1001){
   d52d0:	4c4e      	ldr	r4, [pc, #312]	; (d540c <loop+0x34c>)
   d52d2:	f7ff faa9 	bl	d4828 <_ZN11SystemClass6millisEv>
   d52d6:	e9d4 3200 	ldrd	r3, r2, [r4]
   d52da:	1ac3      	subs	r3, r0, r3
   d52dc:	9302      	str	r3, [sp, #8]
   d52de:	eb61 0302 	sbc.w	r3, r1, r2
   d52e2:	9303      	str	r3, [sp, #12]
   d52e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d52e8:	2300      	movs	r3, #0
   d52ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52ee:	428b      	cmp	r3, r1
   d52f0:	bf08      	it	eq
   d52f2:	4282      	cmpeq	r2, r0
   d52f4:	d20a      	bcs.n	d530c <loop+0x24c>
    reportTimer = System.millis();
   d52f6:	f7ff fa97 	bl	d4828 <_ZN11SystemClass6millisEv>
   d52fa:	e9c4 0100 	strd	r0, r1, [r4]
    switch (reportTurnCounter){
   d52fe:	4c44      	ldr	r4, [pc, #272]	; (d5410 <loop+0x350>)
   d5300:	7823      	ldrb	r3, [r4, #0]
   d5302:	2b01      	cmp	r3, #1
   d5304:	d033      	beq.n	d536e <loop+0x2ae>
   d5306:	2b03      	cmp	r3, #3
   d5308:	f000 80aa 	beq.w	d5460 <loop+0x3a0>
   d530c:	f000 fddc 	bl	d5ec8 <HAL_Timer_Get_Micro_Seconds>
}
   d5310:	b013      	add	sp, #76	; 0x4c
   d5312:	ecbd 8b02 	vpop	{d8}
   d5316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d531a:	4837      	ldr	r0, [pc, #220]	; (d53f8 <loop+0x338>)
   d531c:	2101      	movs	r1, #1
   d531e:	f000 f91a 	bl	d5556 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_tp2 = avg_tp2 + tp2;
   d5322:	4a3c      	ldr	r2, [pc, #240]	; (d5414 <loop+0x354>)
        tp2 = ads_other.readADC_SingleEnded(1);  //Thermopile #2
   d5324:	4b3c      	ldr	r3, [pc, #240]	; (d5418 <loop+0x358>)
   d5326:	6018      	str	r0, [r3, #0]
        avg_tp2 = avg_tp2 + tp2;
   d5328:	6813      	ldr	r3, [r2, #0]
   d532a:	4403      	add	r3, r0
   d532c:	6013      	str	r3, [r2, #0]
        if(tp2 > max_tp2){
   d532e:	4b3b      	ldr	r3, [pc, #236]	; (d541c <loop+0x35c>)
   d5330:	681a      	ldr	r2, [r3, #0]
   d5332:	4290      	cmp	r0, r2
        tp2ReadCounter++;
   d5334:	4a3a      	ldr	r2, [pc, #232]	; (d5420 <loop+0x360>)
          max_tp2 = tp2;
   d5336:	bfc8      	it	gt
   d5338:	6018      	strgt	r0, [r3, #0]
        tp2ReadCounter++;
   d533a:	6813      	ldr	r3, [r2, #0]
   d533c:	3301      	adds	r3, #1
   d533e:	6013      	str	r3, [r2, #0]
        readTurnCounter = 3;
   d5340:	2303      	movs	r3, #3
   d5342:	e7c4      	b.n	d52ce <loop+0x20e>
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d5344:	482c      	ldr	r0, [pc, #176]	; (d53f8 <loop+0x338>)
   d5346:	2102      	movs	r1, #2
   d5348:	f000 f905 	bl	d5556 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        avg_fsr = avg_fsr + fsr;
   d534c:	4a35      	ldr	r2, [pc, #212]	; (d5424 <loop+0x364>)
        fsr = ads_other.readADC_SingleEnded(2); //FSR
   d534e:	4b36      	ldr	r3, [pc, #216]	; (d5428 <loop+0x368>)
   d5350:	6018      	str	r0, [r3, #0]
        avg_fsr = avg_fsr + fsr;
   d5352:	6813      	ldr	r3, [r2, #0]
   d5354:	4403      	add	r3, r0
   d5356:	6013      	str	r3, [r2, #0]
        if(fsr > max_fsr){
   d5358:	4b34      	ldr	r3, [pc, #208]	; (d542c <loop+0x36c>)
   d535a:	681a      	ldr	r2, [r3, #0]
   d535c:	4290      	cmp	r0, r2
        fsrReadCounter++;
   d535e:	4a34      	ldr	r2, [pc, #208]	; (d5430 <loop+0x370>)
          max_fsr = fsr;
   d5360:	bfc8      	it	gt
   d5362:	6018      	strgt	r0, [r3, #0]
        fsrReadCounter++;
   d5364:	6813      	ldr	r3, [r2, #0]
   d5366:	3301      	adds	r3, #1
   d5368:	6013      	str	r3, [r2, #0]
        readTurnCounter = 1;
   d536a:	2301      	movs	r3, #1
   d536c:	e7af      	b.n	d52ce <loop+0x20e>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d536e:	f000 ff4b 	bl	d6208 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d5372:	b1e0      	cbz	r0, d53ae <loop+0x2ee>
	StringSumHelper(const String &s) : String(s) {}
   d5374:	4d14      	ldr	r5, [pc, #80]	; (d53c8 <loop+0x308>)
   d5376:	a804      	add	r0, sp, #16
   d5378:	4629      	mov	r1, r5
   d537a:	f001 fed0 	bl	d711e <_ZN6StringC1ERKS_>
          eda1Report = eda1Report + "\"}";
   d537e:	492d      	ldr	r1, [pc, #180]	; (d5434 <loop+0x374>)
   d5380:	a804      	add	r0, sp, #16
   d5382:	f001 ff34 	bl	d71ee <_ZplRK15StringSumHelperPKc>
   d5386:	4601      	mov	r1, r0
   d5388:	4628      	mov	r0, r5
   d538a:	f001 feb9 	bl	d7100 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d538e:	a804      	add	r0, sp, #16
   d5390:	f001 fe3a 	bl	d7008 <_ZN6StringD1Ev>
   d5394:	4b28      	ldr	r3, [pc, #160]	; (d5438 <loop+0x378>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5396:	4929      	ldr	r1, [pc, #164]	; (d543c <loop+0x37c>)
   d5398:	781b      	ldrb	r3, [r3, #0]
   d539a:	f88d 3000 	strb.w	r3, [sp]
   d539e:	a804      	add	r0, sp, #16
   d53a0:	682a      	ldr	r2, [r5, #0]
   d53a2:	233c      	movs	r3, #60	; 0x3c
   d53a4:	f001 f954 	bl	d6650 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d53a8:	a805      	add	r0, sp, #20
   d53aa:	f7ff fc8b 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        eda1Report = "{ \"EDA1\": \"";
   d53ae:	4924      	ldr	r1, [pc, #144]	; (d5440 <loop+0x380>)
   d53b0:	4805      	ldr	r0, [pc, #20]	; (d53c8 <loop+0x308>)
   d53b2:	f001 fec7 	bl	d7144 <_ZN6StringaSEPKc>
        reportTurnCounter = 3;
   d53b6:	2303      	movs	r3, #3
        reportTurnCounter = 1;
   d53b8:	7023      	strb	r3, [r4, #0]
        break;
   d53ba:	e7a7      	b.n	d530c <loop+0x24c>
   d53bc:	2003e398 	.word	0x2003e398
   d53c0:	2003e46c 	.word	0x2003e46c
   d53c4:	2003e4b0 	.word	0x2003e4b0
   d53c8:	2003e4b4 	.word	0x2003e4b4
   d53cc:	2003e580 	.word	0x2003e580
   d53d0:	42c80000 	.word	0x42c80000
   d53d4:	2003e584 	.word	0x2003e584
   d53d8:	2003e428 	.word	0x2003e428
   d53dc:	2003e4ec 	.word	0x2003e4ec
   d53e0:	2003e4ac 	.word	0x2003e4ac
   d53e4:	2003e460 	.word	0x2003e460
   d53e8:	2003e394 	.word	0x2003e394
   d53ec:	2003e550 	.word	0x2003e550
   d53f0:	2003e590 	.word	0x2003e590
   d53f4:	2003e3a0 	.word	0x2003e3a0
   d53f8:	2003e472 	.word	0x2003e472
   d53fc:	2003e4a4 	.word	0x2003e4a4
   d5400:	2003e588 	.word	0x2003e588
   d5404:	2003e544 	.word	0x2003e544
   d5408:	2003e3a4 	.word	0x2003e3a4
   d540c:	2003e560 	.word	0x2003e560
   d5410:	2003e3a1 	.word	0x2003e3a1
   d5414:	2003e4a8 	.word	0x2003e4a8
   d5418:	2003e58c 	.word	0x2003e58c
   d541c:	2003e548 	.word	0x2003e548
   d5420:	2003e3a8 	.word	0x2003e3a8
   d5424:	2003e488 	.word	0x2003e488
   d5428:	2003e4e0 	.word	0x2003e4e0
   d542c:	2003e528 	.word	0x2003e528
   d5430:	2003e39c 	.word	0x2003e39c
   d5434:	000d9ddf 	.word	0x000d9ddf
   d5438:	2003e45c 	.word	0x2003e45c
   d543c:	000d9de2 	.word	0x000d9de2
   d5440:	000d9de7 	.word	0x000d9de7
   d5444:	2003e568 	.word	0x2003e568
   d5448:	2003e4d8 	.word	0x2003e4d8
   d544c:	2003e464 	.word	0x2003e464
   d5450:	2003e468 	.word	0x2003e468
   d5454:	2003e4e4 	.word	0x2003e4e4
   d5458:	2003e4e8 	.word	0x2003e4e8
   d545c:	2003e54c 	.word	0x2003e54c
        computeSummaryReport();
   d5460:	f7ff fa62 	bl	d4928 <_Z20computeSummaryReportv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5464:	f000 fed0 	bl	d6208 <spark_cloud_flag_connected>
        if(Particle.connected()){
   d5468:	b168      	cbz	r0, d5486 <loop+0x3c6>
   d546a:	4b0a      	ldr	r3, [pc, #40]	; (d5494 <loop+0x3d4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d546c:	4a0a      	ldr	r2, [pc, #40]	; (d5498 <loop+0x3d8>)
   d546e:	781b      	ldrb	r3, [r3, #0]
   d5470:	f88d 3000 	strb.w	r3, [sp]
   d5474:	a804      	add	r0, sp, #16
   d5476:	6812      	ldr	r2, [r2, #0]
   d5478:	4908      	ldr	r1, [pc, #32]	; (d549c <loop+0x3dc>)
   d547a:	233c      	movs	r3, #60	; 0x3c
   d547c:	f001 f8e8 	bl	d6650 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5480:	a805      	add	r0, sp, #20
   d5482:	f7ff fc1f 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        summaryReport = "";
   d5486:	4906      	ldr	r1, [pc, #24]	; (d54a0 <loop+0x3e0>)
   d5488:	4803      	ldr	r0, [pc, #12]	; (d5498 <loop+0x3d8>)
   d548a:	f001 fe5b 	bl	d7144 <_ZN6StringaSEPKc>
        reportTurnCounter = 1;
   d548e:	2301      	movs	r3, #1
   d5490:	e792      	b.n	d53b8 <loop+0x2f8>
   d5492:	bf00      	nop
   d5494:	2003e45c 	.word	0x2003e45c
   d5498:	2003e570 	.word	0x2003e570
   d549c:	000d9dd1 	.word	0x000d9dd1
   d54a0:	000d9dc0 	.word	0x000d9dc0

000d54a4 <_ZL8i2cwriteh>:
/*!
    @brief  Abstract away platform differences in Arduino wire library
    @param x byte to write
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
   d54a4:	b507      	push	{r0, r1, r2, lr}
   d54a6:	9001      	str	r0, [sp, #4]
#if ARDUINO >= 100
  Wire.write((uint8_t)x);
   d54a8:	f002 fa82 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d54ac:	6803      	ldr	r3, [r0, #0]
   d54ae:	9901      	ldr	r1, [sp, #4]
   d54b0:	689b      	ldr	r3, [r3, #8]
#else
  Wire.send(x);
#endif
}
   d54b2:	b003      	add	sp, #12
   d54b4:	f85d eb04 	ldr.w	lr, [sp], #4
  Wire.write((uint8_t)x);
   d54b8:	4718      	bx	r3

000d54ba <_ZL7i2creadv>:
static uint8_t i2cread(void) {
   d54ba:	b508      	push	{r3, lr}
  return Wire.read();
   d54bc:	f002 fa78 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d54c0:	6803      	ldr	r3, [r0, #0]
   d54c2:	695b      	ldr	r3, [r3, #20]
   d54c4:	4798      	blx	r3
}
   d54c6:	b2c0      	uxtb	r0, r0
   d54c8:	bd08      	pop	{r3, pc}

000d54ca <_ZL13writeRegisterhht>:
    @param i2cAddress I2C address of device
    @param reg register address to write to
    @param value value to write to register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
   d54ca:	b570      	push	{r4, r5, r6, lr}
   d54cc:	4606      	mov	r6, r0
   d54ce:	4614      	mov	r4, r2
   d54d0:	460d      	mov	r5, r1
  Wire.beginTransmission(i2cAddress);
   d54d2:	f002 fa6d 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d54d6:	4631      	mov	r1, r6
   d54d8:	f001 fae2 	bl	d6aa0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
   d54dc:	4628      	mov	r0, r5
   d54de:	f7ff ffe1 	bl	d54a4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value >> 8));
   d54e2:	0a20      	lsrs	r0, r4, #8
   d54e4:	f7ff ffde 	bl	d54a4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
   d54e8:	b2e0      	uxtb	r0, r4
   d54ea:	f7ff ffdb 	bl	d54a4 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d54ee:	f002 fa5f 	bl	d79b0 <_Z19__fetch_global_Wirev>
}
   d54f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
   d54f6:	f001 badb 	b.w	d6ab0 <_ZN7TwoWire15endTransmissionEv>

000d54fa <_ZL12readRegisterhh.constprop.0>:
    @param i2cAddress I2C address of device
    @param reg register address to read from
    @return 16 bit register value read
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
   d54fa:	b513      	push	{r0, r1, r4, lr}
   d54fc:	9001      	str	r0, [sp, #4]
  Wire.beginTransmission(i2cAddress);
   d54fe:	f002 fa57 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d5502:	9901      	ldr	r1, [sp, #4]
   d5504:	f001 facc 	bl	d6aa0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(reg);
   d5508:	2000      	movs	r0, #0
   d550a:	f7ff ffcb 	bl	d54a4 <_ZL8i2cwriteh>
  Wire.endTransmission();
   d550e:	f002 fa4f 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d5512:	f001 facd 	bl	d6ab0 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
   d5516:	f002 fa4b 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d551a:	9901      	ldr	r1, [sp, #4]
   d551c:	2202      	movs	r2, #2
   d551e:	f001 fabc 	bl	d6a9a <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());
   d5522:	f7ff ffca 	bl	d54ba <_ZL7i2creadv>
   d5526:	4604      	mov	r4, r0
   d5528:	f7ff ffc7 	bl	d54ba <_ZL7i2creadv>
   d552c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
   d5530:	b280      	uxth	r0, r0
   d5532:	b002      	add	sp, #8
   d5534:	bd10      	pop	{r4, pc}

000d5536 <_ZN16Adafruit_ADS1115C1Eh>:
/**************************************************************************/
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
  m_conversionDelay = ADS1015_CONVERSIONDELAY;
  m_bitShift = 4;
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d5536:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
    @param i2cAddress I2C address of device
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress) {
  m_i2cAddress = i2cAddress;
   d5538:	7001      	strb	r1, [r0, #0]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d553a:	2102      	movs	r1, #2
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
   d553c:	8082      	strh	r2, [r0, #4]
  m_conversionDelay = ADS1115_CONVERSIONDELAY;
   d553e:	7041      	strb	r1, [r0, #1]
  m_bitShift = 0;
   d5540:	7082      	strb	r2, [r0, #2]
  m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
   d5542:	4770      	bx	lr

000d5544 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() { Wire.begin(); }
   d5544:	b508      	push	{r3, lr}
   d5546:	f002 fa33 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d554a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d554e:	f001 ba75 	b.w	d6a3c <_ZN7TwoWire5beginEv>

000d5552 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
/*!
    @brief  Sets the gain and input voltage range
    @param gain gain setting to use
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain) { m_gain = gain; }
   d5552:	8081      	strh	r1, [r0, #4]
   d5554:	4770      	bx	lr

000d5556 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
    @param channel ADC channel to read
    @return the ADC reading
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3) {
   d5556:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
   d5558:	b510      	push	{r4, lr}
   d555a:	4604      	mov	r4, r0
  if (channel > 3) {
   d555c:	d822      	bhi.n	d55a4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel) {
   d555e:	2902      	cmp	r1, #2
  config |= m_gain;
   d5560:	8882      	ldrh	r2, [r0, #4]
  switch (channel) {
   d5562:	d019      	beq.n	d5598 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
   d5564:	2903      	cmp	r1, #3
   d5566:	d01a      	beq.n	d559e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
   d5568:	2901      	cmp	r1, #1
  case (0):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
   d556a:	bf14      	ite	ne
   d556c:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
    break;
  case (1):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d5570:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
    break;
  case (2):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
    break;
  case (3):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d5574:	f042 0243 	orr.w	r2, r2, #67	; 0x43

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d5578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   d557c:	2101      	movs	r1, #1
   d557e:	7820      	ldrb	r0, [r4, #0]
   d5580:	f7ff ffa3 	bl	d54ca <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d5584:	7860      	ldrb	r0, [r4, #1]
   d5586:	f000 fee7 	bl	d6358 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d558a:	7820      	ldrb	r0, [r4, #0]
   d558c:	f7ff ffb5 	bl	d54fa <_ZL12readRegisterhh.constprop.0>
   d5590:	78a3      	ldrb	r3, [r4, #2]
   d5592:	4118      	asrs	r0, r3
   d5594:	b280      	uxth	r0, r0
}
   d5596:	bd10      	pop	{r4, pc}
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d5598:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
   d559c:	e7ea      	b.n	d5574 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d559e:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
   d55a2:	e7e7      	b.n	d5574 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
   d55a4:	2000      	movs	r0, #0
   d55a6:	e7f6      	b.n	d5596 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>

000d55a8 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev>:
            a signed value since the difference can be either
            positive or negative.
    @return the ADC reading
*/
/**************************************************************************/
int16_t Adafruit_ADS1015::readADC_Differential_0_1() {
   d55a8:	b510      	push	{r4, lr}

  // Set channels
  config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1; // AIN0 = P, AIN1 = N

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;
   d55aa:	8882      	ldrh	r2, [r0, #4]
int16_t Adafruit_ADS1015::readADC_Differential_0_1() {
   d55ac:	4604      	mov	r4, r0

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d55ae:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
   d55b2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
   d55b6:	2101      	movs	r1, #1
   d55b8:	7800      	ldrb	r0, [r0, #0]
   d55ba:	f7ff ff86 	bl	d54ca <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
   d55be:	7860      	ldrb	r0, [r4, #1]
   d55c0:	f000 feca 	bl	d6358 <delay>

  // Read the conversion results
  uint16_t res =
      readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d55c4:	7820      	ldrb	r0, [r4, #0]
   d55c6:	f7ff ff98 	bl	d54fa <_ZL12readRegisterhh.constprop.0>
   d55ca:	78a3      	ldrb	r3, [r4, #2]
   d55cc:	4118      	asrs	r0, r3
  if (m_bitShift == 0) {
   d55ce:	b90b      	cbnz	r3, d55d4 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev+0x2c>
    // making sure we keep the sign bit intact
    if (res > 0x07FF) {
      // negative number - extend the sign to 16th bit
      res |= 0xF000;
    }
    return (int16_t)res;
   d55d0:	b200      	sxth	r0, r0
  }
}
   d55d2:	bd10      	pop	{r4, pc}
      readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;
   d55d4:	b280      	uxth	r0, r0
    if (res > 0x07FF) {
   d55d6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
      res |= 0xF000;
   d55da:	bf28      	it	cs
   d55dc:	f440 4070 	orrcs.w	r0, r0, #61440	; 0xf000
   d55e0:	e7f6      	b.n	d55d0 <_ZN16Adafruit_ADS101524readADC_Differential_0_1Ev+0x28>

000d55e2 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs>:
    @param channel ADC channel to use
    @param threshold comparator threshold
*/
/**************************************************************************/
void Adafruit_ADS1015::startComparator_SingleEnded(uint8_t channel,
                                                   int16_t threshold) {
   d55e2:	b538      	push	{r3, r4, r5, lr}

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel) {
   d55e4:	2902      	cmp	r1, #2
  config |= m_gain;
   d55e6:	8884      	ldrh	r4, [r0, #4]
                                                   int16_t threshold) {
   d55e8:	4605      	mov	r5, r0
  switch (channel) {
   d55ea:	d013      	beq.n	d5614 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x32>
   d55ec:	2903      	cmp	r1, #3
   d55ee:	d014      	beq.n	d561a <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x38>
   d55f0:	2901      	cmp	r1, #1
   d55f2:	d101      	bne.n	d55f8 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x16>
  case (0):
    config |= ADS1015_REG_CONFIG_MUX_DIFF_0_1;
    break;
  case (1):
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
   d55f4:	f444 44a0 	orr.w	r4, r4, #20480	; 0x5000
  }

  // Set the high threshold register
  // Shift 12-bit results left 4 bits for the ADS1015
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH,
                threshold << m_bitShift);
   d55f8:	78ab      	ldrb	r3, [r5, #2]
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH,
   d55fa:	7828      	ldrb	r0, [r5, #0]
                threshold << m_bitShift);
   d55fc:	409a      	lsls	r2, r3
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_HITHRESH,
   d55fe:	b292      	uxth	r2, r2
   d5600:	2103      	movs	r1, #3
   d5602:	f7ff ff62 	bl	d54ca <_ZL13writeRegisterhht>

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d5606:	7828      	ldrb	r0, [r5, #0]
   d5608:	4622      	mov	r2, r4
   d560a:	2101      	movs	r1, #1
}
   d560c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
   d5610:	f7ff bf5b 	b.w	d54ca <_ZL13writeRegisterhht>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
   d5614:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    break;
   d5618:	e7ee      	b.n	d55f8 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x16>
    config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
   d561a:	f444 44e0 	orr.w	r4, r4, #28672	; 0x7000
    break;
   d561e:	e7eb      	b.n	d55f8 <_ZN16Adafruit_ADS101527startComparator_SingleEndedEhs+0x16>

000d5620 <_Z5timerj>:
    // Timer Event 
    //if (NRF_TIMER4->EVENTS_COMPARE[0] != 0)
    PulseSensorAmped.update();
}

void timer(unsigned ms) {
   d5620:	b5f0      	push	{r4, r5, r6, r7, lr}

    // Set priority as high as possible.
    timer_config.interrupt_priority = 3;

    // Init the timer
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5622:	4c21      	ldr	r4, [pc, #132]	; (d56a8 <_Z5timerj+0x88>)
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d5624:	4921      	ldr	r1, [pc, #132]	; (d56ac <_Z5timerj+0x8c>)
void timer(unsigned ms) {
   d5626:	b085      	sub	sp, #20
   d5628:	4605      	mov	r5, r0
    attachInterruptDirect(TIMER4_IRQn,nrfx_timer_4_irq_handler);
   d562a:	2201      	movs	r2, #1
   d562c:	201b      	movs	r0, #27
   d562e:	f001 fa42 	bl	d6ab6 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d5632:	2600      	movs	r6, #0
   d5634:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5638:	4a1d      	ldr	r2, [pc, #116]	; (d56b0 <_Z5timerj+0x90>)
   d563a:	a902      	add	r1, sp, #8
   d563c:	4620      	mov	r0, r4
    nrfx_timer_config_t timer_config = NRFX_TIMER_DEFAULT_CONFIG;
   d563e:	e9cd 3602 	strd	r3, r6, [sp, #8]
    (void)nrfx_timer_init(&timer4,&timer_config,timer_isr);
   d5642:	f002 fa05 	bl	d7a50 <nrfx_timer_init>
    // if( err_code != NRF_SUCCESS ) Log.error("nrfx_timer_error");

    // Disable and clear the timer.
    nrfx_timer_disable(&timer4);
   d5646:	4620      	mov	r0, r4
   d5648:	f002 fadc 	bl	d7c04 <nrfx_timer_disable>
    nrfx_timer_clear(&timer4);
   d564c:	4620      	mov	r0, r4
   d564e:	f002 faf3 	bl	d7c38 <nrfx_timer_clear>

    // Calculate the ticks for 50 uS
    uint32_t ticks = nrfx_timer_us_to_ticks(&timer4,ms*1000);
   d5652:	6823      	ldr	r3, [r4, #0]
                              TIMER_PRESCALER_PRESCALER_Msk);
}

__STATIC_INLINE nrf_timer_frequency_t nrf_timer_frequency_get(NRF_TIMER_Type * p_reg)
{
    return (nrf_timer_frequency_t)(p_reg->PRESCALER);
   d5654:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   d5658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
                                               nrf_timer_frequency_t frequency)
{
    // The "frequency" parameter here is actually the prescaler value, and the
    // timer runs at the following frequency: f = 16 MHz / 2^prescaler.
    uint32_t prescaler = (uint32_t)frequency;
    uint64_t ticks = ((time_us * 16ULL) >> prescaler);
   d565c:	b2db      	uxtb	r3, r3
   d565e:	fb02 f005 	mul.w	r0, r2, r5
   d5662:	0f02      	lsrs	r2, r0, #28
   d5664:	f1c3 0720 	rsb	r7, r3, #32
   d5668:	0100      	lsls	r0, r0, #4
   d566a:	f1a3 0120 	sub.w	r1, r3, #32
   d566e:	fa20 f403 	lsr.w	r4, r0, r3
   d5672:	fa02 f707 	lsl.w	r7, r2, r7
   d5676:	433c      	orrs	r4, r7
   d5678:	fa22 f101 	lsr.w	r1, r2, r1
   d567c:	fa22 f503 	lsr.w	r5, r2, r3
   d5680:	430c      	orrs	r4, r1
    NRFX_ASSERT(ticks <= UINT32_MAX);
   d5682:	2d01      	cmp	r5, #1
   d5684:	bf08      	it	eq
   d5686:	2c00      	cmpeq	r4, #0
   d5688:	d304      	bcc.n	d5694 <_Z5timerj+0x74>
   d568a:	4a0a      	ldr	r2, [pc, #40]	; (d56b4 <_Z5timerj+0x94>)
   d568c:	4631      	mov	r1, r6
   d568e:	200a      	movs	r0, #10
   d5690:	f000 fd6c 	bl	d616c <panic_>

    // Set the compare for the start and the end
    nrfx_timer_extended_compare(&timer4, NRF_TIMER_CC_CHANNEL0, ticks, NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK, true);
   d5694:	2301      	movs	r3, #1
   d5696:	4804      	ldr	r0, [pc, #16]	; (d56a8 <_Z5timerj+0x88>)
   d5698:	9300      	str	r3, [sp, #0]
   d569a:	4622      	mov	r2, r4
   d569c:	2100      	movs	r1, #0
   d569e:	f002 fafc 	bl	d7c9a <nrfx_timer_extended_compare>
}
   d56a2:	b005      	add	sp, #20
   d56a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d56a6:	bf00      	nop
   d56a8:	2003e3ac 	.word	0x2003e3ac
   d56ac:	000d7cc9 	.word	0x000d7cc9
   d56b0:	000d58e9 	.word	0x000d58e9
   d56b4:	000d5eb9 	.word	0x000d5eb9

000d56b8 <_ZN21PulseSensorAmpedClass6attachEi>:
}                     
                                                                                                                                                                                                                                                                              
// Configure the sensor
void PulseSensorAmpedClass::attach(int pin) {
  // Do not allow analog pin to change
  if(analogPin==-1) {
   d56b8:	6803      	ldr	r3, [r0, #0]
   d56ba:	3301      	adds	r3, #1
    analogPin = pin;
   d56bc:	bf08      	it	eq
   d56be:	6001      	streq	r1, [r0, #0]
  }
  timer(2); // Enable a 2ms timer.
   d56c0:	2002      	movs	r0, #2
   d56c2:	f7ff bfad 	b.w	d5620 <_Z5timerj>
	...

000d56c8 <_ZN21PulseSensorAmpedClass5startEv>:
}

void PulseSensorAmpedClass::start(void) {
   d56c8:	b510      	push	{r4, lr}
  // Only allow the sensor to start/stop if the pin is configured
  // Start TIMER (If pin configured)
  if(analogPin != -1)
   d56ca:	6803      	ldr	r3, [r0, #0]
   d56cc:	3301      	adds	r3, #1
void PulseSensorAmpedClass::start(void) {
   d56ce:	4604      	mov	r4, r0
  if(analogPin != -1)
   d56d0:	d002      	beq.n	d56d8 <_ZN21PulseSensorAmpedClass5startEv+0x10>
      nrfx_timer_enable(&timer4);
   d56d2:	480c      	ldr	r0, [pc, #48]	; (d5704 <_ZN21PulseSensorAmpedClass5startEv+0x3c>)
   d56d4:	f002 fa78 	bl	d7bc8 <nrfx_timer_enable>

  // Re-initialize variables:
  sampleCounter = 0;
  lastBeatTime = 0; 
  peak = 512;
   d56d8:	f44f 7200 	mov.w	r2, #512	; 0x200
  trough = 512;
   d56dc:	e9c4 2206 	strd	r2, r2, [r4, #24]
  thresh = 525;
  amplitude = 100;
   d56e0:	f240 210d 	movw	r1, #525	; 0x20d
   d56e4:	2264      	movs	r2, #100	; 0x64
   d56e6:	e9c4 1208 	strd	r1, r2, [r4, #32]
  IBI = 600;
   d56ea:	f44f 7216 	mov.w	r2, #600	; 0x258
  sampleCounter = 0;
   d56ee:	2300      	movs	r3, #0
  IBI = 600;
   d56f0:	60e2      	str	r2, [r4, #12]
  pulse = false;
   d56f2:	f44f 7280 	mov.w	r2, #256	; 0x100
  lastBeatTime = 0; 
   d56f6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  pulse = false;
   d56fa:	8522      	strh	r2, [r4, #40]	; 0x28
  pulseLost = true;
  beatCount = 0;
   d56fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  postUpdate = false;
   d56fe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d5702:	bd10      	pop	{r4, pc}
   d5704:	2003e3ac 	.word	0x2003e3ac

000d5708 <_ZN21PulseSensorAmpedClass4stopEv>:

void PulseSensorAmpedClass::stop(void) {
   d5708:	b510      	push	{r4, lr}
   d570a:	4604      	mov	r4, r0
  // Stop measurements
  nrfx_timer_disable(&timer4);
   d570c:	4803      	ldr	r0, [pc, #12]	; (d571c <_ZN21PulseSensorAmpedClass4stopEv+0x14>)
   d570e:	f002 fa79 	bl	d7c04 <nrfx_timer_disable>
  postUpdate = false;
   d5712:	2300      	movs	r3, #0
   d5714:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   d5718:	bd10      	pop	{r4, pc}
   d571a:	bf00      	nop
   d571c:	2003e3ac 	.word	0x2003e3ac

000d5720 <_ZN21PulseSensorAmpedClass6updateEv>:



void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d5720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static unsigned rate[10];                         // array to average IBI values for average rate
  static unsigned beatCount = 0;

  if(fakeData) {
   d5722:	7903      	ldrb	r3, [r0, #4]
void PulseSensorAmpedClass::update() {              // Update this ever 2ms
   d5724:	4604      	mov	r4, r0
  if(fakeData) {
   d5726:	b313      	cbz	r3, d576e <_ZN21PulseSensorAmpedClass6updateEv+0x4e>
    // Send an update once per second
    if(beatCount >= 500) {
   d5728:	4d6b      	ldr	r5, [pc, #428]	; (d58d8 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d572a:	682b      	ldr	r3, [r5, #0]
   d572c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   d5730:	d30c      	bcc.n	d574c <_ZN21PulseSensorAmpedClass6updateEv+0x2c>
       if(random(100)<2) {
   d5732:	2064      	movs	r0, #100	; 0x64
   d5734:	f001 fc34 	bl	d6fa0 <_Z6randomi>
   d5738:	2801      	cmp	r0, #1
   d573a:	dc0b      	bgt.n	d5754 <_ZN21PulseSensorAmpedClass6updateEv+0x34>
         BPM = -1;
   d573c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
       } else {
        IBI = random(770,1100);
        BPM = 60000/IBI;        
   d5740:	60a3      	str	r3, [r4, #8]
       }
       postUpdate = true;
   d5742:	2301      	movs	r3, #1
   d5744:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
       beatCount = 0;
   d5748:	2300      	movs	r3, #0
   d574a:	602b      	str	r3, [r5, #0]
    }
    beatCount++;
   d574c:	682b      	ldr	r3, [r5, #0]
   d574e:	3301      	adds	r3, #1
   d5750:	602b      	str	r3, [r5, #0]
    trough = signal;                 // set T default
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
    pulseLost = true;
    beatCount = 0;
  }
}
   d5752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        IBI = random(770,1100);
   d5754:	f240 414c 	movw	r1, #1100	; 0x44c
   d5758:	f240 3002 	movw	r0, #770	; 0x302
   d575c:	f001 fc2b 	bl	d6fb6 <_Z6randomii>
   d5760:	60e0      	str	r0, [r4, #12]
        BPM = 60000/IBI;        
   d5762:	68e2      	ldr	r2, [r4, #12]
   d5764:	f64e 2360 	movw	r3, #60000	; 0xea60
   d5768:	fbb3 f3f2 	udiv	r3, r3, r2
   d576c:	e7e8      	b.n	d5740 <_ZN21PulseSensorAmpedClass6updateEv+0x20>
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d576e:	4d5b      	ldr	r5, [pc, #364]	; (d58dc <_ZN21PulseSensorAmpedClass6updateEv+0x1bc>)
    hal_adc_set_sample_time(sample_time);
}

inline int32_t __attribute__((deprecated("Use hal_adc_read() instead"), always_inline))
HAL_ADC_Read(pin_t pin) {
    return hal_adc_read(pin);
   d5770:	8800      	ldrh	r0, [r0, #0]
   d5772:	f000 fbe9 	bl	d5f48 <hal_adc_read>
   d5776:	4a5a      	ldr	r2, [pc, #360]	; (d58e0 <_ZN21PulseSensorAmpedClass6updateEv+0x1c0>)
   d5778:	682b      	ldr	r3, [r5, #0]
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d577a:	6926      	ldr	r6, [r4, #16]
  signalFilter[filterIndex] =  HAL_ADC_Read(analogPin);
   d577c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  filterIndex = (filterIndex+1)%5;
   d5780:	2105      	movs	r1, #5
   d5782:	3301      	adds	r3, #1
   d5784:	fbb3 f0f1 	udiv	r0, r3, r1
   d5788:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d578c:	1a1b      	subs	r3, r3, r0
   d578e:	602b      	str	r3, [r5, #0]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d5790:	e9d2 3500 	ldrd	r3, r5, [r2]
   d5794:	441d      	add	r5, r3
   d5796:	6893      	ldr	r3, [r2, #8]
   d5798:	441d      	add	r5, r3
   d579a:	68d3      	ldr	r3, [r2, #12]
   d579c:	441d      	add	r5, r3
   d579e:	6913      	ldr	r3, [r2, #16]
  if(signal < thresh) {         // Update trough based on threshold
   d57a0:	6a22      	ldr	r2, [r4, #32]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d57a2:	441d      	add	r5, r3
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d57a4:	6963      	ldr	r3, [r4, #20]
  int signal = (signalFilter[0] + signalFilter[1] + signalFilter[2] + signalFilter[3] + signalFilter[4])/5;
   d57a6:	fbb5 f5f1 	udiv	r5, r5, r1
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d57aa:	3602      	adds	r6, #2
  if(signal < thresh) {         // Update trough based on threshold
   d57ac:	4295      	cmp	r5, r2
  sampleCounter += 2;                          // keep track of the time in mS with this variable
   d57ae:	6126      	str	r6, [r4, #16]
  unsigned elapsedTime = sampleCounter - lastBeatTime;  // Time passed since the last beat
   d57b0:	eba6 0603 	sub.w	r6, r6, r3
  boolean beyondDicrotic = elapsedTime > (IBI/5)*3;    // Has sufficient time passed to avoid the dichrotic noise?
   d57b4:	68e3      	ldr	r3, [r4, #12]
   d57b6:	fbb3 f3f1 	udiv	r3, r3, r1
   d57ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if(signal < thresh) {         // Update trough based on threshold
   d57be:	da23      	bge.n	d5808 <_ZN21PulseSensorAmpedClass6updateEv+0xe8>
    if(beyondDicrotic) {       // avoid dicrotic noise when finding trough
   d57c0:	429e      	cmp	r6, r3
   d57c2:	d904      	bls.n	d57ce <_ZN21PulseSensorAmpedClass6updateEv+0xae>
      trough = min(signal, trough);
   d57c4:	69e3      	ldr	r3, [r4, #28]
   d57c6:	42ab      	cmp	r3, r5
   d57c8:	bfd4      	ite	le
   d57ca:	61e3      	strle	r3, [r4, #28]
   d57cc:	61e5      	strgt	r5, [r4, #28]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d57ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d57d2:	2b00      	cmp	r3, #0
   d57d4:	d05f      	beq.n	d5896 <_ZN21PulseSensorAmpedClass6updateEv+0x176>
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d57d6:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d57da:	1a9b      	subs	r3, r3, r2
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d57dc:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   d57e0:	eb02 0261 	add.w	r2, r2, r1, asr #1
    trough = thresh;                          // Trough won't update until beyond threshold
   d57e4:	e9c4 2206 	strd	r2, r2, [r4, #24]
    thresh = amplitude/2 + trough;            // Use 50% of the last amplitude as new threshold
   d57e8:	6222      	str	r2, [r4, #32]
    if(amplitude>300)
   d57ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    pulse = false;                            // Update status
   d57ee:	f04f 0200 	mov.w	r2, #0
    amplitude = peak - trough;                // Compute the amplitude of the last sample
   d57f2:	6263      	str	r3, [r4, #36]	; 0x24
    pulse = false;                            // Update status
   d57f4:	8522      	strh	r2, [r4, #40]	; 0x28
    if(amplitude>300)
   d57f6:	dd02      	ble.n	d57fe <_ZN21PulseSensorAmpedClass6updateEv+0xde>
      postUpdate = true;
   d57f8:	2301      	movs	r3, #1
   d57fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d57fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d5802:	429e      	cmp	r6, r3
   d5804:	d84f      	bhi.n	d58a6 <_ZN21PulseSensorAmpedClass6updateEv+0x186>
   d5806:	e7a4      	b.n	d5752 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    peak = max(signal, peak);  
   d5808:	69a1      	ldr	r1, [r4, #24]
   d580a:	42a9      	cmp	r1, r5
   d580c:	bfac      	ite	ge
   d580e:	61a1      	strge	r1, [r4, #24]
   d5810:	61a5      	strlt	r5, [r4, #24]
  if(elapsedTime > 250){                         // Assume at least 250ms between beats (i.e., BPM<240); Helps avoid noise
   d5812:	2efa      	cmp	r6, #250	; 0xfa
   d5814:	d99d      	bls.n	d5752 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if((signal > thresh) && (pulse == false) && beyondDicrotic) {        
   d5816:	4295      	cmp	r5, r2
   d5818:	dd3d      	ble.n	d5896 <_ZN21PulseSensorAmpedClass6updateEv+0x176>
   d581a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   d581e:	2a00      	cmp	r2, #0
   d5820:	d136      	bne.n	d5890 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
   d5822:	429e      	cmp	r6, r3
   d5824:	d934      	bls.n	d5890 <_ZN21PulseSensorAmpedClass6updateEv+0x170>
      pulse = true;
   d5826:	2301      	movs	r3, #1
      IBI = sampleCounter - lastBeatTime;         // measure time between beats in mS (Starting from point the threshold is exceeded)
   d5828:	60e6      	str	r6, [r4, #12]
      calculateHRV(IBI);
   d582a:	68e0      	ldr	r0, [r4, #12]
      pulse = true;
   d582c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      calculateHRV(IBI);
   d5830:	f7ff f806 	bl	d4840 <_Z12calculateHRVi>
      rate[beatCount%10] = IBI;
   d5834:	4928      	ldr	r1, [pc, #160]	; (d58d8 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
      lastBeatTime = sampleCounter;               // keep track of the start time of this beat
   d5836:	6923      	ldr	r3, [r4, #16]
   d5838:	6163      	str	r3, [r4, #20]
      rate[beatCount%10] = IBI;
   d583a:	680b      	ldr	r3, [r1, #0]
   d583c:	4f29      	ldr	r7, [pc, #164]	; (d58e4 <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d583e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   d5842:	200a      	movs	r0, #10
   d5844:	fbb3 f2f0 	udiv	r2, r3, r0
   d5848:	fb00 3212 	mls	r2, r0, r2, r3
      beatCount++;
   d584c:	3301      	adds	r3, #1
      if(beatCount<3) {
   d584e:	2b02      	cmp	r3, #2
      rate[beatCount%10] = IBI;
   d5850:	f847 c022 	str.w	ip, [r7, r2, lsl #2]
      beatCount++;
   d5854:	600b      	str	r3, [r1, #0]
      if(beatCount<3) {
   d5856:	f67f af7c 	bls.w	d5752 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
      } else if(beatCount==3) {
   d585a:	2b03      	cmp	r3, #3
        rate[0]=(rate[1]+rate[2])/2;  
   d585c:	bf01      	itttt	eq
   d585e:	e9d7 2101 	ldrdeq	r2, r1, [r7, #4]
   d5862:	1852      	addeq	r2, r2, r1
   d5864:	0852      	lsreq	r2, r2, #1
   d5866:	603a      	streq	r2, [r7, #0]
      int maxIndex = min(beatCount, 10);      
   d5868:	481e      	ldr	r0, [pc, #120]	; (d58e4 <_ZN21PulseSensorAmpedClass6updateEv+0x1c4>)
   d586a:	2b0a      	cmp	r3, #10
      word runningTotal = 0;
   d586c:	f04f 0200 	mov.w	r2, #0
      int maxIndex = min(beatCount, 10);      
   d5870:	bf28      	it	cs
   d5872:	230a      	movcs	r3, #10
      for(int i=0; i<maxIndex; i++) {
   d5874:	4611      	mov	r1, r2
        runningTotal += rate[i];              
   d5876:	f850 7b04 	ldr.w	r7, [r0], #4
      for(int i=0; i<maxIndex; i++) {
   d587a:	3101      	adds	r1, #1
   d587c:	428b      	cmp	r3, r1
        runningTotal += rate[i];              
   d587e:	443a      	add	r2, r7
      for(int i=0; i<maxIndex; i++) {
   d5880:	dcf9      	bgt.n	d5876 <_ZN21PulseSensorAmpedClass6updateEv+0x156>
      runningTotal /= maxIndex;               // average the last 10 IBI values 
   d5882:	fbb2 f3f3 	udiv	r3, r2, r3
      BPM = 60000/runningTotal;               // how many beats can fit into a minute? that's BPM!
   d5886:	f64e 2260 	movw	r2, #60000	; 0xea60
   d588a:	fbb2 f3f3 	udiv	r3, r2, r3
   d588e:	60a3      	str	r3, [r4, #8]
  if(signal < thresh && pulse == true) {      // when the values are going down the beat is over
   d5890:	6a23      	ldr	r3, [r4, #32]
   d5892:	429d      	cmp	r5, r3
   d5894:	db9b      	blt.n	d57ce <_ZN21PulseSensorAmpedClass6updateEv+0xae>
  if(elapsedTime > 2500) {                 // if 2.5S elapse without a valid beat
   d5896:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d589a:	429e      	cmp	r6, r3
   d589c:	f67f af59 	bls.w	d5752 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
    if(!pulseLost) {                       // If it was good, notify the loss
   d58a0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   d58a4:	b92b      	cbnz	r3, d58b2 <_ZN21PulseSensorAmpedClass6updateEv+0x192>
      BPM = -1;
   d58a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d58aa:	60a3      	str	r3, [r4, #8]
      postUpdate = true;
   d58ac:	2301      	movs	r3, #1
   d58ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    thresh = trough + (peak-trough)/3;  // set thresh default
   d58b2:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
   d58b6:	2103      	movs	r1, #3
   d58b8:	1a9b      	subs	r3, r3, r2
   d58ba:	fb93 f3f1 	sdiv	r3, r3, r1
   d58be:	4413      	add	r3, r2
   d58c0:	6223      	str	r3, [r4, #32]
    lastBeatTime = sampleCounter;    // bring the lastBeatTime up to date        
   d58c2:	6923      	ldr	r3, [r4, #16]
   d58c4:	6163      	str	r3, [r4, #20]
    pulseLost = true;
   d58c6:	2301      	movs	r3, #1
   d58c8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    beatCount = 0;
   d58cc:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <_ZN21PulseSensorAmpedClass6updateEv+0x1b8>)
   d58ce:	2200      	movs	r2, #0
    trough = signal;                 // set T default
   d58d0:	e9c4 5506 	strd	r5, r5, [r4, #24]
    beatCount = 0;
   d58d4:	601a      	str	r2, [r3, #0]
   d58d6:	e73c      	b.n	d5752 <_ZN21PulseSensorAmpedClass6updateEv+0x32>
   d58d8:	2003e604 	.word	0x2003e604
   d58dc:	2003e5c4 	.word	0x2003e5c4
   d58e0:	2003e5c8 	.word	0x2003e5c8
   d58e4:	2003e5dc 	.word	0x2003e5dc

000d58e8 <_Z9timer_isr17nrf_timer_event_tPv>:
    PulseSensorAmped.update();
   d58e8:	4801      	ldr	r0, [pc, #4]	; (d58f0 <_Z9timer_isr17nrf_timer_event_tPv+0x8>)
   d58ea:	f7ff bf19 	b.w	d5720 <_ZN21PulseSensorAmpedClass6updateEv>
   d58ee:	bf00      	nop
   d58f0:	2003e590 	.word	0x2003e590

000d58f4 <_ZN21PulseSensorAmpedClass7processEv>:

void PulseSensorAmpedClass::process(void) {
   d58f4:	b510      	push	{r4, lr}
  // Put updates into foreground
  if(postUpdate) {
   d58f6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
void PulseSensorAmpedClass::process(void) {
   d58fa:	4604      	mov	r4, r0
  if(postUpdate) {
   d58fc:	b14b      	cbz	r3, d5912 <_ZN21PulseSensorAmpedClass7processEv+0x1e>
    if(BPM>=0)
   d58fe:	6883      	ldr	r3, [r0, #8]
   d5900:	2b00      	cmp	r3, #0
   d5902:	db07      	blt.n	d5914 <_ZN21PulseSensorAmpedClass7processEv+0x20>
      PulseSensorAmped_data(BPM, IBI);
   d5904:	6880      	ldr	r0, [r0, #8]
   d5906:	68e1      	ldr	r1, [r4, #12]
   d5908:	f7fe ff92 	bl	d4830 <_Z21PulseSensorAmped_dataii>
    else 
      PulseSensorAmped_lost();	         
    postUpdate = false;
   d590c:	2300      	movs	r3, #0
   d590e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  } 
}
   d5912:	bd10      	pop	{r4, pc}
      PulseSensorAmped_lost();	         
   d5914:	f7ff f804 	bl	d4920 <_Z21PulseSensorAmped_lostv>
   d5918:	e7f8      	b.n	d590c <_ZN21PulseSensorAmpedClass7processEv+0x18>
	...

000d591c <_GLOBAL__sub_I_PulseSensorAmped>:
  analogPin = -1;
   d591c:	4b03      	ldr	r3, [pc, #12]	; (d592c <_GLOBAL__sub_I_PulseSensorAmped+0x10>)
   d591e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5922:	601a      	str	r2, [r3, #0]
  fakeData = false;
   d5924:	2200      	movs	r2, #0
   d5926:	711a      	strb	r2, [r3, #4]
}
   d5928:	4770      	bx	lr
   d592a:	bf00      	nop
   d592c:	2003e590 	.word	0x2003e590

000d5930 <_Z19ICM_20948_write_I2ChPhmPv>:
    return ICM_20948_Stat_Ok;
}

// serif functions for the I2C and SPI classes
ICM_20948_Status_e ICM_20948_write_I2C(uint8_t reg, uint8_t *data, uint32_t len, void *user)
{
   d5930:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5932:	4606      	mov	r6, r0
   d5934:	460d      	mov	r5, r1
   d5936:	9201      	str	r2, [sp, #4]
    if (user == NULL)
   d5938:	b1bb      	cbz	r3, d596a <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c; // Cast user field to ICM_20948_I2C type and extract the I2C interface pointer
   d593a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d593c:	b1ac      	cbz	r4, d596a <_Z19ICM_20948_write_I2ChPhmPv+0x3a>
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d593e:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
   d5942:	4620      	mov	r0, r4
   d5944:	f001 f8ac 	bl	d6aa0 <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d5948:	6823      	ldr	r3, [r4, #0]
   d594a:	4631      	mov	r1, r6
   d594c:	689b      	ldr	r3, [r3, #8]
   d594e:	4620      	mov	r0, r4
   d5950:	4798      	blx	r3
    _i2c->write(data, len);
   d5952:	6823      	ldr	r3, [r4, #0]
   d5954:	9a01      	ldr	r2, [sp, #4]
   d5956:	68db      	ldr	r3, [r3, #12]
   d5958:	4629      	mov	r1, r5
   d595a:	4620      	mov	r0, r4
   d595c:	4798      	blx	r3
    _i2c->endTransmission();
   d595e:	4620      	mov	r0, r4
   d5960:	f001 f8a6 	bl	d6ab0 <_ZN7TwoWire15endTransmissionEv>
    //     delay(10);
    // }

    // delay(10);

    return ICM_20948_Stat_Ok;
   d5964:	2000      	movs	r0, #0
}
   d5966:	b002      	add	sp, #8
   d5968:	bd70      	pop	{r4, r5, r6, pc}
        return ICM_20948_Stat_ParamErr;
   d596a:	2003      	movs	r0, #3
   d596c:	e7fb      	b.n	d5966 <_Z19ICM_20948_write_I2ChPhmPv+0x36>

000d596e <_Z18ICM_20948_read_I2ChPhmPv>:

ICM_20948_Status_e ICM_20948_read_I2C(uint8_t reg, uint8_t *buff, uint32_t len, void *user)
{
   d596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5972:	4607      	mov	r7, r0
   d5974:	460e      	mov	r6, r1
   d5976:	4615      	mov	r5, r2
    if (user == NULL)
   d5978:	b32b      	cbz	r3, d59c6 <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    {
        return ICM_20948_Stat_ParamErr;
    }
    TwoWire *_i2c = ((ICM_20948_I2C *)user)->_i2c;
   d597a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
    if (_i2c == NULL)
   d597c:	b31c      	cbz	r4, d59c6 <_Z18ICM_20948_read_I2ChPhmPv+0x58>
    uint8_t addr = ((ICM_20948_I2C *)user)->_addr;
   d597e:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
    {
        return ICM_20948_Stat_ParamErr;
    }

    _i2c->beginTransmission(addr);
   d5982:	4620      	mov	r0, r4
   d5984:	4641      	mov	r1, r8
   d5986:	f001 f88b 	bl	d6aa0 <_ZN7TwoWire17beginTransmissionEh>
    _i2c->write(reg);
   d598a:	6823      	ldr	r3, [r4, #0]
   d598c:	4639      	mov	r1, r7
   d598e:	689b      	ldr	r3, [r3, #8]
   d5990:	4620      	mov	r0, r4
   d5992:	4798      	blx	r3
    _i2c->endTransmission(false); // Send repeated start
   d5994:	2100      	movs	r1, #0
   d5996:	4620      	mov	r0, r4
   d5998:	f001 f886 	bl	d6aa8 <_ZN7TwoWire15endTransmissionEh>

    uint32_t offset = 0;
    uint32_t num_received = _i2c->requestFrom(addr, len);
   d599c:	462a      	mov	r2, r5
   d599e:	4641      	mov	r1, r8
   d59a0:	4620      	mov	r0, r4
   d59a2:	f001 f87a 	bl	d6a9a <_ZN7TwoWire11requestFromEhj>
    //     }else{
    //         break;
    //     }
    // }

    if (num_received == len)
   d59a6:	4285      	cmp	r5, r0
   d59a8:	d110      	bne.n	d59cc <_Z18ICM_20948_read_I2ChPhmPv+0x5e>
   d59aa:	2700      	movs	r7, #0
    {
        for (uint8_t i = 0; i < len; i++)
   d59ac:	fa5f f887 	uxtb.w	r8, r7
   d59b0:	4545      	cmp	r5, r8
   d59b2:	f107 0701 	add.w	r7, r7, #1
   d59b6:	d90b      	bls.n	d59d0 <_Z18ICM_20948_read_I2ChPhmPv+0x62>
        {
            buff[i] = _i2c->read();
   d59b8:	6823      	ldr	r3, [r4, #0]
   d59ba:	4620      	mov	r0, r4
   d59bc:	695b      	ldr	r3, [r3, #20]
   d59be:	4798      	blx	r3
   d59c0:	f806 0008 	strb.w	r0, [r6, r8]
        for (uint8_t i = 0; i < len; i++)
   d59c4:	e7f2      	b.n	d59ac <_Z18ICM_20948_read_I2ChPhmPv+0x3e>
        return ICM_20948_Stat_ParamErr;
   d59c6:	2003      	movs	r0, #3
    if (len != 0)
    {
        return ICM_20948_Stat_NoData;
    }
    return ICM_20948_Stat_Ok;
}
   d59c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return ICM_20948_Stat_NoData;
   d59cc:	2006      	movs	r0, #6
   d59ce:	e7fb      	b.n	d59c8 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>
        return ICM_20948_Stat_Ok;
   d59d0:	2000      	movs	r0, #0
   d59d2:	e7f9      	b.n	d59c8 <_Z18ICM_20948_read_I2ChPhmPv+0x5a>

000d59d4 <_ZN9ICM_209487getAGMTEv>:
{
   d59d4:	b570      	push	{r4, r5, r6, lr}
   d59d6:	460c      	mov	r4, r1
    status = ICM_20948_get_agmt(&_device, &agmt);
   d59d8:	1d0d      	adds	r5, r1, #4
{
   d59da:	4606      	mov	r6, r0
    status = ICM_20948_get_agmt(&_device, &agmt);
   d59dc:	4629      	mov	r1, r5
   d59de:	4620      	mov	r0, r4
   d59e0:	f7fe fe89 	bl	d46f6 <ICM_20948_get_agmt>
   d59e4:	f804 0f1c 	strb.w	r0, [r4, #28]!
    return agmt;
   d59e8:	462b      	mov	r3, r5
   d59ea:	4635      	mov	r5, r6
   d59ec:	461a      	mov	r2, r3
   d59ee:	ca03      	ldmia	r2!, {r0, r1}
   d59f0:	42a2      	cmp	r2, r4
   d59f2:	6028      	str	r0, [r5, #0]
   d59f4:	6069      	str	r1, [r5, #4]
   d59f6:	4613      	mov	r3, r2
   d59f8:	f105 0508 	add.w	r5, r5, #8
   d59fc:	d1f6      	bne.n	d59ec <_ZN9ICM_209487getAGMTEv+0x18>
}
   d59fe:	4630      	mov	r0, r6
   d5a00:	bd70      	pop	{r4, r5, r6, pc}
   d5a02:	0000      	movs	r0, r0
   d5a04:	0000      	movs	r0, r0
	...

000d5a08 <_ZN9ICM_209488getAccMGEs>:
{
   d5a08:	b508      	push	{r3, lr}
    switch (agmt.fss.a)
   d5a0a:	7e03      	ldrb	r3, [r0, #24]
   d5a0c:	f003 0303 	and.w	r3, r3, #3
{
   d5a10:	ee07 1a90 	vmov	s15, r1
   d5a14:	2b03      	cmp	r3, #3
   d5a16:	d831      	bhi.n	d5a7c <_ZN9ICM_209488getAccMGEs+0x74>
   d5a18:	e8df f003 	tbb	[pc, r3]
   d5a1c:	261c1202 	.word	0x261c1202
        return (((float)axis_val) / 16.384);
   d5a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a24:	ee17 0a90 	vmov	r0, s15
   d5a28:	f003 fc68 	bl	d92fc <__aeabi_f2d>
   d5a2c:	a317      	add	r3, pc, #92	; (adr r3, d5a8c <_ZN9ICM_209488getAccMGEs+0x84>)
   d5a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
        return (((float)axis_val) / 2.048);
   d5a32:	f003 fde5 	bl	d9600 <__aeabi_ddiv>
   d5a36:	f003 ffb1 	bl	d999c <__aeabi_d2f>
   d5a3a:	ee00 0a10 	vmov	s0, r0
}
   d5a3e:	bd08      	pop	{r3, pc}
        return (((float)axis_val) / 8.192);
   d5a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a44:	ee17 0a90 	vmov	r0, s15
   d5a48:	f003 fc58 	bl	d92fc <__aeabi_f2d>
   d5a4c:	a311      	add	r3, pc, #68	; (adr r3, d5a94 <_ZN9ICM_209488getAccMGEs+0x8c>)
   d5a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a52:	e7ee      	b.n	d5a32 <_ZN9ICM_209488getAccMGEs+0x2a>
        return (((float)axis_val) / 4.096);
   d5a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a58:	ee17 0a90 	vmov	r0, s15
   d5a5c:	f003 fc4e 	bl	d92fc <__aeabi_f2d>
   d5a60:	a30e      	add	r3, pc, #56	; (adr r3, d5a9c <_ZN9ICM_209488getAccMGEs+0x94>)
   d5a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a66:	e7e4      	b.n	d5a32 <_ZN9ICM_209488getAccMGEs+0x2a>
        return (((float)axis_val) / 2.048);
   d5a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5a6c:	ee17 0a90 	vmov	r0, s15
   d5a70:	f003 fc44 	bl	d92fc <__aeabi_f2d>
   d5a74:	a30b      	add	r3, pc, #44	; (adr r3, d5aa4 <_ZN9ICM_209488getAccMGEs+0x9c>)
   d5a76:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a7a:	e7da      	b.n	d5a32 <_ZN9ICM_209488getAccMGEs+0x2a>
    switch (agmt.fss.a)
   d5a7c:	ed9f 0a02 	vldr	s0, [pc, #8]	; d5a88 <_ZN9ICM_209488getAccMGEs+0x80>
   d5a80:	e7dd      	b.n	d5a3e <_ZN9ICM_209488getAccMGEs+0x36>
   d5a82:	bf00      	nop
   d5a84:	f3af 8000 	nop.w
   d5a88:	00000000 	.word	0x00000000
   d5a8c:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a90:	4030624d 	.word	0x4030624d
   d5a94:	d2f1a9fc 	.word	0xd2f1a9fc
   d5a98:	4020624d 	.word	0x4020624d
   d5a9c:	d2f1a9fc 	.word	0xd2f1a9fc
   d5aa0:	4010624d 	.word	0x4010624d
   d5aa4:	d2f1a9fc 	.word	0xd2f1a9fc
   d5aa8:	4000624d 	.word	0x4000624d

000d5aac <_ZN9ICM_209484accXEv>:
    return getAccMG(agmt.acc.axes.x);
   d5aac:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
   d5ab0:	f7ff bfaa 	b.w	d5a08 <_ZN9ICM_209488getAccMGEs>

000d5ab4 <_ZN9ICM_209484accYEv>:
    return getAccMG(agmt.acc.axes.y);
   d5ab4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
   d5ab8:	f7ff bfa6 	b.w	d5a08 <_ZN9ICM_209488getAccMGEs>

000d5abc <_ZN9ICM_209484accZEv>:
    return getAccMG(agmt.acc.axes.z);
   d5abc:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d5ac0:	f7ff bfa2 	b.w	d5a08 <_ZN9ICM_209488getAccMGEs>
   d5ac4:	0000      	movs	r0, r0
	...

000d5ac8 <_ZN9ICM_209489getGyrDPSEs>:
{
   d5ac8:	b508      	push	{r3, lr}
    switch (agmt.fss.g)
   d5aca:	7e03      	ldrb	r3, [r0, #24]
   d5acc:	f3c3 0381 	ubfx	r3, r3, #2, #2
{
   d5ad0:	ee07 1a90 	vmov	s15, r1
   d5ad4:	2b03      	cmp	r3, #3
   d5ad6:	d829      	bhi.n	d5b2c <_ZN9ICM_209489getGyrDPSEs+0x64>
   d5ad8:	e8df f003 	tbb	[pc, r3]
   d5adc:	1e0e0902 	.word	0x1e0e0902
        return (((float)axis_val) / 131);
   d5ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5ae4:	ed9f 7a18 	vldr	s14, [pc, #96]	; d5b48 <_ZN9ICM_209489getGyrDPSEs+0x80>
        return (((float)axis_val) / 65.5);
   d5ae8:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5aec:	bd08      	pop	{r3, pc}
        return (((float)axis_val) / 65.5);
   d5aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5af2:	ed9f 7a16 	vldr	s14, [pc, #88]	; d5b4c <_ZN9ICM_209489getGyrDPSEs+0x84>
   d5af6:	e7f7      	b.n	d5ae8 <_ZN9ICM_209489getGyrDPSEs+0x20>
        return (((float)axis_val) / 32.8);
   d5af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5afc:	ee17 0a90 	vmov	r0, s15
   d5b00:	f003 fbfc 	bl	d92fc <__aeabi_f2d>
   d5b04:	a30c      	add	r3, pc, #48	; (adr r3, d5b38 <_ZN9ICM_209489getGyrDPSEs+0x70>)
   d5b06:	e9d3 2300 	ldrd	r2, r3, [r3]
        return (((float)axis_val) / 16.4);
   d5b0a:	f003 fd79 	bl	d9600 <__aeabi_ddiv>
   d5b0e:	f003 ff45 	bl	d999c <__aeabi_d2f>
   d5b12:	ee00 0a10 	vmov	s0, r0
   d5b16:	e7e9      	b.n	d5aec <_ZN9ICM_209489getGyrDPSEs+0x24>
   d5b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b1c:	ee17 0a90 	vmov	r0, s15
   d5b20:	f003 fbec 	bl	d92fc <__aeabi_f2d>
   d5b24:	a306      	add	r3, pc, #24	; (adr r3, d5b40 <_ZN9ICM_209489getGyrDPSEs+0x78>)
   d5b26:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b2a:	e7ee      	b.n	d5b0a <_ZN9ICM_209489getGyrDPSEs+0x42>
    switch (agmt.fss.g)
   d5b2c:	ed9f 0a08 	vldr	s0, [pc, #32]	; d5b50 <_ZN9ICM_209489getGyrDPSEs+0x88>
   d5b30:	e7dc      	b.n	d5aec <_ZN9ICM_209489getGyrDPSEs+0x24>
   d5b32:	bf00      	nop
   d5b34:	f3af 8000 	nop.w
   d5b38:	66666666 	.word	0x66666666
   d5b3c:	40406666 	.word	0x40406666
   d5b40:	66666666 	.word	0x66666666
   d5b44:	40306666 	.word	0x40306666
   d5b48:	43030000 	.word	0x43030000
   d5b4c:	42830000 	.word	0x42830000
   d5b50:	00000000 	.word	0x00000000

000d5b54 <_ZN9ICM_209484gyrXEv>:
    return getGyrDPS(agmt.gyr.axes.x);
   d5b54:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
   d5b58:	f7ff bfb6 	b.w	d5ac8 <_ZN9ICM_209489getGyrDPSEs>

000d5b5c <_ZN9ICM_209484gyrYEv>:
    return getGyrDPS(agmt.gyr.axes.y);
   d5b5c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5b60:	f7ff bfb2 	b.w	d5ac8 <_ZN9ICM_209489getGyrDPSEs>

000d5b64 <_ZN9ICM_209484gyrZEv>:
    return getGyrDPS(agmt.gyr.axes.z);
   d5b64:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d5b68:	f7ff bfae 	b.w	d5ac8 <_ZN9ICM_209489getGyrDPSEs>
   d5b6c:	0000      	movs	r0, r0
	...

000d5b70 <_ZN9ICM_209484tempEv>:
{
   d5b70:	b508      	push	{r3, lr}
    return (((float)val) / 333.87) + 21;
   d5b72:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
   d5b76:	ee07 0a90 	vmov	s15, r0
   d5b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b7e:	ee17 0a90 	vmov	r0, s15
   d5b82:	f003 fbbb 	bl	d92fc <__aeabi_f2d>
   d5b86:	a309      	add	r3, pc, #36	; (adr r3, d5bac <_ZN9ICM_209484tempEv+0x3c>)
   d5b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b8c:	f003 fd38 	bl	d9600 <__aeabi_ddiv>
   d5b90:	4b05      	ldr	r3, [pc, #20]	; (d5ba8 <_ZN9ICM_209484tempEv+0x38>)
   d5b92:	2200      	movs	r2, #0
   d5b94:	f003 fa54 	bl	d9040 <__adddf3>
   d5b98:	f003 ff00 	bl	d999c <__aeabi_d2f>
}
   d5b9c:	ee00 0a10 	vmov	s0, r0
   d5ba0:	bd08      	pop	{r3, pc}
   d5ba2:	bf00      	nop
   d5ba4:	f3af 8000 	nop.w
   d5ba8:	40350000 	.word	0x40350000
   d5bac:	851eb852 	.word	0x851eb852
   d5bb0:	4074ddeb 	.word	0x4074ddeb

000d5bb4 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e>:
    if (stat == ICM_20948_Stat_NUM)
   d5bb4:	2908      	cmp	r1, #8
        val = status;
   d5bb6:	bf08      	it	eq
   d5bb8:	7f01      	ldrbeq	r1, [r0, #28]
    switch (val)
   d5bba:	2907      	cmp	r1, #7
   d5bbc:	bf9a      	itte	ls
   d5bbe:	4b02      	ldrls	r3, [pc, #8]	; (d5bc8 <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x14>)
   d5bc0:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
{
   d5bc4:	4801      	ldrhi	r0, [pc, #4]	; (d5bcc <_ZN9ICM_2094812statusStringE18ICM_20948_Status_e+0x18>)
}
   d5bc6:	4770      	bx	lr
   d5bc8:	000d9e7c 	.word	0x000d9e7c
   d5bcc:	000d9df3 	.word	0x000d9df3

000d5bd0 <_ZN9ICM_209487swResetEv>:
{
   d5bd0:	b510      	push	{r4, lr}
   d5bd2:	4604      	mov	r4, r0
    status = ICM_20948_sw_reset(&_device);
   d5bd4:	f7fe fb3f 	bl	d4256 <ICM_20948_sw_reset>
   d5bd8:	7720      	strb	r0, [r4, #28]
}
   d5bda:	bd10      	pop	{r4, pc}

000d5bdc <_ZN9ICM_209485sleepEb>:
{
   d5bdc:	b510      	push	{r4, lr}
   d5bde:	4604      	mov	r4, r0
    status = ICM_20948_sleep(&_device, on);
   d5be0:	f7fe fb53 	bl	d428a <ICM_20948_sleep>
   d5be4:	7720      	strb	r0, [r4, #28]
}
   d5be6:	bd10      	pop	{r4, pc}

000d5be8 <_ZN9ICM_209488lowPowerEb>:
{
   d5be8:	b510      	push	{r4, lr}
   d5bea:	4604      	mov	r4, r0
    status = ICM_20948_low_power(&_device, on);
   d5bec:	f7fe fb68 	bl	d42c0 <ICM_20948_low_power>
   d5bf0:	7720      	strb	r0, [r4, #28]
}
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZN9ICM_209487checkIDEv>:
{
   d5bf4:	b510      	push	{r4, lr}
   d5bf6:	4604      	mov	r4, r0
    status = ICM_20948_check_id(&_device);
   d5bf8:	f7fe fb8e 	bl	d4318 <ICM_20948_check_id>
   d5bfc:	7720      	strb	r0, [r4, #28]
}
   d5bfe:	bd10      	pop	{r4, pc}

000d5c00 <_ZN9ICM_2094813setSampleModeEhh>:
{
   d5c00:	b510      	push	{r4, lr}
   d5c02:	4604      	mov	r4, r0
    status = ICM_20948_set_sample_mode(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, (ICM_20948_LP_CONFIG_CYCLE_e)lp_config_cycle_mode);
   d5c04:	f7fe fb99 	bl	d433a <ICM_20948_set_sample_mode>
   d5c08:	7720      	strb	r0, [r4, #28]
}
   d5c0a:	bd10      	pop	{r4, pc}

000d5c0c <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>:
{
   d5c0c:	b510      	push	{r4, lr}
   d5c0e:	4604      	mov	r4, r0
    status = ICM_20948_set_full_scale(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, fss);
   d5c10:	f7fe fbc7 	bl	d43a2 <ICM_20948_set_full_scale>
   d5c14:	7720      	strb	r0, [r4, #28]
}
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>:
{
   d5c18:	b513      	push	{r0, r1, r4, lr}
   d5c1a:	f8ad 2004 	strh.w	r2, [sp, #4]
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5c1e:	9a01      	ldr	r2, [sp, #4]
{
   d5c20:	4604      	mov	r4, r0
    status = ICM_20948_set_dlpf_cfg(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, cfg);
   d5c22:	f7fe fc0a 	bl	d443a <ICM_20948_set_dlpf_cfg>
   d5c26:	7720      	strb	r0, [r4, #28]
}
   d5c28:	b002      	add	sp, #8
   d5c2a:	bd10      	pop	{r4, pc}

000d5c2c <_ZN9ICM_2094810enableDLPFEhb>:
{
   d5c2c:	b510      	push	{r4, lr}
   d5c2e:	4604      	mov	r4, r0
    status = ICM_20948_enable_dlpf(&_device, (ICM_20948_InternalSensorID_bm)sensor_id_bm, enable);
   d5c30:	f7fe fc50 	bl	d44d4 <ICM_20948_enable_dlpf>
   d5c34:	7720      	strb	r0, [r4, #28]
}
   d5c36:	bd10      	pop	{r4, pc}

000d5c38 <_ZN9ICM_2094820i2cMasterPassthroughEb>:
{
   d5c38:	b510      	push	{r4, lr}
   d5c3a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_passthrough(&_device, passthrough);
   d5c3c:	f7fe fc94 	bl	d4568 <ICM_20948_i2c_master_passthrough>
   d5c40:	7720      	strb	r0, [r4, #28]
}
   d5c42:	bd10      	pop	{r4, pc}

000d5c44 <_ZN9ICM_2094815i2cMasterEnableEb>:
{
   d5c44:	b510      	push	{r4, lr}
   d5c46:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_enable(&_device, enable);
   d5c48:	f7fe fcaa 	bl	d45a0 <ICM_20948_i2c_master_enable>
   d5c4c:	7720      	strb	r0, [r4, #28]
}
   d5c4e:	bd10      	pop	{r4, pc}

000d5c50 <_ZN9ICM_2094814i2cMasterResetEv>:
{
   d5c50:	b510      	push	{r4, lr}
   d5c52:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_reset(&_device);
   d5c54:	f7fe fce0 	bl	d4618 <ICM_20948_i2c_master_reset>
   d5c58:	7720      	strb	r0, [r4, #28]
}
   d5c5a:	bd10      	pop	{r4, pc}

000d5c5c <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>:
{
   d5c5c:	b530      	push	{r4, r5, lr}
   d5c5e:	b087      	sub	sp, #28
   d5c60:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_configure_slave(&_device, slave, addr, reg, len, Rw, enable, data_only, grp, swap);
   d5c62:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
   d5c66:	9505      	str	r5, [sp, #20]
   d5c68:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
   d5c6c:	9504      	str	r5, [sp, #16]
   d5c6e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d5c72:	9503      	str	r5, [sp, #12]
   d5c74:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
   d5c78:	9502      	str	r5, [sp, #8]
   d5c7a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5c7e:	9501      	str	r5, [sp, #4]
   d5c80:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   d5c84:	9500      	str	r5, [sp, #0]
   d5c86:	f7fe fce2 	bl	d464e <ICM_20948_i2c_master_configure_slave>
   d5c8a:	7720      	strb	r0, [r4, #28]
}
   d5c8c:	b007      	add	sp, #28
   d5c8e:	bd30      	pop	{r4, r5, pc}

000d5c90 <_ZN9ICM_2094816i2cMasterSingleWEhhh>:
{
   d5c90:	b513      	push	{r0, r1, r4, lr}
   d5c92:	f88d 3007 	strb.w	r3, [sp, #7]
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d5c96:	f10d 0307 	add.w	r3, sp, #7
{
   d5c9a:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_w(&_device, addr, reg, &data);
   d5c9c:	f7fe fac7 	bl	d422e <ICM_20948_i2c_master_single_w>
   d5ca0:	7720      	strb	r0, [r4, #28]
}
   d5ca2:	b002      	add	sp, #8
   d5ca4:	bd10      	pop	{r4, pc}

000d5ca6 <_ZN9ICM_2094816i2cMasterSingleREhh>:
{
   d5ca6:	b513      	push	{r0, r1, r4, lr}
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d5ca8:	f10d 0307 	add.w	r3, sp, #7
{
   d5cac:	4604      	mov	r4, r0
    status = ICM_20948_i2c_master_single_r(&_device, addr, reg, &data);
   d5cae:	f7fe fac9 	bl	d4244 <ICM_20948_i2c_master_single_r>
   d5cb2:	7720      	strb	r0, [r4, #28]
}
   d5cb4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5cb8:	b002      	add	sp, #8
   d5cba:	bd10      	pop	{r4, pc}

000d5cbc <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>:
{
   d5cbc:	460a      	mov	r2, r1
    uint8_t data = i2cMasterSingleR(MAG_AK09916_I2C_ADDR, reg);
   d5cbe:	210c      	movs	r1, #12
   d5cc0:	f7ff bff1 	b.w	d5ca6 <_ZN9ICM_2094816i2cMasterSingleREhh>

000d5cc4 <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>:
{
   d5cc4:	b510      	push	{r4, lr}
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d5cc6:	7813      	ldrb	r3, [r2, #0]
   d5cc8:	460a      	mov	r2, r1
   d5cca:	210c      	movs	r1, #12
{
   d5ccc:	4604      	mov	r4, r0
    status = i2cMasterSingleW(MAG_AK09916_I2C_ADDR, reg, *pdata);
   d5cce:	f7ff ffdf 	bl	d5c90 <_ZN9ICM_2094816i2cMasterSingleWEhhh>
   d5cd2:	7720      	strb	r0, [r4, #28]
}
   d5cd4:	bd10      	pop	{r4, pc}
	...

000d5cd8 <_ZN13ICM_20948_I2CC1Ev>:
ICM_20948_I2C::ICM_20948_I2C()
   d5cd8:	4b01      	ldr	r3, [pc, #4]	; (d5ce0 <_ZN13ICM_20948_I2CC1Ev+0x8>)
   d5cda:	6003      	str	r3, [r0, #0]
}
   d5cdc:	4770      	bx	lr
   d5cde:	bf00      	nop
   d5ce0:	000d9ea4 	.word	0x000d9ea4

000d5ce4 <_ZN9ICM_209489magWhoIAmEv>:
{
   d5ce4:	b538      	push	{r3, r4, r5, lr}
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5ce6:	2100      	movs	r1, #0
{
   d5ce8:	4604      	mov	r4, r0
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5cea:	f7ff ffe7 	bl	d5cbc <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    whoiam2 = readMag(AK09916_REG_WIA2);
   d5cee:	2101      	movs	r1, #1
    whoiam1 = readMag(AK09916_REG_WIA1);
   d5cf0:	4605      	mov	r5, r0
    whoiam2 = readMag(AK09916_REG_WIA2);
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	f7ff ffe2 	bl	d5cbc <_ZN9ICM_209487readMagE18AK09916_Reg_Addr_e>
    if ((whoiam1 == (MAG_AK09916_WHO_AM_I >> 8)) && (whoiam2 == (MAG_AK09916_WHO_AM_I & 0xFF)))
   d5cf8:	2d48      	cmp	r5, #72	; 0x48
   d5cfa:	d104      	bne.n	d5d06 <_ZN9ICM_209489magWhoIAmEv+0x22>
   d5cfc:	2809      	cmp	r0, #9
   d5cfe:	d102      	bne.n	d5d06 <_ZN9ICM_209489magWhoIAmEv+0x22>
    status = retval;
   d5d00:	2000      	movs	r0, #0
    status = retval;
   d5d02:	7720      	strb	r0, [r4, #28]
}
   d5d04:	bd38      	pop	{r3, r4, r5, pc}
    status = retval;
   d5d06:	2004      	movs	r0, #4
   d5d08:	e7fb      	b.n	d5d02 <_ZN9ICM_209489magWhoIAmEv+0x1e>

000d5d0a <_ZN9ICM_2094819startupMagnetometerEv>:
{
   d5d0a:	b530      	push	{r4, r5, lr}
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5d0c:	2100      	movs	r1, #0
{
   d5d0e:	b089      	sub	sp, #36	; 0x24
   d5d10:	4604      	mov	r4, r0
    i2cMasterPassthrough(false); //Do not connect the SDA/SCL pins to AUX_DA/AUX_CL
   d5d12:	f7ff ff91 	bl	d5c38 <_ZN9ICM_2094820i2cMasterPassthroughEb>
    i2cMasterEnable(true);
   d5d16:	2101      	movs	r1, #1
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff ff93 	bl	d5c44 <_ZN9ICM_2094815i2cMasterEnableEb>
   d5d1e:	2505      	movs	r5, #5
        retval = magWhoIAm();
   d5d20:	4620      	mov	r0, r4
   d5d22:	f7ff ffdf 	bl	d5ce4 <_ZN9ICM_209489magWhoIAmEv>
        if (retval == ICM_20948_Stat_Ok)
   d5d26:	b158      	cbz	r0, d5d40 <_ZN9ICM_2094819startupMagnetometerEv+0x36>
        i2cMasterReset(); //Otherwise, reset the master I2C and try again
   d5d28:	4620      	mov	r0, r4
   d5d2a:	3d01      	subs	r5, #1
   d5d2c:	f7ff ff90 	bl	d5c50 <_ZN9ICM_2094814i2cMasterResetEv>
    while (tries < maxTries)
   d5d30:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5d34:	d1f4      	bne.n	d5d20 <_ZN9ICM_2094819startupMagnetometerEv+0x16>
        status = ICM_20948_Stat_WrongID;
   d5d36:	2004      	movs	r0, #4
   d5d38:	e01f      	b.n	d5d7a <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    return status;
   d5d3a:	7f20      	ldrb	r0, [r4, #28]
}
   d5d3c:	b009      	add	sp, #36	; 0x24
   d5d3e:	bd30      	pop	{r4, r5, pc}
    reg.MODE = AK09916_mode_cont_100hz;
   d5d40:	f89d 301c 	ldrb.w	r3, [sp, #28]
   d5d44:	2208      	movs	r2, #8
   d5d46:	f362 0304 	bfi	r3, r2, #0, #5
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5d4a:	2131      	movs	r1, #49	; 0x31
   d5d4c:	aa07      	add	r2, sp, #28
   d5d4e:	4620      	mov	r0, r4
    reg.MODE = AK09916_mode_cont_100hz;
   d5d50:	f88d 301c 	strb.w	r3, [sp, #28]
    retval = writeMag(AK09916_REG_CNTL2, (uint8_t *)&reg);
   d5d54:	f7ff ffb6 	bl	d5cc4 <_ZN9ICM_209488writeMagE18AK09916_Reg_Addr_ePh>
    if (retval != ICM_20948_Stat_Ok)
   d5d58:	b978      	cbnz	r0, d5d7a <_ZN9ICM_2094819startupMagnetometerEv+0x70>
    retval = i2cMasterConfigureSlave(0, MAG_AK09916_I2C_ADDR, AK09916_REG_ST1, 9, true, true, false, false, false);
   d5d5a:	2301      	movs	r3, #1
   d5d5c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d5d60:	2309      	movs	r3, #9
   d5d62:	e9cd 0004 	strd	r0, r0, [sp, #16]
   d5d66:	9003      	str	r0, [sp, #12]
   d5d68:	9300      	str	r3, [sp, #0]
   d5d6a:	4601      	mov	r1, r0
   d5d6c:	2310      	movs	r3, #16
   d5d6e:	220c      	movs	r2, #12
   d5d70:	4620      	mov	r0, r4
   d5d72:	f7ff ff73 	bl	d5c5c <_ZN9ICM_2094823i2cMasterConfigureSlaveEhhhhbbbbb>
    if (retval != ICM_20948_Stat_Ok)
   d5d76:	2800      	cmp	r0, #0
   d5d78:	d0df      	beq.n	d5d3a <_ZN9ICM_2094819startupMagnetometerEv+0x30>
        status = ICM_20948_Stat_WrongID;
   d5d7a:	7720      	strb	r0, [r4, #28]
        return status;
   d5d7c:	e7de      	b.n	d5d3c <_ZN9ICM_2094819startupMagnetometerEv+0x32>

000d5d7e <_ZN9ICM_2094814startupDefaultEv>:
{
   d5d7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d80:	4605      	mov	r5, r0
    retval = checkID();
   d5d82:	f7ff ff37 	bl	d5bf4 <_ZN9ICM_209487checkIDEv>
    if (retval != ICM_20948_Stat_Ok)
   d5d86:	4604      	mov	r4, r0
   d5d88:	b118      	cbz	r0, d5d92 <_ZN9ICM_2094814startupDefaultEv+0x14>
        status = retval;
   d5d8a:	772c      	strb	r4, [r5, #28]
}
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	b003      	add	sp, #12
   d5d90:	bd30      	pop	{r4, r5, pc}
    retval = swReset();
   d5d92:	4628      	mov	r0, r5
   d5d94:	f7ff ff1c 	bl	d5bd0 <_ZN9ICM_209487swResetEv>
    if (retval != ICM_20948_Stat_Ok)
   d5d98:	4604      	mov	r4, r0
   d5d9a:	2800      	cmp	r0, #0
   d5d9c:	d1f5      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    delay(50);
   d5d9e:	2032      	movs	r0, #50	; 0x32
   d5da0:	f000 fada 	bl	d6358 <delay>
    retval = sleep(false);
   d5da4:	4621      	mov	r1, r4
   d5da6:	4628      	mov	r0, r5
   d5da8:	f7ff ff18 	bl	d5bdc <_ZN9ICM_209485sleepEb>
    if (retval != ICM_20948_Stat_Ok)
   d5dac:	4604      	mov	r4, r0
   d5dae:	2800      	cmp	r0, #0
   d5db0:	d1eb      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = lowPower(false);
   d5db2:	4601      	mov	r1, r0
   d5db4:	4628      	mov	r0, r5
   d5db6:	f7ff ff17 	bl	d5be8 <_ZN9ICM_209488lowPowerEb>
    if (retval != ICM_20948_Stat_Ok)
   d5dba:	4604      	mov	r4, r0
   d5dbc:	2800      	cmp	r0, #0
   d5dbe:	d1e4      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setSampleMode((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), ICM_20948_Sample_Mode_Continuous); // options: ICM_20948_Sample_Mode_Continuous or ICM_20948_Sample_Mode_Cycled
   d5dc0:	4602      	mov	r2, r0
   d5dc2:	2103      	movs	r1, #3
   d5dc4:	4628      	mov	r0, r5
   d5dc6:	f7ff ff1b 	bl	d5c00 <_ZN9ICM_2094813setSampleModeEhh>
    if (retval != ICM_20948_Stat_Ok)
   d5dca:	4604      	mov	r4, r0
   d5dcc:	2800      	cmp	r0, #0
   d5dce:	d1dc      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = setFullScale((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), FSS);
   d5dd0:	f04f 0200 	mov.w	r2, #0
   d5dd4:	2103      	movs	r1, #3
   d5dd6:	4628      	mov	r0, r5
   d5dd8:	f7ff ff18 	bl	d5c0c <_ZN9ICM_2094812setFullScaleEh15ICM_20948_fss_t>
    if (retval != ICM_20948_Stat_Ok)
   d5ddc:	4604      	mov	r4, r0
   d5dde:	2800      	cmp	r0, #0
   d5de0:	d1d3      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    dlpcfg.a = acc_d473bw_n499bw;
   d5de2:	f240 7307 	movw	r3, #1799	; 0x707
   d5de6:	f8ad 3004 	strh.w	r3, [sp, #4]
    retval = setDLPFcfg((ICM_20948_Internal_Acc | ICM_20948_Internal_Gyr), dlpcfg);
   d5dea:	9a01      	ldr	r2, [sp, #4]
   d5dec:	2103      	movs	r1, #3
   d5dee:	4628      	mov	r0, r5
   d5df0:	f7ff ff12 	bl	d5c18 <_ZN9ICM_2094810setDLPFcfgEh18ICM_20948_dlpcfg_t>
    if (retval != ICM_20948_Stat_Ok)
   d5df4:	4604      	mov	r4, r0
   d5df6:	2800      	cmp	r0, #0
   d5df8:	d1c7      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Acc, false);
   d5dfa:	4602      	mov	r2, r0
   d5dfc:	2101      	movs	r1, #1
   d5dfe:	4628      	mov	r0, r5
   d5e00:	f7ff ff14 	bl	d5c2c <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5e04:	4604      	mov	r4, r0
   d5e06:	2800      	cmp	r0, #0
   d5e08:	d1bf      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = enableDLPF(ICM_20948_Internal_Gyr, false);
   d5e0a:	4602      	mov	r2, r0
   d5e0c:	2102      	movs	r1, #2
   d5e0e:	4628      	mov	r0, r5
   d5e10:	f7ff ff0c 	bl	d5c2c <_ZN9ICM_2094810enableDLPFEhb>
    if (retval != ICM_20948_Stat_Ok)
   d5e14:	4604      	mov	r4, r0
   d5e16:	2800      	cmp	r0, #0
   d5e18:	d1b7      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    retval = startupMagnetometer();
   d5e1a:	4628      	mov	r0, r5
   d5e1c:	f7ff ff75 	bl	d5d0a <_ZN9ICM_2094819startupMagnetometerEv>
    if (retval != ICM_20948_Stat_Ok)
   d5e20:	4604      	mov	r4, r0
   d5e22:	2800      	cmp	r0, #0
   d5e24:	d1b1      	bne.n	d5d8a <_ZN9ICM_2094814startupDefaultEv+0xc>
    return status;
   d5e26:	7f2c      	ldrb	r4, [r5, #28]
   d5e28:	e7b0      	b.n	d5d8c <_ZN9ICM_2094814startupDefaultEv+0xe>
	...

000d5e2c <_ZN13ICM_20948_I2C5beginER7TwoWirebh>:
{
   d5e2c:	b510      	push	{r4, lr}
   d5e2e:	4604      	mov	r4, r0
   d5e30:	4618      	mov	r0, r3
    _ad0 = ad0pin;
   d5e32:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    _i2c = &wirePort;
   d5e36:	6261      	str	r1, [r4, #36]	; 0x24
    _ad0val = ad0val;
   d5e38:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    if (_ad0val)
   d5e3c:	b9f2      	cbnz	r2, d5e7c <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x50>
    _addr = ICM_20948_I2C_ADDR_AD0;
   d5e3e:	2268      	movs	r2, #104	; 0x68
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5e40:	28ff      	cmp	r0, #255	; 0xff
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5e42:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5e46:	d002      	beq.n	d5e4e <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x22>
        pinMode(_ad0, OUTPUT);
   d5e48:	2101      	movs	r1, #1
   d5e4a:	f001 fd45 	bl	d78d8 <pinMode>
    if (_ad0 != ICM_20948_ARD_UNUSED_PIN)
   d5e4e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
   d5e52:	28ff      	cmp	r0, #255	; 0xff
   d5e54:	d003      	beq.n	d5e5e <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x32>
        digitalWrite(_ad0, _ad0val);
   d5e56:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   d5e5a:	f001 fd4e 	bl	d78fa <digitalWrite>
    _serif.write = ICM_20948_write_I2C;
   d5e5e:	4b08      	ldr	r3, [pc, #32]	; (d5e80 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x54>)
   d5e60:	62e3      	str	r3, [r4, #44]	; 0x2c
    _serif.read = ICM_20948_read_I2C;
   d5e62:	4b08      	ldr	r3, [pc, #32]	; (d5e84 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x58>)
    _device._serif = &_serif;
   d5e64:	4620      	mov	r0, r4
    _serif.user = (void *)this; // refer to yourself in the user field
   d5e66:	e9c4 340c 	strd	r3, r4, [r4, #48]	; 0x30
    _device._serif = &_serif;
   d5e6a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   d5e6e:	f840 3f04 	str.w	r3, [r0, #4]!
    status = startupDefault();
   d5e72:	f7ff ff84 	bl	d5d7e <_ZN9ICM_2094814startupDefaultEv>
   d5e76:	f884 0020 	strb.w	r0, [r4, #32]
}
   d5e7a:	bd10      	pop	{r4, pc}
        _addr = ICM_20948_I2C_ADDR_AD1;
   d5e7c:	2269      	movs	r2, #105	; 0x69
   d5e7e:	e7df      	b.n	d5e40 <_ZN13ICM_20948_I2C5beginER7TwoWirebh+0x14>
   d5e80:	000d5931 	.word	0x000d5931
   d5e84:	000d596f 	.word	0x000d596f

000d5e88 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <os_mutex_recursive_create+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030248 	.word	0x00030248

000d5e98 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <os_mutex_recursive_destroy+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	00030248 	.word	0x00030248

000d5ea8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <HAL_RNG_GetRandomNumber+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	685b      	ldr	r3, [r3, #4]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	00030218 	.word	0x00030218

000d5eb8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <HAL_Delay_Microseconds+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	68db      	ldr	r3, [r3, #12]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	00030218 	.word	0x00030218

000d5ec8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	691b      	ldr	r3, [r3, #16]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	00030218 	.word	0x00030218

000d5ed8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	695b      	ldr	r3, [r3, #20]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	00030218 	.word	0x00030218

000d5ee8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <hal_timer_millis+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	00030218 	.word	0x00030218

000d5ef8 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <HAL_Validate_Pin_Function+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	685b      	ldr	r3, [r3, #4]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	0003022c 	.word	0x0003022c

000d5f08 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <HAL_Pin_Mode+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	689b      	ldr	r3, [r3, #8]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	0003022c 	.word	0x0003022c

000d5f18 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <HAL_Get_Pin_Mode+0xc>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	68db      	ldr	r3, [r3, #12]
   d5f20:	9301      	str	r3, [sp, #4]
   d5f22:	bd08      	pop	{r3, pc}
   d5f24:	0003022c 	.word	0x0003022c

000d5f28 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5f28:	b508      	push	{r3, lr}
   d5f2a:	4b02      	ldr	r3, [pc, #8]	; (d5f34 <HAL_GPIO_Write+0xc>)
   d5f2c:	681b      	ldr	r3, [r3, #0]
   d5f2e:	691b      	ldr	r3, [r3, #16]
   d5f30:	9301      	str	r3, [sp, #4]
   d5f32:	bd08      	pop	{r3, pc}
   d5f34:	0003022c 	.word	0x0003022c

000d5f38 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5f38:	b508      	push	{r3, lr}
   d5f3a:	4b02      	ldr	r3, [pc, #8]	; (d5f44 <HAL_GPIO_Read+0xc>)
   d5f3c:	681b      	ldr	r3, [r3, #0]
   d5f3e:	695b      	ldr	r3, [r3, #20]
   d5f40:	9301      	str	r3, [sp, #4]
   d5f42:	bd08      	pop	{r3, pc}
   d5f44:	0003022c 	.word	0x0003022c

000d5f48 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5f48:	b508      	push	{r3, lr}
   d5f4a:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <hal_adc_read+0xc>)
   d5f4c:	681b      	ldr	r3, [r3, #0]
   d5f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f50:	9301      	str	r3, [sp, #4]
   d5f52:	bd08      	pop	{r3, pc}
   d5f54:	0003022c 	.word	0x0003022c

000d5f58 <HAL_Set_Direct_Interrupt_Handler>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
DYNALIB_FN(35, hal_gpio, HAL_Interrupts_Detach_Ext, int(uint16_t, uint8_t, void*))
DYNALIB_FN(36, hal_gpio, HAL_Set_Direct_Interrupt_Handler, int(IRQn_Type irqn, HAL_Direct_Interrupt_Handler handler, uint32_t flags, void* reserved))
   d5f58:	b508      	push	{r3, lr}
   d5f5a:	4b03      	ldr	r3, [pc, #12]	; (d5f68 <HAL_Set_Direct_Interrupt_Handler+0x10>)
   d5f5c:	681b      	ldr	r3, [r3, #0]
   d5f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   d5f62:	9301      	str	r3, [sp, #4]
   d5f64:	bd08      	pop	{r3, pc}
   d5f66:	0000      	.short	0x0000
   d5f68:	0003022c 	.word	0x0003022c

000d5f6c <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <hal_i2c_set_speed+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	681b      	ldr	r3, [r3, #0]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	00030228 	.word	0x00030228

000d5f7c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <hal_i2c_begin+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	68db      	ldr	r3, [r3, #12]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	00030228 	.word	0x00030228

000d5f8c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <hal_i2c_begin_transmission+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	699b      	ldr	r3, [r3, #24]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030228 	.word	0x00030228

000d5f9c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <hal_i2c_end_transmission+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	69db      	ldr	r3, [r3, #28]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030228 	.word	0x00030228

000d5fac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <hal_i2c_write+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	6a1b      	ldr	r3, [r3, #32]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	00030228 	.word	0x00030228

000d5fbc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <hal_i2c_available+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	00030228 	.word	0x00030228

000d5fcc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <hal_i2c_read+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	00030228 	.word	0x00030228

000d5fdc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <hal_i2c_peek+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030228 	.word	0x00030228

000d5fec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <hal_i2c_flush+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030228 	.word	0x00030228

000d5ffc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <hal_i2c_is_enabled+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030228 	.word	0x00030228

000d600c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <hal_i2c_init+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030228 	.word	0x00030228

000d601c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <hal_i2c_request_ex+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030228 	.word	0x00030228

000d602c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <inet_inet_ntop+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	695b      	ldr	r3, [r3, #20]
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030264 	.word	0x00030264

000d603c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <netdb_freeaddrinfo+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	689b      	ldr	r3, [r3, #8]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030268 	.word	0x00030268

000d604c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <netdb_getaddrinfo+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	68db      	ldr	r3, [r3, #12]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030268 	.word	0x00030268

000d605c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <hal_spi_init+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	69db      	ldr	r3, [r3, #28]
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030230 	.word	0x00030230

000d606c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <hal_spi_is_enabled+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	6a1b      	ldr	r3, [r3, #32]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030230 	.word	0x00030230

000d607c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <hal_usart_init+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	681b      	ldr	r3, [r3, #0]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	0003023c 	.word	0x0003023c

000d608c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <hal_usart_write+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	68db      	ldr	r3, [r3, #12]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	0003023c 	.word	0x0003023c

000d609c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <hal_usart_available+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	691b      	ldr	r3, [r3, #16]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	0003023c 	.word	0x0003023c

000d60ac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <hal_usart_read+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	695b      	ldr	r3, [r3, #20]
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003023c 	.word	0x0003023c

000d60bc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <hal_usart_peek+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	699b      	ldr	r3, [r3, #24]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	0003023c 	.word	0x0003023c

000d60cc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <hal_usart_flush+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	69db      	ldr	r3, [r3, #28]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003023c 	.word	0x0003023c

000d60dc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <hal_usart_is_enabled+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	6a1b      	ldr	r3, [r3, #32]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003023c 	.word	0x0003023c

000d60ec <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <hal_usart_available_data_for_write+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003023c 	.word	0x0003023c

000d60fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <HAL_USB_USART_Init+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	681b      	ldr	r3, [r3, #0]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	0003024c 	.word	0x0003024c

000d610c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <HAL_USB_USART_Begin+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	685b      	ldr	r3, [r3, #4]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	0003024c 	.word	0x0003024c

000d611c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <HAL_USB_USART_Available_Data+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	691b      	ldr	r3, [r3, #16]
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	0003024c 	.word	0x0003024c

000d612c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	695b      	ldr	r3, [r3, #20]
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	0003024c 	.word	0x0003024c

000d613c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <HAL_USB_USART_Receive_Data+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	699b      	ldr	r3, [r3, #24]
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	0003024c 	.word	0x0003024c

000d614c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <HAL_USB_USART_Send_Data+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	69db      	ldr	r3, [r3, #28]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	0003024c 	.word	0x0003024c

000d615c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <HAL_USB_USART_Flush_Data+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	6a1b      	ldr	r3, [r3, #32]
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	0003024c 	.word	0x0003024c

000d616c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <panic_+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030260 	.word	0x00030260

000d617c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <log_message+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030260 	.word	0x00030260

000d618c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <set_system_mode+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	685b      	ldr	r3, [r3, #4]
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030220 	.word	0x00030220

000d619c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <system_delay_ms+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	695b      	ldr	r3, [r3, #20]
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030220 	.word	0x00030220

000d61ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <application_thread_current+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030220 	.word	0x00030220

000d61bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <application_thread_invoke+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030220 	.word	0x00030220

000d61cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b03      	ldr	r3, [pc, #12]	; (d61dc <system_ctrl_set_app_request_handler+0x10>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d61d6:	9301      	str	r3, [sp, #4]
   d61d8:	bd08      	pop	{r3, pc}
   d61da:	0000      	.short	0x0000
   d61dc:	00030220 	.word	0x00030220

000d61e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b03      	ldr	r3, [pc, #12]	; (d61f0 <system_ctrl_set_result+0x10>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d61ea:	9301      	str	r3, [sp, #4]
   d61ec:	bd08      	pop	{r3, pc}
   d61ee:	0000      	.short	0x0000
   d61f0:	00030220 	.word	0x00030220

000d61f4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b03      	ldr	r3, [pc, #12]	; (d6204 <system_sleep_ext+0x10>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d61fe:	9301      	str	r3, [sp, #4]
   d6200:	bd08      	pop	{r3, pc}
   d6202:	0000      	.short	0x0000
   d6204:	00030220 	.word	0x00030220

000d6208 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6208:	b508      	push	{r3, lr}
   d620a:	4b02      	ldr	r3, [pc, #8]	; (d6214 <spark_cloud_flag_connected+0xc>)
   d620c:	681b      	ldr	r3, [r3, #0]
   d620e:	695b      	ldr	r3, [r3, #20]
   d6210:	9301      	str	r3, [sp, #4]
   d6212:	bd08      	pop	{r3, pc}
   d6214:	00030244 	.word	0x00030244

000d6218 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6218:	b508      	push	{r3, lr}
   d621a:	4b02      	ldr	r3, [pc, #8]	; (d6224 <spark_send_event+0xc>)
   d621c:	681b      	ldr	r3, [r3, #0]
   d621e:	6a1b      	ldr	r3, [r3, #32]
   d6220:	9301      	str	r3, [sp, #4]
   d6222:	bd08      	pop	{r3, pc}
   d6224:	00030244 	.word	0x00030244

000d6228 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6228:	b508      	push	{r3, lr}
   d622a:	4b02      	ldr	r3, [pc, #8]	; (d6234 <spark_set_random_seed_from_cloud_handler+0xc>)
   d622c:	681b      	ldr	r3, [r3, #0]
   d622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6230:	9301      	str	r3, [sp, #4]
   d6232:	bd08      	pop	{r3, pc}
   d6234:	00030244 	.word	0x00030244

000d6238 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6238:	b508      	push	{r3, lr}
   d623a:	4b02      	ldr	r3, [pc, #8]	; (d6244 <network_connect+0xc>)
   d623c:	681b      	ldr	r3, [r3, #0]
   d623e:	685b      	ldr	r3, [r3, #4]
   d6240:	9301      	str	r3, [sp, #4]
   d6242:	bd08      	pop	{r3, pc}
   d6244:	00030240 	.word	0x00030240

000d6248 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6248:	b508      	push	{r3, lr}
   d624a:	4b02      	ldr	r3, [pc, #8]	; (d6254 <network_connecting+0xc>)
   d624c:	681b      	ldr	r3, [r3, #0]
   d624e:	689b      	ldr	r3, [r3, #8]
   d6250:	9301      	str	r3, [sp, #4]
   d6252:	bd08      	pop	{r3, pc}
   d6254:	00030240 	.word	0x00030240

000d6258 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6258:	b508      	push	{r3, lr}
   d625a:	4b02      	ldr	r3, [pc, #8]	; (d6264 <network_disconnect+0xc>)
   d625c:	681b      	ldr	r3, [r3, #0]
   d625e:	68db      	ldr	r3, [r3, #12]
   d6260:	9301      	str	r3, [sp, #4]
   d6262:	bd08      	pop	{r3, pc}
   d6264:	00030240 	.word	0x00030240

000d6268 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6268:	b508      	push	{r3, lr}
   d626a:	4b02      	ldr	r3, [pc, #8]	; (d6274 <network_ready+0xc>)
   d626c:	681b      	ldr	r3, [r3, #0]
   d626e:	691b      	ldr	r3, [r3, #16]
   d6270:	9301      	str	r3, [sp, #4]
   d6272:	bd08      	pop	{r3, pc}
   d6274:	00030240 	.word	0x00030240

000d6278 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6278:	b508      	push	{r3, lr}
   d627a:	4b02      	ldr	r3, [pc, #8]	; (d6284 <network_on+0xc>)
   d627c:	681b      	ldr	r3, [r3, #0]
   d627e:	695b      	ldr	r3, [r3, #20]
   d6280:	9301      	str	r3, [sp, #4]
   d6282:	bd08      	pop	{r3, pc}
   d6284:	00030240 	.word	0x00030240

000d6288 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6288:	b508      	push	{r3, lr}
   d628a:	4b02      	ldr	r3, [pc, #8]	; (d6294 <network_off+0xc>)
   d628c:	681b      	ldr	r3, [r3, #0]
   d628e:	699b      	ldr	r3, [r3, #24]
   d6290:	9301      	str	r3, [sp, #4]
   d6292:	bd08      	pop	{r3, pc}
   d6294:	00030240 	.word	0x00030240

000d6298 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6298:	b508      	push	{r3, lr}
   d629a:	4b02      	ldr	r3, [pc, #8]	; (d62a4 <network_listen+0xc>)
   d629c:	681b      	ldr	r3, [r3, #0]
   d629e:	69db      	ldr	r3, [r3, #28]
   d62a0:	9301      	str	r3, [sp, #4]
   d62a2:	bd08      	pop	{r3, pc}
   d62a4:	00030240 	.word	0x00030240

000d62a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d62a8:	b508      	push	{r3, lr}
   d62aa:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <network_listening+0xc>)
   d62ac:	681b      	ldr	r3, [r3, #0]
   d62ae:	6a1b      	ldr	r3, [r3, #32]
   d62b0:	9301      	str	r3, [sp, #4]
   d62b2:	bd08      	pop	{r3, pc}
   d62b4:	00030240 	.word	0x00030240

000d62b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d62b8:	b508      	push	{r3, lr}
   d62ba:	4b02      	ldr	r3, [pc, #8]	; (d62c4 <network_set_listen_timeout+0xc>)
   d62bc:	681b      	ldr	r3, [r3, #0]
   d62be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62c0:	9301      	str	r3, [sp, #4]
   d62c2:	bd08      	pop	{r3, pc}
   d62c4:	00030240 	.word	0x00030240

000d62c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d62c8:	b508      	push	{r3, lr}
   d62ca:	4b02      	ldr	r3, [pc, #8]	; (d62d4 <network_get_listen_timeout+0xc>)
   d62cc:	681b      	ldr	r3, [r3, #0]
   d62ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62d0:	9301      	str	r3, [sp, #4]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	00030240 	.word	0x00030240

000d62d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d62d8:	b508      	push	{r3, lr}
   d62da:	4b02      	ldr	r3, [pc, #8]	; (d62e4 <malloc+0xc>)
   d62dc:	681b      	ldr	r3, [r3, #0]
   d62de:	681b      	ldr	r3, [r3, #0]
   d62e0:	9301      	str	r3, [sp, #4]
   d62e2:	bd08      	pop	{r3, pc}
   d62e4:	0003021c 	.word	0x0003021c

000d62e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d62e8:	b508      	push	{r3, lr}
   d62ea:	4b02      	ldr	r3, [pc, #8]	; (d62f4 <free+0xc>)
   d62ec:	681b      	ldr	r3, [r3, #0]
   d62ee:	685b      	ldr	r3, [r3, #4]
   d62f0:	9301      	str	r3, [sp, #4]
   d62f2:	bd08      	pop	{r3, pc}
   d62f4:	0003021c 	.word	0x0003021c

000d62f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d62f8:	b508      	push	{r3, lr}
   d62fa:	4b02      	ldr	r3, [pc, #8]	; (d6304 <realloc+0xc>)
   d62fc:	681b      	ldr	r3, [r3, #0]
   d62fe:	689b      	ldr	r3, [r3, #8]
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	bd08      	pop	{r3, pc}
   d6304:	0003021c 	.word	0x0003021c

000d6308 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6308:	b508      	push	{r3, lr}
   d630a:	4b02      	ldr	r3, [pc, #8]	; (d6314 <vsnprintf+0xc>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6310:	9301      	str	r3, [sp, #4]
   d6312:	bd08      	pop	{r3, pc}
   d6314:	0003021c 	.word	0x0003021c

000d6318 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6318:	b508      	push	{r3, lr}
   d631a:	4b02      	ldr	r3, [pc, #8]	; (d6324 <abort+0xc>)
   d631c:	681b      	ldr	r3, [r3, #0]
   d631e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6320:	9301      	str	r3, [sp, #4]
   d6322:	bd08      	pop	{r3, pc}
   d6324:	0003021c 	.word	0x0003021c

000d6328 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b02      	ldr	r3, [pc, #8]	; (d6334 <_malloc_r+0xc>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6330:	9301      	str	r3, [sp, #4]
   d6332:	bd08      	pop	{r3, pc}
   d6334:	0003021c 	.word	0x0003021c

000d6338 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6338:	b508      	push	{r3, lr}
   d633a:	4b02      	ldr	r3, [pc, #8]	; (d6344 <__errno+0xc>)
   d633c:	681b      	ldr	r3, [r3, #0]
   d633e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6340:	9301      	str	r3, [sp, #4]
   d6342:	bd08      	pop	{r3, pc}
   d6344:	0003021c 	.word	0x0003021c

000d6348 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b02      	ldr	r3, [pc, #8]	; (d6354 <newlib_impure_ptr_callback+0xc>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6350:	9301      	str	r3, [sp, #4]
   d6352:	bd08      	pop	{r3, pc}
   d6354:	0003021c 	.word	0x0003021c

000d6358 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6358:	2100      	movs	r1, #0
   d635a:	f7ff bf1f 	b.w	d619c <system_delay_ms>

000d635e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d635e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6360:	6883      	ldr	r3, [r0, #8]
   d6362:	4604      	mov	r4, r0
   d6364:	b90b      	cbnz	r3, d636a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6366:	f001 fcc4 	bl	d7cf2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d636a:	68c3      	ldr	r3, [r0, #12]
   d636c:	4798      	blx	r3
      if (_M_manager)
   d636e:	68a3      	ldr	r3, [r4, #8]
   d6370:	b11b      	cbz	r3, d637a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6372:	2203      	movs	r2, #3
   d6374:	4621      	mov	r1, r4
   d6376:	4620      	mov	r0, r4
   d6378:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d637a:	4620      	mov	r0, r4
   d637c:	2110      	movs	r1, #16
}
   d637e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6382:	f001 bcb0 	b.w	d7ce6 <_ZdlPvj>

000d6386 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6386:	b510      	push	{r4, lr}
   d6388:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d638a:	6800      	ldr	r0, [r0, #0]
   d638c:	b108      	cbz	r0, d6392 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d638e:	f7ff fd83 	bl	d5e98 <os_mutex_recursive_destroy>
    }
   d6392:	4620      	mov	r0, r4
   d6394:	bd10      	pop	{r4, pc}

000d6396 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6396:	680b      	ldr	r3, [r1, #0]
   d6398:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d639a:	b113      	cbz	r3, d63a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d639c:	685a      	ldr	r2, [r3, #4]
   d639e:	3201      	adds	r2, #1
   d63a0:	605a      	str	r2, [r3, #4]
      }
   d63a2:	4770      	bx	lr

000d63a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d63a4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d63a6:	4c06      	ldr	r4, [pc, #24]	; (d63c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d63a8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d63aa:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d63ac:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d63ae:	f7ff fd6b 	bl	d5e88 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d63b2:	4620      	mov	r0, r4
   d63b4:	4a03      	ldr	r2, [pc, #12]	; (d63c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d63b6:	4904      	ldr	r1, [pc, #16]	; (d63c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d63b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d63bc:	f001 bc8e 	b.w	d7cdc <__aeabi_atexit>
   d63c0:	2003e608 	.word	0x2003e608
   d63c4:	2003e420 	.word	0x2003e420
   d63c8:	000d6387 	.word	0x000d6387

000d63cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63cc:	4770      	bx	lr

000d63ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d63ce:	2000      	movs	r0, #0
   d63d0:	4770      	bx	lr

000d63d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d63d2:	b510      	push	{r4, lr}
   d63d4:	2110      	movs	r1, #16
   d63d6:	4604      	mov	r4, r0
   d63d8:	f001 fc85 	bl	d7ce6 <_ZdlPvj>
   d63dc:	4620      	mov	r0, r4
   d63de:	bd10      	pop	{r4, pc}

000d63e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d63e0:	b508      	push	{r3, lr}
      { delete this; }
   d63e2:	f7ff fff6 	bl	d63d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d63e6:	bd08      	pop	{r3, pc}

000d63e8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d63e8:	b510      	push	{r4, lr}
      if (_M_manager)
   d63ea:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d63ec:	4604      	mov	r4, r0
      if (_M_manager)
   d63ee:	b113      	cbz	r3, d63f6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63f0:	2203      	movs	r2, #3
   d63f2:	4601      	mov	r1, r0
   d63f4:	4798      	blx	r3
    }
   d63f6:	4620      	mov	r0, r4
   d63f8:	bd10      	pop	{r4, pc}

000d63fa <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d63fa:	b530      	push	{r4, r5, lr}
        type_(type) {
   d63fc:	2200      	movs	r2, #0
   d63fe:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6402:	6002      	str	r2, [r0, #0]
   d6404:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6406:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6408:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d640a:	680c      	ldr	r4, [r1, #0]
   d640c:	8085      	strh	r5, [r0, #4]
   d640e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6410:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6412:	bd30      	pop	{r4, r5, pc}

000d6414 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6414:	b510      	push	{r4, lr}
   d6416:	4604      	mov	r4, r0
    free((void*)msg_);
   d6418:	6800      	ldr	r0, [r0, #0]
   d641a:	f7ff ff65 	bl	d62e8 <free>
}
   d641e:	4620      	mov	r0, r4
   d6420:	bd10      	pop	{r4, pc}

000d6422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6422:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6424:	68c4      	ldr	r4, [r0, #12]
   d6426:	b1f4      	cbz	r4, d6466 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6428:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d642a:	2b02      	cmp	r3, #2
   d642c:	d103      	bne.n	d6436 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d642e:	f104 000c 	add.w	r0, r4, #12
   d6432:	f7ff ffef 	bl	d6414 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6436:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6438:	b135      	cbz	r5, d6448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d643a:	4628      	mov	r0, r5
   d643c:	f7ff ffd4 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
   d6440:	2110      	movs	r1, #16
   d6442:	4628      	mov	r0, r5
   d6444:	f001 fc4f 	bl	d7ce6 <_ZdlPvj>
   d6448:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d644a:	b135      	cbz	r5, d645a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d644c:	4628      	mov	r0, r5
   d644e:	f7ff ffcb 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
   d6452:	2110      	movs	r1, #16
   d6454:	4628      	mov	r0, r5
   d6456:	f001 fc46 	bl	d7ce6 <_ZdlPvj>
   d645a:	4620      	mov	r0, r4
   d645c:	2114      	movs	r1, #20
   d645e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6462:	f001 bc40 	b.w	d7ce6 <_ZdlPvj>
   d6466:	bd38      	pop	{r3, r4, r5, pc}

000d6468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6468:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d646a:	460e      	mov	r6, r1
   d646c:	4604      	mov	r4, r0
   d646e:	f856 3b04 	ldr.w	r3, [r6], #4
   d6472:	9300      	str	r3, [sp, #0]
   d6474:	460d      	mov	r5, r1
   d6476:	a801      	add	r0, sp, #4
   d6478:	4631      	mov	r1, r6
   d647a:	f7ff ff8c 	bl	d6396 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d647e:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6480:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6482:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6484:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6486:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6488:	2300      	movs	r3, #0
   d648a:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d648c:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d648e:	f7fe fc19 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6492:	4630      	mov	r0, r6
   d6494:	f7fe fc16 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6498:	4628      	mov	r0, r5
   d649a:	2108      	movs	r1, #8
   d649c:	f001 fc23 	bl	d7ce6 <_ZdlPvj>
        return p;
    }
   d64a0:	4620      	mov	r0, r4
   d64a2:	b002      	add	sp, #8
   d64a4:	bd70      	pop	{r4, r5, r6, pc}

000d64a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d64a6:	b513      	push	{r0, r1, r4, lr}
   d64a8:	460b      	mov	r3, r1
   d64aa:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d64ac:	e9d0 0100 	ldrd	r0, r1, [r0]
   d64b0:	466c      	mov	r4, sp
   d64b2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d64b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d64ba:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d64be:	e894 0003 	ldmia.w	r4, {r0, r1}
   d64c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d64c6:	b002      	add	sp, #8
   d64c8:	bd10      	pop	{r4, pc}

000d64ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d64ca:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d64cc:	b510      	push	{r4, lr}
      if (_M_empty())
   d64ce:	b90a      	cbnz	r2, d64d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d64d0:	f001 fc0f 	bl	d7cf2 <_ZSt25__throw_bad_function_callv>
    }
   d64d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64d8:	68c3      	ldr	r3, [r0, #12]
   d64da:	4718      	bx	r3

000d64dc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64dc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d64de:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d64e0:	f100 0110 	add.w	r1, r0, #16
   d64e4:	f7ff fff1 	bl	d64ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d64e8:	bd08      	pop	{r3, pc}

000d64ea <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d64ea:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d64ec:	b510      	push	{r4, lr}
      if (_M_empty())
   d64ee:	b90a      	cbnz	r2, d64f4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d64f0:	f001 fbff 	bl	d7cf2 <_ZSt25__throw_bad_function_callv>
    }
   d64f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64f8:	68c3      	ldr	r3, [r0, #12]
   d64fa:	4718      	bx	r3

000d64fc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64fc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d64fe:	6800      	ldr	r0, [r0, #0]
   d6500:	f100 0110 	add.w	r1, r0, #16
   d6504:	f7ff fff1 	bl	d64ea <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6508:	bd08      	pop	{r3, pc}
	...

000d650c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d650c:	b538      	push	{r3, r4, r5, lr}
   d650e:	2300      	movs	r3, #0
   d6510:	4604      	mov	r4, r0
   d6512:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6514:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6516:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6518:	f7fd fdbd 	bl	d4096 <_Znwj>
   d651c:	b128      	cbz	r0, d652a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d651e:	2301      	movs	r3, #1
   d6520:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6524:	4b02      	ldr	r3, [pc, #8]	; (d6530 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6526:	6003      	str	r3, [r0, #0]
   d6528:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d652a:	6020      	str	r0, [r4, #0]
	}
   d652c:	4620      	mov	r0, r4
   d652e:	bd38      	pop	{r3, r4, r5, pc}
   d6530:	000d9eb0 	.word	0x000d9eb0

000d6534 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6534:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6536:	2300      	movs	r3, #0
   d6538:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d653a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d653c:	4604      	mov	r4, r0
   d653e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6540:	b12b      	cbz	r3, d654e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6542:	2202      	movs	r2, #2
   d6544:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6546:	68eb      	ldr	r3, [r5, #12]
   d6548:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d654a:	68ab      	ldr	r3, [r5, #8]
   d654c:	60a3      	str	r3, [r4, #8]
    }
   d654e:	4620      	mov	r0, r4
   d6550:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6554:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6556:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6558:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d655a:	4668      	mov	r0, sp
   d655c:	f7ff ff4d 	bl	d63fa <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6560:	f04f 0302 	mov.w	r3, #2
   d6564:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6568:	2a00      	cmp	r2, #0
   d656a:	d103      	bne.n	d6574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d656c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6570:	2900      	cmp	r1, #0
   d6572:	d1f7      	bne.n	d6564 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6574:	d125      	bne.n	d65c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6576:	f104 050c 	add.w	r5, r4, #12
   d657a:	4669      	mov	r1, sp
   d657c:	4628      	mov	r0, r5
   d657e:	f7ff ff3c 	bl	d63fa <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6582:	f3bf 8f5b 	dmb	ish
   d6586:	2301      	movs	r3, #1
   d6588:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d658a:	2000      	movs	r0, #0
   d658c:	f104 0308 	add.w	r3, r4, #8
   d6590:	f3bf 8f5b 	dmb	ish
   d6594:	e853 6f00 	ldrex	r6, [r3]
   d6598:	e843 0200 	strex	r2, r0, [r3]
   d659c:	2a00      	cmp	r2, #0
   d659e:	d1f9      	bne.n	d6594 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d65a0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d65a4:	b16e      	cbz	r6, d65c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d65a6:	f7ff fe01 	bl	d61ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d65aa:	b178      	cbz	r0, d65cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d65ac:	4629      	mov	r1, r5
   d65ae:	4630      	mov	r0, r6
   d65b0:	f7ff ff8b 	bl	d64ca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d65b4:	4630      	mov	r0, r6
   d65b6:	f7ff ff17 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d65ba:	2110      	movs	r1, #16
   d65bc:	4630      	mov	r0, r6
   d65be:	f001 fb92 	bl	d7ce6 <_ZdlPvj>
        p_->setError(std::move(error));
   d65c2:	4668      	mov	r0, sp
   d65c4:	f7ff ff26 	bl	d6414 <_ZN8particle5ErrorD1Ev>
    }
   d65c8:	b009      	add	sp, #36	; 0x24
   d65ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d65cc:	4631      	mov	r1, r6
   d65ce:	a802      	add	r0, sp, #8
   d65d0:	f7ff ffb0 	bl	d6534 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d65d4:	68e0      	ldr	r0, [r4, #12]
   d65d6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d65da:	b108      	cbz	r0, d65e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d65dc:	f003 fab2 	bl	d9b44 <strdup>
        type_(type) {
   d65e0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d65e2:	2010      	movs	r0, #16
   d65e4:	f8ad 501c 	strh.w	r5, [sp, #28]
   d65e8:	f7fd fd55 	bl	d4096 <_Znwj>
   d65ec:	4605      	mov	r5, r0
   d65ee:	b1e8      	cbz	r0, d662c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d65f0:	2700      	movs	r7, #0
   d65f2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d65f4:	2018      	movs	r0, #24
   d65f6:	f7fd fd4e 	bl	d4096 <_Znwj>
   d65fa:	4604      	mov	r4, r0
   d65fc:	b188      	cbz	r0, d6622 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d65fe:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6600:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6602:	a802      	add	r0, sp, #8
   d6604:	f7ff ff4f 	bl	d64a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6608:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d660a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d660c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d660e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6610:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6612:	a906      	add	r1, sp, #24
   d6614:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6616:	60e3      	str	r3, [r4, #12]
   d6618:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d661c:	9205      	str	r2, [sp, #20]
   d661e:	f7ff feec 	bl	d63fa <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6622:	4b08      	ldr	r3, [pc, #32]	; (d6644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6624:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6626:	4b08      	ldr	r3, [pc, #32]	; (d6648 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6628:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d662a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d662c:	a806      	add	r0, sp, #24
   d662e:	f7ff fef1 	bl	d6414 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6632:	a802      	add	r0, sp, #8
   d6634:	f7ff fed8 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6638:	2200      	movs	r2, #0
   d663a:	4629      	mov	r1, r5
   d663c:	4803      	ldr	r0, [pc, #12]	; (d664c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d663e:	f7ff fdbd 	bl	d61bc <application_thread_invoke>
   d6642:	e7b7      	b.n	d65b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6644:	000d64dd 	.word	0x000d64dd
   d6648:	000d6775 	.word	0x000d6775
   d664c:	000d635f 	.word	0x000d635f

000d6650 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6654:	b08a      	sub	sp, #40	; 0x28
   d6656:	4605      	mov	r5, r0
   d6658:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d665c:	460c      	mov	r4, r1
   d665e:	4617      	mov	r7, r2
   d6660:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6662:	f7ff fdd1 	bl	d6208 <spark_cloud_flag_connected>
   d6666:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6668:	4682      	mov	sl, r0
   d666a:	bb38      	cbnz	r0, d66bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d666c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6670:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6672:	a905      	add	r1, sp, #20
   d6674:	4630      	mov	r0, r6
   d6676:	f8ad 3018 	strh.w	r3, [sp, #24]
   d667a:	f7ff febe 	bl	d63fa <_ZN8particle5ErrorC1EOS0_>
   d667e:	2014      	movs	r0, #20
   d6680:	f7fd fd09 	bl	d4096 <_Znwj>
   d6684:	4604      	mov	r4, r0
   d6686:	b148      	cbz	r0, d669c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6688:	2302      	movs	r3, #2
   d668a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d668c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d668e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6692:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6694:	4631      	mov	r1, r6
   d6696:	300c      	adds	r0, #12
   d6698:	f7ff feaf 	bl	d63fa <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d669c:	4628      	mov	r0, r5
	: __shared_count(__p)
   d669e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d66a0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d66a4:	f7ff ff32 	bl	d650c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d66a8:	4630      	mov	r0, r6
   d66aa:	f7ff feb3 	bl	d6414 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d66ae:	a805      	add	r0, sp, #20
   d66b0:	f7ff feb0 	bl	d6414 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d66b4:	4628      	mov	r0, r5
   d66b6:	b00a      	add	sp, #40	; 0x28
   d66b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d66bc:	230c      	movs	r3, #12
   d66be:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d66c2:	2014      	movs	r0, #20
   d66c4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d66c8:	9307      	str	r3, [sp, #28]
   d66ca:	f7fd fce4 	bl	d4096 <_Znwj>
   d66ce:	4601      	mov	r1, r0
   d66d0:	b128      	cbz	r0, d66de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d66d2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d66d6:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d66da:	f880 a001 	strb.w	sl, [r0, #1]
   d66de:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d66e0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d66e2:	f7ff ff13 	bl	d650c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d66e6:	4b22      	ldr	r3, [pc, #136]	; (d6770 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d66e8:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d66ea:	2008      	movs	r0, #8
   d66ec:	f7fd fcd3 	bl	d4096 <_Znwj>
   d66f0:	4682      	mov	sl, r0
   d66f2:	b128      	cbz	r0, d6700 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66f4:	9b03      	ldr	r3, [sp, #12]
   d66f6:	f840 3b04 	str.w	r3, [r0], #4
   d66fa:	a904      	add	r1, sp, #16
   d66fc:	f7ff fe4b 	bl	d6396 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6700:	9600      	str	r6, [sp, #0]
   d6702:	fa5f f389 	uxtb.w	r3, r9
   d6706:	4642      	mov	r2, r8
   d6708:	4639      	mov	r1, r7
   d670a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d670c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6710:	f7ff fd82 	bl	d6218 <spark_send_event>
   d6714:	b9b8      	cbnz	r0, d6746 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6716:	9b03      	ldr	r3, [sp, #12]
   d6718:	785b      	ldrb	r3, [r3, #1]
   d671a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d671e:	b993      	cbnz	r3, d6746 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6720:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6724:	a905      	add	r1, sp, #20
   d6726:	a803      	add	r0, sp, #12
   d6728:	9205      	str	r2, [sp, #20]
   d672a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d672e:	f7ff ff11 	bl	d6554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6732:	a805      	add	r0, sp, #20
   d6734:	f7ff fe6e 	bl	d6414 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6738:	a805      	add	r0, sp, #20
   d673a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d673c:	f7ff fe94 	bl	d6468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6740:	a806      	add	r0, sp, #24
   d6742:	f7fe fabf 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6746:	9b03      	ldr	r3, [sp, #12]
   d6748:	9305      	str	r3, [sp, #20]
   d674a:	a904      	add	r1, sp, #16
   d674c:	a806      	add	r0, sp, #24
   d674e:	f7ff fe22 	bl	d6396 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6752:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6754:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6756:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6758:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d675a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d675c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d675e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6760:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6762:	f7fe faaf 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6766:	a804      	add	r0, sp, #16
   d6768:	f7fe faac 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d676c:	e7a2      	b.n	d66b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d676e:	bf00      	nop
   d6770:	000d6839 	.word	0x000d6839

000d6774 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6774:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6778:	4605      	mov	r5, r0
	  switch (__op)
   d677a:	d007      	beq.n	d678c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d677c:	2a03      	cmp	r2, #3
   d677e:	d018      	beq.n	d67b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6780:	2a01      	cmp	r2, #1
   d6782:	d101      	bne.n	d6788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6784:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6786:	6003      	str	r3, [r0, #0]
	}
   d6788:	2000      	movs	r0, #0
   d678a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d678c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d678e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6790:	f7fd fc81 	bl	d4096 <_Znwj>
   d6794:	4604      	mov	r4, r0
   d6796:	b150      	cbz	r0, d67ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6798:	4631      	mov	r1, r6
   d679a:	f7ff fecb 	bl	d6534 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d679e:	6930      	ldr	r0, [r6, #16]
   d67a0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d67a4:	b108      	cbz	r0, d67aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d67a6:	f003 f9cd 	bl	d9b44 <strdup>
        type_(type) {
   d67aa:	6120      	str	r0, [r4, #16]
   d67ac:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d67ae:	602c      	str	r4, [r5, #0]
	}
   d67b0:	e7ea      	b.n	d6788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d67b2:	6804      	ldr	r4, [r0, #0]
   d67b4:	2c00      	cmp	r4, #0
   d67b6:	d0e7      	beq.n	d6788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d67b8:	f104 0010 	add.w	r0, r4, #16
   d67bc:	f7ff fe2a 	bl	d6414 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d67c0:	4620      	mov	r0, r4
   d67c2:	f7ff fe11 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d67c6:	2118      	movs	r1, #24
   d67c8:	4620      	mov	r0, r4
   d67ca:	f001 fa8c 	bl	d7ce6 <_ZdlPvj>
   d67ce:	e7db      	b.n	d6788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d67d0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d67d0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d67d2:	2300      	movs	r3, #0
   d67d4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d67d6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d67d8:	4604      	mov	r4, r0
   d67da:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d67dc:	b12b      	cbz	r3, d67ea <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d67de:	2202      	movs	r2, #2
   d67e0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d67e2:	68eb      	ldr	r3, [r5, #12]
   d67e4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d67e6:	68ab      	ldr	r3, [r5, #8]
   d67e8:	60a3      	str	r3, [r4, #8]
    }
   d67ea:	4620      	mov	r0, r4
   d67ec:	bd38      	pop	{r3, r4, r5, pc}

000d67ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d67ee:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d67f0:	b570      	push	{r4, r5, r6, lr}
   d67f2:	4604      	mov	r4, r0
	  switch (__op)
   d67f4:	d007      	beq.n	d6806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d67f6:	2a03      	cmp	r2, #3
   d67f8:	d012      	beq.n	d6820 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d67fa:	2a01      	cmp	r2, #1
   d67fc:	d101      	bne.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d67fe:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6800:	6003      	str	r3, [r0, #0]
	}
   d6802:	2000      	movs	r0, #0
   d6804:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6806:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6808:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d680a:	f7fd fc44 	bl	d4096 <_Znwj>
   d680e:	4605      	mov	r5, r0
   d6810:	b120      	cbz	r0, d681c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6812:	4631      	mov	r1, r6
   d6814:	f7ff ffdc 	bl	d67d0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6818:	7c33      	ldrb	r3, [r6, #16]
   d681a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d681c:	6025      	str	r5, [r4, #0]
	}
   d681e:	e7f0      	b.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6820:	6804      	ldr	r4, [r0, #0]
   d6822:	2c00      	cmp	r4, #0
   d6824:	d0ed      	beq.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6826:	4620      	mov	r0, r4
   d6828:	f7ff fdde 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d682c:	2114      	movs	r1, #20
   d682e:	4620      	mov	r0, r4
   d6830:	f001 fa59 	bl	d7ce6 <_ZdlPvj>
   d6834:	e7e5      	b.n	d6802 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6838 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6838:	b5f0      	push	{r4, r5, r6, r7, lr}
   d683a:	b089      	sub	sp, #36	; 0x24
   d683c:	4604      	mov	r4, r0
   d683e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6840:	a801      	add	r0, sp, #4
   d6842:	4611      	mov	r1, r2
   d6844:	f7ff fe10 	bl	d6468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6848:	b1a4      	cbz	r4, d6874 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d684a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d684c:	b11d      	cbz	r5, d6856 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d684e:	4628      	mov	r0, r5
   d6850:	f003 f978 	bl	d9b44 <strdup>
   d6854:	4605      	mov	r5, r0
   d6856:	a801      	add	r0, sp, #4
   d6858:	a903      	add	r1, sp, #12
        type_(type) {
   d685a:	9503      	str	r5, [sp, #12]
   d685c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6860:	f7ff fe78 	bl	d6554 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6864:	a803      	add	r0, sp, #12
   d6866:	f7ff fdd5 	bl	d6414 <_ZN8particle5ErrorD1Ev>
   d686a:	a802      	add	r0, sp, #8
   d686c:	f7fe fa2a 	bl	d4cc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6870:	b009      	add	sp, #36	; 0x24
   d6872:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6874:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6876:	2301      	movs	r3, #1
   d6878:	e8d5 2f4f 	ldrexb	r2, [r5]
   d687c:	2a00      	cmp	r2, #0
   d687e:	d103      	bne.n	d6888 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6880:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6884:	2900      	cmp	r1, #0
   d6886:	d1f7      	bne.n	d6878 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6888:	d1ef      	bne.n	d686a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d688a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d688c:	f3bf 8f5b 	dmb	ish
   d6890:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6892:	1d2b      	adds	r3, r5, #4
   d6894:	f3bf 8f5b 	dmb	ish
   d6898:	e853 6f00 	ldrex	r6, [r3]
   d689c:	e843 4200 	strex	r2, r4, [r3]
   d68a0:	2a00      	cmp	r2, #0
   d68a2:	d1f9      	bne.n	d6898 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d68a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d68a8:	2e00      	cmp	r6, #0
   d68aa:	d0de      	beq.n	d686a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d68ac:	4620      	mov	r0, r4
   d68ae:	f7ff fc7d 	bl	d61ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d68b2:	4607      	mov	r7, r0
   d68b4:	b160      	cbz	r0, d68d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d68b6:	f105 010c 	add.w	r1, r5, #12
   d68ba:	4630      	mov	r0, r6
   d68bc:	f7ff fe15 	bl	d64ea <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d68c0:	4630      	mov	r0, r6
   d68c2:	f7ff fd91 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d68c6:	2110      	movs	r1, #16
   d68c8:	4630      	mov	r0, r6
   d68ca:	f001 fa0c 	bl	d7ce6 <_ZdlPvj>
   d68ce:	e7cc      	b.n	d686a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d68d0:	4631      	mov	r1, r6
   d68d2:	a803      	add	r0, sp, #12
   d68d4:	f7ff ff7c 	bl	d67d0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d68d8:	7b2b      	ldrb	r3, [r5, #12]
   d68da:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d68de:	2010      	movs	r0, #16
   d68e0:	f7fd fbd9 	bl	d4096 <_Znwj>
   d68e4:	4605      	mov	r5, r0
   d68e6:	b1d0      	cbz	r0, d691e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d68e8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d68ea:	2014      	movs	r0, #20
   d68ec:	f7fd fbd3 	bl	d4096 <_Znwj>
   d68f0:	4604      	mov	r4, r0
   d68f2:	b178      	cbz	r0, d6914 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d68f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d68f6:	4601      	mov	r1, r0
   d68f8:	a803      	add	r0, sp, #12
   d68fa:	f7ff fdd4 	bl	d64a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68fe:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6900:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6902:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6904:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6906:	9205      	str	r2, [sp, #20]
   d6908:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d690a:	60e3      	str	r3, [r4, #12]
   d690c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6910:	9206      	str	r2, [sp, #24]
   d6912:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6914:	4b06      	ldr	r3, [pc, #24]	; (d6930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6916:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6918:	4b06      	ldr	r3, [pc, #24]	; (d6934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d691a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d691c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d691e:	a803      	add	r0, sp, #12
   d6920:	f7ff fd62 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6924:	2200      	movs	r2, #0
   d6926:	4629      	mov	r1, r5
   d6928:	4803      	ldr	r0, [pc, #12]	; (d6938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d692a:	f7ff fc47 	bl	d61bc <application_thread_invoke>
   d692e:	e7c7      	b.n	d68c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6930:	000d64fd 	.word	0x000d64fd
   d6934:	000d67ef 	.word	0x000d67ef
   d6938:	000d635f 	.word	0x000d635f

000d693c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d693c:	2200      	movs	r2, #0
   d693e:	6840      	ldr	r0, [r0, #4]
   d6940:	4611      	mov	r1, r2
   d6942:	f7ff bcb1 	b.w	d62a8 <network_listening>

000d6946 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6946:	2200      	movs	r2, #0
   d6948:	6840      	ldr	r0, [r0, #4]
   d694a:	4611      	mov	r1, r2
   d694c:	f7ff bcbc 	b.w	d62c8 <network_get_listen_timeout>

000d6950 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6950:	6840      	ldr	r0, [r0, #4]
   d6952:	2200      	movs	r2, #0
   d6954:	f7ff bcb0 	b.w	d62b8 <network_set_listen_timeout>

000d6958 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6958:	6840      	ldr	r0, [r0, #4]
   d695a:	2200      	movs	r2, #0
   d695c:	f081 0101 	eor.w	r1, r1, #1
   d6960:	f7ff bc9a 	b.w	d6298 <network_listen>

000d6964 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6964:	2300      	movs	r3, #0
   d6966:	6840      	ldr	r0, [r0, #4]
   d6968:	461a      	mov	r2, r3
   d696a:	4619      	mov	r1, r3
   d696c:	f7ff bc8c 	b.w	d6288 <network_off>

000d6970 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6970:	2300      	movs	r3, #0
   d6972:	6840      	ldr	r0, [r0, #4]
   d6974:	461a      	mov	r2, r3
   d6976:	4619      	mov	r1, r3
   d6978:	f7ff bc7e 	b.w	d6278 <network_on>

000d697c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d697c:	2200      	movs	r2, #0
   d697e:	6840      	ldr	r0, [r0, #4]
   d6980:	4611      	mov	r1, r2
   d6982:	f7ff bc71 	b.w	d6268 <network_ready>

000d6986 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6986:	2200      	movs	r2, #0
   d6988:	6840      	ldr	r0, [r0, #4]
   d698a:	4611      	mov	r1, r2
   d698c:	f7ff bc5c 	b.w	d6248 <network_connecting>

000d6990 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6990:	6840      	ldr	r0, [r0, #4]
   d6992:	2200      	movs	r2, #0
   d6994:	2102      	movs	r1, #2
   d6996:	f7ff bc5f 	b.w	d6258 <network_disconnect>

000d699a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d699a:	2300      	movs	r3, #0
   d699c:	6840      	ldr	r0, [r0, #4]
   d699e:	461a      	mov	r2, r3
   d69a0:	f7ff bc4a 	b.w	d6238 <network_connect>

000d69a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d69a4:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d69a6:	2203      	movs	r2, #3
   d69a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d69aa:	4a02      	ldr	r2, [pc, #8]	; (d69b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d69ac:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d69ae:	4770      	bx	lr
   d69b0:	2003e60c 	.word	0x2003e60c
   d69b4:	000d9ecc 	.word	0x000d9ecc

000d69b8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d69b8:	4770      	bx	lr

000d69ba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d69ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69bc:	4606      	mov	r6, r0
   d69be:	4615      	mov	r5, r2
   d69c0:	460c      	mov	r4, r1
   d69c2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d69c4:	42bc      	cmp	r4, r7
   d69c6:	d006      	beq.n	d69d6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d69c8:	6833      	ldr	r3, [r6, #0]
   d69ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d69ce:	689b      	ldr	r3, [r3, #8]
   d69d0:	4630      	mov	r0, r6
   d69d2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d69d4:	e7f6      	b.n	d69c4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d69d6:	4628      	mov	r0, r5
   d69d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69da <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d69da:	7c00      	ldrb	r0, [r0, #16]
   d69dc:	2200      	movs	r2, #0
   d69de:	f7ff bae5 	b.w	d5fac <hal_i2c_write>

000d69e2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d69e2:	7c00      	ldrb	r0, [r0, #16]
   d69e4:	2100      	movs	r1, #0
   d69e6:	f7ff bae9 	b.w	d5fbc <hal_i2c_available>

000d69ea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d69ea:	7c00      	ldrb	r0, [r0, #16]
   d69ec:	2100      	movs	r1, #0
   d69ee:	f7ff baed 	b.w	d5fcc <hal_i2c_read>

000d69f2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d69f2:	7c00      	ldrb	r0, [r0, #16]
   d69f4:	2100      	movs	r1, #0
   d69f6:	f7ff baf1 	b.w	d5fdc <hal_i2c_peek>

000d69fa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d69fa:	7c00      	ldrb	r0, [r0, #16]
   d69fc:	2100      	movs	r1, #0
   d69fe:	f7ff baf5 	b.w	d5fec <hal_i2c_flush>

000d6a02 <_ZN7TwoWireD0Ev>:
   d6a02:	b510      	push	{r4, lr}
   d6a04:	2114      	movs	r1, #20
   d6a06:	4604      	mov	r4, r0
   d6a08:	f001 f96d 	bl	d7ce6 <_ZdlPvj>
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	bd10      	pop	{r4, pc}

000d6a10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6a10:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a16:	4604      	mov	r4, r0
   d6a18:	4608      	mov	r0, r1
   d6a1a:	2100      	movs	r1, #0
   d6a1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6a20:	4b03      	ldr	r3, [pc, #12]	; (d6a30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6a22:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6a24:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6a26:	4611      	mov	r1, r2
   d6a28:	f7ff faf0 	bl	d600c <hal_i2c_init>
}
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	bd10      	pop	{r4, pc}
   d6a30:	000d9f00 	.word	0x000d9f00

000d6a34 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6a34:	7c00      	ldrb	r0, [r0, #16]
   d6a36:	2200      	movs	r2, #0
   d6a38:	f7ff ba98 	b.w	d5f6c <hal_i2c_set_speed>

000d6a3c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6a3c:	2300      	movs	r3, #0
   d6a3e:	7c00      	ldrb	r0, [r0, #16]
   d6a40:	461a      	mov	r2, r3
   d6a42:	4619      	mov	r1, r3
   d6a44:	f7ff ba9a 	b.w	d5f7c <hal_i2c_begin>

000d6a48 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6a48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6a4a:	2200      	movs	r2, #0
   d6a4c:	2314      	movs	r3, #20
   d6a4e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6a52:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6a56:	780b      	ldrb	r3, [r1, #0]
   d6a58:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a5c:	684b      	ldr	r3, [r1, #4]
   d6a5e:	9303      	str	r3, [sp, #12]
   d6a60:	68cb      	ldr	r3, [r1, #12]
   d6a62:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6a64:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6a66:	7a0b      	ldrb	r3, [r1, #8]
   d6a68:	9305      	str	r3, [sp, #20]
   d6a6a:	a901      	add	r1, sp, #4
   d6a6c:	f7ff fad6 	bl	d601c <hal_i2c_request_ex>
}
   d6a70:	b007      	add	sp, #28
   d6a72:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a76 <_ZN7TwoWire11requestFromEhjh>:
{
   d6a76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6a78:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6a7a:	f88d 1000 	strb.w	r1, [sp]
   d6a7e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6a82:	9103      	str	r1, [sp, #12]
   d6a84:	bf18      	it	ne
   d6a86:	2301      	movne	r3, #1
   d6a88:	4669      	mov	r1, sp
    size_ = size;
   d6a8a:	9201      	str	r2, [sp, #4]
   d6a8c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a90:	f7ff ffda 	bl	d6a48 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6a94:	b005      	add	sp, #20
   d6a96:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a9a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6a9a:	2301      	movs	r3, #1
   d6a9c:	f7ff bfeb 	b.w	d6a76 <_ZN7TwoWire11requestFromEhjh>

000d6aa0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6aa0:	7c00      	ldrb	r0, [r0, #16]
   d6aa2:	2200      	movs	r2, #0
   d6aa4:	f7ff ba72 	b.w	d5f8c <hal_i2c_begin_transmission>

000d6aa8 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6aa8:	7c00      	ldrb	r0, [r0, #16]
   d6aaa:	2200      	movs	r2, #0
   d6aac:	f7ff ba76 	b.w	d5f9c <hal_i2c_end_transmission>

000d6ab0 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6ab0:	2101      	movs	r1, #1
   d6ab2:	f7ff bff9 	b.w	d6aa8 <_ZN7TwoWire15endTransmissionEh>

000d6ab6 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>:
    return ok;
}

bool attachInterruptDirect(IRQn_Type irq, HAL_Direct_Interrupt_Handler handler, bool enable)
{
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6ab6:	2a00      	cmp	r2, #0
{
   d6ab8:	b508      	push	{r3, lr}
    const bool ok = !HAL_Set_Direct_Interrupt_Handler(irq, handler, enable ? HAL_DIRECT_INTERRUPT_FLAG_ENABLE : HAL_DIRECT_INTERRUPT_FLAG_NONE, nullptr);
   d6aba:	f04f 0300 	mov.w	r3, #0
   d6abe:	bf14      	ite	ne
   d6ac0:	2204      	movne	r2, #4
   d6ac2:	461a      	moveq	r2, r3
   d6ac4:	f7ff fa48 	bl	d5f58 <HAL_Set_Direct_Interrupt_Handler>
    return ok;
}
   d6ac8:	fab0 f080 	clz	r0, r0
   d6acc:	0940      	lsrs	r0, r0, #5
   d6ace:	bd08      	pop	{r3, pc}

000d6ad0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ad0:	4770      	bx	lr

000d6ad2 <_ZN9IPAddressD0Ev>:
   d6ad2:	b510      	push	{r4, lr}
   d6ad4:	2118      	movs	r1, #24
   d6ad6:	4604      	mov	r4, r0
   d6ad8:	f001 f905 	bl	d7ce6 <_ZdlPvj>
   d6adc:	4620      	mov	r0, r4
   d6ade:	bd10      	pop	{r4, pc}

000d6ae0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6ae2:	7d03      	ldrb	r3, [r0, #20]
   d6ae4:	2b06      	cmp	r3, #6
{
   d6ae6:	b08d      	sub	sp, #52	; 0x34
   d6ae8:	460e      	mov	r6, r1
   d6aea:	f100 0704 	add.w	r7, r0, #4
   d6aee:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6af2:	d012      	beq.n	d6b1a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6af4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6af8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6afc:	220a      	movs	r2, #10
   d6afe:	4630      	mov	r0, r6
   d6b00:	f000 f94d 	bl	d6d9e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b04:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b06:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6b08:	d019      	beq.n	d6b3e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6b0a:	2c00      	cmp	r4, #0
   d6b0c:	d0f4      	beq.n	d6af8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6b0e:	212e      	movs	r1, #46	; 0x2e
   d6b10:	4630      	mov	r0, r6
   d6b12:	f000 f927 	bl	d6d64 <_ZN5Print5printEc>
   d6b16:	4404      	add	r4, r0
   d6b18:	e7ee      	b.n	d6af8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b1a:	232f      	movs	r3, #47	; 0x2f
   d6b1c:	466a      	mov	r2, sp
   d6b1e:	4639      	mov	r1, r7
   d6b20:	200a      	movs	r0, #10
		buf[0] = 0;
   d6b22:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b26:	f7ff fa81 	bl	d602c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6b2a:	4668      	mov	r0, sp
   d6b2c:	f003 f827 	bl	d9b7e <strlen>
   d6b30:	6833      	ldr	r3, [r6, #0]
   d6b32:	4602      	mov	r2, r0
   d6b34:	68db      	ldr	r3, [r3, #12]
   d6b36:	4669      	mov	r1, sp
   d6b38:	4630      	mov	r0, r6
   d6b3a:	4798      	blx	r3
   d6b3c:	4604      	mov	r4, r0
    }
    return n;
}
   d6b3e:	4620      	mov	r0, r4
   d6b40:	b00d      	add	sp, #52	; 0x34
   d6b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b44 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6b44:	b510      	push	{r4, lr}
   d6b46:	4b05      	ldr	r3, [pc, #20]	; (d6b5c <_ZN9IPAddressC1Ev+0x18>)
   d6b48:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b4a:	2211      	movs	r2, #17
   d6b4c:	f840 3b04 	str.w	r3, [r0], #4
   d6b50:	2100      	movs	r1, #0
   d6b52:	f002 ff8f 	bl	d9a74 <memset>
}
   d6b56:	4620      	mov	r0, r4
   d6b58:	bd10      	pop	{r4, pc}
   d6b5a:	bf00      	nop
   d6b5c:	000d9f28 	.word	0x000d9f28

000d6b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6b60:	4603      	mov	r3, r0
   d6b62:	4a07      	ldr	r2, [pc, #28]	; (d6b80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6b64:	b510      	push	{r4, lr}
   d6b66:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6b6a:	f101 0210 	add.w	r2, r1, #16
   d6b6e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6b72:	f843 4b04 	str.w	r4, [r3], #4
   d6b76:	4291      	cmp	r1, r2
   d6b78:	d1f9      	bne.n	d6b6e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6b7a:	780a      	ldrb	r2, [r1, #0]
   d6b7c:	701a      	strb	r2, [r3, #0]
}
   d6b7e:	bd10      	pop	{r4, pc}
   d6b80:	000d9f28 	.word	0x000d9f28

000d6b84 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6b84:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6b86:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6b8a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6b8e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6b92:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6b96:	2304      	movs	r3, #4
   d6b98:	6041      	str	r1, [r0, #4]
   d6b9a:	7503      	strb	r3, [r0, #20]
}
   d6b9c:	bd10      	pop	{r4, pc}

000d6b9e <_ZN9IPAddressaSEPKh>:
{
   d6b9e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6ba0:	78cb      	ldrb	r3, [r1, #3]
   d6ba2:	9300      	str	r3, [sp, #0]
   d6ba4:	788b      	ldrb	r3, [r1, #2]
   d6ba6:	784a      	ldrb	r2, [r1, #1]
   d6ba8:	7809      	ldrb	r1, [r1, #0]
   d6baa:	f7ff ffeb 	bl	d6b84 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6bae:	b002      	add	sp, #8
   d6bb0:	bd10      	pop	{r4, pc}
	...

000d6bb4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6bb4:	4b01      	ldr	r3, [pc, #4]	; (d6bbc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6bb6:	4a02      	ldr	r2, [pc, #8]	; (d6bc0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6bb8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6bba:	4770      	bx	lr
   d6bbc:	2003e614 	.word	0x2003e614
   d6bc0:	000d9f34 	.word	0x000d9f34

000d6bc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6bc4:	2300      	movs	r3, #0
   d6bc6:	6840      	ldr	r0, [r0, #4]
   d6bc8:	461a      	mov	r2, r3
   d6bca:	f7ff bb35 	b.w	d6238 <network_connect>

000d6bce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6bce:	6840      	ldr	r0, [r0, #4]
   d6bd0:	2200      	movs	r2, #0
   d6bd2:	2102      	movs	r1, #2
   d6bd4:	f7ff bb40 	b.w	d6258 <network_disconnect>

000d6bd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6bd8:	2200      	movs	r2, #0
   d6bda:	6840      	ldr	r0, [r0, #4]
   d6bdc:	4611      	mov	r1, r2
   d6bde:	f7ff bb33 	b.w	d6248 <network_connecting>

000d6be2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6be2:	2200      	movs	r2, #0
   d6be4:	6840      	ldr	r0, [r0, #4]
   d6be6:	4611      	mov	r1, r2
   d6be8:	f7ff bb3e 	b.w	d6268 <network_ready>

000d6bec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6bec:	2300      	movs	r3, #0
   d6bee:	6840      	ldr	r0, [r0, #4]
   d6bf0:	461a      	mov	r2, r3
   d6bf2:	4619      	mov	r1, r3
   d6bf4:	f7ff bb40 	b.w	d6278 <network_on>

000d6bf8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6bf8:	2300      	movs	r3, #0
   d6bfa:	6840      	ldr	r0, [r0, #4]
   d6bfc:	461a      	mov	r2, r3
   d6bfe:	4619      	mov	r1, r3
   d6c00:	f7ff bb42 	b.w	d6288 <network_off>

000d6c04 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6c04:	6840      	ldr	r0, [r0, #4]
   d6c06:	2200      	movs	r2, #0
   d6c08:	f081 0101 	eor.w	r1, r1, #1
   d6c0c:	f7ff bb44 	b.w	d6298 <network_listen>

000d6c10 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6c10:	6840      	ldr	r0, [r0, #4]
   d6c12:	2200      	movs	r2, #0
   d6c14:	f7ff bb50 	b.w	d62b8 <network_set_listen_timeout>

000d6c18 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6c18:	2200      	movs	r2, #0
   d6c1a:	6840      	ldr	r0, [r0, #4]
   d6c1c:	4611      	mov	r1, r2
   d6c1e:	f7ff bb53 	b.w	d62c8 <network_get_listen_timeout>

000d6c22 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6c22:	2200      	movs	r2, #0
   d6c24:	6840      	ldr	r0, [r0, #4]
   d6c26:	4611      	mov	r1, r2
   d6c28:	f7ff bb3e 	b.w	d62a8 <network_listening>

000d6c2c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c30:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6c32:	b095      	sub	sp, #84	; 0x54
   d6c34:	4616      	mov	r6, r2
   d6c36:	460d      	mov	r5, r1
   d6c38:	4607      	mov	r7, r0
    IPAddress addr;
   d6c3a:	f7ff ff83 	bl	d6b44 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d6c3e:	4621      	mov	r1, r4
   d6c40:	2218      	movs	r2, #24
   d6c42:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6c44:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c46:	f002 ff15 	bl	d9a74 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c4a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6c4c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c50:	4621      	mov	r1, r4
   d6c52:	466b      	mov	r3, sp
   d6c54:	aa0c      	add	r2, sp, #48	; 0x30
   d6c56:	4630      	mov	r0, r6
   d6c58:	f7ff f9f8 	bl	d604c <netdb_getaddrinfo>
    if (!r) {
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	2800      	cmp	r0, #0
   d6c60:	d146      	bne.n	d6cf0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c62:	4602      	mov	r2, r0
   d6c64:	2101      	movs	r1, #1
   d6c66:	6868      	ldr	r0, [r5, #4]
   d6c68:	f7ff fafe 	bl	d6268 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c6c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c6e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c70:	4622      	mov	r2, r4
   d6c72:	6868      	ldr	r0, [r5, #4]
   d6c74:	f7ff faf8 	bl	d6268 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c78:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c7a:	4681      	mov	r9, r0
        bool ok = false;
   d6c7c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c7e:	2e00      	cmp	r6, #0
   d6c80:	d036      	beq.n	d6cf0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d6c82:	2900      	cmp	r1, #0
   d6c84:	d134      	bne.n	d6cf0 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c86:	6873      	ldr	r3, [r6, #4]
   d6c88:	2b02      	cmp	r3, #2
   d6c8a:	d003      	beq.n	d6c94 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6c8c:	2b0a      	cmp	r3, #10
   d6c8e:	d00b      	beq.n	d6ca8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c90:	69f6      	ldr	r6, [r6, #28]
   d6c92:	e7f4      	b.n	d6c7e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6c94:	f1b8 0f00 	cmp.w	r8, #0
   d6c98:	d004      	beq.n	d6ca4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c9a:	6971      	ldr	r1, [r6, #20]
   d6c9c:	4638      	mov	r0, r7
   d6c9e:	3104      	adds	r1, #4
   d6ca0:	f7ff ff7d 	bl	d6b9e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d6ca4:	4641      	mov	r1, r8
   d6ca6:	e7f3      	b.n	d6c90 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6ca8:	f1b9 0f00 	cmp.w	r9, #0
   d6cac:	d101      	bne.n	d6cb2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6cae:	4649      	mov	r1, r9
   d6cb0:	e7ee      	b.n	d6c90 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6cb2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6cb4:	2210      	movs	r2, #16
   d6cb6:	a801      	add	r0, sp, #4
   d6cb8:	f002 fedc 	bl	d9a74 <memset>
                    a.v = 6;
   d6cbc:	2306      	movs	r3, #6
   d6cbe:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6cc2:	ad01      	add	r5, sp, #4
   d6cc4:	f104 0308 	add.w	r3, r4, #8
   d6cc8:	3418      	adds	r4, #24
   d6cca:	6818      	ldr	r0, [r3, #0]
   d6ccc:	6859      	ldr	r1, [r3, #4]
   d6cce:	462a      	mov	r2, r5
   d6cd0:	c203      	stmia	r2!, {r0, r1}
   d6cd2:	3308      	adds	r3, #8
   d6cd4:	42a3      	cmp	r3, r4
   d6cd6:	4615      	mov	r5, r2
   d6cd8:	d1f7      	bne.n	d6cca <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6cda:	a901      	add	r1, sp, #4
   d6cdc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6cde:	ad07      	add	r5, sp, #28
   d6ce0:	f7ff ff3e 	bl	d6b60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ce6:	1d3c      	adds	r4, r7, #4
   d6ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cea:	682b      	ldr	r3, [r5, #0]
   d6cec:	7023      	strb	r3, [r4, #0]
   d6cee:	e7de      	b.n	d6cae <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6cf0:	9800      	ldr	r0, [sp, #0]
   d6cf2:	f7ff f9a3 	bl	d603c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6cf6:	4638      	mov	r0, r7
   d6cf8:	b015      	add	sp, #84	; 0x54
   d6cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6d00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6d00:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6d02:	4a03      	ldr	r2, [pc, #12]	; (d6d10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6d04:	601a      	str	r2, [r3, #0]
   d6d06:	2200      	movs	r2, #0
   d6d08:	605a      	str	r2, [r3, #4]

} // spark
   d6d0a:	4770      	bx	lr
   d6d0c:	2003e618 	.word	0x2003e618
   d6d10:	000d9f40 	.word	0x000d9f40

000d6d14 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d16:	4606      	mov	r6, r0
   d6d18:	460d      	mov	r5, r1
  size_t n = 0;
   d6d1a:	188f      	adds	r7, r1, r2
   d6d1c:	2400      	movs	r4, #0
  while (size--) {
   d6d1e:	42bd      	cmp	r5, r7
   d6d20:	d00c      	beq.n	d6d3c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6d22:	6833      	ldr	r3, [r6, #0]
   d6d24:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6d28:	689b      	ldr	r3, [r3, #8]
   d6d2a:	4630      	mov	r0, r6
   d6d2c:	4798      	blx	r3
     if (chunk>=0)
   d6d2e:	1e03      	subs	r3, r0, #0
   d6d30:	db01      	blt.n	d6d36 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6d32:	441c      	add	r4, r3
  while (size--) {
   d6d34:	e7f3      	b.n	d6d1e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6d36:	2c00      	cmp	r4, #0
   d6d38:	bf08      	it	eq
   d6d3a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d40 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6d40:	b513      	push	{r0, r1, r4, lr}
   d6d42:	4604      	mov	r4, r0
    }
   d6d44:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6d46:	b159      	cbz	r1, d6d60 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6d48:	9101      	str	r1, [sp, #4]
   d6d4a:	f002 ff18 	bl	d9b7e <strlen>
   d6d4e:	6823      	ldr	r3, [r4, #0]
   d6d50:	9901      	ldr	r1, [sp, #4]
   d6d52:	68db      	ldr	r3, [r3, #12]
   d6d54:	4602      	mov	r2, r0
   d6d56:	4620      	mov	r0, r4
    }
   d6d58:	b002      	add	sp, #8
   d6d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6d5e:	4718      	bx	r3
    }
   d6d60:	b002      	add	sp, #8
   d6d62:	bd10      	pop	{r4, pc}

000d6d64 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6d64:	6803      	ldr	r3, [r0, #0]
   d6d66:	689b      	ldr	r3, [r3, #8]
   d6d68:	4718      	bx	r3

000d6d6a <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d6d6a:	b508      	push	{r3, lr}
  return write(str);
   d6d6c:	f7ff ffe8 	bl	d6d40 <_ZN5Print5writeEPKc>
  return print(reinterpret_cast<const char*>(str));
}
   d6d70:	bd08      	pop	{r3, pc}

000d6d72 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d6d72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6d74:	210d      	movs	r1, #13
{
   d6d76:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6d78:	f7ff fff4 	bl	d6d64 <_ZN5Print5printEc>
  n += print('\n');
   d6d7c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6d7e:	4604      	mov	r4, r0
  n += print('\n');
   d6d80:	4628      	mov	r0, r5
   d6d82:	f7ff ffef 	bl	d6d64 <_ZN5Print5printEc>
  return n;
}
   d6d86:	4420      	add	r0, r4
   d6d88:	bd38      	pop	{r3, r4, r5, pc}

000d6d8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6d8a:	b538      	push	{r3, r4, r5, lr}
   d6d8c:	4605      	mov	r5, r0
  return write(str);
   d6d8e:	f7ff ffd7 	bl	d6d40 <_ZN5Print5writeEPKc>
   d6d92:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6d94:	4628      	mov	r0, r5
   d6d96:	f7ff ffec 	bl	d6d72 <_ZN5Print7printlnEv>
  return n;
}
   d6d9a:	4420      	add	r0, r4
   d6d9c:	bd38      	pop	{r3, r4, r5, pc}

000d6d9e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d9e:	b530      	push	{r4, r5, lr}
   d6da0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6da2:	2300      	movs	r3, #0
   d6da4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6da8:	2a01      	cmp	r2, #1
   d6daa:	bf98      	it	ls
   d6dac:	220a      	movls	r2, #10
   d6dae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6db0:	460d      	mov	r5, r1
   d6db2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6db6:	fb01 5312 	mls	r3, r1, r2, r5
   d6dba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6dbe:	2b09      	cmp	r3, #9
   d6dc0:	bf94      	ite	ls
   d6dc2:	3330      	addls	r3, #48	; 0x30
   d6dc4:	3337      	addhi	r3, #55	; 0x37
   d6dc6:	b2db      	uxtb	r3, r3
  } while(n);
   d6dc8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6dca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6dce:	d9ef      	bls.n	d6db0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6dd0:	4621      	mov	r1, r4
   d6dd2:	f7ff ffb5 	bl	d6d40 <_ZN5Print5writeEPKc>
}
   d6dd6:	b00b      	add	sp, #44	; 0x2c
   d6dd8:	bd30      	pop	{r4, r5, pc}
	...

000d6ddc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6de0:	ec55 4b10 	vmov	r4, r5, d0
   d6de4:	4606      	mov	r6, r0
   d6de6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6de8:	ee10 2a10 	vmov	r2, s0
   d6dec:	ee10 0a10 	vmov	r0, s0
   d6df0:	462b      	mov	r3, r5
   d6df2:	4629      	mov	r1, r5
   d6df4:	f002 fd74 	bl	d98e0 <__aeabi_dcmpun>
   d6df8:	b140      	cbz	r0, d6e0c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d6dfa:	4953      	ldr	r1, [pc, #332]	; (d6f48 <_ZN5Print10printFloatEdh+0x16c>)
   d6dfc:	4630      	mov	r0, r6
   d6dfe:	f7ff ff9f 	bl	d6d40 <_ZN5Print5writeEPKc>
   d6e02:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d6e04:	4650      	mov	r0, sl
   d6e06:	b003      	add	sp, #12
   d6e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d6e0c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d6e10:	4b4e      	ldr	r3, [pc, #312]	; (d6f4c <_ZN5Print10printFloatEdh+0x170>)
   d6e12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6e16:	4620      	mov	r0, r4
   d6e18:	4649      	mov	r1, r9
   d6e1a:	f002 fd61 	bl	d98e0 <__aeabi_dcmpun>
   d6e1e:	b948      	cbnz	r0, d6e34 <_ZN5Print10printFloatEdh+0x58>
   d6e20:	4b4a      	ldr	r3, [pc, #296]	; (d6f4c <_ZN5Print10printFloatEdh+0x170>)
   d6e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6e26:	4620      	mov	r0, r4
   d6e28:	4649      	mov	r1, r9
   d6e2a:	f002 fd3b 	bl	d98a4 <__aeabi_dcmple>
   d6e2e:	b908      	cbnz	r0, d6e34 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d6e30:	4947      	ldr	r1, [pc, #284]	; (d6f50 <_ZN5Print10printFloatEdh+0x174>)
   d6e32:	e7e3      	b.n	d6dfc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6e34:	4b47      	ldr	r3, [pc, #284]	; (d6f54 <_ZN5Print10printFloatEdh+0x178>)
   d6e36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	4629      	mov	r1, r5
   d6e3e:	f002 fd45 	bl	d98cc <__aeabi_dcmpgt>
   d6e42:	b108      	cbz	r0, d6e48 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d6e44:	4944      	ldr	r1, [pc, #272]	; (d6f58 <_ZN5Print10printFloatEdh+0x17c>)
   d6e46:	e7d9      	b.n	d6dfc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d6e48:	4b44      	ldr	r3, [pc, #272]	; (d6f5c <_ZN5Print10printFloatEdh+0x180>)
   d6e4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d6e4e:	4620      	mov	r0, r4
   d6e50:	4629      	mov	r1, r5
   d6e52:	f002 fd1d 	bl	d9890 <__aeabi_dcmplt>
   d6e56:	2800      	cmp	r0, #0
   d6e58:	d1f4      	bne.n	d6e44 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d6e5a:	2200      	movs	r2, #0
   d6e5c:	2300      	movs	r3, #0
   d6e5e:	4620      	mov	r0, r4
   d6e60:	4629      	mov	r1, r5
   d6e62:	f002 fd15 	bl	d9890 <__aeabi_dcmplt>
   d6e66:	b1d0      	cbz	r0, d6e9e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d6e68:	212d      	movs	r1, #45	; 0x2d
   d6e6a:	4630      	mov	r0, r6
   d6e6c:	f7ff ff7a 	bl	d6d64 <_ZN5Print5printEc>
     number = -number;
   d6e70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d6e74:	4682      	mov	sl, r0
     number = -number;
   d6e76:	461d      	mov	r5, r3
  double rounding = 0.5;
   d6e78:	4939      	ldr	r1, [pc, #228]	; (d6f60 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d6e7a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d6f68 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d6e7e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d6e82:	2000      	movs	r0, #0
    rounding /= 10.0;
   d6e84:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d6e88:	fa5f f38b 	uxtb.w	r3, fp
   d6e8c:	429f      	cmp	r7, r3
   d6e8e:	d908      	bls.n	d6ea2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d6e90:	4642      	mov	r2, r8
   d6e92:	464b      	mov	r3, r9
   d6e94:	f002 fbb4 	bl	d9600 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d6e98:	f10b 0b01 	add.w	fp, fp, #1
   d6e9c:	e7f4      	b.n	d6e88 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d6e9e:	4682      	mov	sl, r0
   d6ea0:	e7ea      	b.n	d6e78 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d6ea2:	4622      	mov	r2, r4
   d6ea4:	462b      	mov	r3, r5
   d6ea6:	f002 f8cb 	bl	d9040 <__adddf3>
   d6eaa:	460d      	mov	r5, r1
   d6eac:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d6eae:	f002 fd55 	bl	d995c <__aeabi_d2uiz>
   d6eb2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d6eb4:	f002 fa00 	bl	d92b8 <__aeabi_ui2d>
   d6eb8:	4602      	mov	r2, r0
   d6eba:	460b      	mov	r3, r1
   d6ebc:	4620      	mov	r0, r4
   d6ebe:	4629      	mov	r1, r5
   d6ec0:	f002 f8bc 	bl	d903c <__aeabi_dsub>
        return printNumber(val, base) + t;
   d6ec4:	220a      	movs	r2, #10
   d6ec6:	4604      	mov	r4, r0
   d6ec8:	460d      	mov	r5, r1
   d6eca:	4630      	mov	r0, r6
   d6ecc:	4641      	mov	r1, r8
   d6ece:	f7ff ff66 	bl	d6d9e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d6ed2:	4482      	add	sl, r0
  if (digits > 0) {
   d6ed4:	b127      	cbz	r7, d6ee0 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d6ed6:	4923      	ldr	r1, [pc, #140]	; (d6f64 <_ZN5Print10printFloatEdh+0x188>)
   d6ed8:	4630      	mov	r0, r6
   d6eda:	f7ff ff31 	bl	d6d40 <_ZN5Print5writeEPKc>
    n += print(".");
   d6ede:	4482      	add	sl, r0
    remainder *= 10.0;
   d6ee0:	f8df 9084 	ldr.w	r9, [pc, #132]	; d6f68 <_ZN5Print10printFloatEdh+0x18c>
   d6ee4:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d6ee8:	3f01      	subs	r7, #1
   d6eea:	b2ff      	uxtb	r7, r7
   d6eec:	2fff      	cmp	r7, #255	; 0xff
   d6eee:	d089      	beq.n	d6e04 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d6ef0:	4642      	mov	r2, r8
   d6ef2:	464b      	mov	r3, r9
   d6ef4:	4620      	mov	r0, r4
   d6ef6:	4629      	mov	r1, r5
   d6ef8:	f002 fa58 	bl	d93ac <__aeabi_dmul>
   d6efc:	4604      	mov	r4, r0
   d6efe:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d6f00:	f002 fd04 	bl	d990c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d6f04:	f1b0 0b00 	subs.w	fp, r0, #0
   d6f08:	da1a      	bge.n	d6f40 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d6f0a:	212d      	movs	r1, #45	; 0x2d
   d6f0c:	4630      	mov	r0, r6
   d6f0e:	f7ff ff29 	bl	d6d64 <_ZN5Print5printEc>
            val = -n;
   d6f12:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d6f16:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d6f18:	220a      	movs	r2, #10
   d6f1a:	4630      	mov	r0, r6
   d6f1c:	9301      	str	r3, [sp, #4]
   d6f1e:	f7ff ff3e 	bl	d6d9e <_ZN5Print11printNumberEmh>
   d6f22:	9b01      	ldr	r3, [sp, #4]
   d6f24:	4418      	add	r0, r3
    n += print(toPrint);
   d6f26:	4482      	add	sl, r0
    remainder -= toPrint;
   d6f28:	4658      	mov	r0, fp
   d6f2a:	f002 f9d5 	bl	d92d8 <__aeabi_i2d>
   d6f2e:	4602      	mov	r2, r0
   d6f30:	460b      	mov	r3, r1
   d6f32:	4620      	mov	r0, r4
   d6f34:	4629      	mov	r1, r5
   d6f36:	f002 f881 	bl	d903c <__aeabi_dsub>
   d6f3a:	4604      	mov	r4, r0
   d6f3c:	460d      	mov	r5, r1
  while (digits-- > 0)
   d6f3e:	e7d3      	b.n	d6ee8 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d6f40:	4659      	mov	r1, fp
        size_t t = 0;
   d6f42:	2300      	movs	r3, #0
   d6f44:	e7e8      	b.n	d6f18 <_ZN5Print10printFloatEdh+0x13c>
   d6f46:	bf00      	nop
   d6f48:	000d9f6c 	.word	0x000d9f6c
   d6f4c:	7fefffff 	.word	0x7fefffff
   d6f50:	000d9f70 	.word	0x000d9f70
   d6f54:	41efffff 	.word	0x41efffff
   d6f58:	000d9f74 	.word	0x000d9f74
   d6f5c:	c1efffff 	.word	0xc1efffff
   d6f60:	3fe00000 	.word	0x3fe00000
   d6f64:	000d9dcf 	.word	0x000d9dcf
   d6f68:	40240000 	.word	0x40240000

000d6f6c <_ZN5Print7printlnEdi>:
{
   d6f6c:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d6f6e:	b2c9      	uxtb	r1, r1
{
   d6f70:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d6f72:	f7ff ff33 	bl	d6ddc <_ZN5Print10printFloatEdh>
   d6f76:	4604      	mov	r4, r0
  n += println();
   d6f78:	4628      	mov	r0, r5
   d6f7a:	f7ff fefa 	bl	d6d72 <_ZN5Print7printlnEv>
}
   d6f7e:	4420      	add	r0, r4
   d6f80:	bd38      	pop	{r3, r4, r5, pc}

000d6f82 <_ZN5Print7printlnEfi>:
{
   d6f82:	b538      	push	{r3, r4, r5, lr}
   d6f84:	4604      	mov	r4, r0
   d6f86:	ee10 0a10 	vmov	r0, s0
   d6f8a:	460d      	mov	r5, r1
    return println((double)num, digits);
   d6f8c:	f002 f9b6 	bl	d92fc <__aeabi_f2d>
   d6f90:	ec41 0b10 	vmov	d0, r0, r1
   d6f94:	4629      	mov	r1, r5
   d6f96:	4620      	mov	r0, r4
}
   d6f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d6f9c:	f7ff bfe6 	b.w	d6f6c <_ZN5Print7printlnEdi>

000d6fa0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d6fa0:	b510      	push	{r4, lr}
  if (0 == max) {
   d6fa2:	4604      	mov	r4, r0
   d6fa4:	b128      	cbz	r0, d6fb2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d6fa6:	f002 fd91 	bl	d9acc <rand>
   d6faa:	fb90 f3f4 	sdiv	r3, r0, r4
   d6fae:	fb03 0414 	mls	r4, r3, r4, r0
}
   d6fb2:	4620      	mov	r0, r4
   d6fb4:	bd10      	pop	{r4, pc}

000d6fb6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d6fb6:	4288      	cmp	r0, r1
{
   d6fb8:	b510      	push	{r4, lr}
   d6fba:	4604      	mov	r4, r0
  if (min >= max) {
   d6fbc:	da03      	bge.n	d6fc6 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d6fbe:	1a08      	subs	r0, r1, r0
   d6fc0:	f7ff ffee 	bl	d6fa0 <_Z6randomi>
   d6fc4:	4404      	add	r4, r0
}
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	bd10      	pop	{r4, pc}

000d6fca <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6fca:	b510      	push	{r4, lr}
   d6fcc:	4604      	mov	r4, r0
   d6fce:	f7ff fa0b 	bl	d63e8 <_ZNSt14_Function_baseD1Ev>
   d6fd2:	4620      	mov	r0, r4
   d6fd4:	bd10      	pop	{r4, pc}
	...

000d6fd8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6fd8:	4803      	ldr	r0, [pc, #12]	; (d6fe8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6fda:	4a04      	ldr	r2, [pc, #16]	; (d6fec <_GLOBAL__sub_I_RGB+0x14>)
   d6fdc:	4904      	ldr	r1, [pc, #16]	; (d6ff0 <_GLOBAL__sub_I_RGB+0x18>)
   d6fde:	2300      	movs	r3, #0
   d6fe0:	6083      	str	r3, [r0, #8]
   d6fe2:	f000 be7b 	b.w	d7cdc <__aeabi_atexit>
   d6fe6:	bf00      	nop
   d6fe8:	2003e620 	.word	0x2003e620
   d6fec:	2003e420 	.word	0x2003e420
   d6ff0:	000d6fcb 	.word	0x000d6fcb

000d6ff4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6ff4:	b510      	push	{r4, lr}
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	4608      	mov	r0, r1
{
    _spi = spi;
   d6ffa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6ffc:	f7ff f82e 	bl	d605c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7000:	2300      	movs	r3, #0
   d7002:	6063      	str	r3, [r4, #4]
}
   d7004:	4620      	mov	r0, r4
   d7006:	bd10      	pop	{r4, pc}

000d7008 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7008:	b510      	push	{r4, lr}
   d700a:	4604      	mov	r4, r0
{
	free(buffer);
   d700c:	6800      	ldr	r0, [r0, #0]
   d700e:	f7ff f96b 	bl	d62e8 <free>
}
   d7012:	4620      	mov	r0, r4
   d7014:	bd10      	pop	{r4, pc}

000d7016 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7016:	b510      	push	{r4, lr}
   d7018:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d701a:	6800      	ldr	r0, [r0, #0]
   d701c:	b108      	cbz	r0, d7022 <_ZN6String10invalidateEv+0xc>
   d701e:	f7ff f963 	bl	d62e8 <free>
	buffer = NULL;
   d7022:	2300      	movs	r3, #0
	capacity = len = 0;
   d7024:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7028:	6023      	str	r3, [r4, #0]
}
   d702a:	bd10      	pop	{r4, pc}

000d702c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d702c:	b538      	push	{r3, r4, r5, lr}
   d702e:	4604      	mov	r4, r0
   d7030:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7032:	6800      	ldr	r0, [r0, #0]
   d7034:	3101      	adds	r1, #1
   d7036:	f7ff f95f 	bl	d62f8 <realloc>
	if (newbuffer) {
   d703a:	b110      	cbz	r0, d7042 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d703c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7040:	2001      	movs	r0, #1
	}
	return 0;
}
   d7042:	bd38      	pop	{r3, r4, r5, pc}

000d7044 <_ZN6String7reserveEj>:
{
   d7044:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7046:	6803      	ldr	r3, [r0, #0]
{
   d7048:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d704a:	b123      	cbz	r3, d7056 <_ZN6String7reserveEj+0x12>
   d704c:	6843      	ldr	r3, [r0, #4]
   d704e:	428b      	cmp	r3, r1
   d7050:	d301      	bcc.n	d7056 <_ZN6String7reserveEj+0x12>
   d7052:	2001      	movs	r0, #1
}
   d7054:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7056:	4620      	mov	r0, r4
   d7058:	f7ff ffe8 	bl	d702c <_ZN6String12changeBufferEj>
   d705c:	2800      	cmp	r0, #0
   d705e:	d0f9      	beq.n	d7054 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7060:	68a3      	ldr	r3, [r4, #8]
   d7062:	2b00      	cmp	r3, #0
   d7064:	d1f5      	bne.n	d7052 <_ZN6String7reserveEj+0xe>
   d7066:	6822      	ldr	r2, [r4, #0]
   d7068:	7013      	strb	r3, [r2, #0]
   d706a:	e7f2      	b.n	d7052 <_ZN6String7reserveEj+0xe>

000d706c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d706c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d706e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7070:	4611      	mov	r1, r2
   d7072:	9201      	str	r2, [sp, #4]
{
   d7074:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7076:	f7ff ffe5 	bl	d7044 <_ZN6String7reserveEj>
   d707a:	9a01      	ldr	r2, [sp, #4]
   d707c:	b928      	cbnz	r0, d708a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d707e:	4620      	mov	r0, r4
   d7080:	f7ff ffc9 	bl	d7016 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7084:	4620      	mov	r0, r4
   d7086:	b003      	add	sp, #12
   d7088:	bd30      	pop	{r4, r5, pc}
	len = length;
   d708a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d708c:	4629      	mov	r1, r5
   d708e:	6820      	ldr	r0, [r4, #0]
   d7090:	f002 fce2 	bl	d9a58 <memcpy>
	buffer[len] = 0;
   d7094:	6822      	ldr	r2, [r4, #0]
   d7096:	68a3      	ldr	r3, [r4, #8]
   d7098:	2100      	movs	r1, #0
   d709a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d709c:	e7f2      	b.n	d7084 <_ZN6String4copyEPKcj+0x18>

000d709e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d709e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d70a0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d70a2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d70a6:	4604      	mov	r4, r0
	len = 0;
   d70a8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d70aa:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d70ac:	b141      	cbz	r1, d70c0 <_ZN6StringC1EPKc+0x22>
   d70ae:	4608      	mov	r0, r1
   d70b0:	9101      	str	r1, [sp, #4]
   d70b2:	f002 fd64 	bl	d9b7e <strlen>
   d70b6:	9901      	ldr	r1, [sp, #4]
   d70b8:	4602      	mov	r2, r0
   d70ba:	4620      	mov	r0, r4
   d70bc:	f7ff ffd6 	bl	d706c <_ZN6String4copyEPKcj>
}
   d70c0:	4620      	mov	r0, r4
   d70c2:	b002      	add	sp, #8
   d70c4:	bd10      	pop	{r4, pc}

000d70c6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d70c6:	b538      	push	{r3, r4, r5, lr}
   d70c8:	4605      	mov	r5, r0
	if (buffer) {
   d70ca:	6800      	ldr	r0, [r0, #0]
{
   d70cc:	460c      	mov	r4, r1
	if (buffer) {
   d70ce:	b168      	cbz	r0, d70ec <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d70d0:	686a      	ldr	r2, [r5, #4]
   d70d2:	688b      	ldr	r3, [r1, #8]
   d70d4:	429a      	cmp	r2, r3
   d70d6:	d307      	bcc.n	d70e8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d70d8:	6809      	ldr	r1, [r1, #0]
   d70da:	f002 fd2b 	bl	d9b34 <strcpy>
			len = rhs.len;
   d70de:	68a3      	ldr	r3, [r4, #8]
   d70e0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d70e2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d70e4:	60a3      	str	r3, [r4, #8]
}
   d70e6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d70e8:	f7ff f8fe 	bl	d62e8 <free>
	buffer = rhs.buffer;
   d70ec:	6823      	ldr	r3, [r4, #0]
   d70ee:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d70f0:	6863      	ldr	r3, [r4, #4]
   d70f2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d70f4:	68a3      	ldr	r3, [r4, #8]
   d70f6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d70f8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d70fa:	e9c4 3300 	strd	r3, r3, [r4]
   d70fe:	e7f1      	b.n	d70e4 <_ZN6String4moveERS_+0x1e>

000d7100 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7100:	4288      	cmp	r0, r1
{
   d7102:	b510      	push	{r4, lr}
   d7104:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7106:	d005      	beq.n	d7114 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7108:	680b      	ldr	r3, [r1, #0]
   d710a:	b12b      	cbz	r3, d7118 <_ZN6StringaSERKS_+0x18>
   d710c:	688a      	ldr	r2, [r1, #8]
   d710e:	4619      	mov	r1, r3
   d7110:	f7ff ffac 	bl	d706c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7114:	4620      	mov	r0, r4
   d7116:	bd10      	pop	{r4, pc}
	else invalidate();
   d7118:	f7ff ff7d 	bl	d7016 <_ZN6String10invalidateEv>
   d711c:	e7fa      	b.n	d7114 <_ZN6StringaSERKS_+0x14>

000d711e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d711e:	b510      	push	{r4, lr}
	buffer = NULL;
   d7120:	2300      	movs	r3, #0
String::String(const String &value)
   d7122:	4604      	mov	r4, r0
	capacity = 0;
   d7124:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7128:	6083      	str	r3, [r0, #8]
	flags = 0;
   d712a:	7303      	strb	r3, [r0, #12]
	*this = value;
   d712c:	f7ff ffe8 	bl	d7100 <_ZN6StringaSERKS_>
}
   d7130:	4620      	mov	r0, r4
   d7132:	bd10      	pop	{r4, pc}

000d7134 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d7134:	4288      	cmp	r0, r1
{
   d7136:	b510      	push	{r4, lr}
   d7138:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d713a:	d001      	beq.n	d7140 <_ZN6StringaSEOS_+0xc>
   d713c:	f7ff ffc3 	bl	d70c6 <_ZN6String4moveERS_>
	return *this;
}
   d7140:	4620      	mov	r0, r4
   d7142:	bd10      	pop	{r4, pc}

000d7144 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7144:	b513      	push	{r0, r1, r4, lr}
   d7146:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7148:	b159      	cbz	r1, d7162 <_ZN6StringaSEPKc+0x1e>
   d714a:	4608      	mov	r0, r1
   d714c:	9101      	str	r1, [sp, #4]
   d714e:	f002 fd16 	bl	d9b7e <strlen>
   d7152:	9901      	ldr	r1, [sp, #4]
   d7154:	4602      	mov	r2, r0
   d7156:	4620      	mov	r0, r4
   d7158:	f7ff ff88 	bl	d706c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d715c:	4620      	mov	r0, r4
   d715e:	b002      	add	sp, #8
   d7160:	bd10      	pop	{r4, pc}
	else invalidate();
   d7162:	f7ff ff58 	bl	d7016 <_ZN6String10invalidateEv>
   d7166:	e7f9      	b.n	d715c <_ZN6StringaSEPKc+0x18>

000d7168 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d7168:	b510      	push	{r4, lr}
   d716a:	4604      	mov	r4, r0
   d716c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d716e:	2300      	movs	r3, #0
	capacity = 0;
   d7170:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d7174:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d7176:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d7178:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d717a:	a901      	add	r1, sp, #4
   d717c:	f000 fac6 	bl	d770c <itoa>
	*this = buf;
   d7180:	a901      	add	r1, sp, #4
   d7182:	4620      	mov	r0, r4
   d7184:	f7ff ffde 	bl	d7144 <_ZN6StringaSEPKc>
}
   d7188:	4620      	mov	r0, r4
   d718a:	b00a      	add	sp, #40	; 0x28
   d718c:	bd10      	pop	{r4, pc}

000d718e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d718e:	b570      	push	{r4, r5, r6, lr}
   d7190:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7192:	460e      	mov	r6, r1
   d7194:	b909      	cbnz	r1, d719a <_ZN6String6concatEPKcj+0xc>
   d7196:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7198:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d719a:	b16a      	cbz	r2, d71b8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d719c:	6884      	ldr	r4, [r0, #8]
   d719e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d71a0:	4621      	mov	r1, r4
   d71a2:	f7ff ff4f 	bl	d7044 <_ZN6String7reserveEj>
   d71a6:	2800      	cmp	r0, #0
   d71a8:	d0f5      	beq.n	d7196 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d71aa:	6828      	ldr	r0, [r5, #0]
   d71ac:	68ab      	ldr	r3, [r5, #8]
   d71ae:	4631      	mov	r1, r6
   d71b0:	4418      	add	r0, r3
   d71b2:	f002 fcbf 	bl	d9b34 <strcpy>
	len = newlen;
   d71b6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d71b8:	2001      	movs	r0, #1
   d71ba:	e7ed      	b.n	d7198 <_ZN6String6concatEPKcj+0xa>

000d71bc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d71bc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d71be:	2300      	movs	r3, #0
	buf[0] = c;
   d71c0:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d71c4:	2201      	movs	r2, #1
   d71c6:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d71c8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d71cc:	f7ff ffdf 	bl	d718e <_ZN6String6concatEPKcj>
}
   d71d0:	b003      	add	sp, #12
   d71d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d71d6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d71d6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d71d8:	688a      	ldr	r2, [r1, #8]
   d71da:	6809      	ldr	r1, [r1, #0]
{
   d71dc:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d71de:	f7ff ffd6 	bl	d718e <_ZN6String6concatEPKcj>
   d71e2:	b910      	cbnz	r0, d71ea <_ZplRK15StringSumHelperRK6String+0x14>
   d71e4:	4620      	mov	r0, r4
   d71e6:	f7ff ff16 	bl	d7016 <_ZN6String10invalidateEv>
	return a;
}
   d71ea:	4620      	mov	r0, r4
   d71ec:	bd10      	pop	{r4, pc}

000d71ee <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d71ee:	b513      	push	{r0, r1, r4, lr}
   d71f0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d71f2:	b929      	cbnz	r1, d7200 <_ZplRK15StringSumHelperPKc+0x12>
   d71f4:	4620      	mov	r0, r4
   d71f6:	f7ff ff0e 	bl	d7016 <_ZN6String10invalidateEv>
	return a;
}
   d71fa:	4620      	mov	r0, r4
   d71fc:	b002      	add	sp, #8
   d71fe:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7200:	4608      	mov	r0, r1
   d7202:	9101      	str	r1, [sp, #4]
   d7204:	f002 fcbb 	bl	d9b7e <strlen>
   d7208:	9901      	ldr	r1, [sp, #4]
   d720a:	4602      	mov	r2, r0
   d720c:	4620      	mov	r0, r4
   d720e:	f7ff ffbe 	bl	d718e <_ZN6String6concatEPKcj>
   d7212:	2800      	cmp	r0, #0
   d7214:	d0ee      	beq.n	d71f4 <_ZplRK15StringSumHelperPKc+0x6>
   d7216:	e7f0      	b.n	d71fa <_ZplRK15StringSumHelperPKc+0xc>

000d7218 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
   d7218:	b510      	push	{r4, lr}
   d721a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   d721c:	f7ff ffce 	bl	d71bc <_ZN6String6concatEc>
   d7220:	b910      	cbnz	r0, d7228 <_ZplRK15StringSumHelperc+0x10>
   d7222:	4620      	mov	r0, r4
   d7224:	f7ff fef7 	bl	d7016 <_ZN6String10invalidateEv>
	return a;
}
   d7228:	4620      	mov	r0, r4
   d722a:	bd10      	pop	{r4, pc}

000d722c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d722c:	b40e      	push	{r1, r2, r3}
   d722e:	b570      	push	{r4, r5, r6, lr}
   d7230:	b087      	sub	sp, #28
   d7232:	ad0b      	add	r5, sp, #44	; 0x2c
   d7234:	4604      	mov	r4, r0
   d7236:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d723a:	9201      	str	r2, [sp, #4]
   d723c:	462b      	mov	r3, r5
   d723e:	2105      	movs	r1, #5
   d7240:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d7242:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7244:	f7ff f860 	bl	d6308 <vsnprintf>
    va_end(marker);

    String result;
   d7248:	490b      	ldr	r1, [pc, #44]	; (d7278 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d724a:	4606      	mov	r6, r0
    String result;
   d724c:	4620      	mov	r0, r4
   d724e:	f7ff ff26 	bl	d709e <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d7252:	4631      	mov	r1, r6
   d7254:	4620      	mov	r0, r4
   d7256:	f7ff fef5 	bl	d7044 <_ZN6String7reserveEj>
    if (result.buffer) {
   d725a:	6820      	ldr	r0, [r4, #0]
   d725c:	b130      	cbz	r0, d726c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d725e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d7260:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7262:	462b      	mov	r3, r5
   d7264:	1c71      	adds	r1, r6, #1
   d7266:	f7ff f84f 	bl	d6308 <vsnprintf>
        va_end(marker);
        result.len = n;
   d726a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d726c:	4620      	mov	r0, r4
   d726e:	b007      	add	sp, #28
   d7270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7274:	b003      	add	sp, #12
   d7276:	4770      	bx	lr
   d7278:	000d9dc0 	.word	0x000d9dc0

000d727c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d727c:	b510      	push	{r4, lr}
   d727e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7280:	6800      	ldr	r0, [r0, #0]
   d7282:	b118      	cbz	r0, d728c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7284:	f7ff f830 	bl	d62e8 <free>
            wakeupSource_ = nullptr;
   d7288:	2300      	movs	r3, #0
   d728a:	6023      	str	r3, [r4, #0]
        }
    }
   d728c:	bd10      	pop	{r4, pc}

000d728e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d728e:	b510      	push	{r4, lr}
   d7290:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7292:	f7ff fff3 	bl	d727c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d7296:	4620      	mov	r0, r4
   d7298:	bd10      	pop	{r4, pc}

000d729a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d729a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d729c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d72a0:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d72a2:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72a4:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d72a6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d72aa:	f8c0 2006 	str.w	r2, [r0, #6]
   d72ae:	889b      	ldrh	r3, [r3, #4]
   d72b0:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d72b2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d72b4:	f7ff ffe2 	bl	d727c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d72b8:	682b      	ldr	r3, [r5, #0]
   d72ba:	b113      	cbz	r3, d72c2 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d72bc:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d72be:	2300      	movs	r3, #0
   d72c0:	602b      	str	r3, [r5, #0]
    }
   d72c2:	4620      	mov	r0, r4
   d72c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d72c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d72c8:	b538      	push	{r3, r4, r5, lr}
   d72ca:	460c      	mov	r4, r1
   d72cc:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d72ce:	f7ff ffd5 	bl	d727c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d72d2:	b144      	cbz	r4, d72e6 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d72d4:	8820      	ldrh	r0, [r4, #0]
   d72d6:	f7fe ffff 	bl	d62d8 <malloc>
   d72da:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d72dc:	b128      	cbz	r0, d72ea <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d72de:	8822      	ldrh	r2, [r4, #0]
   d72e0:	4621      	mov	r1, r4
   d72e2:	f002 fbb9 	bl	d9a58 <memcpy>
        return SYSTEM_ERROR_NONE;
   d72e6:	2000      	movs	r0, #0
    }
   d72e8:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d72ea:	4801      	ldr	r0, [pc, #4]	; (d72f0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d72ec:	e7fc      	b.n	d72e8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d72ee:	bf00      	nop
   d72f0:	fffffefc 	.word	0xfffffefc

000d72f4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d72f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d72f6:	4d2d      	ldr	r5, [pc, #180]	; (d73ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d72f8:	7d0b      	ldrb	r3, [r1, #20]
   d72fa:	4604      	mov	r4, r0
   d72fc:	b08b      	sub	sp, #44	; 0x2c
   d72fe:	4608      	mov	r0, r1
   d7300:	1daf      	adds	r7, r5, #6
   d7302:	2b00      	cmp	r3, #0
   d7304:	d038      	beq.n	d7378 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7306:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7308:	791b      	ldrb	r3, [r3, #4]
   d730a:	2b00      	cmp	r3, #0
   d730c:	d034      	beq.n	d7378 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d730e:	2200      	movs	r2, #0
    SleepResult() {}
   d7310:	4b27      	ldr	r3, [pc, #156]	; (d73b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7312:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7314:	a902      	add	r1, sp, #8
   d7316:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7318:	9202      	str	r2, [sp, #8]
   d731a:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d731e:	f88d 200e 	strb.w	r2, [sp, #14]
   d7322:	f7fe ff67 	bl	d61f4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d7326:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d732a:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d732e:	b200      	sxth	r0, r0
   d7330:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7334:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7338:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d733a:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d733c:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d733e:	4628      	mov	r0, r5
   d7340:	f7ff ffc2 	bl	d72c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7344:	a802      	add	r0, sp, #8
   d7346:	f7ff ff99 	bl	d727c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d734a:	2300      	movs	r3, #0
   d734c:	6023      	str	r3, [r4, #0]
   d734e:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d7350:	71a3      	strb	r3, [r4, #6]
   d7352:	8123      	strh	r3, [r4, #8]
   d7354:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7358:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d735a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d735e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d7360:	683b      	ldr	r3, [r7, #0]
   d7362:	f8c4 3006 	str.w	r3, [r4, #6]
   d7366:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7368:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d736a:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d736c:	4620      	mov	r0, r4
   d736e:	f7ff ffab 	bl	d72c8 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d7372:	4620      	mov	r0, r4
   d7374:	b00b      	add	sp, #44	; 0x2c
   d7376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d7378:	2600      	movs	r6, #0
   d737a:	2320      	movs	r3, #32
   d737c:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d7380:	4b0c      	ldr	r3, [pc, #48]	; (d73b4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d7382:	9300      	str	r3, [sp, #0]
   d7384:	490c      	ldr	r1, [pc, #48]	; (d73b8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d7386:	4633      	mov	r3, r6
   d7388:	aa02      	add	r2, sp, #8
   d738a:	2032      	movs	r0, #50	; 0x32
   d738c:	f7fe fef6 	bl	d617c <log_message>
    SleepResult() {}
   d7390:	4b07      	ldr	r3, [pc, #28]	; (d73b0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7392:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d7394:	a902      	add	r1, sp, #8
        error_ = error;
   d7396:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d739a:	4804      	ldr	r0, [pc, #16]	; (d73ac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d739c:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d739e:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d73a2:	f8ad 300c 	strh.w	r3, [sp, #12]
   d73a6:	f7ff ff78 	bl	d729a <_ZN17SystemSleepResultaSEOS_>
   d73aa:	e7cb      	b.n	d7344 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d73ac:	2003e630 	.word	0x2003e630
   d73b0:	ffff0000 	.word	0xffff0000
   d73b4:	000d9f7f 	.word	0x000d9f7f
   d73b8:	000d9f78 	.word	0x000d9f78

000d73bc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d73bc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d73be:	4b09      	ldr	r3, [pc, #36]	; (d73e4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d73c0:	4c09      	ldr	r4, [pc, #36]	; (d73e8 <_GLOBAL__sub_I_System+0x2c>)
   d73c2:	2202      	movs	r2, #2
   d73c4:	2000      	movs	r0, #0
   d73c6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d73c8:	4b08      	ldr	r3, [pc, #32]	; (d73ec <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d73ca:	6020      	str	r0, [r4, #0]
   d73cc:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d73ce:	71a0      	strb	r0, [r4, #6]
   d73d0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d73d2:	f7fe fedb 	bl	d618c <set_system_mode>
SystemClass System;
   d73d6:	4620      	mov	r0, r4
   d73d8:	4a05      	ldr	r2, [pc, #20]	; (d73f0 <_GLOBAL__sub_I_System+0x34>)
   d73da:	4906      	ldr	r1, [pc, #24]	; (d73f4 <_GLOBAL__sub_I_System+0x38>)
   d73dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d73e0:	f000 bc7c 	b.w	d7cdc <__aeabi_atexit>
   d73e4:	2003e63c 	.word	0x2003e63c
   d73e8:	2003e630 	.word	0x2003e630
   d73ec:	ffff0000 	.word	0xffff0000
   d73f0:	2003e420 	.word	0x2003e420
   d73f4:	000d728f 	.word	0x000d728f

000d73f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d73f8:	4b02      	ldr	r3, [pc, #8]	; (d7404 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d73fa:	681a      	ldr	r2, [r3, #0]
   d73fc:	4b02      	ldr	r3, [pc, #8]	; (d7408 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d73fe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7400:	4770      	bx	lr
   d7402:	bf00      	nop
   d7404:	2003e3b4 	.word	0x2003e3b4
   d7408:	2003e640 	.word	0x2003e640

000d740c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d740c:	4770      	bx	lr

000d740e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d740e:	7441      	strb	r1, [r0, #17]
}
   d7410:	4770      	bx	lr

000d7412 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7412:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7414:	7c00      	ldrb	r0, [r0, #16]
   d7416:	f7fe fe69 	bl	d60ec <hal_usart_available_data_for_write>
}
   d741a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d741e:	bd08      	pop	{r3, pc}

000d7420 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7420:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7422:	7c00      	ldrb	r0, [r0, #16]
   d7424:	f7fe fe3a 	bl	d609c <hal_usart_available>
}
   d7428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d742c:	bd08      	pop	{r3, pc}

000d742e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d742e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7430:	7c00      	ldrb	r0, [r0, #16]
   d7432:	f7fe fe43 	bl	d60bc <hal_usart_peek>
}
   d7436:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d743a:	bd08      	pop	{r3, pc}

000d743c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d743c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d743e:	7c00      	ldrb	r0, [r0, #16]
   d7440:	f7fe fe34 	bl	d60ac <hal_usart_read>
}
   d7444:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7448:	bd08      	pop	{r3, pc}

000d744a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d744a:	7c00      	ldrb	r0, [r0, #16]
   d744c:	f7fe be3e 	b.w	d60cc <hal_usart_flush>

000d7450 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7450:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7452:	7c45      	ldrb	r5, [r0, #17]
{
   d7454:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7456:	b12d      	cbz	r5, d7464 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7458:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d745a:	b003      	add	sp, #12
   d745c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7460:	f7fe be14 	b.w	d608c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7464:	7c00      	ldrb	r0, [r0, #16]
   d7466:	9101      	str	r1, [sp, #4]
   d7468:	f7fe fe40 	bl	d60ec <hal_usart_available_data_for_write>
   d746c:	2800      	cmp	r0, #0
   d746e:	9901      	ldr	r1, [sp, #4]
   d7470:	dcf2      	bgt.n	d7458 <_ZN11USARTSerial5writeEh+0x8>
}
   d7472:	4628      	mov	r0, r5
   d7474:	b003      	add	sp, #12
   d7476:	bd30      	pop	{r4, r5, pc}

000d7478 <_ZN11USARTSerialD0Ev>:
   d7478:	b510      	push	{r4, lr}
   d747a:	2114      	movs	r1, #20
   d747c:	4604      	mov	r4, r0
   d747e:	f000 fc32 	bl	d7ce6 <_ZdlPvj>
   d7482:	4620      	mov	r0, r4
   d7484:	bd10      	pop	{r4, pc}
	...

000d7488 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7488:	b510      	push	{r4, lr}
   d748a:	f04f 0c00 	mov.w	ip, #0
   d748e:	4604      	mov	r4, r0
   d7490:	4608      	mov	r0, r1
   d7492:	4611      	mov	r1, r2
   d7494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7498:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d749c:	4a04      	ldr	r2, [pc, #16]	; (d74b0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d749e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d74a0:	2201      	movs	r2, #1
  _serial = serial;
   d74a2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d74a4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d74a6:	461a      	mov	r2, r3
   d74a8:	f7fe fde8 	bl	d607c <hal_usart_init>
}
   d74ac:	4620      	mov	r0, r4
   d74ae:	bd10      	pop	{r4, pc}
   d74b0:	000d9fcc 	.word	0x000d9fcc

000d74b4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d74b4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d74b6:	4c0e      	ldr	r4, [pc, #56]	; (d74f0 <_Z22__fetch_global_Serial1v+0x3c>)
   d74b8:	7821      	ldrb	r1, [r4, #0]
   d74ba:	f3bf 8f5b 	dmb	ish
   d74be:	f011 0101 	ands.w	r1, r1, #1
   d74c2:	d112      	bne.n	d74ea <_Z22__fetch_global_Serial1v+0x36>
   d74c4:	4620      	mov	r0, r4
   d74c6:	9101      	str	r1, [sp, #4]
   d74c8:	f7fc fdeb 	bl	d40a2 <__cxa_guard_acquire>
   d74cc:	9901      	ldr	r1, [sp, #4]
   d74ce:	b160      	cbz	r0, d74ea <_Z22__fetch_global_Serial1v+0x36>
   d74d0:	4a08      	ldr	r2, [pc, #32]	; (d74f4 <_Z22__fetch_global_Serial1v+0x40>)
   d74d2:	4b09      	ldr	r3, [pc, #36]	; (d74f8 <_Z22__fetch_global_Serial1v+0x44>)
   d74d4:	4809      	ldr	r0, [pc, #36]	; (d74fc <_Z22__fetch_global_Serial1v+0x48>)
   d74d6:	f7ff ffd7 	bl	d7488 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d74da:	4620      	mov	r0, r4
   d74dc:	f7fc fde6 	bl	d40ac <__cxa_guard_release>
   d74e0:	4a07      	ldr	r2, [pc, #28]	; (d7500 <_Z22__fetch_global_Serial1v+0x4c>)
   d74e2:	4908      	ldr	r1, [pc, #32]	; (d7504 <_Z22__fetch_global_Serial1v+0x50>)
   d74e4:	4805      	ldr	r0, [pc, #20]	; (d74fc <_Z22__fetch_global_Serial1v+0x48>)
   d74e6:	f000 fbf9 	bl	d7cdc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d74ea:	4804      	ldr	r0, [pc, #16]	; (d74fc <_Z22__fetch_global_Serial1v+0x48>)
   d74ec:	b002      	add	sp, #8
   d74ee:	bd10      	pop	{r4, pc}
   d74f0:	2003e644 	.word	0x2003e644
   d74f4:	2003e648 	.word	0x2003e648
   d74f8:	2003e6cc 	.word	0x2003e6cc
   d74fc:	2003e750 	.word	0x2003e750
   d7500:	2003e420 	.word	0x2003e420
   d7504:	000d740d 	.word	0x000d740d

000d7508 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7508:	7441      	strb	r1, [r0, #17]
}
   d750a:	4770      	bx	lr

000d750c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d750c:	4770      	bx	lr

000d750e <_ZN9USBSerial4readEv>:
{
   d750e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7510:	2100      	movs	r1, #0
   d7512:	7c00      	ldrb	r0, [r0, #16]
   d7514:	f7fe fe12 	bl	d613c <HAL_USB_USART_Receive_Data>
}
   d7518:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d751c:	bd08      	pop	{r3, pc}

000d751e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d751e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7520:	2101      	movs	r1, #1
   d7522:	7c00      	ldrb	r0, [r0, #16]
   d7524:	f7fe fe0a 	bl	d613c <HAL_USB_USART_Receive_Data>
}
   d7528:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d752c:	bd08      	pop	{r3, pc}

000d752e <_ZN9USBSerial17availableForWriteEv>:
{
   d752e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7530:	7c00      	ldrb	r0, [r0, #16]
   d7532:	f7fe fdfb 	bl	d612c <HAL_USB_USART_Available_Data_For_Write>
}
   d7536:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d753a:	bd08      	pop	{r3, pc}

000d753c <_ZN9USBSerial9availableEv>:
{
   d753c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d753e:	7c00      	ldrb	r0, [r0, #16]
   d7540:	f7fe fdec 	bl	d611c <HAL_USB_USART_Available_Data>
}
   d7544:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7548:	bd08      	pop	{r3, pc}

000d754a <_ZN9USBSerial5writeEh>:
{
   d754a:	b513      	push	{r0, r1, r4, lr}
   d754c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d754e:	7c00      	ldrb	r0, [r0, #16]
{
   d7550:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7552:	f7fe fdeb 	bl	d612c <HAL_USB_USART_Available_Data_For_Write>
   d7556:	2800      	cmp	r0, #0
   d7558:	9901      	ldr	r1, [sp, #4]
   d755a:	dc01      	bgt.n	d7560 <_ZN9USBSerial5writeEh+0x16>
   d755c:	7c60      	ldrb	r0, [r4, #17]
   d755e:	b120      	cbz	r0, d756a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7560:	7c20      	ldrb	r0, [r4, #16]
   d7562:	f7fe fdf3 	bl	d614c <HAL_USB_USART_Send_Data>
   d7566:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d756a:	b002      	add	sp, #8
   d756c:	bd10      	pop	{r4, pc}

000d756e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d756e:	7c00      	ldrb	r0, [r0, #16]
   d7570:	f7fe bdf4 	b.w	d615c <HAL_USB_USART_Flush_Data>

000d7574 <_ZN9USBSerialD0Ev>:
   d7574:	b510      	push	{r4, lr}
   d7576:	2114      	movs	r1, #20
   d7578:	4604      	mov	r4, r0
   d757a:	f000 fbb4 	bl	d7ce6 <_ZdlPvj>
   d757e:	4620      	mov	r0, r4
   d7580:	bd10      	pop	{r4, pc}
	...

000d7584 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7584:	b510      	push	{r4, lr}
   d7586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d758a:	4604      	mov	r4, r0
   d758c:	4608      	mov	r0, r1
   d758e:	2100      	movs	r1, #0
   d7590:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7594:	4b04      	ldr	r3, [pc, #16]	; (d75a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7596:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7598:	2301      	movs	r3, #1
  _serial = serial;
   d759a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d759c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d759e:	4611      	mov	r1, r2
   d75a0:	f7fe fdac 	bl	d60fc <HAL_USB_USART_Init>
}
   d75a4:	4620      	mov	r0, r4
   d75a6:	bd10      	pop	{r4, pc}
   d75a8:	000d9ffc 	.word	0x000d9ffc

000d75ac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d75ac:	7c00      	ldrb	r0, [r0, #16]
   d75ae:	2200      	movs	r2, #0
   d75b0:	f7fe bdac 	b.w	d610c <HAL_USB_USART_Begin>

000d75b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d75b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d75b6:	2214      	movs	r2, #20
{
   d75b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d75ba:	2100      	movs	r1, #0
   d75bc:	f002 fa5a 	bl	d9a74 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d75c0:	4620      	mov	r0, r4
   d75c2:	bd10      	pop	{r4, pc}

000d75c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d75c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d75c6:	4c10      	ldr	r4, [pc, #64]	; (d7608 <_Z16_fetch_usbserialv+0x44>)
{
   d75c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d75ca:	a803      	add	r0, sp, #12
   d75cc:	f7ff fff2 	bl	d75b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d75d0:	7821      	ldrb	r1, [r4, #0]
   d75d2:	f3bf 8f5b 	dmb	ish
   d75d6:	f011 0101 	ands.w	r1, r1, #1
   d75da:	d111      	bne.n	d7600 <_Z16_fetch_usbserialv+0x3c>
   d75dc:	4620      	mov	r0, r4
   d75de:	9101      	str	r1, [sp, #4]
   d75e0:	f7fc fd5f 	bl	d40a2 <__cxa_guard_acquire>
   d75e4:	9901      	ldr	r1, [sp, #4]
   d75e6:	b158      	cbz	r0, d7600 <_Z16_fetch_usbserialv+0x3c>
   d75e8:	aa03      	add	r2, sp, #12
   d75ea:	4808      	ldr	r0, [pc, #32]	; (d760c <_Z16_fetch_usbserialv+0x48>)
   d75ec:	f7ff ffca 	bl	d7584 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d75f0:	4620      	mov	r0, r4
   d75f2:	f7fc fd5b 	bl	d40ac <__cxa_guard_release>
   d75f6:	4a06      	ldr	r2, [pc, #24]	; (d7610 <_Z16_fetch_usbserialv+0x4c>)
   d75f8:	4906      	ldr	r1, [pc, #24]	; (d7614 <_Z16_fetch_usbserialv+0x50>)
   d75fa:	4804      	ldr	r0, [pc, #16]	; (d760c <_Z16_fetch_usbserialv+0x48>)
   d75fc:	f000 fb6e 	bl	d7cdc <__aeabi_atexit>
	return _usbserial;
}
   d7600:	4802      	ldr	r0, [pc, #8]	; (d760c <_Z16_fetch_usbserialv+0x48>)
   d7602:	b008      	add	sp, #32
   d7604:	bd10      	pop	{r4, pc}
   d7606:	bf00      	nop
   d7608:	2003e764 	.word	0x2003e764
   d760c:	2003e768 	.word	0x2003e768
   d7610:	2003e420 	.word	0x2003e420
   d7614:	000d750d 	.word	0x000d750d

000d7618 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7618:	2200      	movs	r2, #0
   d761a:	6840      	ldr	r0, [r0, #4]
   d761c:	4611      	mov	r1, r2
   d761e:	f7fe be23 	b.w	d6268 <network_ready>

000d7622 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7622:	2200      	movs	r2, #0
   d7624:	6840      	ldr	r0, [r0, #4]
   d7626:	4611      	mov	r1, r2
   d7628:	f7fe be3e 	b.w	d62a8 <network_listening>

000d762c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d762c:	2200      	movs	r2, #0
   d762e:	6840      	ldr	r0, [r0, #4]
   d7630:	4611      	mov	r1, r2
   d7632:	f7fe be49 	b.w	d62c8 <network_get_listen_timeout>

000d7636 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7636:	6840      	ldr	r0, [r0, #4]
   d7638:	2200      	movs	r2, #0
   d763a:	f7fe be3d 	b.w	d62b8 <network_set_listen_timeout>

000d763e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d763e:	6840      	ldr	r0, [r0, #4]
   d7640:	2200      	movs	r2, #0
   d7642:	f081 0101 	eor.w	r1, r1, #1
   d7646:	f7fe be27 	b.w	d6298 <network_listen>

000d764a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d764a:	2300      	movs	r3, #0
   d764c:	6840      	ldr	r0, [r0, #4]
   d764e:	461a      	mov	r2, r3
   d7650:	4619      	mov	r1, r3
   d7652:	f7fe be19 	b.w	d6288 <network_off>

000d7656 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7656:	2300      	movs	r3, #0
   d7658:	6840      	ldr	r0, [r0, #4]
   d765a:	461a      	mov	r2, r3
   d765c:	4619      	mov	r1, r3
   d765e:	f7fe be0b 	b.w	d6278 <network_on>

000d7662 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7662:	2200      	movs	r2, #0
   d7664:	6840      	ldr	r0, [r0, #4]
   d7666:	4611      	mov	r1, r2
   d7668:	f7fe bdee 	b.w	d6248 <network_connecting>

000d766c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d766c:	6840      	ldr	r0, [r0, #4]
   d766e:	2200      	movs	r2, #0
   d7670:	2102      	movs	r1, #2
   d7672:	f7fe bdf1 	b.w	d6258 <network_disconnect>

000d7676 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7676:	2300      	movs	r3, #0
   d7678:	6840      	ldr	r0, [r0, #4]
   d767a:	461a      	mov	r2, r3
   d767c:	f7fe bddc 	b.w	d6238 <network_connect>

000d7680 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7680:	4b02      	ldr	r3, [pc, #8]	; (d768c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7682:	2204      	movs	r2, #4
   d7684:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7686:	4a02      	ldr	r2, [pc, #8]	; (d7690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7688:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d768a:	4770      	bx	lr
   d768c:	2003e77c 	.word	0x2003e77c
   d7690:	000da02c 	.word	0x000da02c

000d7694 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7694:	b510      	push	{r4, lr}
   d7696:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7698:	f002 fa71 	bl	d9b7e <strlen>
   d769c:	3801      	subs	r0, #1
   d769e:	1823      	adds	r3, r4, r0
   d76a0:	4620      	mov	r0, r4
	while(i<j){
   d76a2:	4283      	cmp	r3, r0
   d76a4:	d906      	bls.n	d76b4 <_Z11str_reversePc+0x20>
		c = *i;
   d76a6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d76a8:	7819      	ldrb	r1, [r3, #0]
   d76aa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d76ae:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d76b2:	e7f6      	b.n	d76a2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d76b4:	bd10      	pop	{r4, pc}

000d76b6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d76b6:	b570      	push	{r4, r5, r6, lr}
   d76b8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d76ba:	1e91      	subs	r1, r2, #2
   d76bc:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d76be:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d76c0:	d822      	bhi.n	d7708 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d76c2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d76c4:	b16d      	cbz	r5, d76e2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d76c6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d76ca:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d76ce:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d76d0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d76d2:	bf94      	ite	ls
   d76d4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d76d6:	3157      	addhi	r1, #87	; 0x57
   d76d8:	b2c9      	uxtb	r1, r1
   d76da:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d76de:	4635      	mov	r5, r6
	while(a){
   d76e0:	e7f0      	b.n	d76c4 <ultoa+0xe>
   d76e2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d76e4:	4423      	add	r3, r4
            *ptr++ = '0';
   d76e6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d76e8:	4293      	cmp	r3, r2
   d76ea:	d902      	bls.n	d76f2 <ultoa+0x3c>
            *ptr++ = '0';
   d76ec:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d76f0:	e7fa      	b.n	d76e8 <ultoa+0x32>
   d76f2:	1a1a      	subs	r2, r3, r0
   d76f4:	4283      	cmp	r3, r0
   d76f6:	bf38      	it	cc
   d76f8:	2200      	movcc	r2, #0

	*ptr = '\0';
   d76fa:	2300      	movs	r3, #0
   d76fc:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d76fe:	4620      	mov	r0, r4
   d7700:	f7ff ffc8 	bl	d7694 <_Z11str_reversePc>
	return buffer;
   d7704:	4620      	mov	r0, r4
}
   d7706:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7708:	2000      	movs	r0, #0
   d770a:	e7fc      	b.n	d7706 <ultoa+0x50>

000d770c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d770c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d770e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7710:	460c      	mov	r4, r1
   d7712:	4615      	mov	r5, r2
	if(a<0){
   d7714:	da0e      	bge.n	d7734 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d771a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d771e:	bf14      	ite	ne
   d7720:	4258      	negne	r0, r3
   d7722:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d7724:	2301      	movs	r3, #1
		*buffer = '-';
   d7726:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d7728:	462a      	mov	r2, r5
   d772a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d772c:	f7ff ffc3 	bl	d76b6 <ultoa>
	}
	return buffer;
}
   d7730:	4620      	mov	r0, r4
   d7732:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d7734:	2301      	movs	r3, #1
   d7736:	e7f9      	b.n	d772c <itoa+0x20>

000d7738 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7738:	4b01      	ldr	r3, [pc, #4]	; (d7740 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d773a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d773c:	4770      	bx	lr
   d773e:	bf00      	nop
   d7740:	2003e3bc 	.word	0x2003e3bc

000d7744 <serialEventRun>:
{
   d7744:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7746:	4b0b      	ldr	r3, [pc, #44]	; (d7774 <serialEventRun+0x30>)
   d7748:	b143      	cbz	r3, d775c <serialEventRun+0x18>
   d774a:	f7ff ff3b 	bl	d75c4 <_Z16_fetch_usbserialv>
   d774e:	6803      	ldr	r3, [r0, #0]
   d7750:	691b      	ldr	r3, [r3, #16]
   d7752:	4798      	blx	r3
   d7754:	2800      	cmp	r0, #0
   d7756:	dd01      	ble.n	d775c <serialEventRun+0x18>
        serialEvent();
   d7758:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d775c:	4b06      	ldr	r3, [pc, #24]	; (d7778 <serialEventRun+0x34>)
   d775e:	b143      	cbz	r3, d7772 <serialEventRun+0x2e>
   d7760:	f7ff fea8 	bl	d74b4 <_Z22__fetch_global_Serial1v>
   d7764:	6803      	ldr	r3, [r0, #0]
   d7766:	691b      	ldr	r3, [r3, #16]
   d7768:	4798      	blx	r3
   d776a:	2800      	cmp	r0, #0
   d776c:	dd01      	ble.n	d7772 <serialEventRun+0x2e>
        serialEvent1();
   d776e:	f3af 8000 	nop.w
}
   d7772:	bd08      	pop	{r3, pc}
	...

000d777c <_post_loop>:
{
   d777c:	b508      	push	{r3, lr}
	serialEventRun();
   d777e:	f7ff ffe1 	bl	d7744 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7782:	f7fe fba9 	bl	d5ed8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7786:	4b01      	ldr	r3, [pc, #4]	; (d778c <_post_loop+0x10>)
   d7788:	6018      	str	r0, [r3, #0]
}
   d778a:	bd08      	pop	{r3, pc}
   d778c:	2003e798 	.word	0x2003e798

000d7790 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7790:	4802      	ldr	r0, [pc, #8]	; (d779c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7792:	4a03      	ldr	r2, [pc, #12]	; (d77a0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7794:	4903      	ldr	r1, [pc, #12]	; (d77a4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7796:	1a12      	subs	r2, r2, r0
   d7798:	f002 b95e 	b.w	d9a58 <memcpy>
   d779c:	2003f400 	.word	0x2003f400
   d77a0:	2003f404 	.word	0x2003f404
   d77a4:	000da0a0 	.word	0x000da0a0

000d77a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d77a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77aa:	2300      	movs	r3, #0
   d77ac:	9300      	str	r3, [sp, #0]
   d77ae:	461a      	mov	r2, r3
   d77b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77b4:	f7fe fd14 	bl	d61e0 <system_ctrl_set_result>
}
   d77b8:	b003      	add	sp, #12
   d77ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d77c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d77c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d77c2:	8843      	ldrh	r3, [r0, #2]
   d77c4:	2b0a      	cmp	r3, #10
   d77c6:	d008      	beq.n	d77da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d77c8:	2b50      	cmp	r3, #80	; 0x50
   d77ca:	d10b      	bne.n	d77e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d77cc:	4b09      	ldr	r3, [pc, #36]	; (d77f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d77ce:	681b      	ldr	r3, [r3, #0]
   d77d0:	b14b      	cbz	r3, d77e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d77d2:	b003      	add	sp, #12
   d77d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d77d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d77da:	f7ff ffe5 	bl	d77a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d77de:	b003      	add	sp, #12
   d77e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77e4:	2300      	movs	r3, #0
   d77e6:	9300      	str	r3, [sp, #0]
   d77e8:	461a      	mov	r2, r3
   d77ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77ee:	f7fe fcf7 	bl	d61e0 <system_ctrl_set_result>
}
   d77f2:	e7f4      	b.n	d77de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d77f4:	2003e788 	.word	0x2003e788

000d77f8 <module_user_init_hook>:
{
   d77f8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d77fa:	4c12      	ldr	r4, [pc, #72]	; (d7844 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d77fc:	4812      	ldr	r0, [pc, #72]	; (d7848 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d77fe:	4d13      	ldr	r5, [pc, #76]	; (d784c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7800:	2100      	movs	r1, #0
   d7802:	f7fe fda1 	bl	d6348 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7806:	6823      	ldr	r3, [r4, #0]
   d7808:	42ab      	cmp	r3, r5
   d780a:	4b11      	ldr	r3, [pc, #68]	; (d7850 <module_user_init_hook+0x58>)
   d780c:	bf0c      	ite	eq
   d780e:	2201      	moveq	r2, #1
   d7810:	2200      	movne	r2, #0
   d7812:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7814:	d002      	beq.n	d781c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7816:	f7ff ffbb 	bl	d7790 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d781a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d781c:	f7fe fb44 	bl	d5ea8 <HAL_RNG_GetRandomNumber>
   d7820:	4604      	mov	r4, r0
    srand(seed);
   d7822:	f002 f92f 	bl	d9a84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7826:	4b0b      	ldr	r3, [pc, #44]	; (d7854 <module_user_init_hook+0x5c>)
   d7828:	b113      	cbz	r3, d7830 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d782a:	4620      	mov	r0, r4
   d782c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7830:	2100      	movs	r1, #0
   d7832:	4808      	ldr	r0, [pc, #32]	; (d7854 <module_user_init_hook+0x5c>)
   d7834:	f7fe fcf8 	bl	d6228 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d783c:	4806      	ldr	r0, [pc, #24]	; (d7858 <module_user_init_hook+0x60>)
   d783e:	2100      	movs	r1, #0
   d7840:	f7fe bcc4 	b.w	d61cc <system_ctrl_set_app_request_handler>
   d7844:	2003f400 	.word	0x2003f400
   d7848:	000d7739 	.word	0x000d7739
   d784c:	9a271c1e 	.word	0x9a271c1e
   d7850:	2003e784 	.word	0x2003e784
   d7854:	00000000 	.word	0x00000000
   d7858:	000d77c1 	.word	0x000d77c1

000d785c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d785c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d785e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7860:	d902      	bls.n	d7868 <pinAvailable+0xc>
    return false;
   d7862:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7864:	b002      	add	sp, #8
   d7866:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7868:	f1a0 030b 	sub.w	r3, r0, #11
   d786c:	2b02      	cmp	r3, #2
   d786e:	d81a      	bhi.n	d78a6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7870:	4c17      	ldr	r4, [pc, #92]	; (d78d0 <pinAvailable+0x74>)
   d7872:	7821      	ldrb	r1, [r4, #0]
   d7874:	f3bf 8f5b 	dmb	ish
   d7878:	f011 0101 	ands.w	r1, r1, #1
   d787c:	d10b      	bne.n	d7896 <pinAvailable+0x3a>
   d787e:	4620      	mov	r0, r4
   d7880:	9101      	str	r1, [sp, #4]
   d7882:	f7fc fc0e 	bl	d40a2 <__cxa_guard_acquire>
   d7886:	9901      	ldr	r1, [sp, #4]
   d7888:	b128      	cbz	r0, d7896 <pinAvailable+0x3a>
   d788a:	4812      	ldr	r0, [pc, #72]	; (d78d4 <pinAvailable+0x78>)
   d788c:	f7ff fbb2 	bl	d6ff4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7890:	4620      	mov	r0, r4
   d7892:	f7fc fc0b 	bl	d40ac <__cxa_guard_release>
   d7896:	4b0f      	ldr	r3, [pc, #60]	; (d78d4 <pinAvailable+0x78>)
   d7898:	7818      	ldrb	r0, [r3, #0]
   d789a:	f7fe fbe7 	bl	d606c <hal_spi_is_enabled>
   d789e:	2800      	cmp	r0, #0
   d78a0:	d1df      	bne.n	d7862 <pinAvailable+0x6>
  return true; // 'pin' is available
   d78a2:	2001      	movs	r0, #1
   d78a4:	e7de      	b.n	d7864 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d78a6:	2801      	cmp	r0, #1
   d78a8:	d809      	bhi.n	d78be <pinAvailable+0x62>
   d78aa:	f000 f881 	bl	d79b0 <_Z19__fetch_global_Wirev>
   d78ae:	2100      	movs	r1, #0
   d78b0:	7c00      	ldrb	r0, [r0, #16]
   d78b2:	f7fe fba3 	bl	d5ffc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d78b6:	f080 0001 	eor.w	r0, r0, #1
   d78ba:	b2c0      	uxtb	r0, r0
   d78bc:	e7d2      	b.n	d7864 <pinAvailable+0x8>
   d78be:	3809      	subs	r0, #9
   d78c0:	2801      	cmp	r0, #1
   d78c2:	d8ee      	bhi.n	d78a2 <pinAvailable+0x46>
   d78c4:	f7ff fdf6 	bl	d74b4 <_Z22__fetch_global_Serial1v>
   d78c8:	7c00      	ldrb	r0, [r0, #16]
   d78ca:	f7fe fc07 	bl	d60dc <hal_usart_is_enabled>
   d78ce:	e7f2      	b.n	d78b6 <pinAvailable+0x5a>
   d78d0:	2003e78c 	.word	0x2003e78c
   d78d4:	2003e790 	.word	0x2003e790

000d78d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78d8:	2823      	cmp	r0, #35	; 0x23
{
   d78da:	b538      	push	{r3, r4, r5, lr}
   d78dc:	4604      	mov	r4, r0
   d78de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d78e0:	d80a      	bhi.n	d78f8 <pinMode+0x20>
   d78e2:	29ff      	cmp	r1, #255	; 0xff
   d78e4:	d008      	beq.n	d78f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d78e6:	f7ff ffb9 	bl	d785c <pinAvailable>
   d78ea:	b128      	cbz	r0, d78f8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d78ec:	4629      	mov	r1, r5
   d78ee:	4620      	mov	r0, r4
}
   d78f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d78f4:	f7fe bb08 	b.w	d5f08 <HAL_Pin_Mode>
}
   d78f8:	bd38      	pop	{r3, r4, r5, pc}

000d78fa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d78fa:	b538      	push	{r3, r4, r5, lr}
   d78fc:	4604      	mov	r4, r0
   d78fe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7900:	f7fe fb0a 	bl	d5f18 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7904:	28ff      	cmp	r0, #255	; 0xff
   d7906:	d010      	beq.n	d792a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7908:	2806      	cmp	r0, #6
   d790a:	d804      	bhi.n	d7916 <digitalWrite+0x1c>
   d790c:	234d      	movs	r3, #77	; 0x4d
   d790e:	fa23 f000 	lsr.w	r0, r3, r0
   d7912:	07c3      	lsls	r3, r0, #31
   d7914:	d409      	bmi.n	d792a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7916:	4620      	mov	r0, r4
   d7918:	f7ff ffa0 	bl	d785c <pinAvailable>
   d791c:	b128      	cbz	r0, d792a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d791e:	4629      	mov	r1, r5
   d7920:	4620      	mov	r0, r4
}
   d7922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7926:	f7fe baff 	b.w	d5f28 <HAL_GPIO_Write>
}
   d792a:	bd38      	pop	{r3, r4, r5, pc}

000d792c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d792c:	b510      	push	{r4, lr}
   d792e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7930:	f7fe faf2 	bl	d5f18 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7934:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7936:	b2db      	uxtb	r3, r3
   d7938:	2b01      	cmp	r3, #1
   d793a:	d908      	bls.n	d794e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d793c:	4620      	mov	r0, r4
   d793e:	f7ff ff8d 	bl	d785c <pinAvailable>
   d7942:	b120      	cbz	r0, d794e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7944:	4620      	mov	r0, r4
}
   d7946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d794a:	f7fe baf5 	b.w	d5f38 <HAL_GPIO_Read>
}
   d794e:	2000      	movs	r0, #0
   d7950:	bd10      	pop	{r4, pc}

000d7952 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7952:	280d      	cmp	r0, #13
{
   d7954:	b510      	push	{r4, lr}
   d7956:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7958:	bf9c      	itt	ls
   d795a:	340e      	addls	r4, #14
   d795c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d795e:	4620      	mov	r0, r4
   d7960:	f7ff ff7c 	bl	d785c <pinAvailable>
   d7964:	b150      	cbz	r0, d797c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7966:	2103      	movs	r1, #3
   d7968:	4620      	mov	r0, r4
   d796a:	f7fe fac5 	bl	d5ef8 <HAL_Validate_Pin_Function>
   d796e:	2803      	cmp	r0, #3
   d7970:	d104      	bne.n	d797c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7972:	4620      	mov	r0, r4
}
   d7974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7978:	f7fe bae6 	b.w	d5f48 <hal_adc_read>
}
   d797c:	2000      	movs	r0, #0
   d797e:	bd10      	pop	{r4, pc}

000d7980 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7980:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7982:	2300      	movs	r3, #0
   d7984:	2520      	movs	r5, #32
   d7986:	8043      	strh	r3, [r0, #2]
   d7988:	2314      	movs	r3, #20
{
   d798a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d798c:	8003      	strh	r3, [r0, #0]
   d798e:	6085      	str	r5, [r0, #8]
   d7990:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7992:	4906      	ldr	r1, [pc, #24]	; (d79ac <_Z17acquireWireBufferv+0x2c>)
   d7994:	4628      	mov	r0, r5
   d7996:	f000 f9aa 	bl	d7cee <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d799a:	4904      	ldr	r1, [pc, #16]	; (d79ac <_Z17acquireWireBufferv+0x2c>)
	};
   d799c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d799e:	4628      	mov	r0, r5
   d79a0:	f000 f9a5 	bl	d7cee <_ZnajRKSt9nothrow_t>
	};
   d79a4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d79a6:	4620      	mov	r0, r4
   d79a8:	bd38      	pop	{r3, r4, r5, pc}
   d79aa:	bf00      	nop
   d79ac:	000da058 	.word	0x000da058

000d79b0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d79b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d79b2:	4d0f      	ldr	r5, [pc, #60]	; (d79f0 <_Z19__fetch_global_Wirev+0x40>)
   d79b4:	7829      	ldrb	r1, [r5, #0]
   d79b6:	f3bf 8f5b 	dmb	ish
   d79ba:	f011 0401 	ands.w	r4, r1, #1
{
   d79be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d79c0:	d113      	bne.n	d79ea <_Z19__fetch_global_Wirev+0x3a>
   d79c2:	4628      	mov	r0, r5
   d79c4:	f7fc fb6d 	bl	d40a2 <__cxa_guard_acquire>
   d79c8:	b178      	cbz	r0, d79ea <_Z19__fetch_global_Wirev+0x3a>
   d79ca:	a801      	add	r0, sp, #4
   d79cc:	f7ff ffd8 	bl	d7980 <_Z17acquireWireBufferv>
   d79d0:	aa01      	add	r2, sp, #4
   d79d2:	4621      	mov	r1, r4
   d79d4:	4807      	ldr	r0, [pc, #28]	; (d79f4 <_Z19__fetch_global_Wirev+0x44>)
   d79d6:	f7ff f81b 	bl	d6a10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d79da:	4628      	mov	r0, r5
   d79dc:	f7fc fb66 	bl	d40ac <__cxa_guard_release>
   d79e0:	4a05      	ldr	r2, [pc, #20]	; (d79f8 <_Z19__fetch_global_Wirev+0x48>)
   d79e2:	4906      	ldr	r1, [pc, #24]	; (d79fc <_Z19__fetch_global_Wirev+0x4c>)
   d79e4:	4803      	ldr	r0, [pc, #12]	; (d79f4 <_Z19__fetch_global_Wirev+0x44>)
   d79e6:	f000 f979 	bl	d7cdc <__aeabi_atexit>
	return wire;
}
   d79ea:	4802      	ldr	r0, [pc, #8]	; (d79f4 <_Z19__fetch_global_Wirev+0x44>)
   d79ec:	b007      	add	sp, #28
   d79ee:	bd30      	pop	{r4, r5, pc}
   d79f0:	2003e79c 	.word	0x2003e79c
   d79f4:	2003e7a0 	.word	0x2003e7a0
   d79f8:	2003e420 	.word	0x2003e420
   d79fc:	000d69b9 	.word	0x000d69b9

000d7a00 <irq_handler>:
}

static void irq_handler(NRF_TIMER_Type        * p_reg,
                        timer_control_block_t * p_cb,
                        uint8_t                 channel_count)
{
   d7a00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7a04:	2400      	movs	r4, #0
   d7a06:	4606      	mov	r6, r0
   d7a08:	460f      	mov	r7, r1
   d7a0a:	4690      	mov	r8, r2
   d7a0c:	f500 75a0 	add.w	r5, r0, #320	; 0x140
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
}

__STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
   d7a10:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7a14:	46a2      	mov	sl, r4
    return (nrf_timer_event_t)
   d7a16:	00a0      	lsls	r0, r4, #2
   d7a18:	f500 73a0 	add.w	r3, r0, #320	; 0x140
   d7a1c:	b298      	uxth	r0, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   d7a1e:	682b      	ldr	r3, [r5, #0]
    for (i = 0; i < channel_count; ++i)
    {
        nrf_timer_event_t event = nrf_timer_compare_event_get(i);
        nrf_timer_int_mask_t int_mask = nrf_timer_compare_int_get(i);

        if (nrf_timer_event_check(p_reg, event) &&
   d7a20:	b16b      	cbz	r3, d7a3e <irq_handler+0x3e>
    return (bool)(p_reg->INTENSET & timer_int);
   d7a22:	f8d6 3304 	ldr.w	r3, [r6, #772]	; 0x304
    return (nrf_timer_int_mask_t)
   d7a26:	fa09 f204 	lsl.w	r2, r9, r4
   d7a2a:	421a      	tst	r2, r3
   d7a2c:	d007      	beq.n	d7a3e <irq_handler+0x3e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7a2e:	f8c5 a000 	str.w	sl, [r5]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7a32:	682b      	ldr	r3, [r5, #0]
   d7a34:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7a36:	9b01      	ldr	r3, [sp, #4]
            nrf_timer_int_enable_check(p_reg, int_mask))
        {
            nrf_timer_event_clear(p_reg, event);
            NRFX_LOG_DEBUG("Compare event, channel: %d.", i);
            p_cb->handler(event, p_cb->context);
   d7a38:	e9d7 3100 	ldrd	r3, r1, [r7]
   d7a3c:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
   d7a3e:	3401      	adds	r4, #1
   d7a40:	45a0      	cmp	r8, r4
   d7a42:	f105 0504 	add.w	r5, r5, #4
   d7a46:	d1e6      	bne.n	d7a16 <irq_handler+0x16>
        }
    }
}
   d7a48:	b002      	add	sp, #8
   d7a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000d7a50 <nrfx_timer_init>:
{
   d7a50:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7a54:	4b57      	ldr	r3, [pc, #348]	; (d7bb4 <nrfx_timer_init+0x164>)
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   d7a56:	7907      	ldrb	r7, [r0, #4]
{
   d7a58:	4616      	mov	r6, r2
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7a5a:	6802      	ldr	r2, [r0, #0]
   d7a5c:	429a      	cmp	r2, r3
{
   d7a5e:	4604      	mov	r4, r0
   d7a60:	460d      	mov	r5, r1
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
   d7a62:	d104      	bne.n	d7a6e <nrfx_timer_init+0x1e>
   d7a64:	4a54      	ldr	r2, [pc, #336]	; (d7bb8 <nrfx_timer_init+0x168>)
   d7a66:	2100      	movs	r1, #0
   d7a68:	200a      	movs	r0, #10
   d7a6a:	f7fe fb7f 	bl	d616c <panic_>
    NRFX_ASSERT(p_config);
   d7a6e:	b925      	cbnz	r5, d7a7a <nrfx_timer_init+0x2a>
   d7a70:	4a51      	ldr	r2, [pc, #324]	; (d7bb8 <nrfx_timer_init+0x168>)
   d7a72:	4629      	mov	r1, r5
   d7a74:	200a      	movs	r0, #10
   d7a76:	f7fe fb79 	bl	d616c <panic_>
    NRFX_ASSERT(timer_event_handler);
   d7a7a:	b926      	cbnz	r6, d7a86 <nrfx_timer_init+0x36>
   d7a7c:	4a4e      	ldr	r2, [pc, #312]	; (d7bb8 <nrfx_timer_init+0x168>)
   d7a7e:	4631      	mov	r1, r6
   d7a80:	200a      	movs	r0, #10
   d7a82:	f7fe fb73 	bl	d616c <panic_>
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   d7a86:	4a4d      	ldr	r2, [pc, #308]	; (d7bbc <nrfx_timer_init+0x16c>)
   d7a88:	230c      	movs	r3, #12
   d7a8a:	fb03 2307 	mla	r3, r3, r7, r2
   d7a8e:	4690      	mov	r8, r2
   d7a90:	7a1b      	ldrb	r3, [r3, #8]
   d7a92:	2b00      	cmp	r3, #0
   d7a94:	f040 808c 	bne.w	d7bb0 <nrfx_timer_init+0x160>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   d7a98:	6823      	ldr	r3, [r4, #0]
   d7a9a:	4a46      	ldr	r2, [pc, #280]	; (d7bb4 <nrfx_timer_init+0x164>)
   d7a9c:	4293      	cmp	r3, r2
   d7a9e:	d00f      	beq.n	d7ac0 <nrfx_timer_init+0x70>
   d7aa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7aa4:	4293      	cmp	r3, r2
   d7aa6:	d00b      	beq.n	d7ac0 <nrfx_timer_init+0x70>
   d7aa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7aac:	4293      	cmp	r3, r2
   d7aae:	d007      	beq.n	d7ac0 <nrfx_timer_init+0x70>
   d7ab0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
   d7ab4:	4293      	cmp	r3, r2
   d7ab6:	d003      	beq.n	d7ac0 <nrfx_timer_init+0x70>
   d7ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   d7abc:	4293      	cmp	r3, r2
   d7abe:	d102      	bne.n	d7ac6 <nrfx_timer_init+0x76>
   d7ac0:	78ab      	ldrb	r3, [r5, #2]
   d7ac2:	2b03      	cmp	r3, #3
   d7ac4:	d904      	bls.n	d7ad0 <nrfx_timer_init+0x80>
   d7ac6:	4a3c      	ldr	r2, [pc, #240]	; (d7bb8 <nrfx_timer_init+0x168>)
   d7ac8:	2100      	movs	r1, #0
   d7aca:	200a      	movs	r0, #10
   d7acc:	f7fe fb4e 	bl	d616c <panic_>
    p_cb->handler = timer_event_handler;
   d7ad0:	230c      	movs	r3, #12
   d7ad2:	437b      	muls	r3, r7
   d7ad4:	eb08 0203 	add.w	r2, r8, r3
   d7ad8:	f848 6003 	str.w	r6, [r8, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7adc:	2100      	movs	r1, #0
    p_cb->context = p_config->p_context;
   d7ade:	686b      	ldr	r3, [r5, #4]
   d7ae0:	6053      	str	r3, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7ae2:	460e      	mov	r6, r1
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7ae4:	7960      	ldrb	r0, [r4, #5]
   d7ae6:	6822      	ldr	r2, [r4, #0]
   d7ae8:	b2cb      	uxtb	r3, r1
   d7aea:	4298      	cmp	r0, r3
   d7aec:	d857      	bhi.n	d7b9e <nrfx_timer_init+0x14e>
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
   d7aee:	78ee      	ldrb	r6, [r5, #3]
#define NRFX_IRQ_PRIORITY_SET(irq_number, priority) \
    _NRFX_IRQ_PRIORITY_SET(irq_number, priority)
static inline void _NRFX_IRQ_PRIORITY_SET(IRQn_Type irq_number,
                                          uint8_t   priority)
{
    NRFX_ASSERT(INTERRUPT_PRIORITY_IS_VALID(priority));
   d7af0:	1eb3      	subs	r3, r6, #2
   d7af2:	2b01      	cmp	r3, #1
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

__STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   d7af4:	ea4f 3912 	mov.w	r9, r2, lsr #12
   d7af8:	f342 3a07 	sbfx	sl, r2, #12, #8
   d7afc:	d907      	bls.n	d7b0e <nrfx_timer_init+0xbe>
   d7afe:	1f73      	subs	r3, r6, #5
   d7b00:	2b02      	cmp	r3, #2
   d7b02:	d904      	bls.n	d7b0e <nrfx_timer_init+0xbe>
   d7b04:	4a2c      	ldr	r2, [pc, #176]	; (d7bb8 <nrfx_timer_init+0x168>)
   d7b06:	2100      	movs	r1, #0
   d7b08:	200a      	movs	r0, #10
   d7b0a:	f7fe fb2f 	bl	d616c <panic_>
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
   d7b0e:	f1ba 0f00 	cmp.w	sl, #0
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7b12:	bfac      	ite	ge
   d7b14:	f10a 4360 	addge.w	r3, sl, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7b18:	4b29      	ldrlt	r3, [pc, #164]	; (d7bc0 <nrfx_timer_init+0x170>)
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d7b1a:	482a      	ldr	r0, [pc, #168]	; (d7bc4 <nrfx_timer_init+0x174>)
   d7b1c:	ea4f 1646 	mov.w	r6, r6, lsl #5
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7b20:	bfb8      	it	lt
   d7b22:	f009 090f 	andlt.w	r9, r9, #15
   d7b26:	b2f6      	uxtb	r6, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7b28:	bfaa      	itet	ge
   d7b2a:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7b2e:	f803 6009 	strblt.w	r6, [r3, r9]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   d7b32:	f883 6300 	strbge.w	r6, [r3, #768]	; 0x300
   d7b36:	6823      	ldr	r3, [r4, #0]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   d7b38:	f343 3107 	sbfx	r1, r3, #12, #8
   d7b3c:	0949      	lsrs	r1, r1, #5
   d7b3e:	2201      	movs	r2, #1
   d7b40:	f3c3 3304 	ubfx	r3, r3, #12, #5
   d7b44:	fa02 f303 	lsl.w	r3, r2, r3
   d7b48:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   d7b4c:	6820      	ldr	r0, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d7b4e:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7b50:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   d7b54:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   d7b58:	f021 0103 	bic.w	r1, r1, #3
   d7b5c:	430b      	orrs	r3, r1
   d7b5e:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   d7b62:	6820      	ldr	r0, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d7b64:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d7b66:	f8d0 1508 	ldr.w	r1, [r0, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   d7b6a:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   d7b6e:	f021 0103 	bic.w	r1, r1, #3
   d7b72:	430b      	orrs	r3, r1
   d7b74:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
   d7b78:	6820      	ldr	r0, [r4, #0]
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d7b7a:	782b      	ldrb	r3, [r5, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d7b7c:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   d7b80:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   d7b84:	f021 010f 	bic.w	r1, r1, #15
   d7b88:	430b      	orrs	r3, r1
   d7b8a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d7b8e:	230c      	movs	r3, #12
   d7b90:	fb03 8707 	mla	r7, r3, r7, r8
    return err_code;
   d7b94:	2000      	movs	r0, #0
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   d7b96:	723a      	strb	r2, [r7, #8]
}
   d7b98:	b002      	add	sp, #8
   d7b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (nrf_timer_event_t)
   d7b9e:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7ba0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   d7ba4:	3101      	adds	r1, #1
   d7ba6:	50d6      	str	r6, [r2, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7ba8:	58d3      	ldr	r3, [r2, r3]
   d7baa:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7bac:	9b01      	ldr	r3, [sp, #4]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   d7bae:	e799      	b.n	d7ae4 <nrfx_timer_init+0x94>
        return err_code;
   d7bb0:	2008      	movs	r0, #8
   d7bb2:	e7f1      	b.n	d7b98 <nrfx_timer_init+0x148>
   d7bb4:	40008000 	.word	0x40008000
   d7bb8:	000d5eb9 	.word	0x000d5eb9
   d7bbc:	2003e7b4 	.word	0x2003e7b4
   d7bc0:	e000ed14 	.word	0xe000ed14
   d7bc4:	e000e100 	.word	0xe000e100

000d7bc8 <nrfx_timer_enable>:
{
   d7bc8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d7bca:	4d0c      	ldr	r5, [pc, #48]	; (d7bfc <nrfx_timer_enable+0x34>)
   d7bcc:	7902      	ldrb	r2, [r0, #4]
   d7bce:	210c      	movs	r1, #12
   d7bd0:	fb01 5202 	mla	r2, r1, r2, r5
{
   d7bd4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   d7bd6:	7a12      	ldrb	r2, [r2, #8]
   d7bd8:	2a01      	cmp	r2, #1
   d7bda:	d004      	beq.n	d7be6 <nrfx_timer_enable+0x1e>
   d7bdc:	4a08      	ldr	r2, [pc, #32]	; (d7c00 <nrfx_timer_enable+0x38>)
   d7bde:	2100      	movs	r1, #0
   d7be0:	200a      	movs	r0, #10
   d7be2:	f7fe fac3 	bl	d616c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   d7be6:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   d7be8:	2201      	movs	r2, #1
   d7bea:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   d7bec:	7923      	ldrb	r3, [r4, #4]
   d7bee:	220c      	movs	r2, #12
   d7bf0:	fb02 5303 	mla	r3, r2, r3, r5
   d7bf4:	2202      	movs	r2, #2
   d7bf6:	721a      	strb	r2, [r3, #8]
}
   d7bf8:	bd38      	pop	{r3, r4, r5, pc}
   d7bfa:	bf00      	nop
   d7bfc:	2003e7b4 	.word	0x2003e7b4
   d7c00:	000d5eb9 	.word	0x000d5eb9

000d7c04 <nrfx_timer_disable>:
{
   d7c04:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7c06:	4d0a      	ldr	r5, [pc, #40]	; (d7c30 <nrfx_timer_disable+0x2c>)
   d7c08:	7902      	ldrb	r2, [r0, #4]
   d7c0a:	210c      	movs	r1, #12
   d7c0c:	fb01 5202 	mla	r2, r1, r2, r5
{
   d7c10:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7c12:	7a11      	ldrb	r1, [r2, #8]
   d7c14:	b919      	cbnz	r1, d7c1e <nrfx_timer_disable+0x1a>
   d7c16:	4a07      	ldr	r2, [pc, #28]	; (d7c34 <nrfx_timer_disable+0x30>)
   d7c18:	200a      	movs	r0, #10
   d7c1a:	f7fe faa7 	bl	d616c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   d7c1e:	6823      	ldr	r3, [r4, #0]
   d7c20:	2201      	movs	r2, #1
   d7c22:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   d7c24:	7923      	ldrb	r3, [r4, #4]
   d7c26:	210c      	movs	r1, #12
   d7c28:	fb01 5303 	mla	r3, r1, r3, r5
   d7c2c:	721a      	strb	r2, [r3, #8]
}
   d7c2e:	bd38      	pop	{r3, r4, r5, pc}
   d7c30:	2003e7b4 	.word	0x2003e7b4
   d7c34:	000d5eb9 	.word	0x000d5eb9

000d7c38 <nrfx_timer_clear>:
{
   d7c38:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7c3a:	4a08      	ldr	r2, [pc, #32]	; (d7c5c <nrfx_timer_clear+0x24>)
   d7c3c:	7903      	ldrb	r3, [r0, #4]
   d7c3e:	210c      	movs	r1, #12
   d7c40:	fb01 2303 	mla	r3, r1, r3, r2
{
   d7c44:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   d7c46:	7a19      	ldrb	r1, [r3, #8]
   d7c48:	b919      	cbnz	r1, d7c52 <nrfx_timer_clear+0x1a>
   d7c4a:	4a05      	ldr	r2, [pc, #20]	; (d7c60 <nrfx_timer_clear+0x28>)
   d7c4c:	200a      	movs	r0, #10
   d7c4e:	f7fe fa8d 	bl	d616c <panic_>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   d7c52:	6823      	ldr	r3, [r4, #0]
   d7c54:	2201      	movs	r2, #1
   d7c56:	60da      	str	r2, [r3, #12]
}
   d7c58:	bd10      	pop	{r4, pc}
   d7c5a:	bf00      	nop
   d7c5c:	2003e7b4 	.word	0x2003e7b4
   d7c60:	000d5eb9 	.word	0x000d5eb9

000d7c64 <nrfx_timer_compare>:
{
   d7c64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
   d7c66:	f44f 3480 	mov.w	r4, #65536	; 0x10000
   d7c6a:	6805      	ldr	r5, [r0, #0]
   d7c6c:	408c      	lsls	r4, r1
    if (enable_int)
   d7c6e:	b18b      	cbz	r3, d7c94 <nrfx_timer_compare+0x30>
        ((uint32_t)NRF_TIMER_EVENT_COMPARE0 + (channel * sizeof(uint32_t)));
   d7c70:	f101 0350 	add.w	r3, r1, #80	; 0x50
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   d7c74:	009b      	lsls	r3, r3, #2
   d7c76:	2600      	movs	r6, #0
   d7c78:	50ee      	str	r6, [r5, r3]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   d7c7a:	58eb      	ldr	r3, [r5, r3]
   d7c7c:	9301      	str	r3, [sp, #4]
    (void)dummy;
   d7c7e:	9b01      	ldr	r3, [sp, #4]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
   d7c80:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = timer_int_mask;
   d7c82:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_write(p_instance->p_reg, cc_channel, cc_value);
   d7c86:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
   d7c88:	f501 71a8 	add.w	r1, r1, #336	; 0x150
   d7c8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
   d7c90:	b002      	add	sp, #8
   d7c92:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = timer_int_mask;
   d7c94:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
   d7c98:	e7f5      	b.n	d7c86 <nrfx_timer_compare+0x22>

000d7c9a <nrfx_timer_extended_compare>:
{
   d7c9a:	b4f0      	push	{r4, r5, r6, r7}
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7c9c:	6807      	ldr	r7, [r0, #0]
        (TIMER_SHORTS_COMPARE0_CLEAR_Msk << cc_channel));
   d7c9e:	f240 1601 	movw	r6, #257	; 0x101
    p_reg->SHORTS &= ~(timer_shorts_mask);
   d7ca2:	f8d7 5200 	ldr.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_disable(p_instance->p_reg,
   d7ca6:	408e      	lsls	r6, r1
   d7ca8:	ea25 0506 	bic.w	r5, r5, r6
   d7cac:	f8c7 5200 	str.w	r5, [r7, #512]	; 0x200
    nrf_timer_shorts_enable(p_instance->p_reg, timer_short_mask);
   d7cb0:	6804      	ldr	r4, [r0, #0]
    p_reg->SHORTS |= timer_shorts_mask;
   d7cb2:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   d7cb6:	432b      	orrs	r3, r5
   d7cb8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    nrfx_timer_compare(p_instance,
   d7cbc:	f89d 3010 	ldrb.w	r3, [sp, #16]
}
   d7cc0:	bcf0      	pop	{r4, r5, r6, r7}
    nrfx_timer_compare(p_instance,
   d7cc2:	f7ff bfcf 	b.w	d7c64 <nrfx_timer_compare>
	...

000d7cc8 <TIMER4_IRQHandler>:
#endif

#if NRFX_CHECK(NRFX_TIMER4_ENABLED)
void nrfx_timer_4_irq_handler(void)
{
    irq_handler(NRF_TIMER4, &m_cb[NRFX_TIMER4_INST_IDX],
   d7cc8:	4902      	ldr	r1, [pc, #8]	; (d7cd4 <TIMER4_IRQHandler+0xc>)
   d7cca:	4803      	ldr	r0, [pc, #12]	; (d7cd8 <TIMER4_IRQHandler+0x10>)
   d7ccc:	2206      	movs	r2, #6
   d7cce:	f7ff be97 	b.w	d7a00 <irq_handler>
   d7cd2:	bf00      	nop
   d7cd4:	2003e7e4 	.word	0x2003e7e4
   d7cd8:	4001b000 	.word	0x4001b000

000d7cdc <__aeabi_atexit>:
   d7cdc:	460b      	mov	r3, r1
   d7cde:	4601      	mov	r1, r0
   d7ce0:	4618      	mov	r0, r3
   d7ce2:	f001 beab 	b.w	d9a3c <__cxa_atexit>

000d7ce6 <_ZdlPvj>:
   d7ce6:	f7fc b9da 	b.w	d409e <_ZdlPv>

000d7cea <_ZnwjRKSt9nothrow_t>:
   d7cea:	f7fc b9d4 	b.w	d4096 <_Znwj>

000d7cee <_ZnajRKSt9nothrow_t>:
   d7cee:	f7fc b9d4 	b.w	d409a <_Znaj>

000d7cf2 <_ZSt25__throw_bad_function_callv>:
   d7cf2:	b508      	push	{r3, lr}
   d7cf4:	f7fe fb10 	bl	d6318 <abort>

000d7cf8 <pow>:
   d7cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cfc:	ed2d 8b02 	vpush	{d8}
   d7d00:	b08d      	sub	sp, #52	; 0x34
   d7d02:	ec57 6b10 	vmov	r6, r7, d0
   d7d06:	ec55 4b11 	vmov	r4, r5, d1
   d7d0a:	f000 f9ad 	bl	d8068 <__ieee754_pow>
   d7d0e:	4bae      	ldr	r3, [pc, #696]	; (d7fc8 <pow+0x2d0>)
   d7d10:	eeb0 8a40 	vmov.f32	s16, s0
   d7d14:	eef0 8a60 	vmov.f32	s17, s1
   d7d18:	f993 9000 	ldrsb.w	r9, [r3]
   d7d1c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   d7d20:	d037      	beq.n	d7d92 <pow+0x9a>
   d7d22:	4622      	mov	r2, r4
   d7d24:	462b      	mov	r3, r5
   d7d26:	4620      	mov	r0, r4
   d7d28:	4629      	mov	r1, r5
   d7d2a:	f001 fdd9 	bl	d98e0 <__aeabi_dcmpun>
   d7d2e:	4683      	mov	fp, r0
   d7d30:	bb78      	cbnz	r0, d7d92 <pow+0x9a>
   d7d32:	4632      	mov	r2, r6
   d7d34:	463b      	mov	r3, r7
   d7d36:	4630      	mov	r0, r6
   d7d38:	4639      	mov	r1, r7
   d7d3a:	f001 fdd1 	bl	d98e0 <__aeabi_dcmpun>
   d7d3e:	4680      	mov	r8, r0
   d7d40:	2800      	cmp	r0, #0
   d7d42:	f040 8093 	bne.w	d7e6c <pow+0x174>
   d7d46:	f04f 0a00 	mov.w	sl, #0
   d7d4a:	f04f 0b00 	mov.w	fp, #0
   d7d4e:	4630      	mov	r0, r6
   d7d50:	4639      	mov	r1, r7
   d7d52:	4652      	mov	r2, sl
   d7d54:	465b      	mov	r3, fp
   d7d56:	f001 fd91 	bl	d987c <__aeabi_dcmpeq>
   d7d5a:	b318      	cbz	r0, d7da4 <pow+0xac>
   d7d5c:	4652      	mov	r2, sl
   d7d5e:	465b      	mov	r3, fp
   d7d60:	4620      	mov	r0, r4
   d7d62:	4629      	mov	r1, r5
   d7d64:	f001 fd8a 	bl	d987c <__aeabi_dcmpeq>
   d7d68:	9000      	str	r0, [sp, #0]
   d7d6a:	2800      	cmp	r0, #0
   d7d6c:	d057      	beq.n	d7e1e <pow+0x126>
   d7d6e:	4b97      	ldr	r3, [pc, #604]	; (d7fcc <pow+0x2d4>)
   d7d70:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7d74:	2201      	movs	r2, #1
   d7d76:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7d7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7d7e:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7d82:	9202      	str	r2, [sp, #8]
   d7d84:	9303      	str	r3, [sp, #12]
   d7d86:	f1b9 0f00 	cmp.w	r9, #0
   d7d8a:	f000 8089 	beq.w	d7ea0 <pow+0x1a8>
   d7d8e:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d7fb8 <pow+0x2c0>
   d7d92:	eeb0 0a48 	vmov.f32	s0, s16
   d7d96:	eef0 0a68 	vmov.f32	s1, s17
   d7d9a:	b00d      	add	sp, #52	; 0x34
   d7d9c:	ecbd 8b02 	vpop	{d8}
   d7da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7da4:	eeb0 0a48 	vmov.f32	s0, s16
   d7da8:	eef0 0a68 	vmov.f32	s1, s17
   d7dac:	f001 f804 	bl	d8db8 <finite>
   d7db0:	4680      	mov	r8, r0
   d7db2:	2800      	cmp	r0, #0
   d7db4:	f000 8082 	beq.w	d7ebc <pow+0x1c4>
   d7db8:	f04f 0800 	mov.w	r8, #0
   d7dbc:	f04f 0900 	mov.w	r9, #0
   d7dc0:	ec51 0b18 	vmov	r0, r1, d8
   d7dc4:	4642      	mov	r2, r8
   d7dc6:	464b      	mov	r3, r9
   d7dc8:	f001 fd58 	bl	d987c <__aeabi_dcmpeq>
   d7dcc:	2800      	cmp	r0, #0
   d7dce:	d0e0      	beq.n	d7d92 <pow+0x9a>
   d7dd0:	ec47 6b10 	vmov	d0, r6, r7
   d7dd4:	f000 fff0 	bl	d8db8 <finite>
   d7dd8:	2800      	cmp	r0, #0
   d7dda:	d0da      	beq.n	d7d92 <pow+0x9a>
   d7ddc:	ec45 4b10 	vmov	d0, r4, r5
   d7de0:	f000 ffea 	bl	d8db8 <finite>
   d7de4:	2800      	cmp	r0, #0
   d7de6:	d0d4      	beq.n	d7d92 <pow+0x9a>
   d7de8:	4b77      	ldr	r3, [pc, #476]	; (d7fc8 <pow+0x2d0>)
   d7dea:	4a78      	ldr	r2, [pc, #480]	; (d7fcc <pow+0x2d4>)
   d7dec:	f993 3000 	ldrsb.w	r3, [r3]
   d7df0:	9203      	str	r2, [sp, #12]
   d7df2:	2104      	movs	r1, #4
   d7df4:	2200      	movs	r2, #0
   d7df6:	2b02      	cmp	r3, #2
   d7df8:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7dfc:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e00:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7e04:	9102      	str	r1, [sp, #8]
   d7e06:	920a      	str	r2, [sp, #40]	; 0x28
   d7e08:	d004      	beq.n	d7e14 <pow+0x11c>
   d7e0a:	a802      	add	r0, sp, #8
   d7e0c:	f000 ffe0 	bl	d8dd0 <matherr>
   d7e10:	2800      	cmp	r0, #0
   d7e12:	d14a      	bne.n	d7eaa <pow+0x1b2>
   d7e14:	f7fe fa90 	bl	d6338 <__errno>
   d7e18:	2322      	movs	r3, #34	; 0x22
   d7e1a:	6003      	str	r3, [r0, #0]
   d7e1c:	e045      	b.n	d7eaa <pow+0x1b2>
   d7e1e:	ec45 4b10 	vmov	d0, r4, r5
   d7e22:	f000 ffc9 	bl	d8db8 <finite>
   d7e26:	2800      	cmp	r0, #0
   d7e28:	d0b3      	beq.n	d7d92 <pow+0x9a>
   d7e2a:	4652      	mov	r2, sl
   d7e2c:	465b      	mov	r3, fp
   d7e2e:	4620      	mov	r0, r4
   d7e30:	4629      	mov	r1, r5
   d7e32:	f001 fd2d 	bl	d9890 <__aeabi_dcmplt>
   d7e36:	2800      	cmp	r0, #0
   d7e38:	d0ab      	beq.n	d7d92 <pow+0x9a>
   d7e3a:	4b63      	ldr	r3, [pc, #396]	; (d7fc8 <pow+0x2d0>)
   d7e3c:	9900      	ldr	r1, [sp, #0]
   d7e3e:	4a63      	ldr	r2, [pc, #396]	; (d7fcc <pow+0x2d4>)
   d7e40:	f993 3000 	ldrsb.w	r3, [r3]
   d7e44:	910a      	str	r1, [sp, #40]	; 0x28
   d7e46:	2101      	movs	r1, #1
   d7e48:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e4c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e50:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7e54:	2b00      	cmp	r3, #0
   d7e56:	d16f      	bne.n	d7f38 <pow+0x240>
   d7e58:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7e5c:	a802      	add	r0, sp, #8
   d7e5e:	f000 ffb7 	bl	d8dd0 <matherr>
   d7e62:	2800      	cmp	r0, #0
   d7e64:	d06e      	beq.n	d7f44 <pow+0x24c>
   d7e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e68:	b32b      	cbz	r3, d7eb6 <pow+0x1be>
   d7e6a:	e020      	b.n	d7eae <pow+0x1b6>
   d7e6c:	2200      	movs	r2, #0
   d7e6e:	2300      	movs	r3, #0
   d7e70:	4620      	mov	r0, r4
   d7e72:	4629      	mov	r1, r5
   d7e74:	f001 fd02 	bl	d987c <__aeabi_dcmpeq>
   d7e78:	2800      	cmp	r0, #0
   d7e7a:	d08a      	beq.n	d7d92 <pow+0x9a>
   d7e7c:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d7fb8 <pow+0x2c0>
   d7e80:	4b52      	ldr	r3, [pc, #328]	; (d7fcc <pow+0x2d4>)
   d7e82:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7e86:	2201      	movs	r2, #1
   d7e88:	f1b9 0f02 	cmp.w	r9, #2
   d7e8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e90:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e94:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7e98:	9202      	str	r2, [sp, #8]
   d7e9a:	9303      	str	r3, [sp, #12]
   d7e9c:	f43f af79 	beq.w	d7d92 <pow+0x9a>
   d7ea0:	a802      	add	r0, sp, #8
   d7ea2:	f000 ff95 	bl	d8dd0 <matherr>
   d7ea6:	2800      	cmp	r0, #0
   d7ea8:	d051      	beq.n	d7f4e <pow+0x256>
   d7eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7eac:	b11b      	cbz	r3, d7eb6 <pow+0x1be>
   d7eae:	f7fe fa43 	bl	d6338 <__errno>
   d7eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7eb4:	6003      	str	r3, [r0, #0]
   d7eb6:	ed9d 8b08 	vldr	d8, [sp, #32]
   d7eba:	e76a      	b.n	d7d92 <pow+0x9a>
   d7ebc:	ec47 6b10 	vmov	d0, r6, r7
   d7ec0:	f000 ff7a 	bl	d8db8 <finite>
   d7ec4:	2800      	cmp	r0, #0
   d7ec6:	f43f af77 	beq.w	d7db8 <pow+0xc0>
   d7eca:	ec45 4b10 	vmov	d0, r4, r5
   d7ece:	f000 ff73 	bl	d8db8 <finite>
   d7ed2:	2800      	cmp	r0, #0
   d7ed4:	f43f af70 	beq.w	d7db8 <pow+0xc0>
   d7ed8:	ec53 2b18 	vmov	r2, r3, d8
   d7edc:	ee18 0a10 	vmov	r0, s16
   d7ee0:	4619      	mov	r1, r3
   d7ee2:	f001 fcfd 	bl	d98e0 <__aeabi_dcmpun>
   d7ee6:	4b38      	ldr	r3, [pc, #224]	; (d7fc8 <pow+0x2d0>)
   d7ee8:	2800      	cmp	r0, #0
   d7eea:	f040 8096 	bne.w	d801a <pow+0x322>
   d7eee:	f993 8000 	ldrsb.w	r8, [r3]
   d7ef2:	900a      	str	r0, [sp, #40]	; 0x28
   d7ef4:	2303      	movs	r3, #3
   d7ef6:	9302      	str	r3, [sp, #8]
   d7ef8:	4b34      	ldr	r3, [pc, #208]	; (d7fcc <pow+0x2d4>)
   d7efa:	9303      	str	r3, [sp, #12]
   d7efc:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7f00:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7f04:	f1b8 0f00 	cmp.w	r8, #0
   d7f08:	d126      	bne.n	d7f58 <pow+0x260>
   d7f0a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d7fdc <pow+0x2e4>
   d7f0e:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7f12:	4652      	mov	r2, sl
   d7f14:	465b      	mov	r3, fp
   d7f16:	4630      	mov	r0, r6
   d7f18:	4639      	mov	r1, r7
   d7f1a:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7f1e:	f001 fcb7 	bl	d9890 <__aeabi_dcmplt>
   d7f22:	bb48      	cbnz	r0, d7f78 <pow+0x280>
   d7f24:	a802      	add	r0, sp, #8
   d7f26:	f000 ff53 	bl	d8dd0 <matherr>
   d7f2a:	2800      	cmp	r0, #0
   d7f2c:	d19b      	bne.n	d7e66 <pow+0x16e>
   d7f2e:	f7fe fa03 	bl	d6338 <__errno>
   d7f32:	2322      	movs	r3, #34	; 0x22
   d7f34:	6003      	str	r3, [r0, #0]
   d7f36:	e796      	b.n	d7e66 <pow+0x16e>
   d7f38:	4925      	ldr	r1, [pc, #148]	; (d7fd0 <pow+0x2d8>)
   d7f3a:	2000      	movs	r0, #0
   d7f3c:	2b02      	cmp	r3, #2
   d7f3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d7f42:	d18b      	bne.n	d7e5c <pow+0x164>
   d7f44:	f7fe f9f8 	bl	d6338 <__errno>
   d7f48:	2321      	movs	r3, #33	; 0x21
   d7f4a:	6003      	str	r3, [r0, #0]
   d7f4c:	e78b      	b.n	d7e66 <pow+0x16e>
   d7f4e:	f7fe f9f3 	bl	d6338 <__errno>
   d7f52:	2321      	movs	r3, #33	; 0x21
   d7f54:	6003      	str	r3, [r0, #0]
   d7f56:	e7a8      	b.n	d7eaa <pow+0x1b2>
   d7f58:	ed9f 7b19 	vldr	d7, [pc, #100]	; d7fc0 <pow+0x2c8>
   d7f5c:	4652      	mov	r2, sl
   d7f5e:	465b      	mov	r3, fp
   d7f60:	4630      	mov	r0, r6
   d7f62:	4639      	mov	r1, r7
   d7f64:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7f68:	f001 fc92 	bl	d9890 <__aeabi_dcmplt>
   d7f6c:	2800      	cmp	r0, #0
   d7f6e:	d137      	bne.n	d7fe0 <pow+0x2e8>
   d7f70:	f1b8 0f02 	cmp.w	r8, #2
   d7f74:	d0db      	beq.n	d7f2e <pow+0x236>
   d7f76:	e7d5      	b.n	d7f24 <pow+0x22c>
   d7f78:	4b16      	ldr	r3, [pc, #88]	; (d7fd4 <pow+0x2dc>)
   d7f7a:	2200      	movs	r2, #0
   d7f7c:	4620      	mov	r0, r4
   d7f7e:	4629      	mov	r1, r5
   d7f80:	f001 fa14 	bl	d93ac <__aeabi_dmul>
   d7f84:	4602      	mov	r2, r0
   d7f86:	460b      	mov	r3, r1
   d7f88:	ec43 2b10 	vmov	d0, r2, r3
   d7f8c:	e9cd 2300 	strd	r2, r3, [sp]
   d7f90:	f000 ff2a 	bl	d8de8 <rint>
   d7f94:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7f98:	ec51 0b10 	vmov	r0, r1, d0
   d7f9c:	f001 fc6e 	bl	d987c <__aeabi_dcmpeq>
   d7fa0:	2800      	cmp	r0, #0
   d7fa2:	d136      	bne.n	d8012 <pow+0x31a>
   d7fa4:	4b0c      	ldr	r3, [pc, #48]	; (d7fd8 <pow+0x2e0>)
   d7fa6:	4908      	ldr	r1, [pc, #32]	; (d7fc8 <pow+0x2d0>)
   d7fa8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7fac:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d7fb0:	f991 8000 	ldrsb.w	r8, [r1]
   d7fb4:	e7dc      	b.n	d7f70 <pow+0x278>
   d7fb6:	bf00      	nop
   d7fb8:	00000000 	.word	0x00000000
   d7fbc:	3ff00000 	.word	0x3ff00000
   d7fc0:	00000000 	.word	0x00000000
   d7fc4:	7ff00000 	.word	0x7ff00000
   d7fc8:	2003e3b8 	.word	0x2003e3b8
   d7fcc:	000da05c 	.word	0x000da05c
   d7fd0:	fff00000 	.word	0xfff00000
   d7fd4:	3fe00000 	.word	0x3fe00000
   d7fd8:	c7efffff 	.word	0xc7efffff
   d7fdc:	47efffff 	.word	0x47efffff
   d7fe0:	4b1c      	ldr	r3, [pc, #112]	; (d8054 <pow+0x35c>)
   d7fe2:	2200      	movs	r2, #0
   d7fe4:	4620      	mov	r0, r4
   d7fe6:	4629      	mov	r1, r5
   d7fe8:	f001 f9e0 	bl	d93ac <__aeabi_dmul>
   d7fec:	4602      	mov	r2, r0
   d7fee:	460b      	mov	r3, r1
   d7ff0:	ec43 2b10 	vmov	d0, r2, r3
   d7ff4:	e9cd 2300 	strd	r2, r3, [sp]
   d7ff8:	f000 fef6 	bl	d8de8 <rint>
   d7ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8000:	ec51 0b10 	vmov	r0, r1, d0
   d8004:	f001 fc3a 	bl	d987c <__aeabi_dcmpeq>
   d8008:	b918      	cbnz	r0, d8012 <pow+0x31a>
   d800a:	4b13      	ldr	r3, [pc, #76]	; (d8058 <pow+0x360>)
   d800c:	2200      	movs	r2, #0
   d800e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d8012:	4b12      	ldr	r3, [pc, #72]	; (d805c <pow+0x364>)
   d8014:	f993 8000 	ldrsb.w	r8, [r3]
   d8018:	e7aa      	b.n	d7f70 <pow+0x278>
   d801a:	f993 9000 	ldrsb.w	r9, [r3]
   d801e:	4b10      	ldr	r3, [pc, #64]	; (d8060 <pow+0x368>)
   d8020:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d8024:	2201      	movs	r2, #1
   d8026:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d802a:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d802e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d8032:	f1b9 0f00 	cmp.w	r9, #0
   d8036:	f43f af0f 	beq.w	d7e58 <pow+0x160>
   d803a:	4652      	mov	r2, sl
   d803c:	465b      	mov	r3, fp
   d803e:	4650      	mov	r0, sl
   d8040:	4659      	mov	r1, fp
   d8042:	f001 fadd 	bl	d9600 <__aeabi_ddiv>
   d8046:	f1b9 0f02 	cmp.w	r9, #2
   d804a:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d804e:	f43f af79 	beq.w	d7f44 <pow+0x24c>
   d8052:	e703      	b.n	d7e5c <pow+0x164>
   d8054:	3fe00000 	.word	0x3fe00000
   d8058:	fff00000 	.word	0xfff00000
   d805c:	2003e3b8 	.word	0x2003e3b8
   d8060:	000da05c 	.word	0x000da05c
   d8064:	00000000 	.word	0x00000000

000d8068 <__ieee754_pow>:
   d8068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d806c:	ec57 6b11 	vmov	r6, r7, d1
   d8070:	ed2d 8b0a 	vpush	{d8-d12}
   d8074:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d8078:	ea5a 0206 	orrs.w	r2, sl, r6
   d807c:	b089      	sub	sp, #36	; 0x24
   d807e:	d03d      	beq.n	d80fc <__ieee754_pow+0x94>
   d8080:	ec55 4b10 	vmov	r4, r5, d0
   d8084:	4976      	ldr	r1, [pc, #472]	; (d8260 <__ieee754_pow+0x1f8>)
   d8086:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d808a:	4588      	cmp	r8, r1
   d808c:	ee10 2a10 	vmov	r2, s0
   d8090:	46a9      	mov	r9, r5
   d8092:	dc2c      	bgt.n	d80ee <__ieee754_pow+0x86>
   d8094:	ee11 3a10 	vmov	r3, s2
   d8098:	46bb      	mov	fp, r7
   d809a:	d03a      	beq.n	d8112 <__ieee754_pow+0xaa>
   d809c:	458a      	cmp	sl, r1
   d809e:	dc26      	bgt.n	d80ee <__ieee754_pow+0x86>
   d80a0:	496f      	ldr	r1, [pc, #444]	; (d8260 <__ieee754_pow+0x1f8>)
   d80a2:	458a      	cmp	sl, r1
   d80a4:	d021      	beq.n	d80ea <__ieee754_pow+0x82>
   d80a6:	f1b9 0f00 	cmp.w	r9, #0
   d80aa:	db3d      	blt.n	d8128 <__ieee754_pow+0xc0>
   d80ac:	2100      	movs	r1, #0
   d80ae:	9103      	str	r1, [sp, #12]
   d80b0:	2b00      	cmp	r3, #0
   d80b2:	d155      	bne.n	d8160 <__ieee754_pow+0xf8>
   d80b4:	4b6a      	ldr	r3, [pc, #424]	; (d8260 <__ieee754_pow+0x1f8>)
   d80b6:	459a      	cmp	sl, r3
   d80b8:	f000 80a8 	beq.w	d820c <__ieee754_pow+0x1a4>
   d80bc:	4b69      	ldr	r3, [pc, #420]	; (d8264 <__ieee754_pow+0x1fc>)
   d80be:	459a      	cmp	sl, r3
   d80c0:	f000 80b6 	beq.w	d8230 <__ieee754_pow+0x1c8>
   d80c4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d80c8:	f000 8501 	beq.w	d8ace <__ieee754_pow+0xa66>
   d80cc:	4b66      	ldr	r3, [pc, #408]	; (d8268 <__ieee754_pow+0x200>)
   d80ce:	459b      	cmp	fp, r3
   d80d0:	d146      	bne.n	d8160 <__ieee754_pow+0xf8>
   d80d2:	f1b9 0f00 	cmp.w	r9, #0
   d80d6:	db43      	blt.n	d8160 <__ieee754_pow+0xf8>
   d80d8:	ec45 4b10 	vmov	d0, r4, r5
   d80dc:	b009      	add	sp, #36	; 0x24
   d80de:	ecbd 8b0a 	vpop	{d8-d12}
   d80e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d80e6:	f000 bd99 	b.w	d8c1c <__ieee754_sqrt>
   d80ea:	2b00      	cmp	r3, #0
   d80ec:	d0db      	beq.n	d80a6 <__ieee754_pow+0x3e>
   d80ee:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d80f2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d80f6:	ea58 0302 	orrs.w	r3, r8, r2
   d80fa:	d10d      	bne.n	d8118 <__ieee754_pow+0xb0>
   d80fc:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8250 <__ieee754_pow+0x1e8>
   d8100:	ed8d 7b00 	vstr	d7, [sp]
   d8104:	ed9d 0b00 	vldr	d0, [sp]
   d8108:	b009      	add	sp, #36	; 0x24
   d810a:	ecbd 8b0a 	vpop	{d8-d12}
   d810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8112:	b90c      	cbnz	r4, d8118 <__ieee754_pow+0xb0>
   d8114:	45c2      	cmp	sl, r8
   d8116:	ddc3      	ble.n	d80a0 <__ieee754_pow+0x38>
   d8118:	4854      	ldr	r0, [pc, #336]	; (d826c <__ieee754_pow+0x204>)
   d811a:	b009      	add	sp, #36	; 0x24
   d811c:	ecbd 8b0a 	vpop	{d8-d12}
   d8120:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8124:	f000 be58 	b.w	d8dd8 <nan>
   d8128:	4951      	ldr	r1, [pc, #324]	; (d8270 <__ieee754_pow+0x208>)
   d812a:	458a      	cmp	sl, r1
   d812c:	f300 8087 	bgt.w	d823e <__ieee754_pow+0x1d6>
   d8130:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d8134:	458a      	cmp	sl, r1
   d8136:	dd0f      	ble.n	d8158 <__ieee754_pow+0xf0>
   d8138:	ea4f 512a 	mov.w	r1, sl, asr #20
   d813c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d8140:	2914      	cmp	r1, #20
   d8142:	f340 84ce 	ble.w	d8ae2 <__ieee754_pow+0xa7a>
   d8146:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d814a:	fa23 f001 	lsr.w	r0, r3, r1
   d814e:	fa00 f101 	lsl.w	r1, r0, r1
   d8152:	4299      	cmp	r1, r3
   d8154:	f000 8520 	beq.w	d8b98 <__ieee754_pow+0xb30>
   d8158:	2100      	movs	r1, #0
   d815a:	9103      	str	r1, [sp, #12]
   d815c:	2b00      	cmp	r3, #0
   d815e:	d0ad      	beq.n	d80bc <__ieee754_pow+0x54>
   d8160:	ec45 4b10 	vmov	d0, r4, r5
   d8164:	9206      	str	r2, [sp, #24]
   d8166:	f000 fe1d 	bl	d8da4 <fabs>
   d816a:	9a06      	ldr	r2, [sp, #24]
   d816c:	ed8d 0b00 	vstr	d0, [sp]
   d8170:	bb5a      	cbnz	r2, d81ca <__ieee754_pow+0x162>
   d8172:	f1b8 0f00 	cmp.w	r8, #0
   d8176:	d004      	beq.n	d8182 <__ieee754_pow+0x11a>
   d8178:	4b3a      	ldr	r3, [pc, #232]	; (d8264 <__ieee754_pow+0x1fc>)
   d817a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d817e:	429a      	cmp	r2, r3
   d8180:	d123      	bne.n	d81ca <__ieee754_pow+0x162>
   d8182:	f1bb 0f00 	cmp.w	fp, #0
   d8186:	da07      	bge.n	d8198 <__ieee754_pow+0x130>
   d8188:	e9dd 2300 	ldrd	r2, r3, [sp]
   d818c:	4935      	ldr	r1, [pc, #212]	; (d8264 <__ieee754_pow+0x1fc>)
   d818e:	2000      	movs	r0, #0
   d8190:	f001 fa36 	bl	d9600 <__aeabi_ddiv>
   d8194:	e9cd 0100 	strd	r0, r1, [sp]
   d8198:	f1b9 0f00 	cmp.w	r9, #0
   d819c:	dab2      	bge.n	d8104 <__ieee754_pow+0x9c>
   d819e:	9b03      	ldr	r3, [sp, #12]
   d81a0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d81a4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d81a8:	ea58 0303 	orrs.w	r3, r8, r3
   d81ac:	f040 84be 	bne.w	d8b2c <__ieee754_pow+0xac4>
   d81b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d81b4:	4610      	mov	r0, r2
   d81b6:	4619      	mov	r1, r3
   d81b8:	f000 ff40 	bl	d903c <__aeabi_dsub>
   d81bc:	4602      	mov	r2, r0
   d81be:	460b      	mov	r3, r1
   d81c0:	f001 fa1e 	bl	d9600 <__aeabi_ddiv>
   d81c4:	e9cd 0100 	strd	r0, r1, [sp]
   d81c8:	e79c      	b.n	d8104 <__ieee754_pow+0x9c>
   d81ca:	9a03      	ldr	r2, [sp, #12]
   d81cc:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d81d0:	3b01      	subs	r3, #1
   d81d2:	9306      	str	r3, [sp, #24]
   d81d4:	4313      	orrs	r3, r2
   d81d6:	d035      	beq.n	d8244 <__ieee754_pow+0x1dc>
   d81d8:	4b26      	ldr	r3, [pc, #152]	; (d8274 <__ieee754_pow+0x20c>)
   d81da:	459a      	cmp	sl, r3
   d81dc:	dd4e      	ble.n	d827c <__ieee754_pow+0x214>
   d81de:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d81e2:	459a      	cmp	sl, r3
   d81e4:	4b24      	ldr	r3, [pc, #144]	; (d8278 <__ieee754_pow+0x210>)
   d81e6:	f340 83ed 	ble.w	d89c4 <__ieee754_pow+0x95c>
   d81ea:	4598      	cmp	r8, r3
   d81ec:	f340 836b 	ble.w	d88c6 <__ieee754_pow+0x85e>
   d81f0:	f1bb 0f00 	cmp.w	fp, #0
   d81f4:	f340 836b 	ble.w	d88ce <__ieee754_pow+0x866>
   d81f8:	a317      	add	r3, pc, #92	; (adr r3, d8258 <__ieee754_pow+0x1f0>)
   d81fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d81fe:	4610      	mov	r0, r2
   d8200:	4619      	mov	r1, r3
   d8202:	f001 f8d3 	bl	d93ac <__aeabi_dmul>
   d8206:	e9cd 0100 	strd	r0, r1, [sp]
   d820a:	e77b      	b.n	d8104 <__ieee754_pow+0x9c>
   d820c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8210:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8214:	4313      	orrs	r3, r2
   d8216:	f43f af71 	beq.w	d80fc <__ieee754_pow+0x94>
   d821a:	4b17      	ldr	r3, [pc, #92]	; (d8278 <__ieee754_pow+0x210>)
   d821c:	4598      	cmp	r8, r3
   d821e:	f340 8388 	ble.w	d8932 <__ieee754_pow+0x8ca>
   d8222:	f1bb 0f00 	cmp.w	fp, #0
   d8226:	f2c0 8352 	blt.w	d88ce <__ieee754_pow+0x866>
   d822a:	e9cd 6700 	strd	r6, r7, [sp]
   d822e:	e769      	b.n	d8104 <__ieee754_pow+0x9c>
   d8230:	f1bb 0f00 	cmp.w	fp, #0
   d8234:	f2c0 8441 	blt.w	d8aba <__ieee754_pow+0xa52>
   d8238:	e9cd 4500 	strd	r4, r5, [sp]
   d823c:	e762      	b.n	d8104 <__ieee754_pow+0x9c>
   d823e:	2102      	movs	r1, #2
   d8240:	9103      	str	r1, [sp, #12]
   d8242:	e735      	b.n	d80b0 <__ieee754_pow+0x48>
   d8244:	4622      	mov	r2, r4
   d8246:	462b      	mov	r3, r5
   d8248:	e7b4      	b.n	d81b4 <__ieee754_pow+0x14c>
   d824a:	bf00      	nop
   d824c:	f3af 8000 	nop.w
   d8250:	00000000 	.word	0x00000000
   d8254:	3ff00000 	.word	0x3ff00000
   d8258:	8800759c 	.word	0x8800759c
   d825c:	7e37e43c 	.word	0x7e37e43c
   d8260:	7ff00000 	.word	0x7ff00000
   d8264:	3ff00000 	.word	0x3ff00000
   d8268:	3fe00000 	.word	0x3fe00000
   d826c:	000da060 	.word	0x000da060
   d8270:	433fffff 	.word	0x433fffff
   d8274:	41e00000 	.word	0x41e00000
   d8278:	3fefffff 	.word	0x3fefffff
   d827c:	4be4      	ldr	r3, [pc, #912]	; (d8610 <__ieee754_pow+0x5a8>)
   d827e:	ea09 0303 	and.w	r3, r9, r3
   d8282:	2b00      	cmp	r3, #0
   d8284:	f040 8416 	bne.w	d8ab4 <__ieee754_pow+0xa4c>
   d8288:	e9dd 0100 	ldrd	r0, r1, [sp]
   d828c:	4be1      	ldr	r3, [pc, #900]	; (d8614 <__ieee754_pow+0x5ac>)
   d828e:	2200      	movs	r2, #0
   d8290:	f001 f88c 	bl	d93ac <__aeabi_dmul>
   d8294:	e9cd 0100 	strd	r0, r1, [sp]
   d8298:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d829c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d82a0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d82a4:	49dc      	ldr	r1, [pc, #880]	; (d8618 <__ieee754_pow+0x5b0>)
   d82a6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d82aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d82ae:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d82b2:	1818      	adds	r0, r3, r0
   d82b4:	428a      	cmp	r2, r1
   d82b6:	9007      	str	r0, [sp, #28]
   d82b8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d82bc:	f340 83e9 	ble.w	d8a92 <__ieee754_pow+0xa2a>
   d82c0:	4bd6      	ldr	r3, [pc, #856]	; (d861c <__ieee754_pow+0x5b4>)
   d82c2:	429a      	cmp	r2, r3
   d82c4:	f340 843e 	ble.w	d8b44 <__ieee754_pow+0xadc>
   d82c8:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d85b8 <__ieee754_pow+0x550>
   d82cc:	eeb0 ba47 	vmov.f32	s22, s14
   d82d0:	eef0 ba67 	vmov.f32	s23, s15
   d82d4:	eeb0 ca47 	vmov.f32	s24, s14
   d82d8:	eef0 ca67 	vmov.f32	s25, s15
   d82dc:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d85c0 <__ieee754_pow+0x558>
   d82e0:	3001      	adds	r0, #1
   d82e2:	ec54 3b17 	vmov	r3, r4, d7
   d82e6:	9007      	str	r0, [sp, #28]
   d82e8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d82ec:	f04f 0900 	mov.w	r9, #0
   d82f0:	e9dd ab00 	ldrd	sl, fp, [sp]
   d82f4:	ec44 3b18 	vmov	d8, r3, r4
   d82f8:	461a      	mov	r2, r3
   d82fa:	4650      	mov	r0, sl
   d82fc:	4623      	mov	r3, r4
   d82fe:	4641      	mov	r1, r8
   d8300:	f000 fe9c 	bl	d903c <__aeabi_dsub>
   d8304:	ec53 2b18 	vmov	r2, r3, d8
   d8308:	4604      	mov	r4, r0
   d830a:	460d      	mov	r5, r1
   d830c:	4650      	mov	r0, sl
   d830e:	4641      	mov	r1, r8
   d8310:	f000 fe96 	bl	d9040 <__adddf3>
   d8314:	4602      	mov	r2, r0
   d8316:	460b      	mov	r3, r1
   d8318:	2000      	movs	r0, #0
   d831a:	49c1      	ldr	r1, [pc, #772]	; (d8620 <__ieee754_pow+0x5b8>)
   d831c:	f001 f970 	bl	d9600 <__aeabi_ddiv>
   d8320:	ec45 4b1a 	vmov	d10, r4, r5
   d8324:	ec41 0b19 	vmov	d9, r0, r1
   d8328:	ec51 0b1a 	vmov	r0, r1, d10
   d832c:	ec53 2b19 	vmov	r2, r3, d9
   d8330:	f001 f83c 	bl	d93ac <__aeabi_dmul>
   d8334:	46c3      	mov	fp, r8
   d8336:	ea4f 0868 	mov.w	r8, r8, asr #1
   d833a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d833e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d8342:	eb03 0509 	add.w	r5, r3, r9
   d8346:	460a      	mov	r2, r1
   d8348:	2300      	movs	r3, #0
   d834a:	4601      	mov	r1, r0
   d834c:	e9cd 1200 	strd	r1, r2, [sp]
   d8350:	9300      	str	r3, [sp, #0]
   d8352:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8356:	2400      	movs	r4, #0
   d8358:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d835c:	462b      	mov	r3, r5
   d835e:	4622      	mov	r2, r4
   d8360:	4640      	mov	r0, r8
   d8362:	4649      	mov	r1, r9
   d8364:	f001 f822 	bl	d93ac <__aeabi_dmul>
   d8368:	4602      	mov	r2, r0
   d836a:	460b      	mov	r3, r1
   d836c:	ec51 0b1a 	vmov	r0, r1, d10
   d8370:	f000 fe64 	bl	d903c <__aeabi_dsub>
   d8374:	ec41 0b17 	vmov	d7, r0, r1
   d8378:	ec53 2b18 	vmov	r2, r3, d8
   d837c:	4620      	mov	r0, r4
   d837e:	4629      	mov	r1, r5
   d8380:	ec55 4b17 	vmov	r4, r5, d7
   d8384:	f000 fe5a 	bl	d903c <__aeabi_dsub>
   d8388:	4602      	mov	r2, r0
   d838a:	460b      	mov	r3, r1
   d838c:	4650      	mov	r0, sl
   d838e:	4659      	mov	r1, fp
   d8390:	f000 fe54 	bl	d903c <__aeabi_dsub>
   d8394:	4642      	mov	r2, r8
   d8396:	464b      	mov	r3, r9
   d8398:	f001 f808 	bl	d93ac <__aeabi_dmul>
   d839c:	4602      	mov	r2, r0
   d839e:	460b      	mov	r3, r1
   d83a0:	4620      	mov	r0, r4
   d83a2:	4629      	mov	r1, r5
   d83a4:	f000 fe4a 	bl	d903c <__aeabi_dsub>
   d83a8:	ec53 2b19 	vmov	r2, r3, d9
   d83ac:	f000 fffe 	bl	d93ac <__aeabi_dmul>
   d83b0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d83b4:	4604      	mov	r4, r0
   d83b6:	460d      	mov	r5, r1
   d83b8:	4652      	mov	r2, sl
   d83ba:	465b      	mov	r3, fp
   d83bc:	4650      	mov	r0, sl
   d83be:	4659      	mov	r1, fp
   d83c0:	f000 fff4 	bl	d93ac <__aeabi_dmul>
   d83c4:	a380      	add	r3, pc, #512	; (adr r3, d85c8 <__ieee754_pow+0x560>)
   d83c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83ca:	ec45 4b1a 	vmov	d10, r4, r5
   d83ce:	4604      	mov	r4, r0
   d83d0:	460d      	mov	r5, r1
   d83d2:	f000 ffeb 	bl	d93ac <__aeabi_dmul>
   d83d6:	a37e      	add	r3, pc, #504	; (adr r3, d85d0 <__ieee754_pow+0x568>)
   d83d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83dc:	f000 fe30 	bl	d9040 <__adddf3>
   d83e0:	4622      	mov	r2, r4
   d83e2:	462b      	mov	r3, r5
   d83e4:	f000 ffe2 	bl	d93ac <__aeabi_dmul>
   d83e8:	a37b      	add	r3, pc, #492	; (adr r3, d85d8 <__ieee754_pow+0x570>)
   d83ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d83ee:	f000 fe27 	bl	d9040 <__adddf3>
   d83f2:	4622      	mov	r2, r4
   d83f4:	462b      	mov	r3, r5
   d83f6:	f000 ffd9 	bl	d93ac <__aeabi_dmul>
   d83fa:	a379      	add	r3, pc, #484	; (adr r3, d85e0 <__ieee754_pow+0x578>)
   d83fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8400:	f000 fe1e 	bl	d9040 <__adddf3>
   d8404:	4622      	mov	r2, r4
   d8406:	462b      	mov	r3, r5
   d8408:	f000 ffd0 	bl	d93ac <__aeabi_dmul>
   d840c:	a376      	add	r3, pc, #472	; (adr r3, d85e8 <__ieee754_pow+0x580>)
   d840e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8412:	f000 fe15 	bl	d9040 <__adddf3>
   d8416:	4622      	mov	r2, r4
   d8418:	462b      	mov	r3, r5
   d841a:	f000 ffc7 	bl	d93ac <__aeabi_dmul>
   d841e:	a374      	add	r3, pc, #464	; (adr r3, d85f0 <__ieee754_pow+0x588>)
   d8420:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8424:	f000 fe0c 	bl	d9040 <__adddf3>
   d8428:	4622      	mov	r2, r4
   d842a:	462b      	mov	r3, r5
   d842c:	4604      	mov	r4, r0
   d842e:	460d      	mov	r5, r1
   d8430:	4610      	mov	r0, r2
   d8432:	4619      	mov	r1, r3
   d8434:	f000 ffba 	bl	d93ac <__aeabi_dmul>
   d8438:	4602      	mov	r2, r0
   d843a:	460b      	mov	r3, r1
   d843c:	4620      	mov	r0, r4
   d843e:	4629      	mov	r1, r5
   d8440:	f000 ffb4 	bl	d93ac <__aeabi_dmul>
   d8444:	4642      	mov	r2, r8
   d8446:	4604      	mov	r4, r0
   d8448:	460d      	mov	r5, r1
   d844a:	464b      	mov	r3, r9
   d844c:	4650      	mov	r0, sl
   d844e:	4659      	mov	r1, fp
   d8450:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d8454:	f000 fdf4 	bl	d9040 <__adddf3>
   d8458:	ec53 2b1a 	vmov	r2, r3, d10
   d845c:	f000 ffa6 	bl	d93ac <__aeabi_dmul>
   d8460:	4622      	mov	r2, r4
   d8462:	462b      	mov	r3, r5
   d8464:	f000 fdec 	bl	d9040 <__adddf3>
   d8468:	4642      	mov	r2, r8
   d846a:	4604      	mov	r4, r0
   d846c:	460d      	mov	r5, r1
   d846e:	464b      	mov	r3, r9
   d8470:	4640      	mov	r0, r8
   d8472:	4649      	mov	r1, r9
   d8474:	f000 ff9a 	bl	d93ac <__aeabi_dmul>
   d8478:	ec45 4b19 	vmov	d9, r4, r5
   d847c:	4b69      	ldr	r3, [pc, #420]	; (d8624 <__ieee754_pow+0x5bc>)
   d847e:	2200      	movs	r2, #0
   d8480:	4682      	mov	sl, r0
   d8482:	468b      	mov	fp, r1
   d8484:	f000 fddc 	bl	d9040 <__adddf3>
   d8488:	ec53 2b19 	vmov	r2, r3, d9
   d848c:	f000 fdd8 	bl	d9040 <__adddf3>
   d8490:	9c00      	ldr	r4, [sp, #0]
   d8492:	460d      	mov	r5, r1
   d8494:	4622      	mov	r2, r4
   d8496:	462b      	mov	r3, r5
   d8498:	4640      	mov	r0, r8
   d849a:	4649      	mov	r1, r9
   d849c:	f000 ff86 	bl	d93ac <__aeabi_dmul>
   d84a0:	4b60      	ldr	r3, [pc, #384]	; (d8624 <__ieee754_pow+0x5bc>)
   d84a2:	4680      	mov	r8, r0
   d84a4:	4689      	mov	r9, r1
   d84a6:	2200      	movs	r2, #0
   d84a8:	4620      	mov	r0, r4
   d84aa:	4629      	mov	r1, r5
   d84ac:	f000 fdc6 	bl	d903c <__aeabi_dsub>
   d84b0:	4652      	mov	r2, sl
   d84b2:	465b      	mov	r3, fp
   d84b4:	f000 fdc2 	bl	d903c <__aeabi_dsub>
   d84b8:	4602      	mov	r2, r0
   d84ba:	460b      	mov	r3, r1
   d84bc:	ec51 0b19 	vmov	r0, r1, d9
   d84c0:	f000 fdbc 	bl	d903c <__aeabi_dsub>
   d84c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d84c8:	f000 ff70 	bl	d93ac <__aeabi_dmul>
   d84cc:	ec49 8b18 	vmov	d8, r8, r9
   d84d0:	4622      	mov	r2, r4
   d84d2:	4680      	mov	r8, r0
   d84d4:	4689      	mov	r9, r1
   d84d6:	462b      	mov	r3, r5
   d84d8:	ec51 0b1a 	vmov	r0, r1, d10
   d84dc:	f000 ff66 	bl	d93ac <__aeabi_dmul>
   d84e0:	4602      	mov	r2, r0
   d84e2:	460b      	mov	r3, r1
   d84e4:	4640      	mov	r0, r8
   d84e6:	4649      	mov	r1, r9
   d84e8:	f000 fdaa 	bl	d9040 <__adddf3>
   d84ec:	4682      	mov	sl, r0
   d84ee:	468b      	mov	fp, r1
   d84f0:	4652      	mov	r2, sl
   d84f2:	465b      	mov	r3, fp
   d84f4:	ec51 0b18 	vmov	r0, r1, d8
   d84f8:	f000 fda2 	bl	d9040 <__adddf3>
   d84fc:	9c00      	ldr	r4, [sp, #0]
   d84fe:	a33e      	add	r3, pc, #248	; (adr r3, d85f8 <__ieee754_pow+0x590>)
   d8500:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8504:	4620      	mov	r0, r4
   d8506:	460d      	mov	r5, r1
   d8508:	f000 ff50 	bl	d93ac <__aeabi_dmul>
   d850c:	ec53 2b18 	vmov	r2, r3, d8
   d8510:	4680      	mov	r8, r0
   d8512:	4689      	mov	r9, r1
   d8514:	4620      	mov	r0, r4
   d8516:	4629      	mov	r1, r5
   d8518:	f000 fd90 	bl	d903c <__aeabi_dsub>
   d851c:	4602      	mov	r2, r0
   d851e:	460b      	mov	r3, r1
   d8520:	4650      	mov	r0, sl
   d8522:	4659      	mov	r1, fp
   d8524:	f000 fd8a 	bl	d903c <__aeabi_dsub>
   d8528:	a335      	add	r3, pc, #212	; (adr r3, d8600 <__ieee754_pow+0x598>)
   d852a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d852e:	f000 ff3d 	bl	d93ac <__aeabi_dmul>
   d8532:	ec49 8b19 	vmov	d9, r8, r9
   d8536:	a334      	add	r3, pc, #208	; (adr r3, d8608 <__ieee754_pow+0x5a0>)
   d8538:	e9d3 2300 	ldrd	r2, r3, [r3]
   d853c:	4680      	mov	r8, r0
   d853e:	4689      	mov	r9, r1
   d8540:	4620      	mov	r0, r4
   d8542:	4629      	mov	r1, r5
   d8544:	f000 ff32 	bl	d93ac <__aeabi_dmul>
   d8548:	4602      	mov	r2, r0
   d854a:	460b      	mov	r3, r1
   d854c:	4640      	mov	r0, r8
   d854e:	4649      	mov	r1, r9
   d8550:	f000 fd76 	bl	d9040 <__adddf3>
   d8554:	ec53 2b1c 	vmov	r2, r3, d12
   d8558:	f000 fd72 	bl	d9040 <__adddf3>
   d855c:	4682      	mov	sl, r0
   d855e:	9807      	ldr	r0, [sp, #28]
   d8560:	468b      	mov	fp, r1
   d8562:	f000 feb9 	bl	d92d8 <__aeabi_i2d>
   d8566:	4652      	mov	r2, sl
   d8568:	4680      	mov	r8, r0
   d856a:	4689      	mov	r9, r1
   d856c:	465b      	mov	r3, fp
   d856e:	ec51 0b19 	vmov	r0, r1, d9
   d8572:	f000 fd65 	bl	d9040 <__adddf3>
   d8576:	ec53 2b1b 	vmov	r2, r3, d11
   d857a:	f000 fd61 	bl	d9040 <__adddf3>
   d857e:	4642      	mov	r2, r8
   d8580:	464b      	mov	r3, r9
   d8582:	f000 fd5d 	bl	d9040 <__adddf3>
   d8586:	9c00      	ldr	r4, [sp, #0]
   d8588:	4642      	mov	r2, r8
   d858a:	464b      	mov	r3, r9
   d858c:	4620      	mov	r0, r4
   d858e:	460d      	mov	r5, r1
   d8590:	f000 fd54 	bl	d903c <__aeabi_dsub>
   d8594:	ec53 2b1b 	vmov	r2, r3, d11
   d8598:	f000 fd50 	bl	d903c <__aeabi_dsub>
   d859c:	ec53 2b19 	vmov	r2, r3, d9
   d85a0:	f000 fd4c 	bl	d903c <__aeabi_dsub>
   d85a4:	4602      	mov	r2, r0
   d85a6:	460b      	mov	r3, r1
   d85a8:	4650      	mov	r0, sl
   d85aa:	4659      	mov	r1, fp
   d85ac:	f000 fd46 	bl	d903c <__aeabi_dsub>
   d85b0:	4682      	mov	sl, r0
   d85b2:	468b      	mov	fp, r1
   d85b4:	e038      	b.n	d8628 <__ieee754_pow+0x5c0>
   d85b6:	bf00      	nop
	...
   d85c4:	3ff00000 	.word	0x3ff00000
   d85c8:	4a454eef 	.word	0x4a454eef
   d85cc:	3fca7e28 	.word	0x3fca7e28
   d85d0:	93c9db65 	.word	0x93c9db65
   d85d4:	3fcd864a 	.word	0x3fcd864a
   d85d8:	a91d4101 	.word	0xa91d4101
   d85dc:	3fd17460 	.word	0x3fd17460
   d85e0:	518f264d 	.word	0x518f264d
   d85e4:	3fd55555 	.word	0x3fd55555
   d85e8:	db6fabff 	.word	0xdb6fabff
   d85ec:	3fdb6db6 	.word	0x3fdb6db6
   d85f0:	33333303 	.word	0x33333303
   d85f4:	3fe33333 	.word	0x3fe33333
   d85f8:	e0000000 	.word	0xe0000000
   d85fc:	3feec709 	.word	0x3feec709
   d8600:	dc3a03fd 	.word	0xdc3a03fd
   d8604:	3feec709 	.word	0x3feec709
   d8608:	145b01f5 	.word	0x145b01f5
   d860c:	be3e2fe0 	.word	0xbe3e2fe0
   d8610:	7ff00000 	.word	0x7ff00000
   d8614:	43400000 	.word	0x43400000
   d8618:	0003988e 	.word	0x0003988e
   d861c:	000bb679 	.word	0x000bb679
   d8620:	3ff00000 	.word	0x3ff00000
   d8624:	40080000 	.word	0x40080000
   d8628:	9b03      	ldr	r3, [sp, #12]
   d862a:	9a06      	ldr	r2, [sp, #24]
   d862c:	3b01      	subs	r3, #1
   d862e:	4313      	orrs	r3, r2
   d8630:	f040 8178 	bne.w	d8924 <__ieee754_pow+0x8bc>
   d8634:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d8948 <__ieee754_pow+0x8e0>
   d8638:	eeb0 9a47 	vmov.f32	s18, s14
   d863c:	eef0 9a67 	vmov.f32	s19, s15
   d8640:	2300      	movs	r3, #0
   d8642:	e9cd 6700 	strd	r6, r7, [sp]
   d8646:	9300      	str	r3, [sp, #0]
   d8648:	e9dd 8900 	ldrd	r8, r9, [sp]
   d864c:	4630      	mov	r0, r6
   d864e:	4642      	mov	r2, r8
   d8650:	4639      	mov	r1, r7
   d8652:	464b      	mov	r3, r9
   d8654:	f000 fcf2 	bl	d903c <__aeabi_dsub>
   d8658:	4622      	mov	r2, r4
   d865a:	462b      	mov	r3, r5
   d865c:	f000 fea6 	bl	d93ac <__aeabi_dmul>
   d8660:	4632      	mov	r2, r6
   d8662:	463b      	mov	r3, r7
   d8664:	4606      	mov	r6, r0
   d8666:	460f      	mov	r7, r1
   d8668:	4650      	mov	r0, sl
   d866a:	4659      	mov	r1, fp
   d866c:	f000 fe9e 	bl	d93ac <__aeabi_dmul>
   d8670:	4602      	mov	r2, r0
   d8672:	460b      	mov	r3, r1
   d8674:	4630      	mov	r0, r6
   d8676:	4639      	mov	r1, r7
   d8678:	f000 fce2 	bl	d9040 <__adddf3>
   d867c:	4642      	mov	r2, r8
   d867e:	4682      	mov	sl, r0
   d8680:	468b      	mov	fp, r1
   d8682:	464b      	mov	r3, r9
   d8684:	4620      	mov	r0, r4
   d8686:	4629      	mov	r1, r5
   d8688:	f000 fe90 	bl	d93ac <__aeabi_dmul>
   d868c:	4606      	mov	r6, r0
   d868e:	460f      	mov	r7, r1
   d8690:	463b      	mov	r3, r7
   d8692:	4650      	mov	r0, sl
   d8694:	4659      	mov	r1, fp
   d8696:	4632      	mov	r2, r6
   d8698:	f000 fcd2 	bl	d9040 <__adddf3>
   d869c:	4bc4      	ldr	r3, [pc, #784]	; (d89b0 <__ieee754_pow+0x948>)
   d869e:	4299      	cmp	r1, r3
   d86a0:	4604      	mov	r4, r0
   d86a2:	460d      	mov	r5, r1
   d86a4:	4688      	mov	r8, r1
   d86a6:	f340 8117 	ble.w	d88d8 <__ieee754_pow+0x870>
   d86aa:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d86ae:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d86b2:	4303      	orrs	r3, r0
   d86b4:	f040 822a 	bne.w	d8b0c <__ieee754_pow+0xaa4>
   d86b8:	a3a5      	add	r3, pc, #660	; (adr r3, d8950 <__ieee754_pow+0x8e8>)
   d86ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86be:	4650      	mov	r0, sl
   d86c0:	4659      	mov	r1, fp
   d86c2:	f000 fcbd 	bl	d9040 <__adddf3>
   d86c6:	4632      	mov	r2, r6
   d86c8:	ec41 0b18 	vmov	d8, r0, r1
   d86cc:	463b      	mov	r3, r7
   d86ce:	4620      	mov	r0, r4
   d86d0:	4629      	mov	r1, r5
   d86d2:	f000 fcb3 	bl	d903c <__aeabi_dsub>
   d86d6:	4602      	mov	r2, r0
   d86d8:	460b      	mov	r3, r1
   d86da:	ec51 0b18 	vmov	r0, r1, d8
   d86de:	f001 f8f5 	bl	d98cc <__aeabi_dcmpgt>
   d86e2:	2800      	cmp	r0, #0
   d86e4:	f040 8212 	bne.w	d8b0c <__ieee754_pow+0xaa4>
   d86e8:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d86ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d86f0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d86f4:	fa42 f303 	asr.w	r3, r2, r3
   d86f8:	4443      	add	r3, r8
   d86fa:	49ae      	ldr	r1, [pc, #696]	; (d89b4 <__ieee754_pow+0x94c>)
   d86fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8700:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8704:	fa41 fc02 	asr.w	ip, r1, r2
   d8708:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d870c:	ea23 010c 	bic.w	r1, r3, ip
   d8710:	f1c2 0414 	rsb	r4, r2, #20
   d8714:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d8718:	f1b8 0f00 	cmp.w	r8, #0
   d871c:	460b      	mov	r3, r1
   d871e:	fa45 f104 	asr.w	r1, r5, r4
   d8722:	9103      	str	r1, [sp, #12]
   d8724:	f04f 0000 	mov.w	r0, #0
   d8728:	bfb8      	it	lt
   d872a:	4249      	neglt	r1, r1
   d872c:	4602      	mov	r2, r0
   d872e:	bfb8      	it	lt
   d8730:	9103      	strlt	r1, [sp, #12]
   d8732:	4630      	mov	r0, r6
   d8734:	4639      	mov	r1, r7
   d8736:	f000 fc81 	bl	d903c <__aeabi_dsub>
   d873a:	4606      	mov	r6, r0
   d873c:	460f      	mov	r7, r1
   d873e:	463b      	mov	r3, r7
   d8740:	4650      	mov	r0, sl
   d8742:	4659      	mov	r1, fp
   d8744:	4632      	mov	r2, r6
   d8746:	f000 fc7b 	bl	d9040 <__adddf3>
   d874a:	9b03      	ldr	r3, [sp, #12]
   d874c:	051b      	lsls	r3, r3, #20
   d874e:	9300      	str	r3, [sp, #0]
   d8750:	460d      	mov	r5, r1
   d8752:	2400      	movs	r4, #0
   d8754:	a380      	add	r3, pc, #512	; (adr r3, d8958 <__ieee754_pow+0x8f0>)
   d8756:	e9d3 2300 	ldrd	r2, r3, [r3]
   d875a:	4620      	mov	r0, r4
   d875c:	4629      	mov	r1, r5
   d875e:	f000 fe25 	bl	d93ac <__aeabi_dmul>
   d8762:	4632      	mov	r2, r6
   d8764:	4680      	mov	r8, r0
   d8766:	4689      	mov	r9, r1
   d8768:	463b      	mov	r3, r7
   d876a:	4620      	mov	r0, r4
   d876c:	4629      	mov	r1, r5
   d876e:	f000 fc65 	bl	d903c <__aeabi_dsub>
   d8772:	4602      	mov	r2, r0
   d8774:	460b      	mov	r3, r1
   d8776:	4650      	mov	r0, sl
   d8778:	4659      	mov	r1, fp
   d877a:	f000 fc5f 	bl	d903c <__aeabi_dsub>
   d877e:	a378      	add	r3, pc, #480	; (adr r3, d8960 <__ieee754_pow+0x8f8>)
   d8780:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8784:	f000 fe12 	bl	d93ac <__aeabi_dmul>
   d8788:	a377      	add	r3, pc, #476	; (adr r3, d8968 <__ieee754_pow+0x900>)
   d878a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d878e:	4606      	mov	r6, r0
   d8790:	460f      	mov	r7, r1
   d8792:	4620      	mov	r0, r4
   d8794:	4629      	mov	r1, r5
   d8796:	f000 fe09 	bl	d93ac <__aeabi_dmul>
   d879a:	4602      	mov	r2, r0
   d879c:	460b      	mov	r3, r1
   d879e:	4630      	mov	r0, r6
   d87a0:	4639      	mov	r1, r7
   d87a2:	f000 fc4d 	bl	d9040 <__adddf3>
   d87a6:	4606      	mov	r6, r0
   d87a8:	460f      	mov	r7, r1
   d87aa:	4632      	mov	r2, r6
   d87ac:	463b      	mov	r3, r7
   d87ae:	4640      	mov	r0, r8
   d87b0:	4649      	mov	r1, r9
   d87b2:	f000 fc45 	bl	d9040 <__adddf3>
   d87b6:	4642      	mov	r2, r8
   d87b8:	464b      	mov	r3, r9
   d87ba:	4604      	mov	r4, r0
   d87bc:	460d      	mov	r5, r1
   d87be:	f000 fc3d 	bl	d903c <__aeabi_dsub>
   d87c2:	4602      	mov	r2, r0
   d87c4:	460b      	mov	r3, r1
   d87c6:	4630      	mov	r0, r6
   d87c8:	4639      	mov	r1, r7
   d87ca:	f000 fc37 	bl	d903c <__aeabi_dsub>
   d87ce:	4622      	mov	r2, r4
   d87d0:	4682      	mov	sl, r0
   d87d2:	468b      	mov	fp, r1
   d87d4:	462b      	mov	r3, r5
   d87d6:	4620      	mov	r0, r4
   d87d8:	4629      	mov	r1, r5
   d87da:	f000 fde7 	bl	d93ac <__aeabi_dmul>
   d87de:	a364      	add	r3, pc, #400	; (adr r3, d8970 <__ieee754_pow+0x908>)
   d87e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87e4:	4606      	mov	r6, r0
   d87e6:	460f      	mov	r7, r1
   d87e8:	f000 fde0 	bl	d93ac <__aeabi_dmul>
   d87ec:	a362      	add	r3, pc, #392	; (adr r3, d8978 <__ieee754_pow+0x910>)
   d87ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87f2:	f000 fc23 	bl	d903c <__aeabi_dsub>
   d87f6:	4632      	mov	r2, r6
   d87f8:	463b      	mov	r3, r7
   d87fa:	f000 fdd7 	bl	d93ac <__aeabi_dmul>
   d87fe:	a360      	add	r3, pc, #384	; (adr r3, d8980 <__ieee754_pow+0x918>)
   d8800:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8804:	f000 fc1c 	bl	d9040 <__adddf3>
   d8808:	4632      	mov	r2, r6
   d880a:	463b      	mov	r3, r7
   d880c:	f000 fdce 	bl	d93ac <__aeabi_dmul>
   d8810:	a35d      	add	r3, pc, #372	; (adr r3, d8988 <__ieee754_pow+0x920>)
   d8812:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8816:	f000 fc11 	bl	d903c <__aeabi_dsub>
   d881a:	4632      	mov	r2, r6
   d881c:	463b      	mov	r3, r7
   d881e:	f000 fdc5 	bl	d93ac <__aeabi_dmul>
   d8822:	a35b      	add	r3, pc, #364	; (adr r3, d8990 <__ieee754_pow+0x928>)
   d8824:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8828:	f000 fc0a 	bl	d9040 <__adddf3>
   d882c:	4632      	mov	r2, r6
   d882e:	463b      	mov	r3, r7
   d8830:	f000 fdbc 	bl	d93ac <__aeabi_dmul>
   d8834:	4602      	mov	r2, r0
   d8836:	460b      	mov	r3, r1
   d8838:	4620      	mov	r0, r4
   d883a:	4629      	mov	r1, r5
   d883c:	f000 fbfe 	bl	d903c <__aeabi_dsub>
   d8840:	4606      	mov	r6, r0
   d8842:	460f      	mov	r7, r1
   d8844:	4632      	mov	r2, r6
   d8846:	463b      	mov	r3, r7
   d8848:	4620      	mov	r0, r4
   d884a:	4629      	mov	r1, r5
   d884c:	f000 fdae 	bl	d93ac <__aeabi_dmul>
   d8850:	2200      	movs	r2, #0
   d8852:	4680      	mov	r8, r0
   d8854:	4689      	mov	r9, r1
   d8856:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d885a:	4630      	mov	r0, r6
   d885c:	4639      	mov	r1, r7
   d885e:	f000 fbed 	bl	d903c <__aeabi_dsub>
   d8862:	4602      	mov	r2, r0
   d8864:	460b      	mov	r3, r1
   d8866:	4640      	mov	r0, r8
   d8868:	4649      	mov	r1, r9
   d886a:	f000 fec9 	bl	d9600 <__aeabi_ddiv>
   d886e:	4652      	mov	r2, sl
   d8870:	4606      	mov	r6, r0
   d8872:	460f      	mov	r7, r1
   d8874:	465b      	mov	r3, fp
   d8876:	4620      	mov	r0, r4
   d8878:	4629      	mov	r1, r5
   d887a:	f000 fd97 	bl	d93ac <__aeabi_dmul>
   d887e:	4652      	mov	r2, sl
   d8880:	465b      	mov	r3, fp
   d8882:	f000 fbdd 	bl	d9040 <__adddf3>
   d8886:	4602      	mov	r2, r0
   d8888:	460b      	mov	r3, r1
   d888a:	4630      	mov	r0, r6
   d888c:	4639      	mov	r1, r7
   d888e:	f000 fbd5 	bl	d903c <__aeabi_dsub>
   d8892:	4622      	mov	r2, r4
   d8894:	462b      	mov	r3, r5
   d8896:	f000 fbd1 	bl	d903c <__aeabi_dsub>
   d889a:	4602      	mov	r2, r0
   d889c:	460b      	mov	r3, r1
   d889e:	2000      	movs	r0, #0
   d88a0:	4945      	ldr	r1, [pc, #276]	; (d89b8 <__ieee754_pow+0x950>)
   d88a2:	f000 fbcb 	bl	d903c <__aeabi_dsub>
   d88a6:	460b      	mov	r3, r1
   d88a8:	9900      	ldr	r1, [sp, #0]
   d88aa:	4419      	add	r1, r3
   d88ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d88b0:	4602      	mov	r2, r0
   d88b2:	f2c0 8169 	blt.w	d8b88 <__ieee754_pow+0xb20>
   d88b6:	4610      	mov	r0, r2
   d88b8:	ec53 2b19 	vmov	r2, r3, d9
   d88bc:	f000 fd76 	bl	d93ac <__aeabi_dmul>
   d88c0:	e9cd 0100 	strd	r0, r1, [sp]
   d88c4:	e41e      	b.n	d8104 <__ieee754_pow+0x9c>
   d88c6:	f1bb 0f00 	cmp.w	fp, #0
   d88ca:	f6ff ac95 	blt.w	d81f8 <__ieee754_pow+0x190>
   d88ce:	ed9f 7b32 	vldr	d7, [pc, #200]	; d8998 <__ieee754_pow+0x930>
   d88d2:	ed8d 7b00 	vstr	d7, [sp]
   d88d6:	e415      	b.n	d8104 <__ieee754_pow+0x9c>
   d88d8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d89c0 <__ieee754_pow+0x958>
   d88dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d88e0:	4563      	cmp	r3, ip
   d88e2:	f340 810b 	ble.w	d8afc <__ieee754_pow+0xa94>
   d88e6:	4b35      	ldr	r3, [pc, #212]	; (d89bc <__ieee754_pow+0x954>)
   d88e8:	440b      	add	r3, r1
   d88ea:	4303      	orrs	r3, r0
   d88ec:	d10a      	bne.n	d8904 <__ieee754_pow+0x89c>
   d88ee:	4632      	mov	r2, r6
   d88f0:	463b      	mov	r3, r7
   d88f2:	f000 fba3 	bl	d903c <__aeabi_dsub>
   d88f6:	4652      	mov	r2, sl
   d88f8:	465b      	mov	r3, fp
   d88fa:	f000 ffdd 	bl	d98b8 <__aeabi_dcmpge>
   d88fe:	2800      	cmp	r0, #0
   d8900:	f43f aef2 	beq.w	d86e8 <__ieee754_pow+0x680>
   d8904:	a326      	add	r3, pc, #152	; (adr r3, d89a0 <__ieee754_pow+0x938>)
   d8906:	e9d3 2300 	ldrd	r2, r3, [r3]
   d890a:	ec51 0b19 	vmov	r0, r1, d9
   d890e:	f000 fd4d 	bl	d93ac <__aeabi_dmul>
   d8912:	a323      	add	r3, pc, #140	; (adr r3, d89a0 <__ieee754_pow+0x938>)
   d8914:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8918:	f000 fd48 	bl	d93ac <__aeabi_dmul>
   d891c:	e9cd 0100 	strd	r0, r1, [sp]
   d8920:	f7ff bbf0 	b.w	d8104 <__ieee754_pow+0x9c>
   d8924:	ed9f 7b20 	vldr	d7, [pc, #128]	; d89a8 <__ieee754_pow+0x940>
   d8928:	eeb0 9a47 	vmov.f32	s18, s14
   d892c:	eef0 9a67 	vmov.f32	s19, s15
   d8930:	e686      	b.n	d8640 <__ieee754_pow+0x5d8>
   d8932:	f1bb 0f00 	cmp.w	fp, #0
   d8936:	daca      	bge.n	d88ce <__ieee754_pow+0x866>
   d8938:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d893c:	9600      	str	r6, [sp, #0]
   d893e:	9301      	str	r3, [sp, #4]
   d8940:	f7ff bbe0 	b.w	d8104 <__ieee754_pow+0x9c>
   d8944:	f3af 8000 	nop.w
   d8948:	00000000 	.word	0x00000000
   d894c:	bff00000 	.word	0xbff00000
   d8950:	652b82fe 	.word	0x652b82fe
   d8954:	3c971547 	.word	0x3c971547
   d8958:	00000000 	.word	0x00000000
   d895c:	3fe62e43 	.word	0x3fe62e43
   d8960:	fefa39ef 	.word	0xfefa39ef
   d8964:	3fe62e42 	.word	0x3fe62e42
   d8968:	0ca86c39 	.word	0x0ca86c39
   d896c:	be205c61 	.word	0xbe205c61
   d8970:	72bea4d0 	.word	0x72bea4d0
   d8974:	3e663769 	.word	0x3e663769
   d8978:	c5d26bf1 	.word	0xc5d26bf1
   d897c:	3ebbbd41 	.word	0x3ebbbd41
   d8980:	af25de2c 	.word	0xaf25de2c
   d8984:	3f11566a 	.word	0x3f11566a
   d8988:	16bebd93 	.word	0x16bebd93
   d898c:	3f66c16c 	.word	0x3f66c16c
   d8990:	5555553e 	.word	0x5555553e
   d8994:	3fc55555 	.word	0x3fc55555
	...
   d89a0:	c2f8f359 	.word	0xc2f8f359
   d89a4:	01a56e1f 	.word	0x01a56e1f
   d89a8:	00000000 	.word	0x00000000
   d89ac:	3ff00000 	.word	0x3ff00000
   d89b0:	408fffff 	.word	0x408fffff
   d89b4:	000fffff 	.word	0x000fffff
   d89b8:	3ff00000 	.word	0x3ff00000
   d89bc:	3f6f3400 	.word	0x3f6f3400
   d89c0:	4090cbff 	.word	0x4090cbff
   d89c4:	4598      	cmp	r8, r3
   d89c6:	f6ff af7e 	blt.w	d88c6 <__ieee754_pow+0x85e>
   d89ca:	4b91      	ldr	r3, [pc, #580]	; (d8c10 <__ieee754_pow+0xba8>)
   d89cc:	4598      	cmp	r8, r3
   d89ce:	f73f ac0f 	bgt.w	d81f0 <__ieee754_pow+0x188>
   d89d2:	4b8f      	ldr	r3, [pc, #572]	; (d8c10 <__ieee754_pow+0xba8>)
   d89d4:	2200      	movs	r2, #0
   d89d6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d89da:	f000 fb2f 	bl	d903c <__aeabi_dsub>
   d89de:	a378      	add	r3, pc, #480	; (adr r3, d8bc0 <__ieee754_pow+0xb58>)
   d89e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89e4:	4604      	mov	r4, r0
   d89e6:	460d      	mov	r5, r1
   d89e8:	f000 fce0 	bl	d93ac <__aeabi_dmul>
   d89ec:	a376      	add	r3, pc, #472	; (adr r3, d8bc8 <__ieee754_pow+0xb60>)
   d89ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89f2:	4682      	mov	sl, r0
   d89f4:	468b      	mov	fp, r1
   d89f6:	4620      	mov	r0, r4
   d89f8:	4629      	mov	r1, r5
   d89fa:	f000 fcd7 	bl	d93ac <__aeabi_dmul>
   d89fe:	4b85      	ldr	r3, [pc, #532]	; (d8c14 <__ieee754_pow+0xbac>)
   d8a00:	4680      	mov	r8, r0
   d8a02:	4689      	mov	r9, r1
   d8a04:	2200      	movs	r2, #0
   d8a06:	4620      	mov	r0, r4
   d8a08:	4629      	mov	r1, r5
   d8a0a:	f000 fccf 	bl	d93ac <__aeabi_dmul>
   d8a0e:	4602      	mov	r2, r0
   d8a10:	460b      	mov	r3, r1
   d8a12:	a16f      	add	r1, pc, #444	; (adr r1, d8bd0 <__ieee754_pow+0xb68>)
   d8a14:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8a18:	f000 fb10 	bl	d903c <__aeabi_dsub>
   d8a1c:	4622      	mov	r2, r4
   d8a1e:	462b      	mov	r3, r5
   d8a20:	f000 fcc4 	bl	d93ac <__aeabi_dmul>
   d8a24:	4602      	mov	r2, r0
   d8a26:	460b      	mov	r3, r1
   d8a28:	2000      	movs	r0, #0
   d8a2a:	497b      	ldr	r1, [pc, #492]	; (d8c18 <__ieee754_pow+0xbb0>)
   d8a2c:	f000 fb06 	bl	d903c <__aeabi_dsub>
   d8a30:	4622      	mov	r2, r4
   d8a32:	462b      	mov	r3, r5
   d8a34:	4604      	mov	r4, r0
   d8a36:	460d      	mov	r5, r1
   d8a38:	4610      	mov	r0, r2
   d8a3a:	4619      	mov	r1, r3
   d8a3c:	f000 fcb6 	bl	d93ac <__aeabi_dmul>
   d8a40:	4602      	mov	r2, r0
   d8a42:	460b      	mov	r3, r1
   d8a44:	4620      	mov	r0, r4
   d8a46:	4629      	mov	r1, r5
   d8a48:	f000 fcb0 	bl	d93ac <__aeabi_dmul>
   d8a4c:	a362      	add	r3, pc, #392	; (adr r3, d8bd8 <__ieee754_pow+0xb70>)
   d8a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a52:	f000 fcab 	bl	d93ac <__aeabi_dmul>
   d8a56:	4602      	mov	r2, r0
   d8a58:	460b      	mov	r3, r1
   d8a5a:	4640      	mov	r0, r8
   d8a5c:	4649      	mov	r1, r9
   d8a5e:	f000 faed 	bl	d903c <__aeabi_dsub>
   d8a62:	4680      	mov	r8, r0
   d8a64:	4689      	mov	r9, r1
   d8a66:	4650      	mov	r0, sl
   d8a68:	4659      	mov	r1, fp
   d8a6a:	4642      	mov	r2, r8
   d8a6c:	464b      	mov	r3, r9
   d8a6e:	f000 fae7 	bl	d9040 <__adddf3>
   d8a72:	2400      	movs	r4, #0
   d8a74:	4652      	mov	r2, sl
   d8a76:	465b      	mov	r3, fp
   d8a78:	4620      	mov	r0, r4
   d8a7a:	460d      	mov	r5, r1
   d8a7c:	f000 fade 	bl	d903c <__aeabi_dsub>
   d8a80:	4602      	mov	r2, r0
   d8a82:	460b      	mov	r3, r1
   d8a84:	4640      	mov	r0, r8
   d8a86:	4649      	mov	r1, r9
   d8a88:	f000 fad8 	bl	d903c <__aeabi_dsub>
   d8a8c:	4682      	mov	sl, r0
   d8a8e:	468b      	mov	fp, r1
   d8a90:	e5ca      	b.n	d8628 <__ieee754_pow+0x5c0>
   d8a92:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8be0 <__ieee754_pow+0xb78>
   d8a96:	eeb0 ba47 	vmov.f32	s22, s14
   d8a9a:	eef0 ba67 	vmov.f32	s23, s15
   d8a9e:	eeb0 ca47 	vmov.f32	s24, s14
   d8aa2:	eef0 ca67 	vmov.f32	s25, s15
   d8aa6:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8be8 <__ieee754_pow+0xb80>
   d8aaa:	f04f 0900 	mov.w	r9, #0
   d8aae:	ec54 3b17 	vmov	r3, r4, d7
   d8ab2:	e41d      	b.n	d82f0 <__ieee754_pow+0x288>
   d8ab4:	2000      	movs	r0, #0
   d8ab6:	f7ff bbf3 	b.w	d82a0 <__ieee754_pow+0x238>
   d8aba:	4955      	ldr	r1, [pc, #340]	; (d8c10 <__ieee754_pow+0xba8>)
   d8abc:	4622      	mov	r2, r4
   d8abe:	462b      	mov	r3, r5
   d8ac0:	2000      	movs	r0, #0
   d8ac2:	f000 fd9d 	bl	d9600 <__aeabi_ddiv>
   d8ac6:	e9cd 0100 	strd	r0, r1, [sp]
   d8aca:	f7ff bb1b 	b.w	d8104 <__ieee754_pow+0x9c>
   d8ace:	4622      	mov	r2, r4
   d8ad0:	462b      	mov	r3, r5
   d8ad2:	4620      	mov	r0, r4
   d8ad4:	4629      	mov	r1, r5
   d8ad6:	f000 fc69 	bl	d93ac <__aeabi_dmul>
   d8ada:	e9cd 0100 	strd	r0, r1, [sp]
   d8ade:	f7ff bb11 	b.w	d8104 <__ieee754_pow+0x9c>
   d8ae2:	2b00      	cmp	r3, #0
   d8ae4:	d142      	bne.n	d8b6c <__ieee754_pow+0xb04>
   d8ae6:	f1c1 0114 	rsb	r1, r1, #20
   d8aea:	fa4a f001 	asr.w	r0, sl, r1
   d8aee:	fa00 f101 	lsl.w	r1, r0, r1
   d8af2:	4551      	cmp	r1, sl
   d8af4:	d05a      	beq.n	d8bac <__ieee754_pow+0xb44>
   d8af6:	9303      	str	r3, [sp, #12]
   d8af8:	f7ff bae0 	b.w	d80bc <__ieee754_pow+0x54>
   d8afc:	4a46      	ldr	r2, [pc, #280]	; (d8c18 <__ieee754_pow+0xbb0>)
   d8afe:	4293      	cmp	r3, r2
   d8b00:	dc5b      	bgt.n	d8bba <__ieee754_pow+0xb52>
   d8b02:	e9dd 1200 	ldrd	r1, r2, [sp]
   d8b06:	9100      	str	r1, [sp, #0]
   d8b08:	9103      	str	r1, [sp, #12]
   d8b0a:	e622      	b.n	d8752 <__ieee754_pow+0x6ea>
   d8b0c:	a338      	add	r3, pc, #224	; (adr r3, d8bf0 <__ieee754_pow+0xb88>)
   d8b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b12:	ec51 0b19 	vmov	r0, r1, d9
   d8b16:	f000 fc49 	bl	d93ac <__aeabi_dmul>
   d8b1a:	a335      	add	r3, pc, #212	; (adr r3, d8bf0 <__ieee754_pow+0xb88>)
   d8b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b20:	f000 fc44 	bl	d93ac <__aeabi_dmul>
   d8b24:	e9cd 0100 	strd	r0, r1, [sp]
   d8b28:	f7ff baec 	b.w	d8104 <__ieee754_pow+0x9c>
   d8b2c:	9b03      	ldr	r3, [sp, #12]
   d8b2e:	2b01      	cmp	r3, #1
   d8b30:	f47f aae8 	bne.w	d8104 <__ieee754_pow+0x9c>
   d8b34:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8b38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8b3c:	e9cd 2300 	strd	r2, r3, [sp]
   d8b40:	f7ff bae0 	b.w	d8104 <__ieee754_pow+0x9c>
   d8b44:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d8bf8 <__ieee754_pow+0xb90>
   d8b48:	eeb0 ba47 	vmov.f32	s22, s14
   d8b4c:	eef0 ba67 	vmov.f32	s23, s15
   d8b50:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d8c00 <__ieee754_pow+0xb98>
   d8b54:	eeb0 ca47 	vmov.f32	s24, s14
   d8b58:	eef0 ca67 	vmov.f32	s25, s15
   d8b5c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d8c08 <__ieee754_pow+0xba0>
   d8b60:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d8b64:	ec54 3b17 	vmov	r3, r4, d7
   d8b68:	f7ff bbc2 	b.w	d82f0 <__ieee754_pow+0x288>
   d8b6c:	ec45 4b10 	vmov	d0, r4, r5
   d8b70:	9203      	str	r2, [sp, #12]
   d8b72:	f000 f917 	bl	d8da4 <fabs>
   d8b76:	9a03      	ldr	r2, [sp, #12]
   d8b78:	ed8d 0b00 	vstr	d0, [sp]
   d8b7c:	2a00      	cmp	r2, #0
   d8b7e:	f47f ab61 	bne.w	d8244 <__ieee754_pow+0x1dc>
   d8b82:	9203      	str	r2, [sp, #12]
   d8b84:	f7ff baf5 	b.w	d8172 <__ieee754_pow+0x10a>
   d8b88:	9803      	ldr	r0, [sp, #12]
   d8b8a:	ec43 2b10 	vmov	d0, r2, r3
   d8b8e:	f000 f9bf 	bl	d8f10 <scalbn>
   d8b92:	ec51 0b10 	vmov	r0, r1, d0
   d8b96:	e68f      	b.n	d88b8 <__ieee754_pow+0x850>
   d8b98:	f000 0001 	and.w	r0, r0, #1
   d8b9c:	f1c0 0102 	rsb	r1, r0, #2
   d8ba0:	9103      	str	r1, [sp, #12]
   d8ba2:	2b00      	cmp	r3, #0
   d8ba4:	f43f aa8a 	beq.w	d80bc <__ieee754_pow+0x54>
   d8ba8:	f7ff bada 	b.w	d8160 <__ieee754_pow+0xf8>
   d8bac:	f000 0001 	and.w	r0, r0, #1
   d8bb0:	f1c0 0302 	rsb	r3, r0, #2
   d8bb4:	9303      	str	r3, [sp, #12]
   d8bb6:	f7ff ba81 	b.w	d80bc <__ieee754_pow+0x54>
   d8bba:	151b      	asrs	r3, r3, #20
   d8bbc:	e596      	b.n	d86ec <__ieee754_pow+0x684>
   d8bbe:	bf00      	nop
   d8bc0:	60000000 	.word	0x60000000
   d8bc4:	3ff71547 	.word	0x3ff71547
   d8bc8:	f85ddf44 	.word	0xf85ddf44
   d8bcc:	3e54ae0b 	.word	0x3e54ae0b
   d8bd0:	55555555 	.word	0x55555555
   d8bd4:	3fd55555 	.word	0x3fd55555
   d8bd8:	652b82fe 	.word	0x652b82fe
   d8bdc:	3ff71547 	.word	0x3ff71547
	...
   d8bec:	3ff00000 	.word	0x3ff00000
   d8bf0:	8800759c 	.word	0x8800759c
   d8bf4:	7e37e43c 	.word	0x7e37e43c
   d8bf8:	40000000 	.word	0x40000000
   d8bfc:	3fe2b803 	.word	0x3fe2b803
   d8c00:	43cfd006 	.word	0x43cfd006
   d8c04:	3e4cfdeb 	.word	0x3e4cfdeb
   d8c08:	00000000 	.word	0x00000000
   d8c0c:	3ff80000 	.word	0x3ff80000
   d8c10:	3ff00000 	.word	0x3ff00000
   d8c14:	3fd00000 	.word	0x3fd00000
   d8c18:	3fe00000 	.word	0x3fe00000

000d8c1c <__ieee754_sqrt>:
   d8c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c20:	4a5f      	ldr	r2, [pc, #380]	; (d8da0 <__ieee754_sqrt+0x184>)
   d8c22:	ec57 6b10 	vmov	r6, r7, d0
   d8c26:	43ba      	bics	r2, r7
   d8c28:	f000 8098 	beq.w	d8d5c <__ieee754_sqrt+0x140>
   d8c2c:	2f00      	cmp	r7, #0
   d8c2e:	ee10 4a10 	vmov	r4, s0
   d8c32:	463b      	mov	r3, r7
   d8c34:	dd4e      	ble.n	d8cd4 <__ieee754_sqrt+0xb8>
   d8c36:	1539      	asrs	r1, r7, #20
   d8c38:	d05b      	beq.n	d8cf2 <__ieee754_sqrt+0xd6>
   d8c3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8c3e:	07ca      	lsls	r2, r1, #31
   d8c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8c44:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8c48:	d403      	bmi.n	d8c52 <__ieee754_sqrt+0x36>
   d8c4a:	005b      	lsls	r3, r3, #1
   d8c4c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c50:	0064      	lsls	r4, r4, #1
   d8c52:	0fe2      	lsrs	r2, r4, #31
   d8c54:	f04f 0c00 	mov.w	ip, #0
   d8c58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8c5c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8c60:	0064      	lsls	r4, r4, #1
   d8c62:	4666      	mov	r6, ip
   d8c64:	2516      	movs	r5, #22
   d8c66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8c6a:	18b1      	adds	r1, r6, r2
   d8c6c:	4299      	cmp	r1, r3
   d8c6e:	dc02      	bgt.n	d8c76 <__ieee754_sqrt+0x5a>
   d8c70:	1a5b      	subs	r3, r3, r1
   d8c72:	188e      	adds	r6, r1, r2
   d8c74:	4494      	add	ip, r2
   d8c76:	005b      	lsls	r3, r3, #1
   d8c78:	3d01      	subs	r5, #1
   d8c7a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8c7e:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c82:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8c86:	d1f0      	bne.n	d8c6a <__ieee754_sqrt+0x4e>
   d8c88:	462f      	mov	r7, r5
   d8c8a:	2020      	movs	r0, #32
   d8c8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8c90:	e009      	b.n	d8ca6 <__ieee754_sqrt+0x8a>
   d8c92:	d03e      	beq.n	d8d12 <__ieee754_sqrt+0xf6>
   d8c94:	0fe1      	lsrs	r1, r4, #31
   d8c96:	3801      	subs	r0, #1
   d8c98:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8c9c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8ca0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8ca4:	d03e      	beq.n	d8d24 <__ieee754_sqrt+0x108>
   d8ca6:	42b3      	cmp	r3, r6
   d8ca8:	eb02 0105 	add.w	r1, r2, r5
   d8cac:	ddf1      	ble.n	d8c92 <__ieee754_sqrt+0x76>
   d8cae:	2900      	cmp	r1, #0
   d8cb0:	eb01 0502 	add.w	r5, r1, r2
   d8cb4:	db09      	blt.n	d8cca <__ieee754_sqrt+0xae>
   d8cb6:	46b0      	mov	r8, r6
   d8cb8:	1b9b      	subs	r3, r3, r6
   d8cba:	42a1      	cmp	r1, r4
   d8cbc:	bf88      	it	hi
   d8cbe:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8cc2:	1a64      	subs	r4, r4, r1
   d8cc4:	4417      	add	r7, r2
   d8cc6:	4646      	mov	r6, r8
   d8cc8:	e7e4      	b.n	d8c94 <__ieee754_sqrt+0x78>
   d8cca:	2d00      	cmp	r5, #0
   d8ccc:	dbf3      	blt.n	d8cb6 <__ieee754_sqrt+0x9a>
   d8cce:	f106 0801 	add.w	r8, r6, #1
   d8cd2:	e7f1      	b.n	d8cb8 <__ieee754_sqrt+0x9c>
   d8cd4:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8cd8:	4332      	orrs	r2, r6
   d8cda:	d036      	beq.n	d8d4a <__ieee754_sqrt+0x12e>
   d8cdc:	2f00      	cmp	r7, #0
   d8cde:	d14d      	bne.n	d8d7c <__ieee754_sqrt+0x160>
   d8ce0:	4639      	mov	r1, r7
   d8ce2:	0ae2      	lsrs	r2, r4, #11
   d8ce4:	3915      	subs	r1, #21
   d8ce6:	0564      	lsls	r4, r4, #21
   d8ce8:	4613      	mov	r3, r2
   d8cea:	2a00      	cmp	r2, #0
   d8cec:	d0f9      	beq.n	d8ce2 <__ieee754_sqrt+0xc6>
   d8cee:	02d7      	lsls	r7, r2, #11
   d8cf0:	d451      	bmi.n	d8d96 <__ieee754_sqrt+0x17a>
   d8cf2:	2000      	movs	r0, #0
   d8cf4:	005b      	lsls	r3, r3, #1
   d8cf6:	02de      	lsls	r6, r3, #11
   d8cf8:	4605      	mov	r5, r0
   d8cfa:	f100 0001 	add.w	r0, r0, #1
   d8cfe:	d5f9      	bpl.n	d8cf4 <__ieee754_sqrt+0xd8>
   d8d00:	461a      	mov	r2, r3
   d8d02:	4623      	mov	r3, r4
   d8d04:	4084      	lsls	r4, r0
   d8d06:	f1c0 0020 	rsb	r0, r0, #32
   d8d0a:	40c3      	lsrs	r3, r0
   d8d0c:	4313      	orrs	r3, r2
   d8d0e:	1b49      	subs	r1, r1, r5
   d8d10:	e793      	b.n	d8c3a <__ieee754_sqrt+0x1e>
   d8d12:	42a1      	cmp	r1, r4
   d8d14:	d8be      	bhi.n	d8c94 <__ieee754_sqrt+0x78>
   d8d16:	2900      	cmp	r1, #0
   d8d18:	eb01 0502 	add.w	r5, r1, r2
   d8d1c:	dbd5      	blt.n	d8cca <__ieee754_sqrt+0xae>
   d8d1e:	4698      	mov	r8, r3
   d8d20:	2300      	movs	r3, #0
   d8d22:	e7ce      	b.n	d8cc2 <__ieee754_sqrt+0xa6>
   d8d24:	4323      	orrs	r3, r4
   d8d26:	d112      	bne.n	d8d4e <__ieee754_sqrt+0x132>
   d8d28:	0878      	lsrs	r0, r7, #1
   d8d2a:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8d2e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8d32:	f01c 0f01 	tst.w	ip, #1
   d8d36:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8d3a:	bf18      	it	ne
   d8d3c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8d40:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8d44:	4602      	mov	r2, r0
   d8d46:	ec43 2b10 	vmov	d0, r2, r3
   d8d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d4e:	1c7b      	adds	r3, r7, #1
   d8d50:	bf16      	itet	ne
   d8d52:	1c78      	addne	r0, r7, #1
   d8d54:	f10c 0c01 	addeq.w	ip, ip, #1
   d8d58:	0840      	lsrne	r0, r0, #1
   d8d5a:	e7e6      	b.n	d8d2a <__ieee754_sqrt+0x10e>
   d8d5c:	ee10 2a10 	vmov	r2, s0
   d8d60:	ee10 0a10 	vmov	r0, s0
   d8d64:	463b      	mov	r3, r7
   d8d66:	4639      	mov	r1, r7
   d8d68:	f000 fb20 	bl	d93ac <__aeabi_dmul>
   d8d6c:	4632      	mov	r2, r6
   d8d6e:	463b      	mov	r3, r7
   d8d70:	f000 f966 	bl	d9040 <__adddf3>
   d8d74:	ec41 0b10 	vmov	d0, r0, r1
   d8d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8d7c:	ee10 2a10 	vmov	r2, s0
   d8d80:	4630      	mov	r0, r6
   d8d82:	4639      	mov	r1, r7
   d8d84:	f000 f95a 	bl	d903c <__aeabi_dsub>
   d8d88:	4602      	mov	r2, r0
   d8d8a:	460b      	mov	r3, r1
   d8d8c:	f000 fc38 	bl	d9600 <__aeabi_ddiv>
   d8d90:	ec41 0b10 	vmov	d0, r0, r1
   d8d94:	e7d9      	b.n	d8d4a <__ieee754_sqrt+0x12e>
   d8d96:	4623      	mov	r3, r4
   d8d98:	2020      	movs	r0, #32
   d8d9a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8d9e:	e7b4      	b.n	d8d0a <__ieee754_sqrt+0xee>
   d8da0:	7ff00000 	.word	0x7ff00000

000d8da4 <fabs>:
   d8da4:	ec51 0b10 	vmov	r0, r1, d0
   d8da8:	ee10 2a10 	vmov	r2, s0
   d8dac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8db0:	ec43 2b10 	vmov	d0, r2, r3
   d8db4:	4770      	bx	lr
   d8db6:	bf00      	nop

000d8db8 <finite>:
   d8db8:	b082      	sub	sp, #8
   d8dba:	ed8d 0b00 	vstr	d0, [sp]
   d8dbe:	9801      	ldr	r0, [sp, #4]
   d8dc0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8dc4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8dc8:	0fc0      	lsrs	r0, r0, #31
   d8dca:	b002      	add	sp, #8
   d8dcc:	4770      	bx	lr
   d8dce:	bf00      	nop

000d8dd0 <matherr>:
   d8dd0:	2000      	movs	r0, #0
   d8dd2:	4770      	bx	lr
   d8dd4:	0000      	movs	r0, r0
	...

000d8dd8 <nan>:
   d8dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8de0 <nan+0x8>
   d8ddc:	4770      	bx	lr
   d8dde:	bf00      	nop
   d8de0:	00000000 	.word	0x00000000
   d8de4:	7ff80000 	.word	0x7ff80000

000d8de8 <rint>:
   d8de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8dea:	ec53 2b10 	vmov	r2, r3, d0
   d8dee:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8df2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8df6:	2813      	cmp	r0, #19
   d8df8:	ee10 5a10 	vmov	r5, s0
   d8dfc:	b083      	sub	sp, #12
   d8dfe:	4619      	mov	r1, r3
   d8e00:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8e04:	dc31      	bgt.n	d8e6a <rint+0x82>
   d8e06:	2800      	cmp	r0, #0
   d8e08:	db4c      	blt.n	d8ea4 <rint+0xbc>
   d8e0a:	4e3e      	ldr	r6, [pc, #248]	; (d8f04 <rint+0x11c>)
   d8e0c:	4106      	asrs	r6, r0
   d8e0e:	ea03 0706 	and.w	r7, r3, r6
   d8e12:	4317      	orrs	r7, r2
   d8e14:	d02e      	beq.n	d8e74 <rint+0x8c>
   d8e16:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d8e1a:	431d      	orrs	r5, r3
   d8e1c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8e20:	d00c      	beq.n	d8e3c <rint+0x54>
   d8e22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8e26:	2813      	cmp	r0, #19
   d8e28:	ea21 0606 	bic.w	r6, r1, r6
   d8e2c:	fa43 f100 	asr.w	r1, r3, r0
   d8e30:	ea41 0106 	orr.w	r1, r1, r6
   d8e34:	bf0c      	ite	eq
   d8e36:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8e3a:	2500      	movne	r5, #0
   d8e3c:	4832      	ldr	r0, [pc, #200]	; (d8f08 <rint+0x120>)
   d8e3e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8e42:	462a      	mov	r2, r5
   d8e44:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8e48:	460b      	mov	r3, r1
   d8e4a:	4620      	mov	r0, r4
   d8e4c:	4629      	mov	r1, r5
   d8e4e:	f000 f8f7 	bl	d9040 <__adddf3>
   d8e52:	e9cd 0100 	strd	r0, r1, [sp]
   d8e56:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8e5a:	4622      	mov	r2, r4
   d8e5c:	462b      	mov	r3, r5
   d8e5e:	f000 f8ed 	bl	d903c <__aeabi_dsub>
   d8e62:	ec41 0b10 	vmov	d0, r0, r1
   d8e66:	b003      	add	sp, #12
   d8e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8e6a:	2833      	cmp	r0, #51	; 0x33
   d8e6c:	dd06      	ble.n	d8e7c <rint+0x94>
   d8e6e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8e72:	d040      	beq.n	d8ef6 <rint+0x10e>
   d8e74:	ec43 2b10 	vmov	d0, r2, r3
   d8e78:	b003      	add	sp, #12
   d8e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8e7c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8e84:	40f0      	lsrs	r0, r6
   d8e86:	4202      	tst	r2, r0
   d8e88:	d0f4      	beq.n	d8e74 <rint+0x8c>
   d8e8a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d8e8e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8e92:	d0d3      	beq.n	d8e3c <rint+0x54>
   d8e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d8e98:	ea25 0503 	bic.w	r5, r5, r3
   d8e9c:	fa42 f606 	asr.w	r6, r2, r6
   d8ea0:	4335      	orrs	r5, r6
   d8ea2:	e7cb      	b.n	d8e3c <rint+0x54>
   d8ea4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8ea8:	4310      	orrs	r0, r2
   d8eaa:	d0e3      	beq.n	d8e74 <rint+0x8c>
   d8eac:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8eb0:	4310      	orrs	r0, r2
   d8eb2:	4245      	negs	r5, r0
   d8eb4:	4305      	orrs	r5, r0
   d8eb6:	4814      	ldr	r0, [pc, #80]	; (d8f08 <rint+0x120>)
   d8eb8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8ebc:	e9d0 6700 	ldrd	r6, r7, [r0]
   d8ec0:	0c59      	lsrs	r1, r3, #17
   d8ec2:	0b2d      	lsrs	r5, r5, #12
   d8ec4:	0449      	lsls	r1, r1, #17
   d8ec6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d8eca:	ea45 0301 	orr.w	r3, r5, r1
   d8ece:	4630      	mov	r0, r6
   d8ed0:	4639      	mov	r1, r7
   d8ed2:	f000 f8b5 	bl	d9040 <__adddf3>
   d8ed6:	e9cd 0100 	strd	r0, r1, [sp]
   d8eda:	463b      	mov	r3, r7
   d8edc:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8ee0:	4632      	mov	r2, r6
   d8ee2:	f000 f8ab 	bl	d903c <__aeabi_dsub>
   d8ee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8eea:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d8eee:	ec41 0b10 	vmov	d0, r0, r1
   d8ef2:	b003      	add	sp, #12
   d8ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ef6:	ee10 0a10 	vmov	r0, s0
   d8efa:	f000 f8a1 	bl	d9040 <__adddf3>
   d8efe:	ec41 0b10 	vmov	d0, r0, r1
   d8f02:	e7b9      	b.n	d8e78 <rint+0x90>
   d8f04:	000fffff 	.word	0x000fffff
   d8f08:	000da068 	.word	0x000da068
   d8f0c:	00000000 	.word	0x00000000

000d8f10 <scalbn>:
   d8f10:	b538      	push	{r3, r4, r5, lr}
   d8f12:	ec53 2b10 	vmov	r2, r3, d0
   d8f16:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d8f1a:	461c      	mov	r4, r3
   d8f1c:	4605      	mov	r5, r0
   d8f1e:	bb81      	cbnz	r1, d8f82 <scalbn+0x72>
   d8f20:	ee10 1a10 	vmov	r1, s0
   d8f24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d8f28:	4321      	orrs	r1, r4
   d8f2a:	d029      	beq.n	d8f80 <scalbn+0x70>
   d8f2c:	4619      	mov	r1, r3
   d8f2e:	2200      	movs	r2, #0
   d8f30:	4b3d      	ldr	r3, [pc, #244]	; (d9028 <scalbn+0x118>)
   d8f32:	4c3e      	ldr	r4, [pc, #248]	; (d902c <scalbn+0x11c>)
   d8f34:	ee10 0a10 	vmov	r0, s0
   d8f38:	f000 fa38 	bl	d93ac <__aeabi_dmul>
   d8f3c:	42a5      	cmp	r5, r4
   d8f3e:	4602      	mov	r2, r0
   d8f40:	460b      	mov	r3, r1
   d8f42:	db16      	blt.n	d8f72 <scalbn+0x62>
   d8f44:	460c      	mov	r4, r1
   d8f46:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d8f4a:	3936      	subs	r1, #54	; 0x36
   d8f4c:	4429      	add	r1, r5
   d8f4e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d8f52:	4281      	cmp	r1, r0
   d8f54:	dc21      	bgt.n	d8f9a <scalbn+0x8a>
   d8f56:	2900      	cmp	r1, #0
   d8f58:	dc47      	bgt.n	d8fea <scalbn+0xda>
   d8f5a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d8f5e:	da34      	bge.n	d8fca <scalbn+0xba>
   d8f60:	f24c 3150 	movw	r1, #50000	; 0xc350
   d8f64:	428d      	cmp	r5, r1
   d8f66:	dc18      	bgt.n	d8f9a <scalbn+0x8a>
   d8f68:	2b00      	cmp	r3, #0
   d8f6a:	a127      	add	r1, pc, #156	; (adr r1, d9008 <scalbn+0xf8>)
   d8f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8f70:	db44      	blt.n	d8ffc <scalbn+0xec>
   d8f72:	a325      	add	r3, pc, #148	; (adr r3, d9008 <scalbn+0xf8>)
   d8f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8f78:	f000 fa18 	bl	d93ac <__aeabi_dmul>
   d8f7c:	ec41 0b10 	vmov	d0, r0, r1
   d8f80:	bd38      	pop	{r3, r4, r5, pc}
   d8f82:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d8f86:	4281      	cmp	r1, r0
   d8f88:	d1e0      	bne.n	d8f4c <scalbn+0x3c>
   d8f8a:	ee10 0a10 	vmov	r0, s0
   d8f8e:	4619      	mov	r1, r3
   d8f90:	f000 f856 	bl	d9040 <__adddf3>
   d8f94:	ec41 0b10 	vmov	d0, r0, r1
   d8f98:	bd38      	pop	{r3, r4, r5, pc}
   d8f9a:	2b00      	cmp	r3, #0
   d8f9c:	a11c      	add	r1, pc, #112	; (adr r1, d9010 <scalbn+0x100>)
   d8f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8fa2:	db07      	blt.n	d8fb4 <scalbn+0xa4>
   d8fa4:	a31a      	add	r3, pc, #104	; (adr r3, d9010 <scalbn+0x100>)
   d8fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8faa:	f000 f9ff 	bl	d93ac <__aeabi_dmul>
   d8fae:	ec41 0b10 	vmov	d0, r0, r1
   d8fb2:	bd38      	pop	{r3, r4, r5, pc}
   d8fb4:	a118      	add	r1, pc, #96	; (adr r1, d9018 <scalbn+0x108>)
   d8fb6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8fba:	a315      	add	r3, pc, #84	; (adr r3, d9010 <scalbn+0x100>)
   d8fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8fc0:	f000 f9f4 	bl	d93ac <__aeabi_dmul>
   d8fc4:	ec41 0b10 	vmov	d0, r0, r1
   d8fc8:	e7f3      	b.n	d8fb2 <scalbn+0xa2>
   d8fca:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8fce:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8fd2:	3136      	adds	r1, #54	; 0x36
   d8fd4:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8fd8:	4610      	mov	r0, r2
   d8fda:	4619      	mov	r1, r3
   d8fdc:	2200      	movs	r2, #0
   d8fde:	4b14      	ldr	r3, [pc, #80]	; (d9030 <scalbn+0x120>)
   d8fe0:	f000 f9e4 	bl	d93ac <__aeabi_dmul>
   d8fe4:	ec41 0b10 	vmov	d0, r0, r1
   d8fe8:	bd38      	pop	{r3, r4, r5, pc}
   d8fea:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d8fee:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d8ff2:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d8ff6:	ec43 2b10 	vmov	d0, r2, r3
   d8ffa:	bd38      	pop	{r3, r4, r5, pc}
   d8ffc:	a108      	add	r1, pc, #32	; (adr r1, d9020 <scalbn+0x110>)
   d8ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9002:	e7b6      	b.n	d8f72 <scalbn+0x62>
   d9004:	f3af 8000 	nop.w
   d9008:	c2f8f359 	.word	0xc2f8f359
   d900c:	01a56e1f 	.word	0x01a56e1f
   d9010:	8800759c 	.word	0x8800759c
   d9014:	7e37e43c 	.word	0x7e37e43c
   d9018:	8800759c 	.word	0x8800759c
   d901c:	fe37e43c 	.word	0xfe37e43c
   d9020:	c2f8f359 	.word	0xc2f8f359
   d9024:	81a56e1f 	.word	0x81a56e1f
   d9028:	43500000 	.word	0x43500000
   d902c:	ffff3cb0 	.word	0xffff3cb0
   d9030:	3c900000 	.word	0x3c900000

000d9034 <__aeabi_drsub>:
   d9034:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9038:	e002      	b.n	d9040 <__adddf3>
   d903a:	bf00      	nop

000d903c <__aeabi_dsub>:
   d903c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9040 <__adddf3>:
   d9040:	b530      	push	{r4, r5, lr}
   d9042:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9046:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d904a:	ea94 0f05 	teq	r4, r5
   d904e:	bf08      	it	eq
   d9050:	ea90 0f02 	teqeq	r0, r2
   d9054:	bf1f      	itttt	ne
   d9056:	ea54 0c00 	orrsne.w	ip, r4, r0
   d905a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d905e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d9062:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9066:	f000 80e2 	beq.w	d922e <__adddf3+0x1ee>
   d906a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d906e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d9072:	bfb8      	it	lt
   d9074:	426d      	neglt	r5, r5
   d9076:	dd0c      	ble.n	d9092 <__adddf3+0x52>
   d9078:	442c      	add	r4, r5
   d907a:	ea80 0202 	eor.w	r2, r0, r2
   d907e:	ea81 0303 	eor.w	r3, r1, r3
   d9082:	ea82 0000 	eor.w	r0, r2, r0
   d9086:	ea83 0101 	eor.w	r1, r3, r1
   d908a:	ea80 0202 	eor.w	r2, r0, r2
   d908e:	ea81 0303 	eor.w	r3, r1, r3
   d9092:	2d36      	cmp	r5, #54	; 0x36
   d9094:	bf88      	it	hi
   d9096:	bd30      	pophi	{r4, r5, pc}
   d9098:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d909c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d90a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d90a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d90a8:	d002      	beq.n	d90b0 <__adddf3+0x70>
   d90aa:	4240      	negs	r0, r0
   d90ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d90b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d90b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d90b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d90bc:	d002      	beq.n	d90c4 <__adddf3+0x84>
   d90be:	4252      	negs	r2, r2
   d90c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d90c4:	ea94 0f05 	teq	r4, r5
   d90c8:	f000 80a7 	beq.w	d921a <__adddf3+0x1da>
   d90cc:	f1a4 0401 	sub.w	r4, r4, #1
   d90d0:	f1d5 0e20 	rsbs	lr, r5, #32
   d90d4:	db0d      	blt.n	d90f2 <__adddf3+0xb2>
   d90d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d90da:	fa22 f205 	lsr.w	r2, r2, r5
   d90de:	1880      	adds	r0, r0, r2
   d90e0:	f141 0100 	adc.w	r1, r1, #0
   d90e4:	fa03 f20e 	lsl.w	r2, r3, lr
   d90e8:	1880      	adds	r0, r0, r2
   d90ea:	fa43 f305 	asr.w	r3, r3, r5
   d90ee:	4159      	adcs	r1, r3
   d90f0:	e00e      	b.n	d9110 <__adddf3+0xd0>
   d90f2:	f1a5 0520 	sub.w	r5, r5, #32
   d90f6:	f10e 0e20 	add.w	lr, lr, #32
   d90fa:	2a01      	cmp	r2, #1
   d90fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9100:	bf28      	it	cs
   d9102:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9106:	fa43 f305 	asr.w	r3, r3, r5
   d910a:	18c0      	adds	r0, r0, r3
   d910c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9114:	d507      	bpl.n	d9126 <__adddf3+0xe6>
   d9116:	f04f 0e00 	mov.w	lr, #0
   d911a:	f1dc 0c00 	rsbs	ip, ip, #0
   d911e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9122:	eb6e 0101 	sbc.w	r1, lr, r1
   d9126:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d912a:	d31b      	bcc.n	d9164 <__adddf3+0x124>
   d912c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9130:	d30c      	bcc.n	d914c <__adddf3+0x10c>
   d9132:	0849      	lsrs	r1, r1, #1
   d9134:	ea5f 0030 	movs.w	r0, r0, rrx
   d9138:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d913c:	f104 0401 	add.w	r4, r4, #1
   d9140:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9144:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9148:	f080 809a 	bcs.w	d9280 <__adddf3+0x240>
   d914c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9150:	bf08      	it	eq
   d9152:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9156:	f150 0000 	adcs.w	r0, r0, #0
   d915a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d915e:	ea41 0105 	orr.w	r1, r1, r5
   d9162:	bd30      	pop	{r4, r5, pc}
   d9164:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d9168:	4140      	adcs	r0, r0
   d916a:	eb41 0101 	adc.w	r1, r1, r1
   d916e:	3c01      	subs	r4, #1
   d9170:	bf28      	it	cs
   d9172:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d9176:	d2e9      	bcs.n	d914c <__adddf3+0x10c>
   d9178:	f091 0f00 	teq	r1, #0
   d917c:	bf04      	itt	eq
   d917e:	4601      	moveq	r1, r0
   d9180:	2000      	moveq	r0, #0
   d9182:	fab1 f381 	clz	r3, r1
   d9186:	bf08      	it	eq
   d9188:	3320      	addeq	r3, #32
   d918a:	f1a3 030b 	sub.w	r3, r3, #11
   d918e:	f1b3 0220 	subs.w	r2, r3, #32
   d9192:	da0c      	bge.n	d91ae <__adddf3+0x16e>
   d9194:	320c      	adds	r2, #12
   d9196:	dd08      	ble.n	d91aa <__adddf3+0x16a>
   d9198:	f102 0c14 	add.w	ip, r2, #20
   d919c:	f1c2 020c 	rsb	r2, r2, #12
   d91a0:	fa01 f00c 	lsl.w	r0, r1, ip
   d91a4:	fa21 f102 	lsr.w	r1, r1, r2
   d91a8:	e00c      	b.n	d91c4 <__adddf3+0x184>
   d91aa:	f102 0214 	add.w	r2, r2, #20
   d91ae:	bfd8      	it	le
   d91b0:	f1c2 0c20 	rsble	ip, r2, #32
   d91b4:	fa01 f102 	lsl.w	r1, r1, r2
   d91b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d91bc:	bfdc      	itt	le
   d91be:	ea41 010c 	orrle.w	r1, r1, ip
   d91c2:	4090      	lslle	r0, r2
   d91c4:	1ae4      	subs	r4, r4, r3
   d91c6:	bfa2      	ittt	ge
   d91c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d91cc:	4329      	orrge	r1, r5
   d91ce:	bd30      	popge	{r4, r5, pc}
   d91d0:	ea6f 0404 	mvn.w	r4, r4
   d91d4:	3c1f      	subs	r4, #31
   d91d6:	da1c      	bge.n	d9212 <__adddf3+0x1d2>
   d91d8:	340c      	adds	r4, #12
   d91da:	dc0e      	bgt.n	d91fa <__adddf3+0x1ba>
   d91dc:	f104 0414 	add.w	r4, r4, #20
   d91e0:	f1c4 0220 	rsb	r2, r4, #32
   d91e4:	fa20 f004 	lsr.w	r0, r0, r4
   d91e8:	fa01 f302 	lsl.w	r3, r1, r2
   d91ec:	ea40 0003 	orr.w	r0, r0, r3
   d91f0:	fa21 f304 	lsr.w	r3, r1, r4
   d91f4:	ea45 0103 	orr.w	r1, r5, r3
   d91f8:	bd30      	pop	{r4, r5, pc}
   d91fa:	f1c4 040c 	rsb	r4, r4, #12
   d91fe:	f1c4 0220 	rsb	r2, r4, #32
   d9202:	fa20 f002 	lsr.w	r0, r0, r2
   d9206:	fa01 f304 	lsl.w	r3, r1, r4
   d920a:	ea40 0003 	orr.w	r0, r0, r3
   d920e:	4629      	mov	r1, r5
   d9210:	bd30      	pop	{r4, r5, pc}
   d9212:	fa21 f004 	lsr.w	r0, r1, r4
   d9216:	4629      	mov	r1, r5
   d9218:	bd30      	pop	{r4, r5, pc}
   d921a:	f094 0f00 	teq	r4, #0
   d921e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9222:	bf06      	itte	eq
   d9224:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9228:	3401      	addeq	r4, #1
   d922a:	3d01      	subne	r5, #1
   d922c:	e74e      	b.n	d90cc <__adddf3+0x8c>
   d922e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9232:	bf18      	it	ne
   d9234:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9238:	d029      	beq.n	d928e <__adddf3+0x24e>
   d923a:	ea94 0f05 	teq	r4, r5
   d923e:	bf08      	it	eq
   d9240:	ea90 0f02 	teqeq	r0, r2
   d9244:	d005      	beq.n	d9252 <__adddf3+0x212>
   d9246:	ea54 0c00 	orrs.w	ip, r4, r0
   d924a:	bf04      	itt	eq
   d924c:	4619      	moveq	r1, r3
   d924e:	4610      	moveq	r0, r2
   d9250:	bd30      	pop	{r4, r5, pc}
   d9252:	ea91 0f03 	teq	r1, r3
   d9256:	bf1e      	ittt	ne
   d9258:	2100      	movne	r1, #0
   d925a:	2000      	movne	r0, #0
   d925c:	bd30      	popne	{r4, r5, pc}
   d925e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d9262:	d105      	bne.n	d9270 <__adddf3+0x230>
   d9264:	0040      	lsls	r0, r0, #1
   d9266:	4149      	adcs	r1, r1
   d9268:	bf28      	it	cs
   d926a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d926e:	bd30      	pop	{r4, r5, pc}
   d9270:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d9274:	bf3c      	itt	cc
   d9276:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d927a:	bd30      	popcc	{r4, r5, pc}
   d927c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9280:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9284:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9288:	f04f 0000 	mov.w	r0, #0
   d928c:	bd30      	pop	{r4, r5, pc}
   d928e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9292:	bf1a      	itte	ne
   d9294:	4619      	movne	r1, r3
   d9296:	4610      	movne	r0, r2
   d9298:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d929c:	bf1c      	itt	ne
   d929e:	460b      	movne	r3, r1
   d92a0:	4602      	movne	r2, r0
   d92a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d92a6:	bf06      	itte	eq
   d92a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d92ac:	ea91 0f03 	teqeq	r1, r3
   d92b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d92b4:	bd30      	pop	{r4, r5, pc}
   d92b6:	bf00      	nop

000d92b8 <__aeabi_ui2d>:
   d92b8:	f090 0f00 	teq	r0, #0
   d92bc:	bf04      	itt	eq
   d92be:	2100      	moveq	r1, #0
   d92c0:	4770      	bxeq	lr
   d92c2:	b530      	push	{r4, r5, lr}
   d92c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d92c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d92cc:	f04f 0500 	mov.w	r5, #0
   d92d0:	f04f 0100 	mov.w	r1, #0
   d92d4:	e750      	b.n	d9178 <__adddf3+0x138>
   d92d6:	bf00      	nop

000d92d8 <__aeabi_i2d>:
   d92d8:	f090 0f00 	teq	r0, #0
   d92dc:	bf04      	itt	eq
   d92de:	2100      	moveq	r1, #0
   d92e0:	4770      	bxeq	lr
   d92e2:	b530      	push	{r4, r5, lr}
   d92e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d92e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d92ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d92f0:	bf48      	it	mi
   d92f2:	4240      	negmi	r0, r0
   d92f4:	f04f 0100 	mov.w	r1, #0
   d92f8:	e73e      	b.n	d9178 <__adddf3+0x138>
   d92fa:	bf00      	nop

000d92fc <__aeabi_f2d>:
   d92fc:	0042      	lsls	r2, r0, #1
   d92fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9302:	ea4f 0131 	mov.w	r1, r1, rrx
   d9306:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d930a:	bf1f      	itttt	ne
   d930c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9310:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9314:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9318:	4770      	bxne	lr
   d931a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d931e:	bf08      	it	eq
   d9320:	4770      	bxeq	lr
   d9322:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9326:	bf04      	itt	eq
   d9328:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d932c:	4770      	bxeq	lr
   d932e:	b530      	push	{r4, r5, lr}
   d9330:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d933c:	e71c      	b.n	d9178 <__adddf3+0x138>
   d933e:	bf00      	nop

000d9340 <__aeabi_ul2d>:
   d9340:	ea50 0201 	orrs.w	r2, r0, r1
   d9344:	bf08      	it	eq
   d9346:	4770      	bxeq	lr
   d9348:	b530      	push	{r4, r5, lr}
   d934a:	f04f 0500 	mov.w	r5, #0
   d934e:	e00a      	b.n	d9366 <__aeabi_l2d+0x16>

000d9350 <__aeabi_l2d>:
   d9350:	ea50 0201 	orrs.w	r2, r0, r1
   d9354:	bf08      	it	eq
   d9356:	4770      	bxeq	lr
   d9358:	b530      	push	{r4, r5, lr}
   d935a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d935e:	d502      	bpl.n	d9366 <__aeabi_l2d+0x16>
   d9360:	4240      	negs	r0, r0
   d9362:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9366:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d936a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d936e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d9372:	f43f aed8 	beq.w	d9126 <__adddf3+0xe6>
   d9376:	f04f 0203 	mov.w	r2, #3
   d937a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d937e:	bf18      	it	ne
   d9380:	3203      	addne	r2, #3
   d9382:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9386:	bf18      	it	ne
   d9388:	3203      	addne	r2, #3
   d938a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d938e:	f1c2 0320 	rsb	r3, r2, #32
   d9392:	fa00 fc03 	lsl.w	ip, r0, r3
   d9396:	fa20 f002 	lsr.w	r0, r0, r2
   d939a:	fa01 fe03 	lsl.w	lr, r1, r3
   d939e:	ea40 000e 	orr.w	r0, r0, lr
   d93a2:	fa21 f102 	lsr.w	r1, r1, r2
   d93a6:	4414      	add	r4, r2
   d93a8:	e6bd      	b.n	d9126 <__adddf3+0xe6>
   d93aa:	bf00      	nop

000d93ac <__aeabi_dmul>:
   d93ac:	b570      	push	{r4, r5, r6, lr}
   d93ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d93b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d93b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d93ba:	bf1d      	ittte	ne
   d93bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d93c0:	ea94 0f0c 	teqne	r4, ip
   d93c4:	ea95 0f0c 	teqne	r5, ip
   d93c8:	f000 f8de 	bleq	d9588 <__aeabi_dmul+0x1dc>
   d93cc:	442c      	add	r4, r5
   d93ce:	ea81 0603 	eor.w	r6, r1, r3
   d93d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d93d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d93da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d93de:	bf18      	it	ne
   d93e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d93e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d93e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d93ec:	d038      	beq.n	d9460 <__aeabi_dmul+0xb4>
   d93ee:	fba0 ce02 	umull	ip, lr, r0, r2
   d93f2:	f04f 0500 	mov.w	r5, #0
   d93f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d93fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d93fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9402:	f04f 0600 	mov.w	r6, #0
   d9406:	fbe1 5603 	umlal	r5, r6, r1, r3
   d940a:	f09c 0f00 	teq	ip, #0
   d940e:	bf18      	it	ne
   d9410:	f04e 0e01 	orrne.w	lr, lr, #1
   d9414:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9418:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d941c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9420:	d204      	bcs.n	d942c <__aeabi_dmul+0x80>
   d9422:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9426:	416d      	adcs	r5, r5
   d9428:	eb46 0606 	adc.w	r6, r6, r6
   d942c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9430:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9434:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9438:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d943c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9440:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9444:	bf88      	it	hi
   d9446:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d944a:	d81e      	bhi.n	d948a <__aeabi_dmul+0xde>
   d944c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9450:	bf08      	it	eq
   d9452:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9456:	f150 0000 	adcs.w	r0, r0, #0
   d945a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d945e:	bd70      	pop	{r4, r5, r6, pc}
   d9460:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d9464:	ea46 0101 	orr.w	r1, r6, r1
   d9468:	ea40 0002 	orr.w	r0, r0, r2
   d946c:	ea81 0103 	eor.w	r1, r1, r3
   d9470:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d9474:	bfc2      	ittt	gt
   d9476:	ebd4 050c 	rsbsgt	r5, r4, ip
   d947a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d947e:	bd70      	popgt	{r4, r5, r6, pc}
   d9480:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9484:	f04f 0e00 	mov.w	lr, #0
   d9488:	3c01      	subs	r4, #1
   d948a:	f300 80ab 	bgt.w	d95e4 <__aeabi_dmul+0x238>
   d948e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9492:	bfde      	ittt	le
   d9494:	2000      	movle	r0, #0
   d9496:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d949a:	bd70      	pople	{r4, r5, r6, pc}
   d949c:	f1c4 0400 	rsb	r4, r4, #0
   d94a0:	3c20      	subs	r4, #32
   d94a2:	da35      	bge.n	d9510 <__aeabi_dmul+0x164>
   d94a4:	340c      	adds	r4, #12
   d94a6:	dc1b      	bgt.n	d94e0 <__aeabi_dmul+0x134>
   d94a8:	f104 0414 	add.w	r4, r4, #20
   d94ac:	f1c4 0520 	rsb	r5, r4, #32
   d94b0:	fa00 f305 	lsl.w	r3, r0, r5
   d94b4:	fa20 f004 	lsr.w	r0, r0, r4
   d94b8:	fa01 f205 	lsl.w	r2, r1, r5
   d94bc:	ea40 0002 	orr.w	r0, r0, r2
   d94c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d94c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d94c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d94cc:	fa21 f604 	lsr.w	r6, r1, r4
   d94d0:	eb42 0106 	adc.w	r1, r2, r6
   d94d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d94d8:	bf08      	it	eq
   d94da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d94de:	bd70      	pop	{r4, r5, r6, pc}
   d94e0:	f1c4 040c 	rsb	r4, r4, #12
   d94e4:	f1c4 0520 	rsb	r5, r4, #32
   d94e8:	fa00 f304 	lsl.w	r3, r0, r4
   d94ec:	fa20 f005 	lsr.w	r0, r0, r5
   d94f0:	fa01 f204 	lsl.w	r2, r1, r4
   d94f4:	ea40 0002 	orr.w	r0, r0, r2
   d94f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d94fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9500:	f141 0100 	adc.w	r1, r1, #0
   d9504:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9508:	bf08      	it	eq
   d950a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d950e:	bd70      	pop	{r4, r5, r6, pc}
   d9510:	f1c4 0520 	rsb	r5, r4, #32
   d9514:	fa00 f205 	lsl.w	r2, r0, r5
   d9518:	ea4e 0e02 	orr.w	lr, lr, r2
   d951c:	fa20 f304 	lsr.w	r3, r0, r4
   d9520:	fa01 f205 	lsl.w	r2, r1, r5
   d9524:	ea43 0302 	orr.w	r3, r3, r2
   d9528:	fa21 f004 	lsr.w	r0, r1, r4
   d952c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9530:	fa21 f204 	lsr.w	r2, r1, r4
   d9534:	ea20 0002 	bic.w	r0, r0, r2
   d9538:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d953c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9540:	bf08      	it	eq
   d9542:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9546:	bd70      	pop	{r4, r5, r6, pc}
   d9548:	f094 0f00 	teq	r4, #0
   d954c:	d10f      	bne.n	d956e <__aeabi_dmul+0x1c2>
   d954e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9552:	0040      	lsls	r0, r0, #1
   d9554:	eb41 0101 	adc.w	r1, r1, r1
   d9558:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d955c:	bf08      	it	eq
   d955e:	3c01      	subeq	r4, #1
   d9560:	d0f7      	beq.n	d9552 <__aeabi_dmul+0x1a6>
   d9562:	ea41 0106 	orr.w	r1, r1, r6
   d9566:	f095 0f00 	teq	r5, #0
   d956a:	bf18      	it	ne
   d956c:	4770      	bxne	lr
   d956e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9572:	0052      	lsls	r2, r2, #1
   d9574:	eb43 0303 	adc.w	r3, r3, r3
   d9578:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d957c:	bf08      	it	eq
   d957e:	3d01      	subeq	r5, #1
   d9580:	d0f7      	beq.n	d9572 <__aeabi_dmul+0x1c6>
   d9582:	ea43 0306 	orr.w	r3, r3, r6
   d9586:	4770      	bx	lr
   d9588:	ea94 0f0c 	teq	r4, ip
   d958c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9590:	bf18      	it	ne
   d9592:	ea95 0f0c 	teqne	r5, ip
   d9596:	d00c      	beq.n	d95b2 <__aeabi_dmul+0x206>
   d9598:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d959c:	bf18      	it	ne
   d959e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d95a2:	d1d1      	bne.n	d9548 <__aeabi_dmul+0x19c>
   d95a4:	ea81 0103 	eor.w	r1, r1, r3
   d95a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d95ac:	f04f 0000 	mov.w	r0, #0
   d95b0:	bd70      	pop	{r4, r5, r6, pc}
   d95b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d95b6:	bf06      	itte	eq
   d95b8:	4610      	moveq	r0, r2
   d95ba:	4619      	moveq	r1, r3
   d95bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d95c0:	d019      	beq.n	d95f6 <__aeabi_dmul+0x24a>
   d95c2:	ea94 0f0c 	teq	r4, ip
   d95c6:	d102      	bne.n	d95ce <__aeabi_dmul+0x222>
   d95c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d95cc:	d113      	bne.n	d95f6 <__aeabi_dmul+0x24a>
   d95ce:	ea95 0f0c 	teq	r5, ip
   d95d2:	d105      	bne.n	d95e0 <__aeabi_dmul+0x234>
   d95d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d95d8:	bf1c      	itt	ne
   d95da:	4610      	movne	r0, r2
   d95dc:	4619      	movne	r1, r3
   d95de:	d10a      	bne.n	d95f6 <__aeabi_dmul+0x24a>
   d95e0:	ea81 0103 	eor.w	r1, r1, r3
   d95e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d95e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d95ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d95f0:	f04f 0000 	mov.w	r0, #0
   d95f4:	bd70      	pop	{r4, r5, r6, pc}
   d95f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d95fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d95fe:	bd70      	pop	{r4, r5, r6, pc}

000d9600 <__aeabi_ddiv>:
   d9600:	b570      	push	{r4, r5, r6, lr}
   d9602:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d960a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d960e:	bf1d      	ittte	ne
   d9610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9614:	ea94 0f0c 	teqne	r4, ip
   d9618:	ea95 0f0c 	teqne	r5, ip
   d961c:	f000 f8a7 	bleq	d976e <__aeabi_ddiv+0x16e>
   d9620:	eba4 0405 	sub.w	r4, r4, r5
   d9624:	ea81 0e03 	eor.w	lr, r1, r3
   d9628:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d962c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9630:	f000 8088 	beq.w	d9744 <__aeabi_ddiv+0x144>
   d9634:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9638:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d963c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9640:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9644:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9648:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d964c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9650:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9654:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9658:	429d      	cmp	r5, r3
   d965a:	bf08      	it	eq
   d965c:	4296      	cmpeq	r6, r2
   d965e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9662:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9666:	d202      	bcs.n	d966e <__aeabi_ddiv+0x6e>
   d9668:	085b      	lsrs	r3, r3, #1
   d966a:	ea4f 0232 	mov.w	r2, r2, rrx
   d966e:	1ab6      	subs	r6, r6, r2
   d9670:	eb65 0503 	sbc.w	r5, r5, r3
   d9674:	085b      	lsrs	r3, r3, #1
   d9676:	ea4f 0232 	mov.w	r2, r2, rrx
   d967a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d967e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9682:	ebb6 0e02 	subs.w	lr, r6, r2
   d9686:	eb75 0e03 	sbcs.w	lr, r5, r3
   d968a:	bf22      	ittt	cs
   d968c:	1ab6      	subcs	r6, r6, r2
   d968e:	4675      	movcs	r5, lr
   d9690:	ea40 000c 	orrcs.w	r0, r0, ip
   d9694:	085b      	lsrs	r3, r3, #1
   d9696:	ea4f 0232 	mov.w	r2, r2, rrx
   d969a:	ebb6 0e02 	subs.w	lr, r6, r2
   d969e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96a2:	bf22      	ittt	cs
   d96a4:	1ab6      	subcs	r6, r6, r2
   d96a6:	4675      	movcs	r5, lr
   d96a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d96ac:	085b      	lsrs	r3, r3, #1
   d96ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d96b2:	ebb6 0e02 	subs.w	lr, r6, r2
   d96b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96ba:	bf22      	ittt	cs
   d96bc:	1ab6      	subcs	r6, r6, r2
   d96be:	4675      	movcs	r5, lr
   d96c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d96c4:	085b      	lsrs	r3, r3, #1
   d96c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d96ca:	ebb6 0e02 	subs.w	lr, r6, r2
   d96ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d96d2:	bf22      	ittt	cs
   d96d4:	1ab6      	subcs	r6, r6, r2
   d96d6:	4675      	movcs	r5, lr
   d96d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d96dc:	ea55 0e06 	orrs.w	lr, r5, r6
   d96e0:	d018      	beq.n	d9714 <__aeabi_ddiv+0x114>
   d96e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d96e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d96ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d96ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d96f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d96f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d96fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d96fe:	d1c0      	bne.n	d9682 <__aeabi_ddiv+0x82>
   d9700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9704:	d10b      	bne.n	d971e <__aeabi_ddiv+0x11e>
   d9706:	ea41 0100 	orr.w	r1, r1, r0
   d970a:	f04f 0000 	mov.w	r0, #0
   d970e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9712:	e7b6      	b.n	d9682 <__aeabi_ddiv+0x82>
   d9714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9718:	bf04      	itt	eq
   d971a:	4301      	orreq	r1, r0
   d971c:	2000      	moveq	r0, #0
   d971e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9722:	bf88      	it	hi
   d9724:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9728:	f63f aeaf 	bhi.w	d948a <__aeabi_dmul+0xde>
   d972c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9730:	bf04      	itt	eq
   d9732:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9736:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d973a:	f150 0000 	adcs.w	r0, r0, #0
   d973e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9742:	bd70      	pop	{r4, r5, r6, pc}
   d9744:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9748:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d974c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9750:	bfc2      	ittt	gt
   d9752:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9756:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d975a:	bd70      	popgt	{r4, r5, r6, pc}
   d975c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9760:	f04f 0e00 	mov.w	lr, #0
   d9764:	3c01      	subs	r4, #1
   d9766:	e690      	b.n	d948a <__aeabi_dmul+0xde>
   d9768:	ea45 0e06 	orr.w	lr, r5, r6
   d976c:	e68d      	b.n	d948a <__aeabi_dmul+0xde>
   d976e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9772:	ea94 0f0c 	teq	r4, ip
   d9776:	bf08      	it	eq
   d9778:	ea95 0f0c 	teqeq	r5, ip
   d977c:	f43f af3b 	beq.w	d95f6 <__aeabi_dmul+0x24a>
   d9780:	ea94 0f0c 	teq	r4, ip
   d9784:	d10a      	bne.n	d979c <__aeabi_ddiv+0x19c>
   d9786:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d978a:	f47f af34 	bne.w	d95f6 <__aeabi_dmul+0x24a>
   d978e:	ea95 0f0c 	teq	r5, ip
   d9792:	f47f af25 	bne.w	d95e0 <__aeabi_dmul+0x234>
   d9796:	4610      	mov	r0, r2
   d9798:	4619      	mov	r1, r3
   d979a:	e72c      	b.n	d95f6 <__aeabi_dmul+0x24a>
   d979c:	ea95 0f0c 	teq	r5, ip
   d97a0:	d106      	bne.n	d97b0 <__aeabi_ddiv+0x1b0>
   d97a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d97a6:	f43f aefd 	beq.w	d95a4 <__aeabi_dmul+0x1f8>
   d97aa:	4610      	mov	r0, r2
   d97ac:	4619      	mov	r1, r3
   d97ae:	e722      	b.n	d95f6 <__aeabi_dmul+0x24a>
   d97b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d97b4:	bf18      	it	ne
   d97b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d97ba:	f47f aec5 	bne.w	d9548 <__aeabi_dmul+0x19c>
   d97be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d97c2:	f47f af0d 	bne.w	d95e0 <__aeabi_dmul+0x234>
   d97c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d97ca:	f47f aeeb 	bne.w	d95a4 <__aeabi_dmul+0x1f8>
   d97ce:	e712      	b.n	d95f6 <__aeabi_dmul+0x24a>

000d97d0 <__gedf2>:
   d97d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d97d4:	e006      	b.n	d97e4 <__cmpdf2+0x4>
   d97d6:	bf00      	nop

000d97d8 <__ledf2>:
   d97d8:	f04f 0c01 	mov.w	ip, #1
   d97dc:	e002      	b.n	d97e4 <__cmpdf2+0x4>
   d97de:	bf00      	nop

000d97e0 <__cmpdf2>:
   d97e0:	f04f 0c01 	mov.w	ip, #1
   d97e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d97e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d97ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d97f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d97f4:	bf18      	it	ne
   d97f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d97fa:	d01b      	beq.n	d9834 <__cmpdf2+0x54>
   d97fc:	b001      	add	sp, #4
   d97fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9802:	bf0c      	ite	eq
   d9804:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9808:	ea91 0f03 	teqne	r1, r3
   d980c:	bf02      	ittt	eq
   d980e:	ea90 0f02 	teqeq	r0, r2
   d9812:	2000      	moveq	r0, #0
   d9814:	4770      	bxeq	lr
   d9816:	f110 0f00 	cmn.w	r0, #0
   d981a:	ea91 0f03 	teq	r1, r3
   d981e:	bf58      	it	pl
   d9820:	4299      	cmppl	r1, r3
   d9822:	bf08      	it	eq
   d9824:	4290      	cmpeq	r0, r2
   d9826:	bf2c      	ite	cs
   d9828:	17d8      	asrcs	r0, r3, #31
   d982a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d982e:	f040 0001 	orr.w	r0, r0, #1
   d9832:	4770      	bx	lr
   d9834:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9838:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d983c:	d102      	bne.n	d9844 <__cmpdf2+0x64>
   d983e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9842:	d107      	bne.n	d9854 <__cmpdf2+0x74>
   d9844:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9848:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d984c:	d1d6      	bne.n	d97fc <__cmpdf2+0x1c>
   d984e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9852:	d0d3      	beq.n	d97fc <__cmpdf2+0x1c>
   d9854:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9858:	4770      	bx	lr
   d985a:	bf00      	nop

000d985c <__aeabi_cdrcmple>:
   d985c:	4684      	mov	ip, r0
   d985e:	4610      	mov	r0, r2
   d9860:	4662      	mov	r2, ip
   d9862:	468c      	mov	ip, r1
   d9864:	4619      	mov	r1, r3
   d9866:	4663      	mov	r3, ip
   d9868:	e000      	b.n	d986c <__aeabi_cdcmpeq>
   d986a:	bf00      	nop

000d986c <__aeabi_cdcmpeq>:
   d986c:	b501      	push	{r0, lr}
   d986e:	f7ff ffb7 	bl	d97e0 <__cmpdf2>
   d9872:	2800      	cmp	r0, #0
   d9874:	bf48      	it	mi
   d9876:	f110 0f00 	cmnmi.w	r0, #0
   d987a:	bd01      	pop	{r0, pc}

000d987c <__aeabi_dcmpeq>:
   d987c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9880:	f7ff fff4 	bl	d986c <__aeabi_cdcmpeq>
   d9884:	bf0c      	ite	eq
   d9886:	2001      	moveq	r0, #1
   d9888:	2000      	movne	r0, #0
   d988a:	f85d fb08 	ldr.w	pc, [sp], #8
   d988e:	bf00      	nop

000d9890 <__aeabi_dcmplt>:
   d9890:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9894:	f7ff ffea 	bl	d986c <__aeabi_cdcmpeq>
   d9898:	bf34      	ite	cc
   d989a:	2001      	movcc	r0, #1
   d989c:	2000      	movcs	r0, #0
   d989e:	f85d fb08 	ldr.w	pc, [sp], #8
   d98a2:	bf00      	nop

000d98a4 <__aeabi_dcmple>:
   d98a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d98a8:	f7ff ffe0 	bl	d986c <__aeabi_cdcmpeq>
   d98ac:	bf94      	ite	ls
   d98ae:	2001      	movls	r0, #1
   d98b0:	2000      	movhi	r0, #0
   d98b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d98b6:	bf00      	nop

000d98b8 <__aeabi_dcmpge>:
   d98b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d98bc:	f7ff ffce 	bl	d985c <__aeabi_cdrcmple>
   d98c0:	bf94      	ite	ls
   d98c2:	2001      	movls	r0, #1
   d98c4:	2000      	movhi	r0, #0
   d98c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d98ca:	bf00      	nop

000d98cc <__aeabi_dcmpgt>:
   d98cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d98d0:	f7ff ffc4 	bl	d985c <__aeabi_cdrcmple>
   d98d4:	bf34      	ite	cc
   d98d6:	2001      	movcc	r0, #1
   d98d8:	2000      	movcs	r0, #0
   d98da:	f85d fb08 	ldr.w	pc, [sp], #8
   d98de:	bf00      	nop

000d98e0 <__aeabi_dcmpun>:
   d98e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d98e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98e8:	d102      	bne.n	d98f0 <__aeabi_dcmpun+0x10>
   d98ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d98ee:	d10a      	bne.n	d9906 <__aeabi_dcmpun+0x26>
   d98f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d98f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d98f8:	d102      	bne.n	d9900 <__aeabi_dcmpun+0x20>
   d98fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d98fe:	d102      	bne.n	d9906 <__aeabi_dcmpun+0x26>
   d9900:	f04f 0000 	mov.w	r0, #0
   d9904:	4770      	bx	lr
   d9906:	f04f 0001 	mov.w	r0, #1
   d990a:	4770      	bx	lr

000d990c <__aeabi_d2iz>:
   d990c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9914:	d215      	bcs.n	d9942 <__aeabi_d2iz+0x36>
   d9916:	d511      	bpl.n	d993c <__aeabi_d2iz+0x30>
   d9918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d991c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9920:	d912      	bls.n	d9948 <__aeabi_d2iz+0x3c>
   d9922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d992a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d992e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9932:	fa23 f002 	lsr.w	r0, r3, r2
   d9936:	bf18      	it	ne
   d9938:	4240      	negne	r0, r0
   d993a:	4770      	bx	lr
   d993c:	f04f 0000 	mov.w	r0, #0
   d9940:	4770      	bx	lr
   d9942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9946:	d105      	bne.n	d9954 <__aeabi_d2iz+0x48>
   d9948:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d994c:	bf08      	it	eq
   d994e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9952:	4770      	bx	lr
   d9954:	f04f 0000 	mov.w	r0, #0
   d9958:	4770      	bx	lr
   d995a:	bf00      	nop

000d995c <__aeabi_d2uiz>:
   d995c:	004a      	lsls	r2, r1, #1
   d995e:	d211      	bcs.n	d9984 <__aeabi_d2uiz+0x28>
   d9960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9964:	d211      	bcs.n	d998a <__aeabi_d2uiz+0x2e>
   d9966:	d50d      	bpl.n	d9984 <__aeabi_d2uiz+0x28>
   d9968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d996c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9970:	d40e      	bmi.n	d9990 <__aeabi_d2uiz+0x34>
   d9972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d997a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d997e:	fa23 f002 	lsr.w	r0, r3, r2
   d9982:	4770      	bx	lr
   d9984:	f04f 0000 	mov.w	r0, #0
   d9988:	4770      	bx	lr
   d998a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d998e:	d102      	bne.n	d9996 <__aeabi_d2uiz+0x3a>
   d9990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9994:	4770      	bx	lr
   d9996:	f04f 0000 	mov.w	r0, #0
   d999a:	4770      	bx	lr

000d999c <__aeabi_d2f>:
   d999c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d99a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d99a4:	bf24      	itt	cs
   d99a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d99aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d99ae:	d90d      	bls.n	d99cc <__aeabi_d2f+0x30>
   d99b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d99b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d99b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d99bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d99c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d99c4:	bf08      	it	eq
   d99c6:	f020 0001 	biceq.w	r0, r0, #1
   d99ca:	4770      	bx	lr
   d99cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d99d0:	d121      	bne.n	d9a16 <__aeabi_d2f+0x7a>
   d99d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d99d6:	bfbc      	itt	lt
   d99d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d99dc:	4770      	bxlt	lr
   d99de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d99e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d99e6:	f1c2 0218 	rsb	r2, r2, #24
   d99ea:	f1c2 0c20 	rsb	ip, r2, #32
   d99ee:	fa10 f30c 	lsls.w	r3, r0, ip
   d99f2:	fa20 f002 	lsr.w	r0, r0, r2
   d99f6:	bf18      	it	ne
   d99f8:	f040 0001 	orrne.w	r0, r0, #1
   d99fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9a04:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9a08:	ea40 000c 	orr.w	r0, r0, ip
   d9a0c:	fa23 f302 	lsr.w	r3, r3, r2
   d9a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9a14:	e7cc      	b.n	d99b0 <__aeabi_d2f+0x14>
   d9a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9a1a:	d107      	bne.n	d9a2c <__aeabi_d2f+0x90>
   d9a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9a20:	bf1e      	ittt	ne
   d9a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9a2a:	4770      	bxne	lr
   d9a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9a38:	4770      	bx	lr
   d9a3a:	bf00      	nop

000d9a3c <__cxa_atexit>:
   d9a3c:	b510      	push	{r4, lr}
   d9a3e:	4c05      	ldr	r4, [pc, #20]	; (d9a54 <__cxa_atexit+0x18>)
   d9a40:	4613      	mov	r3, r2
   d9a42:	b12c      	cbz	r4, d9a50 <__cxa_atexit+0x14>
   d9a44:	460a      	mov	r2, r1
   d9a46:	4601      	mov	r1, r0
   d9a48:	2002      	movs	r0, #2
   d9a4a:	f3af 8000 	nop.w
   d9a4e:	bd10      	pop	{r4, pc}
   d9a50:	4620      	mov	r0, r4
   d9a52:	e7fc      	b.n	d9a4e <__cxa_atexit+0x12>
   d9a54:	00000000 	.word	0x00000000

000d9a58 <memcpy>:
   d9a58:	440a      	add	r2, r1
   d9a5a:	4291      	cmp	r1, r2
   d9a5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d9a60:	d100      	bne.n	d9a64 <memcpy+0xc>
   d9a62:	4770      	bx	lr
   d9a64:	b510      	push	{r4, lr}
   d9a66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9a6e:	4291      	cmp	r1, r2
   d9a70:	d1f9      	bne.n	d9a66 <memcpy+0xe>
   d9a72:	bd10      	pop	{r4, pc}

000d9a74 <memset>:
   d9a74:	4402      	add	r2, r0
   d9a76:	4603      	mov	r3, r0
   d9a78:	4293      	cmp	r3, r2
   d9a7a:	d100      	bne.n	d9a7e <memset+0xa>
   d9a7c:	4770      	bx	lr
   d9a7e:	f803 1b01 	strb.w	r1, [r3], #1
   d9a82:	e7f9      	b.n	d9a78 <memset+0x4>

000d9a84 <srand>:
   d9a84:	b538      	push	{r3, r4, r5, lr}
   d9a86:	4b0d      	ldr	r3, [pc, #52]	; (d9abc <srand+0x38>)
   d9a88:	681d      	ldr	r5, [r3, #0]
   d9a8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9a8c:	4604      	mov	r4, r0
   d9a8e:	b97b      	cbnz	r3, d9ab0 <srand+0x2c>
   d9a90:	2018      	movs	r0, #24
   d9a92:	f7fc fc21 	bl	d62d8 <malloc>
   d9a96:	4a0a      	ldr	r2, [pc, #40]	; (d9ac0 <srand+0x3c>)
   d9a98:	4b0a      	ldr	r3, [pc, #40]	; (d9ac4 <srand+0x40>)
   d9a9a:	63a8      	str	r0, [r5, #56]	; 0x38
   d9a9c:	e9c0 2300 	strd	r2, r3, [r0]
   d9aa0:	4b09      	ldr	r3, [pc, #36]	; (d9ac8 <srand+0x44>)
   d9aa2:	6083      	str	r3, [r0, #8]
   d9aa4:	230b      	movs	r3, #11
   d9aa6:	8183      	strh	r3, [r0, #12]
   d9aa8:	2201      	movs	r2, #1
   d9aaa:	2300      	movs	r3, #0
   d9aac:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9ab0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9ab2:	2200      	movs	r2, #0
   d9ab4:	611c      	str	r4, [r3, #16]
   d9ab6:	615a      	str	r2, [r3, #20]
   d9ab8:	bd38      	pop	{r3, r4, r5, pc}
   d9aba:	bf00      	nop
   d9abc:	2003e3bc 	.word	0x2003e3bc
   d9ac0:	abcd330e 	.word	0xabcd330e
   d9ac4:	e66d1234 	.word	0xe66d1234
   d9ac8:	0005deec 	.word	0x0005deec

000d9acc <rand>:
   d9acc:	4b13      	ldr	r3, [pc, #76]	; (d9b1c <rand+0x50>)
   d9ace:	b510      	push	{r4, lr}
   d9ad0:	681c      	ldr	r4, [r3, #0]
   d9ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9ad4:	b97b      	cbnz	r3, d9af6 <rand+0x2a>
   d9ad6:	2018      	movs	r0, #24
   d9ad8:	f7fc fbfe 	bl	d62d8 <malloc>
   d9adc:	4a10      	ldr	r2, [pc, #64]	; (d9b20 <rand+0x54>)
   d9ade:	4b11      	ldr	r3, [pc, #68]	; (d9b24 <rand+0x58>)
   d9ae0:	63a0      	str	r0, [r4, #56]	; 0x38
   d9ae2:	e9c0 2300 	strd	r2, r3, [r0]
   d9ae6:	4b10      	ldr	r3, [pc, #64]	; (d9b28 <rand+0x5c>)
   d9ae8:	6083      	str	r3, [r0, #8]
   d9aea:	230b      	movs	r3, #11
   d9aec:	8183      	strh	r3, [r0, #12]
   d9aee:	2201      	movs	r2, #1
   d9af0:	2300      	movs	r3, #0
   d9af2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9af6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d9af8:	480c      	ldr	r0, [pc, #48]	; (d9b2c <rand+0x60>)
   d9afa:	690a      	ldr	r2, [r1, #16]
   d9afc:	694b      	ldr	r3, [r1, #20]
   d9afe:	4c0c      	ldr	r4, [pc, #48]	; (d9b30 <rand+0x64>)
   d9b00:	4350      	muls	r0, r2
   d9b02:	fb04 0003 	mla	r0, r4, r3, r0
   d9b06:	fba2 3404 	umull	r3, r4, r2, r4
   d9b0a:	1c5a      	adds	r2, r3, #1
   d9b0c:	4404      	add	r4, r0
   d9b0e:	f144 0000 	adc.w	r0, r4, #0
   d9b12:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d9b16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d9b1a:	bd10      	pop	{r4, pc}
   d9b1c:	2003e3bc 	.word	0x2003e3bc
   d9b20:	abcd330e 	.word	0xabcd330e
   d9b24:	e66d1234 	.word	0xe66d1234
   d9b28:	0005deec 	.word	0x0005deec
   d9b2c:	5851f42d 	.word	0x5851f42d
   d9b30:	4c957f2d 	.word	0x4c957f2d

000d9b34 <strcpy>:
   d9b34:	4603      	mov	r3, r0
   d9b36:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9b3a:	f803 2b01 	strb.w	r2, [r3], #1
   d9b3e:	2a00      	cmp	r2, #0
   d9b40:	d1f9      	bne.n	d9b36 <strcpy+0x2>
   d9b42:	4770      	bx	lr

000d9b44 <strdup>:
   d9b44:	4b02      	ldr	r3, [pc, #8]	; (d9b50 <strdup+0xc>)
   d9b46:	4601      	mov	r1, r0
   d9b48:	6818      	ldr	r0, [r3, #0]
   d9b4a:	f000 b803 	b.w	d9b54 <_strdup_r>
   d9b4e:	bf00      	nop
   d9b50:	2003e3bc 	.word	0x2003e3bc

000d9b54 <_strdup_r>:
   d9b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9b56:	4604      	mov	r4, r0
   d9b58:	4608      	mov	r0, r1
   d9b5a:	460d      	mov	r5, r1
   d9b5c:	f000 f80f 	bl	d9b7e <strlen>
   d9b60:	1c42      	adds	r2, r0, #1
   d9b62:	4611      	mov	r1, r2
   d9b64:	4620      	mov	r0, r4
   d9b66:	9201      	str	r2, [sp, #4]
   d9b68:	f7fc fbde 	bl	d6328 <_malloc_r>
   d9b6c:	4604      	mov	r4, r0
   d9b6e:	b118      	cbz	r0, d9b78 <_strdup_r+0x24>
   d9b70:	9a01      	ldr	r2, [sp, #4]
   d9b72:	4629      	mov	r1, r5
   d9b74:	f7ff ff70 	bl	d9a58 <memcpy>
   d9b78:	4620      	mov	r0, r4
   d9b7a:	b003      	add	sp, #12
   d9b7c:	bd30      	pop	{r4, r5, pc}

000d9b7e <strlen>:
   d9b7e:	4603      	mov	r3, r0
   d9b80:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9b84:	2a00      	cmp	r2, #0
   d9b86:	d1fb      	bne.n	d9b80 <strlen+0x2>
   d9b88:	1a18      	subs	r0, r3, r0
   d9b8a:	3801      	subs	r0, #1
   d9b8c:	4770      	bx	lr

000d9b8e <link_code_end>:
	...

000d9b90 <dynalib_user>:
   d9b90:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d9ba0:	0000 0000 207b 4122 4354 2231 203a 6425     ....{ "ATC1": %d
   d9bb0:	202c 4122 5054 2231 203a 6425 202c 4122     , "ATP1": %d, "A
   d9bc0:	4354 2232 203a 6425 202c 4122 5054 2232     TC2": %d, "ATP2"
   d9bd0:	203a 6425 202c 4122 5346 2252 203a 6425     : %d, "AFSR": %d
   d9be0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9bf0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9c00:	2020 2c20 2220 4141 6363 2258 203a 6425        , "AAccX": %d
   d9c10:	202c 4122 6341 5963 3a22 2520 2c64 2220     , "AAccY": %d, "
   d9c20:	4141 6363 225a 203a 6425 202c 4122 7947     AAccZ": %d, "AGy
   d9c30:	5872 3a22 2520 2c64 2220 4741 7279 2259     rX": %d, "AGyrY"
   d9c40:	203a 6425 2020 2020 2020 2020 2020 2020     : %d            
   d9c50:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9c60:	2020 2020 2020 2c20 2220 4741 7279 225a            , "AGyrZ"
   d9c70:	203a 6425 202c 4122 5442 3a22 2520 2c64     : %d, "ABT": %d,
   d9c80:	2220 4d41 6369 3a22 2520 2c64 2220 544d      "AMic": %d, "MT
   d9c90:	3150 3a22 2520 2064 2020 2020 2020 2020     P1": %d         
   d9ca0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9cb0:	2020 2020 2020 2020 2020 202c 4d22 5054               , "MTP
   d9cc0:	2232 203a 6425 202c 4d22 6341 5863 3a22     2": %d, "MAccX":
   d9cd0:	2520 2c64 2220 414d 6363 2259 203a 6425      %d, "MAccY": %d
   d9ce0:	202c 4d22 6341 5a63 3a22 2520 2c64 2220     , "MAccZ": %d, "
   d9cf0:	474d 7279 2258 203a 6425 2020 2020 2020     MGyrX": %d      
   d9d00:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9d10:	2020 2020 2020 2020 2020 2020 2c20 2220                  , "
   d9d20:	474d 7279 2259 203a 6425 202c 4d22 7947     MGyrY": %d, "MGy
   d9d30:	5a72 3a22 2520 2c64 2220 5248 3a22 2520     rZ": %d, "HR": %
   d9d40:	2c64 2220 5248 2256 203a 2e25 6631 2020     d, "HRV": %.1f  
   d9d50:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9d60:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d9d70:	2c20 2220 6142 7474 3a22 2520 312e 2c66      , "Batt": %.1f,
   d9d80:	2220 464d 5253 3a22 2520 2c64 2220 4d4d      "MFSR": %d, "MM
   d9d90:	6369 3a22 2520 7d64 4900 696e 6974 6c61     ic": %d}.Initial
   d9da0:	7a69 7461 6f69 206e 666f 7420 6568 7320     ization of the s
   d9db0:	6e65 6f73 2072 6572 7574 6e72 6465 203a     ensor returned: 
   d9dc0:	5400 7972 6e69 2067 6761 6961 2e6e 2e2e     .Trying again...
   d9dd0:	5300 6d75 616d 7972 6552 6f70 7472 2200     .SummaryReport."
   d9de0:	007d 4445 3141 7b00 2220 4445 3141 3a22     }.EDA1.{ "EDA1":
   d9df0:	2220 5500 6b6e 6f6e 6e77 5320 6174 7574      ".Unknown Statu
   d9e00:	0073 6c41 206c 7369 7720 6c65 2e6c 4700     s.All is well..G
   d9e10:	6e65 7265 6c61 4520 7272 726f 4e00 746f     eneral Error.Not
   d9e20:	4920 706d 656c 656d 746e 6465 5000 7261      Implemented.Par
   d9e30:	6d61 7465 7265 4520 7272 726f 5700 6f72     ameter Error.Wro
   d9e40:	676e 4920 0044 6e49 6176 696c 2064 6553     ng ID.Invalid Se
   d9e50:	736e 726f 4400 7461 2061 6e55 6564 6672     nsor.Data Underf
   d9e60:	6f6c 0077 6553 736e 726f 4e20 746f 5320     low.Sensor Not S
   d9e70:	7075 6f70 7472 6465 0000 0000               upported....

000d9e7c <CSWTCH.31>:
   d9e7c:	9e02 000d 9e0f 000d 9e1d 000d 9e2d 000d     ............-...
   d9e8c:	9e3d 000d 9e46 000d 9e55 000d 9e64 000d     =...F...U...d...

000d9e9c <_ZTV13ICM_20948_I2C>:
	...
   d9ea4:	5e2d 000d                                   -^..

000d9ea8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9eb0:	63cd 000d 63d3 000d 6423 000d 63e1 000d     .c...c..#d...c..
   d9ec0:	63cf 000d                                   .c..

000d9ec4 <_ZTVN5spark13EthernetClassE>:
	...
   d9ecc:	699b 000d 6991 000d 6987 000d 697d 000d     .i...i...i..}i..
   d9edc:	6971 000d 6965 000d 6959 000d 6951 000d     qi..ei..Yi..Qi..
   d9eec:	6947 000d 693d 000d 6c2d 000d               Gi..=i..-l..

000d9ef8 <_ZTV7TwoWire>:
	...
   d9f00:	69b9 000d 6a03 000d 69db 000d 69bb 000d     .i...j...i...i..
   d9f10:	69e3 000d 69eb 000d 69f3 000d 69fb 000d     .i...i...i...i..

000d9f20 <_ZTV9IPAddress>:
	...
   d9f28:	6ae1 000d 6ad1 000d 6ad3 000d 7061 0070     .j...j...j..app.

000d9f38 <_ZTVN5spark12NetworkClassE>:
	...
   d9f40:	6bc5 000d 6bcf 000d 6bd9 000d 6be3 000d     .k...k...k...k..
   d9f50:	6bed 000d 6bf9 000d 6c05 000d 6c11 000d     .k...k...l...l..
   d9f60:	6c19 000d 6c23 000d 6c2d 000d 616e 006e     .l..#l..-l..nan.
   d9f70:	6e69 0066 766f 0066 6977 6972 676e 5300     inf.ovf.wiring.S
   d9f80:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   d9f90:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   d9fa0:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   d9fb0:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d9fc0:	0065 0000                                   e...

000d9fc4 <_ZTV11USARTSerial>:
	...
   d9fcc:	740d 000d 7479 000d 7451 000d 6d15 000d     .t..yt..Qt...m..
   d9fdc:	7421 000d 743d 000d 742f 000d 744b 000d     !t..=t../t..Kt..
   d9fec:	740f 000d 7413 000d                         .t...t..

000d9ff4 <_ZTV9USBSerial>:
	...
   d9ffc:	750d 000d 7575 000d 754b 000d 6d15 000d     .u..uu..Ku...m..
   da00c:	753d 000d 750f 000d 751f 000d 756f 000d     =u...u...u..ou..
   da01c:	752f 000d 7509 000d                         /u...u..

000da024 <_ZTVN5spark9WiFiClassE>:
	...
   da02c:	7677 000d 766d 000d 7663 000d 7619 000d     wv..mv..cv...v..
   da03c:	7657 000d 764b 000d 763f 000d 7637 000d     Wv..Kv..?v..7v..
   da04c:	762d 000d 7623 000d 6c2d 000d               -v..#v..-l..

000da058 <_ZSt7nothrow>:
   da058:	0000 0000 6f70 0077 0000 0000 0000 0000     ....pow.........

000da068 <TWO52>:
   da068:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

000da078 <link_const_variable_data_end>:
   da078:	000d4cf1 	.word	0x000d4cf1
   da07c:	000d591d 	.word	0x000d591d
   da080:	000d63a5 	.word	0x000d63a5
   da084:	000d69a5 	.word	0x000d69a5
   da088:	000d6bb5 	.word	0x000d6bb5
   da08c:	000d6d01 	.word	0x000d6d01
   da090:	000d6fd9 	.word	0x000d6fd9
   da094:	000d73bd 	.word	0x000d73bd
   da098:	000d73f9 	.word	0x000d73f9
   da09c:	000d7681 	.word	0x000d7681
